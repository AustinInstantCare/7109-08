

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Feb 05 13:42:21 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16LF1825
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,space=0,delta=2,noexec
    12                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	clrtext,global,class=CODE,space=0,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2,group=2
    50                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=2
    51                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2,group=1
    53                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    56                           	dabs	1,0x620,48
    57                           	dabs	1,0x5A0,80
    58                           	dabs	1,0x520,80
    59                           	dabs	1,0x4C0,48
    60                           	dabs	1,0x22F0,0,_dataBuffer
    61                           	dabs	1,0x7E,2
    62     0000                     
    63                           ; Generated 07/09/2023 GMT
    64                           ; 
    65                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC16LF1825 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97     0008                     bsr             equ	8
    98     0005                     fsr0h           equ	5
    99     0004                     fsr0l           equ	4
   100     0007                     fsr1h           equ	7
   101     0006                     fsr1l           equ	6
   102     0000                     indf            equ	0
   103     0000                     indf0           equ	0
   104     0001                     indf1           equ	1
   105     000B                     intcon          equ	11
   106     0002                     pc              equ	2
   107     0002                     pcl             equ	2
   108     000A                     pclath          equ	10
   109     0003                     status          equ	3
   110     0009                     wreg            equ	9
   111     0000                     INDF0           equ	0	;# 
   112     0001                     INDF1           equ	1	;# 
   113     0002                     PCL             equ	2	;# 
   114     0003                     STATUS          equ	3	;# 
   115     0004                     FSR0L           equ	4	;# 
   116     0005                     FSR0H           equ	5	;# 
   117     0006                     FSR1L           equ	6	;# 
   118     0007                     FSR1H           equ	7	;# 
   119     0008                     BSR             equ	8	;# 
   120     0009                     WREG            equ	9	;# 
   121     000A                     PCLATH          equ	10	;# 
   122     000B                     INTCON          equ	11	;# 
   123     000C                     PORTA           equ	12	;# 
   124     000E                     PORTC           equ	14	;# 
   125     0011                     PIR1            equ	17	;# 
   126     0012                     PIR2            equ	18	;# 
   127     0013                     PIR3            equ	19	;# 
   128     0015                     TMR0            equ	21	;# 
   129     0016                     TMR1            equ	22	;# 
   130     0016                     TMR1L           equ	22	;# 
   131     0017                     TMR1H           equ	23	;# 
   132     0018                     T1CON           equ	24	;# 
   133     0019                     T1GCON          equ	25	;# 
   134     001A                     TMR2            equ	26	;# 
   135     001B                     PR2             equ	27	;# 
   136     001C                     T2CON           equ	28	;# 
   137     001E                     CPSCON0         equ	30	;# 
   138     001F                     CPSCON1         equ	31	;# 
   139     008C                     TRISA           equ	140	;# 
   140     008E                     TRISC           equ	142	;# 
   141     0091                     PIE1            equ	145	;# 
   142     0092                     PIE2            equ	146	;# 
   143     0093                     PIE3            equ	147	;# 
   144     0095                     OPTION_REG      equ	149	;# 
   145     0096                     PCON            equ	150	;# 
   146     0097                     WDTCON          equ	151	;# 
   147     0098                     OSCTUNE         equ	152	;# 
   148     0099                     OSCCON          equ	153	;# 
   149     009A                     OSCSTAT         equ	154	;# 
   150     009B                     ADRES           equ	155	;# 
   151     009B                     ADRESL          equ	155	;# 
   152     009C                     ADRESH          equ	156	;# 
   153     009D                     ADCON0          equ	157	;# 
   154     009E                     ADCON1          equ	158	;# 
   155     010C                     LATA            equ	268	;# 
   156     010E                     LATC            equ	270	;# 
   157     0111                     CM1CON0         equ	273	;# 
   158     0112                     CM1CON1         equ	274	;# 
   159     0113                     CM2CON0         equ	275	;# 
   160     0114                     CM2CON1         equ	276	;# 
   161     0115                     CMOUT           equ	277	;# 
   162     0116                     BORCON          equ	278	;# 
   163     0117                     FVRCON          equ	279	;# 
   164     0118                     DACCON0         equ	280	;# 
   165     0119                     DACCON1         equ	281	;# 
   166     011A                     SRCON0          equ	282	;# 
   167     011B                     SRCON1          equ	283	;# 
   168     011D                     APFCON0         equ	285	;# 
   169     011E                     APFCON1         equ	286	;# 
   170     018C                     ANSELA          equ	396	;# 
   171     018E                     ANSELC          equ	398	;# 
   172     0191                     EEADR           equ	401	;# 
   173     0191                     EEADRL          equ	401	;# 
   174     0192                     EEADRH          equ	402	;# 
   175     0193                     EEDAT           equ	403	;# 
   176     0193                     EEDATL          equ	403	;# 
   177     0193                     EEDATA          equ	403	;# 
   178     0194                     EEDATH          equ	404	;# 
   179     0195                     EECON1          equ	405	;# 
   180     0196                     EECON2          equ	406	;# 
   181     0199                     RCREG           equ	409	;# 
   182     019A                     TXREG           equ	410	;# 
   183     019B                     SPBRG           equ	411	;# 
   184     019B                     SPBRGL          equ	411	;# 
   185     019C                     SPBRGH          equ	412	;# 
   186     019D                     RCSTA           equ	413	;# 
   187     019E                     TXSTA           equ	414	;# 
   188     019F                     BAUDCON         equ	415	;# 
   189     020C                     WPUA            equ	524	;# 
   190     020E                     WPUC            equ	526	;# 
   191     0211                     SSP1BUF         equ	529	;# 
   192     0211                     SSPBUF          equ	529	;# 
   193     0212                     SSP1ADD         equ	530	;# 
   194     0212                     SSPADD          equ	530	;# 
   195     0213                     SSP1MSK         equ	531	;# 
   196     0213                     SSPMSK          equ	531	;# 
   197     0214                     SSP1STAT        equ	532	;# 
   198     0214                     SSPSTAT         equ	532	;# 
   199     0215                     SSP1CON1        equ	533	;# 
   200     0215                     SSPCON1         equ	533	;# 
   201     0215                     SSPCON          equ	533	;# 
   202     0216                     SSP1CON2        equ	534	;# 
   203     0216                     SSPCON2         equ	534	;# 
   204     0217                     SSP1CON3        equ	535	;# 
   205     0217                     SSPCON3         equ	535	;# 
   206     0291                     CCPR1           equ	657	;# 
   207     0291                     CCPR1L          equ	657	;# 
   208     0292                     CCPR1H          equ	658	;# 
   209     0293                     CCP1CON         equ	659	;# 
   210     0294                     PWM1CON         equ	660	;# 
   211     0295                     CCP1AS          equ	661	;# 
   212     0295                     ECCP1AS         equ	661	;# 
   213     0296                     PSTR1CON        equ	662	;# 
   214     0298                     CCPR2           equ	664	;# 
   215     0298                     CCPR2L          equ	664	;# 
   216     0299                     CCPR2H          equ	665	;# 
   217     029A                     CCP2CON         equ	666	;# 
   218     029B                     PWM2CON         equ	667	;# 
   219     029C                     CCP2AS          equ	668	;# 
   220     029D                     PSTR2CON        equ	669	;# 
   221     029E                     CCPTMRS         equ	670	;# 
   222     029E                     CCPTMRS0        equ	670	;# 
   223     0311                     CCPR3           equ	785	;# 
   224     0311                     CCPR3L          equ	785	;# 
   225     0312                     CCPR3H          equ	786	;# 
   226     0313                     CCP3CON         equ	787	;# 
   227     0318                     CCPR4           equ	792	;# 
   228     0318                     CCPR4L          equ	792	;# 
   229     0319                     CCPR4H          equ	793	;# 
   230     031A                     CCP4CON         equ	794	;# 
   231     038C                     INLVLA          equ	908	;# 
   232     038E                     INLVLC          equ	910	;# 
   233     0391                     IOCAP           equ	913	;# 
   234     0392                     IOCAN           equ	914	;# 
   235     0393                     IOCAF           equ	915	;# 
   236     039A                     CLKRCON         equ	922	;# 
   237     039C                     MDCON           equ	924	;# 
   238     039D                     MDSRC           equ	925	;# 
   239     039E                     MDCARL          equ	926	;# 
   240     039F                     MDCARH          equ	927	;# 
   241     0415                     TMR4            equ	1045	;# 
   242     0416                     PR4             equ	1046	;# 
   243     0417                     T4CON           equ	1047	;# 
   244     041C                     TMR6            equ	1052	;# 
   245     041D                     PR6             equ	1053	;# 
   246     041E                     T6CON           equ	1054	;# 
   247     0FE4                     STATUS_SHAD     equ	4068	;# 
   248     0FE5                     WREG_SHAD       equ	4069	;# 
   249     0FE6                     BSR_SHAD        equ	4070	;# 
   250     0FE7                     PCLATH_SHAD     equ	4071	;# 
   251     0FE8                     FSR0L_SHAD      equ	4072	;# 
   252     0FE9                     FSR0H_SHAD      equ	4073	;# 
   253     0FEA                     FSR1L_SHAD      equ	4074	;# 
   254     0FEB                     FSR1H_SHAD      equ	4075	;# 
   255     0FED                     STKPTR          equ	4077	;# 
   256     0FEE                     TOSL            equ	4078	;# 
   257     0FEF                     TOSH            equ	4079	;# 
   258     0000                     INDF0           equ	0	;# 
   259     0001                     INDF1           equ	1	;# 
   260     0002                     PCL             equ	2	;# 
   261     0003                     STATUS          equ	3	;# 
   262     0004                     FSR0L           equ	4	;# 
   263     0005                     FSR0H           equ	5	;# 
   264     0006                     FSR1L           equ	6	;# 
   265     0007                     FSR1H           equ	7	;# 
   266     0008                     BSR             equ	8	;# 
   267     0009                     WREG            equ	9	;# 
   268     000A                     PCLATH          equ	10	;# 
   269     000B                     INTCON          equ	11	;# 
   270     000C                     PORTA           equ	12	;# 
   271     000E                     PORTC           equ	14	;# 
   272     0011                     PIR1            equ	17	;# 
   273     0012                     PIR2            equ	18	;# 
   274     0013                     PIR3            equ	19	;# 
   275     0015                     TMR0            equ	21	;# 
   276     0016                     TMR1            equ	22	;# 
   277     0016                     TMR1L           equ	22	;# 
   278     0017                     TMR1H           equ	23	;# 
   279     0018                     T1CON           equ	24	;# 
   280     0019                     T1GCON          equ	25	;# 
   281     001A                     TMR2            equ	26	;# 
   282     001B                     PR2             equ	27	;# 
   283     001C                     T2CON           equ	28	;# 
   284     001E                     CPSCON0         equ	30	;# 
   285     001F                     CPSCON1         equ	31	;# 
   286     008C                     TRISA           equ	140	;# 
   287     008E                     TRISC           equ	142	;# 
   288     0091                     PIE1            equ	145	;# 
   289     0092                     PIE2            equ	146	;# 
   290     0093                     PIE3            equ	147	;# 
   291     0095                     OPTION_REG      equ	149	;# 
   292     0096                     PCON            equ	150	;# 
   293     0097                     WDTCON          equ	151	;# 
   294     0098                     OSCTUNE         equ	152	;# 
   295     0099                     OSCCON          equ	153	;# 
   296     009A                     OSCSTAT         equ	154	;# 
   297     009B                     ADRES           equ	155	;# 
   298     009B                     ADRESL          equ	155	;# 
   299     009C                     ADRESH          equ	156	;# 
   300     009D                     ADCON0          equ	157	;# 
   301     009E                     ADCON1          equ	158	;# 
   302     010C                     LATA            equ	268	;# 
   303     010E                     LATC            equ	270	;# 
   304     0111                     CM1CON0         equ	273	;# 
   305     0112                     CM1CON1         equ	274	;# 
   306     0113                     CM2CON0         equ	275	;# 
   307     0114                     CM2CON1         equ	276	;# 
   308     0115                     CMOUT           equ	277	;# 
   309     0116                     BORCON          equ	278	;# 
   310     0117                     FVRCON          equ	279	;# 
   311     0118                     DACCON0         equ	280	;# 
   312     0119                     DACCON1         equ	281	;# 
   313     011A                     SRCON0          equ	282	;# 
   314     011B                     SRCON1          equ	283	;# 
   315     011D                     APFCON0         equ	285	;# 
   316     011E                     APFCON1         equ	286	;# 
   317     018C                     ANSELA          equ	396	;# 
   318     018E                     ANSELC          equ	398	;# 
   319     0191                     EEADR           equ	401	;# 
   320     0191                     EEADRL          equ	401	;# 
   321     0192                     EEADRH          equ	402	;# 
   322     0193                     EEDAT           equ	403	;# 
   323     0193                     EEDATL          equ	403	;# 
   324     0193                     EEDATA          equ	403	;# 
   325     0194                     EEDATH          equ	404	;# 
   326     0195                     EECON1          equ	405	;# 
   327     0196                     EECON2          equ	406	;# 
   328     0199                     RCREG           equ	409	;# 
   329     019A                     TXREG           equ	410	;# 
   330     019B                     SPBRG           equ	411	;# 
   331     019B                     SPBRGL          equ	411	;# 
   332     019C                     SPBRGH          equ	412	;# 
   333     019D                     RCSTA           equ	413	;# 
   334     019E                     TXSTA           equ	414	;# 
   335     019F                     BAUDCON         equ	415	;# 
   336     020C                     WPUA            equ	524	;# 
   337     020E                     WPUC            equ	526	;# 
   338     0211                     SSP1BUF         equ	529	;# 
   339     0211                     SSPBUF          equ	529	;# 
   340     0212                     SSP1ADD         equ	530	;# 
   341     0212                     SSPADD          equ	530	;# 
   342     0213                     SSP1MSK         equ	531	;# 
   343     0213                     SSPMSK          equ	531	;# 
   344     0214                     SSP1STAT        equ	532	;# 
   345     0214                     SSPSTAT         equ	532	;# 
   346     0215                     SSP1CON1        equ	533	;# 
   347     0215                     SSPCON1         equ	533	;# 
   348     0215                     SSPCON          equ	533	;# 
   349     0216                     SSP1CON2        equ	534	;# 
   350     0216                     SSPCON2         equ	534	;# 
   351     0217                     SSP1CON3        equ	535	;# 
   352     0217                     SSPCON3         equ	535	;# 
   353     0291                     CCPR1           equ	657	;# 
   354     0291                     CCPR1L          equ	657	;# 
   355     0292                     CCPR1H          equ	658	;# 
   356     0293                     CCP1CON         equ	659	;# 
   357     0294                     PWM1CON         equ	660	;# 
   358     0295                     CCP1AS          equ	661	;# 
   359     0295                     ECCP1AS         equ	661	;# 
   360     0296                     PSTR1CON        equ	662	;# 
   361     0298                     CCPR2           equ	664	;# 
   362     0298                     CCPR2L          equ	664	;# 
   363     0299                     CCPR2H          equ	665	;# 
   364     029A                     CCP2CON         equ	666	;# 
   365     029B                     PWM2CON         equ	667	;# 
   366     029C                     CCP2AS          equ	668	;# 
   367     029D                     PSTR2CON        equ	669	;# 
   368     029E                     CCPTMRS         equ	670	;# 
   369     029E                     CCPTMRS0        equ	670	;# 
   370     0311                     CCPR3           equ	785	;# 
   371     0311                     CCPR3L          equ	785	;# 
   372     0312                     CCPR3H          equ	786	;# 
   373     0313                     CCP3CON         equ	787	;# 
   374     0318                     CCPR4           equ	792	;# 
   375     0318                     CCPR4L          equ	792	;# 
   376     0319                     CCPR4H          equ	793	;# 
   377     031A                     CCP4CON         equ	794	;# 
   378     038C                     INLVLA          equ	908	;# 
   379     038E                     INLVLC          equ	910	;# 
   380     0391                     IOCAP           equ	913	;# 
   381     0392                     IOCAN           equ	914	;# 
   382     0393                     IOCAF           equ	915	;# 
   383     039A                     CLKRCON         equ	922	;# 
   384     039C                     MDCON           equ	924	;# 
   385     039D                     MDSRC           equ	925	;# 
   386     039E                     MDCARL          equ	926	;# 
   387     039F                     MDCARH          equ	927	;# 
   388     0415                     TMR4            equ	1045	;# 
   389     0416                     PR4             equ	1046	;# 
   390     0417                     T4CON           equ	1047	;# 
   391     041C                     TMR6            equ	1052	;# 
   392     041D                     PR6             equ	1053	;# 
   393     041E                     T6CON           equ	1054	;# 
   394     0FE4                     STATUS_SHAD     equ	4068	;# 
   395     0FE5                     WREG_SHAD       equ	4069	;# 
   396     0FE6                     BSR_SHAD        equ	4070	;# 
   397     0FE7                     PCLATH_SHAD     equ	4071	;# 
   398     0FE8                     FSR0L_SHAD      equ	4072	;# 
   399     0FE9                     FSR0H_SHAD      equ	4073	;# 
   400     0FEA                     FSR1L_SHAD      equ	4074	;# 
   401     0FEB                     FSR1H_SHAD      equ	4075	;# 
   402     0FED                     STKPTR          equ	4077	;# 
   403     0FEE                     TOSL            equ	4078	;# 
   404     0FEF                     TOSH            equ	4079	;# 
   405     0000                     INDF0           equ	0	;# 
   406     0001                     INDF1           equ	1	;# 
   407     0002                     PCL             equ	2	;# 
   408     0003                     STATUS          equ	3	;# 
   409     0004                     FSR0L           equ	4	;# 
   410     0005                     FSR0H           equ	5	;# 
   411     0006                     FSR1L           equ	6	;# 
   412     0007                     FSR1H           equ	7	;# 
   413     0008                     BSR             equ	8	;# 
   414     0009                     WREG            equ	9	;# 
   415     000A                     PCLATH          equ	10	;# 
   416     000B                     INTCON          equ	11	;# 
   417     000C                     PORTA           equ	12	;# 
   418     000E                     PORTC           equ	14	;# 
   419     0011                     PIR1            equ	17	;# 
   420     0012                     PIR2            equ	18	;# 
   421     0013                     PIR3            equ	19	;# 
   422     0015                     TMR0            equ	21	;# 
   423     0016                     TMR1            equ	22	;# 
   424     0016                     TMR1L           equ	22	;# 
   425     0017                     TMR1H           equ	23	;# 
   426     0018                     T1CON           equ	24	;# 
   427     0019                     T1GCON          equ	25	;# 
   428     001A                     TMR2            equ	26	;# 
   429     001B                     PR2             equ	27	;# 
   430     001C                     T2CON           equ	28	;# 
   431     001E                     CPSCON0         equ	30	;# 
   432     001F                     CPSCON1         equ	31	;# 
   433     008C                     TRISA           equ	140	;# 
   434     008E                     TRISC           equ	142	;# 
   435     0091                     PIE1            equ	145	;# 
   436     0092                     PIE2            equ	146	;# 
   437     0093                     PIE3            equ	147	;# 
   438     0095                     OPTION_REG      equ	149	;# 
   439     0096                     PCON            equ	150	;# 
   440     0097                     WDTCON          equ	151	;# 
   441     0098                     OSCTUNE         equ	152	;# 
   442     0099                     OSCCON          equ	153	;# 
   443     009A                     OSCSTAT         equ	154	;# 
   444     009B                     ADRES           equ	155	;# 
   445     009B                     ADRESL          equ	155	;# 
   446     009C                     ADRESH          equ	156	;# 
   447     009D                     ADCON0          equ	157	;# 
   448     009E                     ADCON1          equ	158	;# 
   449     010C                     LATA            equ	268	;# 
   450     010E                     LATC            equ	270	;# 
   451     0111                     CM1CON0         equ	273	;# 
   452     0112                     CM1CON1         equ	274	;# 
   453     0113                     CM2CON0         equ	275	;# 
   454     0114                     CM2CON1         equ	276	;# 
   455     0115                     CMOUT           equ	277	;# 
   456     0116                     BORCON          equ	278	;# 
   457     0117                     FVRCON          equ	279	;# 
   458     0118                     DACCON0         equ	280	;# 
   459     0119                     DACCON1         equ	281	;# 
   460     011A                     SRCON0          equ	282	;# 
   461     011B                     SRCON1          equ	283	;# 
   462     011D                     APFCON0         equ	285	;# 
   463     011E                     APFCON1         equ	286	;# 
   464     018C                     ANSELA          equ	396	;# 
   465     018E                     ANSELC          equ	398	;# 
   466     0191                     EEADR           equ	401	;# 
   467     0191                     EEADRL          equ	401	;# 
   468     0192                     EEADRH          equ	402	;# 
   469     0193                     EEDAT           equ	403	;# 
   470     0193                     EEDATL          equ	403	;# 
   471     0193                     EEDATA          equ	403	;# 
   472     0194                     EEDATH          equ	404	;# 
   473     0195                     EECON1          equ	405	;# 
   474     0196                     EECON2          equ	406	;# 
   475     0199                     RCREG           equ	409	;# 
   476     019A                     TXREG           equ	410	;# 
   477     019B                     SPBRG           equ	411	;# 
   478     019B                     SPBRGL          equ	411	;# 
   479     019C                     SPBRGH          equ	412	;# 
   480     019D                     RCSTA           equ	413	;# 
   481     019E                     TXSTA           equ	414	;# 
   482     019F                     BAUDCON         equ	415	;# 
   483     020C                     WPUA            equ	524	;# 
   484     020E                     WPUC            equ	526	;# 
   485     0211                     SSP1BUF         equ	529	;# 
   486     0211                     SSPBUF          equ	529	;# 
   487     0212                     SSP1ADD         equ	530	;# 
   488     0212                     SSPADD          equ	530	;# 
   489     0213                     SSP1MSK         equ	531	;# 
   490     0213                     SSPMSK          equ	531	;# 
   491     0214                     SSP1STAT        equ	532	;# 
   492     0214                     SSPSTAT         equ	532	;# 
   493     0215                     SSP1CON1        equ	533	;# 
   494     0215                     SSPCON1         equ	533	;# 
   495     0215                     SSPCON          equ	533	;# 
   496     0216                     SSP1CON2        equ	534	;# 
   497     0216                     SSPCON2         equ	534	;# 
   498     0217                     SSP1CON3        equ	535	;# 
   499     0217                     SSPCON3         equ	535	;# 
   500     0291                     CCPR1           equ	657	;# 
   501     0291                     CCPR1L          equ	657	;# 
   502     0292                     CCPR1H          equ	658	;# 
   503     0293                     CCP1CON         equ	659	;# 
   504     0294                     PWM1CON         equ	660	;# 
   505     0295                     CCP1AS          equ	661	;# 
   506     0295                     ECCP1AS         equ	661	;# 
   507     0296                     PSTR1CON        equ	662	;# 
   508     0298                     CCPR2           equ	664	;# 
   509     0298                     CCPR2L          equ	664	;# 
   510     0299                     CCPR2H          equ	665	;# 
   511     029A                     CCP2CON         equ	666	;# 
   512     029B                     PWM2CON         equ	667	;# 
   513     029C                     CCP2AS          equ	668	;# 
   514     029D                     PSTR2CON        equ	669	;# 
   515     029E                     CCPTMRS         equ	670	;# 
   516     029E                     CCPTMRS0        equ	670	;# 
   517     0311                     CCPR3           equ	785	;# 
   518     0311                     CCPR3L          equ	785	;# 
   519     0312                     CCPR3H          equ	786	;# 
   520     0313                     CCP3CON         equ	787	;# 
   521     0318                     CCPR4           equ	792	;# 
   522     0318                     CCPR4L          equ	792	;# 
   523     0319                     CCPR4H          equ	793	;# 
   524     031A                     CCP4CON         equ	794	;# 
   525     038C                     INLVLA          equ	908	;# 
   526     038E                     INLVLC          equ	910	;# 
   527     0391                     IOCAP           equ	913	;# 
   528     0392                     IOCAN           equ	914	;# 
   529     0393                     IOCAF           equ	915	;# 
   530     039A                     CLKRCON         equ	922	;# 
   531     039C                     MDCON           equ	924	;# 
   532     039D                     MDSRC           equ	925	;# 
   533     039E                     MDCARL          equ	926	;# 
   534     039F                     MDCARH          equ	927	;# 
   535     0415                     TMR4            equ	1045	;# 
   536     0416                     PR4             equ	1046	;# 
   537     0417                     T4CON           equ	1047	;# 
   538     041C                     TMR6            equ	1052	;# 
   539     041D                     PR6             equ	1053	;# 
   540     041E                     T6CON           equ	1054	;# 
   541     0FE4                     STATUS_SHAD     equ	4068	;# 
   542     0FE5                     WREG_SHAD       equ	4069	;# 
   543     0FE6                     BSR_SHAD        equ	4070	;# 
   544     0FE7                     PCLATH_SHAD     equ	4071	;# 
   545     0FE8                     FSR0L_SHAD      equ	4072	;# 
   546     0FE9                     FSR0H_SHAD      equ	4073	;# 
   547     0FEA                     FSR1L_SHAD      equ	4074	;# 
   548     0FEB                     FSR1H_SHAD      equ	4075	;# 
   549     0FED                     STKPTR          equ	4077	;# 
   550     0FEE                     TOSL            equ	4078	;# 
   551     0FEF                     TOSH            equ	4079	;# 
   552     0000                     INDF0           equ	0	;# 
   553     0001                     INDF1           equ	1	;# 
   554     0002                     PCL             equ	2	;# 
   555     0003                     STATUS          equ	3	;# 
   556     0004                     FSR0L           equ	4	;# 
   557     0005                     FSR0H           equ	5	;# 
   558     0006                     FSR1L           equ	6	;# 
   559     0007                     FSR1H           equ	7	;# 
   560     0008                     BSR             equ	8	;# 
   561     0009                     WREG            equ	9	;# 
   562     000A                     PCLATH          equ	10	;# 
   563     000B                     INTCON          equ	11	;# 
   564     000C                     PORTA           equ	12	;# 
   565     000E                     PORTC           equ	14	;# 
   566     0011                     PIR1            equ	17	;# 
   567     0012                     PIR2            equ	18	;# 
   568     0013                     PIR3            equ	19	;# 
   569     0015                     TMR0            equ	21	;# 
   570     0016                     TMR1            equ	22	;# 
   571     0016                     TMR1L           equ	22	;# 
   572     0017                     TMR1H           equ	23	;# 
   573     0018                     T1CON           equ	24	;# 
   574     0019                     T1GCON          equ	25	;# 
   575     001A                     TMR2            equ	26	;# 
   576     001B                     PR2             equ	27	;# 
   577     001C                     T2CON           equ	28	;# 
   578     001E                     CPSCON0         equ	30	;# 
   579     001F                     CPSCON1         equ	31	;# 
   580     008C                     TRISA           equ	140	;# 
   581     008E                     TRISC           equ	142	;# 
   582     0091                     PIE1            equ	145	;# 
   583     0092                     PIE2            equ	146	;# 
   584     0093                     PIE3            equ	147	;# 
   585     0095                     OPTION_REG      equ	149	;# 
   586     0096                     PCON            equ	150	;# 
   587     0097                     WDTCON          equ	151	;# 
   588     0098                     OSCTUNE         equ	152	;# 
   589     0099                     OSCCON          equ	153	;# 
   590     009A                     OSCSTAT         equ	154	;# 
   591     009B                     ADRES           equ	155	;# 
   592     009B                     ADRESL          equ	155	;# 
   593     009C                     ADRESH          equ	156	;# 
   594     009D                     ADCON0          equ	157	;# 
   595     009E                     ADCON1          equ	158	;# 
   596     010C                     LATA            equ	268	;# 
   597     010E                     LATC            equ	270	;# 
   598     0111                     CM1CON0         equ	273	;# 
   599     0112                     CM1CON1         equ	274	;# 
   600     0113                     CM2CON0         equ	275	;# 
   601     0114                     CM2CON1         equ	276	;# 
   602     0115                     CMOUT           equ	277	;# 
   603     0116                     BORCON          equ	278	;# 
   604     0117                     FVRCON          equ	279	;# 
   605     0118                     DACCON0         equ	280	;# 
   606     0119                     DACCON1         equ	281	;# 
   607     011A                     SRCON0          equ	282	;# 
   608     011B                     SRCON1          equ	283	;# 
   609     011D                     APFCON0         equ	285	;# 
   610     011E                     APFCON1         equ	286	;# 
   611     018C                     ANSELA          equ	396	;# 
   612     018E                     ANSELC          equ	398	;# 
   613     0191                     EEADR           equ	401	;# 
   614     0191                     EEADRL          equ	401	;# 
   615     0192                     EEADRH          equ	402	;# 
   616     0193                     EEDAT           equ	403	;# 
   617     0193                     EEDATL          equ	403	;# 
   618     0193                     EEDATA          equ	403	;# 
   619     0194                     EEDATH          equ	404	;# 
   620     0195                     EECON1          equ	405	;# 
   621     0196                     EECON2          equ	406	;# 
   622     0199                     RCREG           equ	409	;# 
   623     019A                     TXREG           equ	410	;# 
   624     019B                     SPBRG           equ	411	;# 
   625     019B                     SPBRGL          equ	411	;# 
   626     019C                     SPBRGH          equ	412	;# 
   627     019D                     RCSTA           equ	413	;# 
   628     019E                     TXSTA           equ	414	;# 
   629     019F                     BAUDCON         equ	415	;# 
   630     020C                     WPUA            equ	524	;# 
   631     020E                     WPUC            equ	526	;# 
   632     0211                     SSP1BUF         equ	529	;# 
   633     0211                     SSPBUF          equ	529	;# 
   634     0212                     SSP1ADD         equ	530	;# 
   635     0212                     SSPADD          equ	530	;# 
   636     0213                     SSP1MSK         equ	531	;# 
   637     0213                     SSPMSK          equ	531	;# 
   638     0214                     SSP1STAT        equ	532	;# 
   639     0214                     SSPSTAT         equ	532	;# 
   640     0215                     SSP1CON1        equ	533	;# 
   641     0215                     SSPCON1         equ	533	;# 
   642     0215                     SSPCON          equ	533	;# 
   643     0216                     SSP1CON2        equ	534	;# 
   644     0216                     SSPCON2         equ	534	;# 
   645     0217                     SSP1CON3        equ	535	;# 
   646     0217                     SSPCON3         equ	535	;# 
   647     0291                     CCPR1           equ	657	;# 
   648     0291                     CCPR1L          equ	657	;# 
   649     0292                     CCPR1H          equ	658	;# 
   650     0293                     CCP1CON         equ	659	;# 
   651     0294                     PWM1CON         equ	660	;# 
   652     0295                     CCP1AS          equ	661	;# 
   653     0295                     ECCP1AS         equ	661	;# 
   654     0296                     PSTR1CON        equ	662	;# 
   655     0298                     CCPR2           equ	664	;# 
   656     0298                     CCPR2L          equ	664	;# 
   657     0299                     CCPR2H          equ	665	;# 
   658     029A                     CCP2CON         equ	666	;# 
   659     029B                     PWM2CON         equ	667	;# 
   660     029C                     CCP2AS          equ	668	;# 
   661     029D                     PSTR2CON        equ	669	;# 
   662     029E                     CCPTMRS         equ	670	;# 
   663     029E                     CCPTMRS0        equ	670	;# 
   664     0311                     CCPR3           equ	785	;# 
   665     0311                     CCPR3L          equ	785	;# 
   666     0312                     CCPR3H          equ	786	;# 
   667     0313                     CCP3CON         equ	787	;# 
   668     0318                     CCPR4           equ	792	;# 
   669     0318                     CCPR4L          equ	792	;# 
   670     0319                     CCPR4H          equ	793	;# 
   671     031A                     CCP4CON         equ	794	;# 
   672     038C                     INLVLA          equ	908	;# 
   673     038E                     INLVLC          equ	910	;# 
   674     0391                     IOCAP           equ	913	;# 
   675     0392                     IOCAN           equ	914	;# 
   676     0393                     IOCAF           equ	915	;# 
   677     039A                     CLKRCON         equ	922	;# 
   678     039C                     MDCON           equ	924	;# 
   679     039D                     MDSRC           equ	925	;# 
   680     039E                     MDCARL          equ	926	;# 
   681     039F                     MDCARH          equ	927	;# 
   682     0415                     TMR4            equ	1045	;# 
   683     0416                     PR4             equ	1046	;# 
   684     0417                     T4CON           equ	1047	;# 
   685     041C                     TMR6            equ	1052	;# 
   686     041D                     PR6             equ	1053	;# 
   687     041E                     T6CON           equ	1054	;# 
   688     0FE4                     STATUS_SHAD     equ	4068	;# 
   689     0FE5                     WREG_SHAD       equ	4069	;# 
   690     0FE6                     BSR_SHAD        equ	4070	;# 
   691     0FE7                     PCLATH_SHAD     equ	4071	;# 
   692     0FE8                     FSR0L_SHAD      equ	4072	;# 
   693     0FE9                     FSR0H_SHAD      equ	4073	;# 
   694     0FEA                     FSR1L_SHAD      equ	4074	;# 
   695     0FEB                     FSR1H_SHAD      equ	4075	;# 
   696     0FED                     STKPTR          equ	4077	;# 
   697     0FEE                     TOSL            equ	4078	;# 
   698     0FEF                     TOSH            equ	4079	;# 
   699     0000                     INDF0           equ	0	;# 
   700     0001                     INDF1           equ	1	;# 
   701     0002                     PCL             equ	2	;# 
   702     0003                     STATUS          equ	3	;# 
   703     0004                     FSR0L           equ	4	;# 
   704     0005                     FSR0H           equ	5	;# 
   705     0006                     FSR1L           equ	6	;# 
   706     0007                     FSR1H           equ	7	;# 
   707     0008                     BSR             equ	8	;# 
   708     0009                     WREG            equ	9	;# 
   709     000A                     PCLATH          equ	10	;# 
   710     000B                     INTCON          equ	11	;# 
   711     000C                     PORTA           equ	12	;# 
   712     000E                     PORTC           equ	14	;# 
   713     0011                     PIR1            equ	17	;# 
   714     0012                     PIR2            equ	18	;# 
   715     0013                     PIR3            equ	19	;# 
   716     0015                     TMR0            equ	21	;# 
   717     0016                     TMR1            equ	22	;# 
   718     0016                     TMR1L           equ	22	;# 
   719     0017                     TMR1H           equ	23	;# 
   720     0018                     T1CON           equ	24	;# 
   721     0019                     T1GCON          equ	25	;# 
   722     001A                     TMR2            equ	26	;# 
   723     001B                     PR2             equ	27	;# 
   724     001C                     T2CON           equ	28	;# 
   725     001E                     CPSCON0         equ	30	;# 
   726     001F                     CPSCON1         equ	31	;# 
   727     008C                     TRISA           equ	140	;# 
   728     008E                     TRISC           equ	142	;# 
   729     0091                     PIE1            equ	145	;# 
   730     0092                     PIE2            equ	146	;# 
   731     0093                     PIE3            equ	147	;# 
   732     0095                     OPTION_REG      equ	149	;# 
   733     0096                     PCON            equ	150	;# 
   734     0097                     WDTCON          equ	151	;# 
   735     0098                     OSCTUNE         equ	152	;# 
   736     0099                     OSCCON          equ	153	;# 
   737     009A                     OSCSTAT         equ	154	;# 
   738     009B                     ADRES           equ	155	;# 
   739     009B                     ADRESL          equ	155	;# 
   740     009C                     ADRESH          equ	156	;# 
   741     009D                     ADCON0          equ	157	;# 
   742     009E                     ADCON1          equ	158	;# 
   743     010C                     LATA            equ	268	;# 
   744     010E                     LATC            equ	270	;# 
   745     0111                     CM1CON0         equ	273	;# 
   746     0112                     CM1CON1         equ	274	;# 
   747     0113                     CM2CON0         equ	275	;# 
   748     0114                     CM2CON1         equ	276	;# 
   749     0115                     CMOUT           equ	277	;# 
   750     0116                     BORCON          equ	278	;# 
   751     0117                     FVRCON          equ	279	;# 
   752     0118                     DACCON0         equ	280	;# 
   753     0119                     DACCON1         equ	281	;# 
   754     011A                     SRCON0          equ	282	;# 
   755     011B                     SRCON1          equ	283	;# 
   756     011D                     APFCON0         equ	285	;# 
   757     011E                     APFCON1         equ	286	;# 
   758     018C                     ANSELA          equ	396	;# 
   759     018E                     ANSELC          equ	398	;# 
   760     0191                     EEADR           equ	401	;# 
   761     0191                     EEADRL          equ	401	;# 
   762     0192                     EEADRH          equ	402	;# 
   763     0193                     EEDAT           equ	403	;# 
   764     0193                     EEDATL          equ	403	;# 
   765     0193                     EEDATA          equ	403	;# 
   766     0194                     EEDATH          equ	404	;# 
   767     0195                     EECON1          equ	405	;# 
   768     0196                     EECON2          equ	406	;# 
   769     0199                     RCREG           equ	409	;# 
   770     019A                     TXREG           equ	410	;# 
   771     019B                     SPBRG           equ	411	;# 
   772     019B                     SPBRGL          equ	411	;# 
   773     019C                     SPBRGH          equ	412	;# 
   774     019D                     RCSTA           equ	413	;# 
   775     019E                     TXSTA           equ	414	;# 
   776     019F                     BAUDCON         equ	415	;# 
   777     020C                     WPUA            equ	524	;# 
   778     020E                     WPUC            equ	526	;# 
   779     0211                     SSP1BUF         equ	529	;# 
   780     0211                     SSPBUF          equ	529	;# 
   781     0212                     SSP1ADD         equ	530	;# 
   782     0212                     SSPADD          equ	530	;# 
   783     0213                     SSP1MSK         equ	531	;# 
   784     0213                     SSPMSK          equ	531	;# 
   785     0214                     SSP1STAT        equ	532	;# 
   786     0214                     SSPSTAT         equ	532	;# 
   787     0215                     SSP1CON1        equ	533	;# 
   788     0215                     SSPCON1         equ	533	;# 
   789     0215                     SSPCON          equ	533	;# 
   790     0216                     SSP1CON2        equ	534	;# 
   791     0216                     SSPCON2         equ	534	;# 
   792     0217                     SSP1CON3        equ	535	;# 
   793     0217                     SSPCON3         equ	535	;# 
   794     0291                     CCPR1           equ	657	;# 
   795     0291                     CCPR1L          equ	657	;# 
   796     0292                     CCPR1H          equ	658	;# 
   797     0293                     CCP1CON         equ	659	;# 
   798     0294                     PWM1CON         equ	660	;# 
   799     0295                     CCP1AS          equ	661	;# 
   800     0295                     ECCP1AS         equ	661	;# 
   801     0296                     PSTR1CON        equ	662	;# 
   802     0298                     CCPR2           equ	664	;# 
   803     0298                     CCPR2L          equ	664	;# 
   804     0299                     CCPR2H          equ	665	;# 
   805     029A                     CCP2CON         equ	666	;# 
   806     029B                     PWM2CON         equ	667	;# 
   807     029C                     CCP2AS          equ	668	;# 
   808     029D                     PSTR2CON        equ	669	;# 
   809     029E                     CCPTMRS         equ	670	;# 
   810     029E                     CCPTMRS0        equ	670	;# 
   811     0311                     CCPR3           equ	785	;# 
   812     0311                     CCPR3L          equ	785	;# 
   813     0312                     CCPR3H          equ	786	;# 
   814     0313                     CCP3CON         equ	787	;# 
   815     0318                     CCPR4           equ	792	;# 
   816     0318                     CCPR4L          equ	792	;# 
   817     0319                     CCPR4H          equ	793	;# 
   818     031A                     CCP4CON         equ	794	;# 
   819     038C                     INLVLA          equ	908	;# 
   820     038E                     INLVLC          equ	910	;# 
   821     0391                     IOCAP           equ	913	;# 
   822     0392                     IOCAN           equ	914	;# 
   823     0393                     IOCAF           equ	915	;# 
   824     039A                     CLKRCON         equ	922	;# 
   825     039C                     MDCON           equ	924	;# 
   826     039D                     MDSRC           equ	925	;# 
   827     039E                     MDCARL          equ	926	;# 
   828     039F                     MDCARH          equ	927	;# 
   829     0415                     TMR4            equ	1045	;# 
   830     0416                     PR4             equ	1046	;# 
   831     0417                     T4CON           equ	1047	;# 
   832     041C                     TMR6            equ	1052	;# 
   833     041D                     PR6             equ	1053	;# 
   834     041E                     T6CON           equ	1054	;# 
   835     0FE4                     STATUS_SHAD     equ	4068	;# 
   836     0FE5                     WREG_SHAD       equ	4069	;# 
   837     0FE6                     BSR_SHAD        equ	4070	;# 
   838     0FE7                     PCLATH_SHAD     equ	4071	;# 
   839     0FE8                     FSR0L_SHAD      equ	4072	;# 
   840     0FE9                     FSR0H_SHAD      equ	4073	;# 
   841     0FEA                     FSR1L_SHAD      equ	4074	;# 
   842     0FEB                     FSR1H_SHAD      equ	4075	;# 
   843     0FED                     STKPTR          equ	4077	;# 
   844     0FEE                     TOSL            equ	4078	;# 
   845     0FEF                     TOSH            equ	4079	;# 
   846     0000                     INDF0           equ	0	;# 
   847     0001                     INDF1           equ	1	;# 
   848     0002                     PCL             equ	2	;# 
   849     0003                     STATUS          equ	3	;# 
   850     0004                     FSR0L           equ	4	;# 
   851     0005                     FSR0H           equ	5	;# 
   852     0006                     FSR1L           equ	6	;# 
   853     0007                     FSR1H           equ	7	;# 
   854     0008                     BSR             equ	8	;# 
   855     0009                     WREG            equ	9	;# 
   856     000A                     PCLATH          equ	10	;# 
   857     000B                     INTCON          equ	11	;# 
   858     000C                     PORTA           equ	12	;# 
   859     000E                     PORTC           equ	14	;# 
   860     0011                     PIR1            equ	17	;# 
   861     0012                     PIR2            equ	18	;# 
   862     0013                     PIR3            equ	19	;# 
   863     0015                     TMR0            equ	21	;# 
   864     0016                     TMR1            equ	22	;# 
   865     0016                     TMR1L           equ	22	;# 
   866     0017                     TMR1H           equ	23	;# 
   867     0018                     T1CON           equ	24	;# 
   868     0019                     T1GCON          equ	25	;# 
   869     001A                     TMR2            equ	26	;# 
   870     001B                     PR2             equ	27	;# 
   871     001C                     T2CON           equ	28	;# 
   872     001E                     CPSCON0         equ	30	;# 
   873     001F                     CPSCON1         equ	31	;# 
   874     008C                     TRISA           equ	140	;# 
   875     008E                     TRISC           equ	142	;# 
   876     0091                     PIE1            equ	145	;# 
   877     0092                     PIE2            equ	146	;# 
   878     0093                     PIE3            equ	147	;# 
   879     0095                     OPTION_REG      equ	149	;# 
   880     0096                     PCON            equ	150	;# 
   881     0097                     WDTCON          equ	151	;# 
   882     0098                     OSCTUNE         equ	152	;# 
   883     0099                     OSCCON          equ	153	;# 
   884     009A                     OSCSTAT         equ	154	;# 
   885     009B                     ADRES           equ	155	;# 
   886     009B                     ADRESL          equ	155	;# 
   887     009C                     ADRESH          equ	156	;# 
   888     009D                     ADCON0          equ	157	;# 
   889     009E                     ADCON1          equ	158	;# 
   890     010C                     LATA            equ	268	;# 
   891     010E                     LATC            equ	270	;# 
   892     0111                     CM1CON0         equ	273	;# 
   893     0112                     CM1CON1         equ	274	;# 
   894     0113                     CM2CON0         equ	275	;# 
   895     0114                     CM2CON1         equ	276	;# 
   896     0115                     CMOUT           equ	277	;# 
   897     0116                     BORCON          equ	278	;# 
   898     0117                     FVRCON          equ	279	;# 
   899     0118                     DACCON0         equ	280	;# 
   900     0119                     DACCON1         equ	281	;# 
   901     011A                     SRCON0          equ	282	;# 
   902     011B                     SRCON1          equ	283	;# 
   903     011D                     APFCON0         equ	285	;# 
   904     011E                     APFCON1         equ	286	;# 
   905     018C                     ANSELA          equ	396	;# 
   906     018E                     ANSELC          equ	398	;# 
   907     0191                     EEADR           equ	401	;# 
   908     0191                     EEADRL          equ	401	;# 
   909     0192                     EEADRH          equ	402	;# 
   910     0193                     EEDAT           equ	403	;# 
   911     0193                     EEDATL          equ	403	;# 
   912     0193                     EEDATA          equ	403	;# 
   913     0194                     EEDATH          equ	404	;# 
   914     0195                     EECON1          equ	405	;# 
   915     0196                     EECON2          equ	406	;# 
   916     0199                     RCREG           equ	409	;# 
   917     019A                     TXREG           equ	410	;# 
   918     019B                     SPBRG           equ	411	;# 
   919     019B                     SPBRGL          equ	411	;# 
   920     019C                     SPBRGH          equ	412	;# 
   921     019D                     RCSTA           equ	413	;# 
   922     019E                     TXSTA           equ	414	;# 
   923     019F                     BAUDCON         equ	415	;# 
   924     020C                     WPUA            equ	524	;# 
   925     020E                     WPUC            equ	526	;# 
   926     0211                     SSP1BUF         equ	529	;# 
   927     0211                     SSPBUF          equ	529	;# 
   928     0212                     SSP1ADD         equ	530	;# 
   929     0212                     SSPADD          equ	530	;# 
   930     0213                     SSP1MSK         equ	531	;# 
   931     0213                     SSPMSK          equ	531	;# 
   932     0214                     SSP1STAT        equ	532	;# 
   933     0214                     SSPSTAT         equ	532	;# 
   934     0215                     SSP1CON1        equ	533	;# 
   935     0215                     SSPCON1         equ	533	;# 
   936     0215                     SSPCON          equ	533	;# 
   937     0216                     SSP1CON2        equ	534	;# 
   938     0216                     SSPCON2         equ	534	;# 
   939     0217                     SSP1CON3        equ	535	;# 
   940     0217                     SSPCON3         equ	535	;# 
   941     0291                     CCPR1           equ	657	;# 
   942     0291                     CCPR1L          equ	657	;# 
   943     0292                     CCPR1H          equ	658	;# 
   944     0293                     CCP1CON         equ	659	;# 
   945     0294                     PWM1CON         equ	660	;# 
   946     0295                     CCP1AS          equ	661	;# 
   947     0295                     ECCP1AS         equ	661	;# 
   948     0296                     PSTR1CON        equ	662	;# 
   949     0298                     CCPR2           equ	664	;# 
   950     0298                     CCPR2L          equ	664	;# 
   951     0299                     CCPR2H          equ	665	;# 
   952     029A                     CCP2CON         equ	666	;# 
   953     029B                     PWM2CON         equ	667	;# 
   954     029C                     CCP2AS          equ	668	;# 
   955     029D                     PSTR2CON        equ	669	;# 
   956     029E                     CCPTMRS         equ	670	;# 
   957     029E                     CCPTMRS0        equ	670	;# 
   958     0311                     CCPR3           equ	785	;# 
   959     0311                     CCPR3L          equ	785	;# 
   960     0312                     CCPR3H          equ	786	;# 
   961     0313                     CCP3CON         equ	787	;# 
   962     0318                     CCPR4           equ	792	;# 
   963     0318                     CCPR4L          equ	792	;# 
   964     0319                     CCPR4H          equ	793	;# 
   965     031A                     CCP4CON         equ	794	;# 
   966     038C                     INLVLA          equ	908	;# 
   967     038E                     INLVLC          equ	910	;# 
   968     0391                     IOCAP           equ	913	;# 
   969     0392                     IOCAN           equ	914	;# 
   970     0393                     IOCAF           equ	915	;# 
   971     039A                     CLKRCON         equ	922	;# 
   972     039C                     MDCON           equ	924	;# 
   973     039D                     MDSRC           equ	925	;# 
   974     039E                     MDCARL          equ	926	;# 
   975     039F                     MDCARH          equ	927	;# 
   976     0415                     TMR4            equ	1045	;# 
   977     0416                     PR4             equ	1046	;# 
   978     0417                     T4CON           equ	1047	;# 
   979     041C                     TMR6            equ	1052	;# 
   980     041D                     PR6             equ	1053	;# 
   981     041E                     T6CON           equ	1054	;# 
   982     0FE4                     STATUS_SHAD     equ	4068	;# 
   983     0FE5                     WREG_SHAD       equ	4069	;# 
   984     0FE6                     BSR_SHAD        equ	4070	;# 
   985     0FE7                     PCLATH_SHAD     equ	4071	;# 
   986     0FE8                     FSR0L_SHAD      equ	4072	;# 
   987     0FE9                     FSR0H_SHAD      equ	4073	;# 
   988     0FEA                     FSR1L_SHAD      equ	4074	;# 
   989     0FEB                     FSR1H_SHAD      equ	4075	;# 
   990     0FED                     STKPTR          equ	4077	;# 
   991     0FEE                     TOSL            equ	4078	;# 
   992     0FEF                     TOSH            equ	4079	;# 
   993     0000                     INDF0           equ	0	;# 
   994     0001                     INDF1           equ	1	;# 
   995     0002                     PCL             equ	2	;# 
   996     0003                     STATUS          equ	3	;# 
   997     0004                     FSR0L           equ	4	;# 
   998     0005                     FSR0H           equ	5	;# 
   999     0006                     FSR1L           equ	6	;# 
  1000     0007                     FSR1H           equ	7	;# 
  1001     0008                     BSR             equ	8	;# 
  1002     0009                     WREG            equ	9	;# 
  1003     000A                     PCLATH          equ	10	;# 
  1004     000B                     INTCON          equ	11	;# 
  1005     000C                     PORTA           equ	12	;# 
  1006     000E                     PORTC           equ	14	;# 
  1007     0011                     PIR1            equ	17	;# 
  1008     0012                     PIR2            equ	18	;# 
  1009     0013                     PIR3            equ	19	;# 
  1010     0015                     TMR0            equ	21	;# 
  1011     0016                     TMR1            equ	22	;# 
  1012     0016                     TMR1L           equ	22	;# 
  1013     0017                     TMR1H           equ	23	;# 
  1014     0018                     T1CON           equ	24	;# 
  1015     0019                     T1GCON          equ	25	;# 
  1016     001A                     TMR2            equ	26	;# 
  1017     001B                     PR2             equ	27	;# 
  1018     001C                     T2CON           equ	28	;# 
  1019     001E                     CPSCON0         equ	30	;# 
  1020     001F                     CPSCON1         equ	31	;# 
  1021     008C                     TRISA           equ	140	;# 
  1022     008E                     TRISC           equ	142	;# 
  1023     0091                     PIE1            equ	145	;# 
  1024     0092                     PIE2            equ	146	;# 
  1025     0093                     PIE3            equ	147	;# 
  1026     0095                     OPTION_REG      equ	149	;# 
  1027     0096                     PCON            equ	150	;# 
  1028     0097                     WDTCON          equ	151	;# 
  1029     0098                     OSCTUNE         equ	152	;# 
  1030     0099                     OSCCON          equ	153	;# 
  1031     009A                     OSCSTAT         equ	154	;# 
  1032     009B                     ADRES           equ	155	;# 
  1033     009B                     ADRESL          equ	155	;# 
  1034     009C                     ADRESH          equ	156	;# 
  1035     009D                     ADCON0          equ	157	;# 
  1036     009E                     ADCON1          equ	158	;# 
  1037     010C                     LATA            equ	268	;# 
  1038     010E                     LATC            equ	270	;# 
  1039     0111                     CM1CON0         equ	273	;# 
  1040     0112                     CM1CON1         equ	274	;# 
  1041     0113                     CM2CON0         equ	275	;# 
  1042     0114                     CM2CON1         equ	276	;# 
  1043     0115                     CMOUT           equ	277	;# 
  1044     0116                     BORCON          equ	278	;# 
  1045     0117                     FVRCON          equ	279	;# 
  1046     0118                     DACCON0         equ	280	;# 
  1047     0119                     DACCON1         equ	281	;# 
  1048     011A                     SRCON0          equ	282	;# 
  1049     011B                     SRCON1          equ	283	;# 
  1050     011D                     APFCON0         equ	285	;# 
  1051     011E                     APFCON1         equ	286	;# 
  1052     018C                     ANSELA          equ	396	;# 
  1053     018E                     ANSELC          equ	398	;# 
  1054     0191                     EEADR           equ	401	;# 
  1055     0191                     EEADRL          equ	401	;# 
  1056     0192                     EEADRH          equ	402	;# 
  1057     0193                     EEDAT           equ	403	;# 
  1058     0193                     EEDATL          equ	403	;# 
  1059     0193                     EEDATA          equ	403	;# 
  1060     0194                     EEDATH          equ	404	;# 
  1061     0195                     EECON1          equ	405	;# 
  1062     0196                     EECON2          equ	406	;# 
  1063     0199                     RCREG           equ	409	;# 
  1064     019A                     TXREG           equ	410	;# 
  1065     019B                     SPBRG           equ	411	;# 
  1066     019B                     SPBRGL          equ	411	;# 
  1067     019C                     SPBRGH          equ	412	;# 
  1068     019D                     RCSTA           equ	413	;# 
  1069     019E                     TXSTA           equ	414	;# 
  1070     019F                     BAUDCON         equ	415	;# 
  1071     020C                     WPUA            equ	524	;# 
  1072     020E                     WPUC            equ	526	;# 
  1073     0211                     SSP1BUF         equ	529	;# 
  1074     0211                     SSPBUF          equ	529	;# 
  1075     0212                     SSP1ADD         equ	530	;# 
  1076     0212                     SSPADD          equ	530	;# 
  1077     0213                     SSP1MSK         equ	531	;# 
  1078     0213                     SSPMSK          equ	531	;# 
  1079     0214                     SSP1STAT        equ	532	;# 
  1080     0214                     SSPSTAT         equ	532	;# 
  1081     0215                     SSP1CON1        equ	533	;# 
  1082     0215                     SSPCON1         equ	533	;# 
  1083     0215                     SSPCON          equ	533	;# 
  1084     0216                     SSP1CON2        equ	534	;# 
  1085     0216                     SSPCON2         equ	534	;# 
  1086     0217                     SSP1CON3        equ	535	;# 
  1087     0217                     SSPCON3         equ	535	;# 
  1088     0291                     CCPR1           equ	657	;# 
  1089     0291                     CCPR1L          equ	657	;# 
  1090     0292                     CCPR1H          equ	658	;# 
  1091     0293                     CCP1CON         equ	659	;# 
  1092     0294                     PWM1CON         equ	660	;# 
  1093     0295                     CCP1AS          equ	661	;# 
  1094     0295                     ECCP1AS         equ	661	;# 
  1095     0296                     PSTR1CON        equ	662	;# 
  1096     0298                     CCPR2           equ	664	;# 
  1097     0298                     CCPR2L          equ	664	;# 
  1098     0299                     CCPR2H          equ	665	;# 
  1099     029A                     CCP2CON         equ	666	;# 
  1100     029B                     PWM2CON         equ	667	;# 
  1101     029C                     CCP2AS          equ	668	;# 
  1102     029D                     PSTR2CON        equ	669	;# 
  1103     029E                     CCPTMRS         equ	670	;# 
  1104     029E                     CCPTMRS0        equ	670	;# 
  1105     0311                     CCPR3           equ	785	;# 
  1106     0311                     CCPR3L          equ	785	;# 
  1107     0312                     CCPR3H          equ	786	;# 
  1108     0313                     CCP3CON         equ	787	;# 
  1109     0318                     CCPR4           equ	792	;# 
  1110     0318                     CCPR4L          equ	792	;# 
  1111     0319                     CCPR4H          equ	793	;# 
  1112     031A                     CCP4CON         equ	794	;# 
  1113     038C                     INLVLA          equ	908	;# 
  1114     038E                     INLVLC          equ	910	;# 
  1115     0391                     IOCAP           equ	913	;# 
  1116     0392                     IOCAN           equ	914	;# 
  1117     0393                     IOCAF           equ	915	;# 
  1118     039A                     CLKRCON         equ	922	;# 
  1119     039C                     MDCON           equ	924	;# 
  1120     039D                     MDSRC           equ	925	;# 
  1121     039E                     MDCARL          equ	926	;# 
  1122     039F                     MDCARH          equ	927	;# 
  1123     0415                     TMR4            equ	1045	;# 
  1124     0416                     PR4             equ	1046	;# 
  1125     0417                     T4CON           equ	1047	;# 
  1126     041C                     TMR6            equ	1052	;# 
  1127     041D                     PR6             equ	1053	;# 
  1128     041E                     T6CON           equ	1054	;# 
  1129     0FE4                     STATUS_SHAD     equ	4068	;# 
  1130     0FE5                     WREG_SHAD       equ	4069	;# 
  1131     0FE6                     BSR_SHAD        equ	4070	;# 
  1132     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1133     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1134     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1135     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1136     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1137     0FED                     STKPTR          equ	4077	;# 
  1138     0FEE                     TOSL            equ	4078	;# 
  1139     0FEF                     TOSH            equ	4079	;# 
  1140     0000                     INDF0           equ	0	;# 
  1141     0001                     INDF1           equ	1	;# 
  1142     0002                     PCL             equ	2	;# 
  1143     0003                     STATUS          equ	3	;# 
  1144     0004                     FSR0L           equ	4	;# 
  1145     0005                     FSR0H           equ	5	;# 
  1146     0006                     FSR1L           equ	6	;# 
  1147     0007                     FSR1H           equ	7	;# 
  1148     0008                     BSR             equ	8	;# 
  1149     0009                     WREG            equ	9	;# 
  1150     000A                     PCLATH          equ	10	;# 
  1151     000B                     INTCON          equ	11	;# 
  1152     000C                     PORTA           equ	12	;# 
  1153     000E                     PORTC           equ	14	;# 
  1154     0011                     PIR1            equ	17	;# 
  1155     0012                     PIR2            equ	18	;# 
  1156     0013                     PIR3            equ	19	;# 
  1157     0015                     TMR0            equ	21	;# 
  1158     0016                     TMR1            equ	22	;# 
  1159     0016                     TMR1L           equ	22	;# 
  1160     0017                     TMR1H           equ	23	;# 
  1161     0018                     T1CON           equ	24	;# 
  1162     0019                     T1GCON          equ	25	;# 
  1163     001A                     TMR2            equ	26	;# 
  1164     001B                     PR2             equ	27	;# 
  1165     001C                     T2CON           equ	28	;# 
  1166     001E                     CPSCON0         equ	30	;# 
  1167     001F                     CPSCON1         equ	31	;# 
  1168     008C                     TRISA           equ	140	;# 
  1169     008E                     TRISC           equ	142	;# 
  1170     0091                     PIE1            equ	145	;# 
  1171     0092                     PIE2            equ	146	;# 
  1172     0093                     PIE3            equ	147	;# 
  1173     0095                     OPTION_REG      equ	149	;# 
  1174     0096                     PCON            equ	150	;# 
  1175     0097                     WDTCON          equ	151	;# 
  1176     0098                     OSCTUNE         equ	152	;# 
  1177     0099                     OSCCON          equ	153	;# 
  1178     009A                     OSCSTAT         equ	154	;# 
  1179     009B                     ADRES           equ	155	;# 
  1180     009B                     ADRESL          equ	155	;# 
  1181     009C                     ADRESH          equ	156	;# 
  1182     009D                     ADCON0          equ	157	;# 
  1183     009E                     ADCON1          equ	158	;# 
  1184     010C                     LATA            equ	268	;# 
  1185     010E                     LATC            equ	270	;# 
  1186     0111                     CM1CON0         equ	273	;# 
  1187     0112                     CM1CON1         equ	274	;# 
  1188     0113                     CM2CON0         equ	275	;# 
  1189     0114                     CM2CON1         equ	276	;# 
  1190     0115                     CMOUT           equ	277	;# 
  1191     0116                     BORCON          equ	278	;# 
  1192     0117                     FVRCON          equ	279	;# 
  1193     0118                     DACCON0         equ	280	;# 
  1194     0119                     DACCON1         equ	281	;# 
  1195     011A                     SRCON0          equ	282	;# 
  1196     011B                     SRCON1          equ	283	;# 
  1197     011D                     APFCON0         equ	285	;# 
  1198     011E                     APFCON1         equ	286	;# 
  1199     018C                     ANSELA          equ	396	;# 
  1200     018E                     ANSELC          equ	398	;# 
  1201     0191                     EEADR           equ	401	;# 
  1202     0191                     EEADRL          equ	401	;# 
  1203     0192                     EEADRH          equ	402	;# 
  1204     0193                     EEDAT           equ	403	;# 
  1205     0193                     EEDATL          equ	403	;# 
  1206     0193                     EEDATA          equ	403	;# 
  1207     0194                     EEDATH          equ	404	;# 
  1208     0195                     EECON1          equ	405	;# 
  1209     0196                     EECON2          equ	406	;# 
  1210     0199                     RCREG           equ	409	;# 
  1211     019A                     TXREG           equ	410	;# 
  1212     019B                     SPBRG           equ	411	;# 
  1213     019B                     SPBRGL          equ	411	;# 
  1214     019C                     SPBRGH          equ	412	;# 
  1215     019D                     RCSTA           equ	413	;# 
  1216     019E                     TXSTA           equ	414	;# 
  1217     019F                     BAUDCON         equ	415	;# 
  1218     020C                     WPUA            equ	524	;# 
  1219     020E                     WPUC            equ	526	;# 
  1220     0211                     SSP1BUF         equ	529	;# 
  1221     0211                     SSPBUF          equ	529	;# 
  1222     0212                     SSP1ADD         equ	530	;# 
  1223     0212                     SSPADD          equ	530	;# 
  1224     0213                     SSP1MSK         equ	531	;# 
  1225     0213                     SSPMSK          equ	531	;# 
  1226     0214                     SSP1STAT        equ	532	;# 
  1227     0214                     SSPSTAT         equ	532	;# 
  1228     0215                     SSP1CON1        equ	533	;# 
  1229     0215                     SSPCON1         equ	533	;# 
  1230     0215                     SSPCON          equ	533	;# 
  1231     0216                     SSP1CON2        equ	534	;# 
  1232     0216                     SSPCON2         equ	534	;# 
  1233     0217                     SSP1CON3        equ	535	;# 
  1234     0217                     SSPCON3         equ	535	;# 
  1235     0291                     CCPR1           equ	657	;# 
  1236     0291                     CCPR1L          equ	657	;# 
  1237     0292                     CCPR1H          equ	658	;# 
  1238     0293                     CCP1CON         equ	659	;# 
  1239     0294                     PWM1CON         equ	660	;# 
  1240     0295                     CCP1AS          equ	661	;# 
  1241     0295                     ECCP1AS         equ	661	;# 
  1242     0296                     PSTR1CON        equ	662	;# 
  1243     0298                     CCPR2           equ	664	;# 
  1244     0298                     CCPR2L          equ	664	;# 
  1245     0299                     CCPR2H          equ	665	;# 
  1246     029A                     CCP2CON         equ	666	;# 
  1247     029B                     PWM2CON         equ	667	;# 
  1248     029C                     CCP2AS          equ	668	;# 
  1249     029D                     PSTR2CON        equ	669	;# 
  1250     029E                     CCPTMRS         equ	670	;# 
  1251     029E                     CCPTMRS0        equ	670	;# 
  1252     0311                     CCPR3           equ	785	;# 
  1253     0311                     CCPR3L          equ	785	;# 
  1254     0312                     CCPR3H          equ	786	;# 
  1255     0313                     CCP3CON         equ	787	;# 
  1256     0318                     CCPR4           equ	792	;# 
  1257     0318                     CCPR4L          equ	792	;# 
  1258     0319                     CCPR4H          equ	793	;# 
  1259     031A                     CCP4CON         equ	794	;# 
  1260     038C                     INLVLA          equ	908	;# 
  1261     038E                     INLVLC          equ	910	;# 
  1262     0391                     IOCAP           equ	913	;# 
  1263     0392                     IOCAN           equ	914	;# 
  1264     0393                     IOCAF           equ	915	;# 
  1265     039A                     CLKRCON         equ	922	;# 
  1266     039C                     MDCON           equ	924	;# 
  1267     039D                     MDSRC           equ	925	;# 
  1268     039E                     MDCARL          equ	926	;# 
  1269     039F                     MDCARH          equ	927	;# 
  1270     0415                     TMR4            equ	1045	;# 
  1271     0416                     PR4             equ	1046	;# 
  1272     0417                     T4CON           equ	1047	;# 
  1273     041C                     TMR6            equ	1052	;# 
  1274     041D                     PR6             equ	1053	;# 
  1275     041E                     T6CON           equ	1054	;# 
  1276     0FE4                     STATUS_SHAD     equ	4068	;# 
  1277     0FE5                     WREG_SHAD       equ	4069	;# 
  1278     0FE6                     BSR_SHAD        equ	4070	;# 
  1279     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1280     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1281     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1282     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1283     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1284     0FED                     STKPTR          equ	4077	;# 
  1285     0FEE                     TOSL            equ	4078	;# 
  1286     0FEF                     TOSH            equ	4079	;# 
  1287     0000                     INDF0           equ	0	;# 
  1288     0001                     INDF1           equ	1	;# 
  1289     0002                     PCL             equ	2	;# 
  1290     0003                     STATUS          equ	3	;# 
  1291     0004                     FSR0L           equ	4	;# 
  1292     0005                     FSR0H           equ	5	;# 
  1293     0006                     FSR1L           equ	6	;# 
  1294     0007                     FSR1H           equ	7	;# 
  1295     0008                     BSR             equ	8	;# 
  1296     0009                     WREG            equ	9	;# 
  1297     000A                     PCLATH          equ	10	;# 
  1298     000B                     INTCON          equ	11	;# 
  1299     000C                     PORTA           equ	12	;# 
  1300     000E                     PORTC           equ	14	;# 
  1301     0011                     PIR1            equ	17	;# 
  1302     0012                     PIR2            equ	18	;# 
  1303     0013                     PIR3            equ	19	;# 
  1304     0015                     TMR0            equ	21	;# 
  1305     0016                     TMR1            equ	22	;# 
  1306     0016                     TMR1L           equ	22	;# 
  1307     0017                     TMR1H           equ	23	;# 
  1308     0018                     T1CON           equ	24	;# 
  1309     0019                     T1GCON          equ	25	;# 
  1310     001A                     TMR2            equ	26	;# 
  1311     001B                     PR2             equ	27	;# 
  1312     001C                     T2CON           equ	28	;# 
  1313     001E                     CPSCON0         equ	30	;# 
  1314     001F                     CPSCON1         equ	31	;# 
  1315     008C                     TRISA           equ	140	;# 
  1316     008E                     TRISC           equ	142	;# 
  1317     0091                     PIE1            equ	145	;# 
  1318     0092                     PIE2            equ	146	;# 
  1319     0093                     PIE3            equ	147	;# 
  1320     0095                     OPTION_REG      equ	149	;# 
  1321     0096                     PCON            equ	150	;# 
  1322     0097                     WDTCON          equ	151	;# 
  1323     0098                     OSCTUNE         equ	152	;# 
  1324     0099                     OSCCON          equ	153	;# 
  1325     009A                     OSCSTAT         equ	154	;# 
  1326     009B                     ADRES           equ	155	;# 
  1327     009B                     ADRESL          equ	155	;# 
  1328     009C                     ADRESH          equ	156	;# 
  1329     009D                     ADCON0          equ	157	;# 
  1330     009E                     ADCON1          equ	158	;# 
  1331     010C                     LATA            equ	268	;# 
  1332     010E                     LATC            equ	270	;# 
  1333     0111                     CM1CON0         equ	273	;# 
  1334     0112                     CM1CON1         equ	274	;# 
  1335     0113                     CM2CON0         equ	275	;# 
  1336     0114                     CM2CON1         equ	276	;# 
  1337     0115                     CMOUT           equ	277	;# 
  1338     0116                     BORCON          equ	278	;# 
  1339     0117                     FVRCON          equ	279	;# 
  1340     0118                     DACCON0         equ	280	;# 
  1341     0119                     DACCON1         equ	281	;# 
  1342     011A                     SRCON0          equ	282	;# 
  1343     011B                     SRCON1          equ	283	;# 
  1344     011D                     APFCON0         equ	285	;# 
  1345     011E                     APFCON1         equ	286	;# 
  1346     018C                     ANSELA          equ	396	;# 
  1347     018E                     ANSELC          equ	398	;# 
  1348     0191                     EEADR           equ	401	;# 
  1349     0191                     EEADRL          equ	401	;# 
  1350     0192                     EEADRH          equ	402	;# 
  1351     0193                     EEDAT           equ	403	;# 
  1352     0193                     EEDATL          equ	403	;# 
  1353     0193                     EEDATA          equ	403	;# 
  1354     0194                     EEDATH          equ	404	;# 
  1355     0195                     EECON1          equ	405	;# 
  1356     0196                     EECON2          equ	406	;# 
  1357     0199                     RCREG           equ	409	;# 
  1358     019A                     TXREG           equ	410	;# 
  1359     019B                     SPBRG           equ	411	;# 
  1360     019B                     SPBRGL          equ	411	;# 
  1361     019C                     SPBRGH          equ	412	;# 
  1362     019D                     RCSTA           equ	413	;# 
  1363     019E                     TXSTA           equ	414	;# 
  1364     019F                     BAUDCON         equ	415	;# 
  1365     020C                     WPUA            equ	524	;# 
  1366     020E                     WPUC            equ	526	;# 
  1367     0211                     SSP1BUF         equ	529	;# 
  1368     0211                     SSPBUF          equ	529	;# 
  1369     0212                     SSP1ADD         equ	530	;# 
  1370     0212                     SSPADD          equ	530	;# 
  1371     0213                     SSP1MSK         equ	531	;# 
  1372     0213                     SSPMSK          equ	531	;# 
  1373     0214                     SSP1STAT        equ	532	;# 
  1374     0214                     SSPSTAT         equ	532	;# 
  1375     0215                     SSP1CON1        equ	533	;# 
  1376     0215                     SSPCON1         equ	533	;# 
  1377     0215                     SSPCON          equ	533	;# 
  1378     0216                     SSP1CON2        equ	534	;# 
  1379     0216                     SSPCON2         equ	534	;# 
  1380     0217                     SSP1CON3        equ	535	;# 
  1381     0217                     SSPCON3         equ	535	;# 
  1382     0291                     CCPR1           equ	657	;# 
  1383     0291                     CCPR1L          equ	657	;# 
  1384     0292                     CCPR1H          equ	658	;# 
  1385     0293                     CCP1CON         equ	659	;# 
  1386     0294                     PWM1CON         equ	660	;# 
  1387     0295                     CCP1AS          equ	661	;# 
  1388     0295                     ECCP1AS         equ	661	;# 
  1389     0296                     PSTR1CON        equ	662	;# 
  1390     0298                     CCPR2           equ	664	;# 
  1391     0298                     CCPR2L          equ	664	;# 
  1392     0299                     CCPR2H          equ	665	;# 
  1393     029A                     CCP2CON         equ	666	;# 
  1394     029B                     PWM2CON         equ	667	;# 
  1395     029C                     CCP2AS          equ	668	;# 
  1396     029D                     PSTR2CON        equ	669	;# 
  1397     029E                     CCPTMRS         equ	670	;# 
  1398     029E                     CCPTMRS0        equ	670	;# 
  1399     0311                     CCPR3           equ	785	;# 
  1400     0311                     CCPR3L          equ	785	;# 
  1401     0312                     CCPR3H          equ	786	;# 
  1402     0313                     CCP3CON         equ	787	;# 
  1403     0318                     CCPR4           equ	792	;# 
  1404     0318                     CCPR4L          equ	792	;# 
  1405     0319                     CCPR4H          equ	793	;# 
  1406     031A                     CCP4CON         equ	794	;# 
  1407     038C                     INLVLA          equ	908	;# 
  1408     038E                     INLVLC          equ	910	;# 
  1409     0391                     IOCAP           equ	913	;# 
  1410     0392                     IOCAN           equ	914	;# 
  1411     0393                     IOCAF           equ	915	;# 
  1412     039A                     CLKRCON         equ	922	;# 
  1413     039C                     MDCON           equ	924	;# 
  1414     039D                     MDSRC           equ	925	;# 
  1415     039E                     MDCARL          equ	926	;# 
  1416     039F                     MDCARH          equ	927	;# 
  1417     0415                     TMR4            equ	1045	;# 
  1418     0416                     PR4             equ	1046	;# 
  1419     0417                     T4CON           equ	1047	;# 
  1420     041C                     TMR6            equ	1052	;# 
  1421     041D                     PR6             equ	1053	;# 
  1422     041E                     T6CON           equ	1054	;# 
  1423     0FE4                     STATUS_SHAD     equ	4068	;# 
  1424     0FE5                     WREG_SHAD       equ	4069	;# 
  1425     0FE6                     BSR_SHAD        equ	4070	;# 
  1426     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1427     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1428     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1429     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1430     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1431     0FED                     STKPTR          equ	4077	;# 
  1432     0FEE                     TOSL            equ	4078	;# 
  1433     0FEF                     TOSH            equ	4079	;# 
  1434     0000                     INDF0           equ	0	;# 
  1435     0001                     INDF1           equ	1	;# 
  1436     0002                     PCL             equ	2	;# 
  1437     0003                     STATUS          equ	3	;# 
  1438     0004                     FSR0L           equ	4	;# 
  1439     0005                     FSR0H           equ	5	;# 
  1440     0006                     FSR1L           equ	6	;# 
  1441     0007                     FSR1H           equ	7	;# 
  1442     0008                     BSR             equ	8	;# 
  1443     0009                     WREG            equ	9	;# 
  1444     000A                     PCLATH          equ	10	;# 
  1445     000B                     INTCON          equ	11	;# 
  1446     000C                     PORTA           equ	12	;# 
  1447     000E                     PORTC           equ	14	;# 
  1448     0011                     PIR1            equ	17	;# 
  1449     0012                     PIR2            equ	18	;# 
  1450     0013                     PIR3            equ	19	;# 
  1451     0015                     TMR0            equ	21	;# 
  1452     0016                     TMR1            equ	22	;# 
  1453     0016                     TMR1L           equ	22	;# 
  1454     0017                     TMR1H           equ	23	;# 
  1455     0018                     T1CON           equ	24	;# 
  1456     0019                     T1GCON          equ	25	;# 
  1457     001A                     TMR2            equ	26	;# 
  1458     001B                     PR2             equ	27	;# 
  1459     001C                     T2CON           equ	28	;# 
  1460     001E                     CPSCON0         equ	30	;# 
  1461     001F                     CPSCON1         equ	31	;# 
  1462     008C                     TRISA           equ	140	;# 
  1463     008E                     TRISC           equ	142	;# 
  1464     0091                     PIE1            equ	145	;# 
  1465     0092                     PIE2            equ	146	;# 
  1466     0093                     PIE3            equ	147	;# 
  1467     0095                     OPTION_REG      equ	149	;# 
  1468     0096                     PCON            equ	150	;# 
  1469     0097                     WDTCON          equ	151	;# 
  1470     0098                     OSCTUNE         equ	152	;# 
  1471     0099                     OSCCON          equ	153	;# 
  1472     009A                     OSCSTAT         equ	154	;# 
  1473     009B                     ADRES           equ	155	;# 
  1474     009B                     ADRESL          equ	155	;# 
  1475     009C                     ADRESH          equ	156	;# 
  1476     009D                     ADCON0          equ	157	;# 
  1477     009E                     ADCON1          equ	158	;# 
  1478     010C                     LATA            equ	268	;# 
  1479     010E                     LATC            equ	270	;# 
  1480     0111                     CM1CON0         equ	273	;# 
  1481     0112                     CM1CON1         equ	274	;# 
  1482     0113                     CM2CON0         equ	275	;# 
  1483     0114                     CM2CON1         equ	276	;# 
  1484     0115                     CMOUT           equ	277	;# 
  1485     0116                     BORCON          equ	278	;# 
  1486     0117                     FVRCON          equ	279	;# 
  1487     0118                     DACCON0         equ	280	;# 
  1488     0119                     DACCON1         equ	281	;# 
  1489     011A                     SRCON0          equ	282	;# 
  1490     011B                     SRCON1          equ	283	;# 
  1491     011D                     APFCON0         equ	285	;# 
  1492     011E                     APFCON1         equ	286	;# 
  1493     018C                     ANSELA          equ	396	;# 
  1494     018E                     ANSELC          equ	398	;# 
  1495     0191                     EEADR           equ	401	;# 
  1496     0191                     EEADRL          equ	401	;# 
  1497     0192                     EEADRH          equ	402	;# 
  1498     0193                     EEDAT           equ	403	;# 
  1499     0193                     EEDATL          equ	403	;# 
  1500     0193                     EEDATA          equ	403	;# 
  1501     0194                     EEDATH          equ	404	;# 
  1502     0195                     EECON1          equ	405	;# 
  1503     0196                     EECON2          equ	406	;# 
  1504     0199                     RCREG           equ	409	;# 
  1505     019A                     TXREG           equ	410	;# 
  1506     019B                     SPBRG           equ	411	;# 
  1507     019B                     SPBRGL          equ	411	;# 
  1508     019C                     SPBRGH          equ	412	;# 
  1509     019D                     RCSTA           equ	413	;# 
  1510     019E                     TXSTA           equ	414	;# 
  1511     019F                     BAUDCON         equ	415	;# 
  1512     020C                     WPUA            equ	524	;# 
  1513     020E                     WPUC            equ	526	;# 
  1514     0211                     SSP1BUF         equ	529	;# 
  1515     0211                     SSPBUF          equ	529	;# 
  1516     0212                     SSP1ADD         equ	530	;# 
  1517     0212                     SSPADD          equ	530	;# 
  1518     0213                     SSP1MSK         equ	531	;# 
  1519     0213                     SSPMSK          equ	531	;# 
  1520     0214                     SSP1STAT        equ	532	;# 
  1521     0214                     SSPSTAT         equ	532	;# 
  1522     0215                     SSP1CON1        equ	533	;# 
  1523     0215                     SSPCON1         equ	533	;# 
  1524     0215                     SSPCON          equ	533	;# 
  1525     0216                     SSP1CON2        equ	534	;# 
  1526     0216                     SSPCON2         equ	534	;# 
  1527     0217                     SSP1CON3        equ	535	;# 
  1528     0217                     SSPCON3         equ	535	;# 
  1529     0291                     CCPR1           equ	657	;# 
  1530     0291                     CCPR1L          equ	657	;# 
  1531     0292                     CCPR1H          equ	658	;# 
  1532     0293                     CCP1CON         equ	659	;# 
  1533     0294                     PWM1CON         equ	660	;# 
  1534     0295                     CCP1AS          equ	661	;# 
  1535     0295                     ECCP1AS         equ	661	;# 
  1536     0296                     PSTR1CON        equ	662	;# 
  1537     0298                     CCPR2           equ	664	;# 
  1538     0298                     CCPR2L          equ	664	;# 
  1539     0299                     CCPR2H          equ	665	;# 
  1540     029A                     CCP2CON         equ	666	;# 
  1541     029B                     PWM2CON         equ	667	;# 
  1542     029C                     CCP2AS          equ	668	;# 
  1543     029D                     PSTR2CON        equ	669	;# 
  1544     029E                     CCPTMRS         equ	670	;# 
  1545     029E                     CCPTMRS0        equ	670	;# 
  1546     0311                     CCPR3           equ	785	;# 
  1547     0311                     CCPR3L          equ	785	;# 
  1548     0312                     CCPR3H          equ	786	;# 
  1549     0313                     CCP3CON         equ	787	;# 
  1550     0318                     CCPR4           equ	792	;# 
  1551     0318                     CCPR4L          equ	792	;# 
  1552     0319                     CCPR4H          equ	793	;# 
  1553     031A                     CCP4CON         equ	794	;# 
  1554     038C                     INLVLA          equ	908	;# 
  1555     038E                     INLVLC          equ	910	;# 
  1556     0391                     IOCAP           equ	913	;# 
  1557     0392                     IOCAN           equ	914	;# 
  1558     0393                     IOCAF           equ	915	;# 
  1559     039A                     CLKRCON         equ	922	;# 
  1560     039C                     MDCON           equ	924	;# 
  1561     039D                     MDSRC           equ	925	;# 
  1562     039E                     MDCARL          equ	926	;# 
  1563     039F                     MDCARH          equ	927	;# 
  1564     0415                     TMR4            equ	1045	;# 
  1565     0416                     PR4             equ	1046	;# 
  1566     0417                     T4CON           equ	1047	;# 
  1567     041C                     TMR6            equ	1052	;# 
  1568     041D                     PR6             equ	1053	;# 
  1569     041E                     T6CON           equ	1054	;# 
  1570     0FE4                     STATUS_SHAD     equ	4068	;# 
  1571     0FE5                     WREG_SHAD       equ	4069	;# 
  1572     0FE6                     BSR_SHAD        equ	4070	;# 
  1573     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1574     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1575     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1576     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1577     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1578     0FED                     STKPTR          equ	4077	;# 
  1579     0FEE                     TOSL            equ	4078	;# 
  1580     0FEF                     TOSH            equ	4079	;# 
  1581     0000                     INDF0           equ	0	;# 
  1582     0001                     INDF1           equ	1	;# 
  1583     0002                     PCL             equ	2	;# 
  1584     0003                     STATUS          equ	3	;# 
  1585     0004                     FSR0L           equ	4	;# 
  1586     0005                     FSR0H           equ	5	;# 
  1587     0006                     FSR1L           equ	6	;# 
  1588     0007                     FSR1H           equ	7	;# 
  1589     0008                     BSR             equ	8	;# 
  1590     0009                     WREG            equ	9	;# 
  1591     000A                     PCLATH          equ	10	;# 
  1592     000B                     INTCON          equ	11	;# 
  1593     000C                     PORTA           equ	12	;# 
  1594     000E                     PORTC           equ	14	;# 
  1595     0011                     PIR1            equ	17	;# 
  1596     0012                     PIR2            equ	18	;# 
  1597     0013                     PIR3            equ	19	;# 
  1598     0015                     TMR0            equ	21	;# 
  1599     0016                     TMR1            equ	22	;# 
  1600     0016                     TMR1L           equ	22	;# 
  1601     0017                     TMR1H           equ	23	;# 
  1602     0018                     T1CON           equ	24	;# 
  1603     0019                     T1GCON          equ	25	;# 
  1604     001A                     TMR2            equ	26	;# 
  1605     001B                     PR2             equ	27	;# 
  1606     001C                     T2CON           equ	28	;# 
  1607     001E                     CPSCON0         equ	30	;# 
  1608     001F                     CPSCON1         equ	31	;# 
  1609     008C                     TRISA           equ	140	;# 
  1610     008E                     TRISC           equ	142	;# 
  1611     0091                     PIE1            equ	145	;# 
  1612     0092                     PIE2            equ	146	;# 
  1613     0093                     PIE3            equ	147	;# 
  1614     0095                     OPTION_REG      equ	149	;# 
  1615     0096                     PCON            equ	150	;# 
  1616     0097                     WDTCON          equ	151	;# 
  1617     0098                     OSCTUNE         equ	152	;# 
  1618     0099                     OSCCON          equ	153	;# 
  1619     009A                     OSCSTAT         equ	154	;# 
  1620     009B                     ADRES           equ	155	;# 
  1621     009B                     ADRESL          equ	155	;# 
  1622     009C                     ADRESH          equ	156	;# 
  1623     009D                     ADCON0          equ	157	;# 
  1624     009E                     ADCON1          equ	158	;# 
  1625     010C                     LATA            equ	268	;# 
  1626     010E                     LATC            equ	270	;# 
  1627     0111                     CM1CON0         equ	273	;# 
  1628     0112                     CM1CON1         equ	274	;# 
  1629     0113                     CM2CON0         equ	275	;# 
  1630     0114                     CM2CON1         equ	276	;# 
  1631     0115                     CMOUT           equ	277	;# 
  1632     0116                     BORCON          equ	278	;# 
  1633     0117                     FVRCON          equ	279	;# 
  1634     0118                     DACCON0         equ	280	;# 
  1635     0119                     DACCON1         equ	281	;# 
  1636     011A                     SRCON0          equ	282	;# 
  1637     011B                     SRCON1          equ	283	;# 
  1638     011D                     APFCON0         equ	285	;# 
  1639     011E                     APFCON1         equ	286	;# 
  1640     018C                     ANSELA          equ	396	;# 
  1641     018E                     ANSELC          equ	398	;# 
  1642     0191                     EEADR           equ	401	;# 
  1643     0191                     EEADRL          equ	401	;# 
  1644     0192                     EEADRH          equ	402	;# 
  1645     0193                     EEDAT           equ	403	;# 
  1646     0193                     EEDATL          equ	403	;# 
  1647     0193                     EEDATA          equ	403	;# 
  1648     0194                     EEDATH          equ	404	;# 
  1649     0195                     EECON1          equ	405	;# 
  1650     0196                     EECON2          equ	406	;# 
  1651     0199                     RCREG           equ	409	;# 
  1652     019A                     TXREG           equ	410	;# 
  1653     019B                     SPBRG           equ	411	;# 
  1654     019B                     SPBRGL          equ	411	;# 
  1655     019C                     SPBRGH          equ	412	;# 
  1656     019D                     RCSTA           equ	413	;# 
  1657     019E                     TXSTA           equ	414	;# 
  1658     019F                     BAUDCON         equ	415	;# 
  1659     020C                     WPUA            equ	524	;# 
  1660     020E                     WPUC            equ	526	;# 
  1661     0211                     SSP1BUF         equ	529	;# 
  1662     0211                     SSPBUF          equ	529	;# 
  1663     0212                     SSP1ADD         equ	530	;# 
  1664     0212                     SSPADD          equ	530	;# 
  1665     0213                     SSP1MSK         equ	531	;# 
  1666     0213                     SSPMSK          equ	531	;# 
  1667     0214                     SSP1STAT        equ	532	;# 
  1668     0214                     SSPSTAT         equ	532	;# 
  1669     0215                     SSP1CON1        equ	533	;# 
  1670     0215                     SSPCON1         equ	533	;# 
  1671     0215                     SSPCON          equ	533	;# 
  1672     0216                     SSP1CON2        equ	534	;# 
  1673     0216                     SSPCON2         equ	534	;# 
  1674     0217                     SSP1CON3        equ	535	;# 
  1675     0217                     SSPCON3         equ	535	;# 
  1676     0291                     CCPR1           equ	657	;# 
  1677     0291                     CCPR1L          equ	657	;# 
  1678     0292                     CCPR1H          equ	658	;# 
  1679     0293                     CCP1CON         equ	659	;# 
  1680     0294                     PWM1CON         equ	660	;# 
  1681     0295                     CCP1AS          equ	661	;# 
  1682     0295                     ECCP1AS         equ	661	;# 
  1683     0296                     PSTR1CON        equ	662	;# 
  1684     0298                     CCPR2           equ	664	;# 
  1685     0298                     CCPR2L          equ	664	;# 
  1686     0299                     CCPR2H          equ	665	;# 
  1687     029A                     CCP2CON         equ	666	;# 
  1688     029B                     PWM2CON         equ	667	;# 
  1689     029C                     CCP2AS          equ	668	;# 
  1690     029D                     PSTR2CON        equ	669	;# 
  1691     029E                     CCPTMRS         equ	670	;# 
  1692     029E                     CCPTMRS0        equ	670	;# 
  1693     0311                     CCPR3           equ	785	;# 
  1694     0311                     CCPR3L          equ	785	;# 
  1695     0312                     CCPR3H          equ	786	;# 
  1696     0313                     CCP3CON         equ	787	;# 
  1697     0318                     CCPR4           equ	792	;# 
  1698     0318                     CCPR4L          equ	792	;# 
  1699     0319                     CCPR4H          equ	793	;# 
  1700     031A                     CCP4CON         equ	794	;# 
  1701     038C                     INLVLA          equ	908	;# 
  1702     038E                     INLVLC          equ	910	;# 
  1703     0391                     IOCAP           equ	913	;# 
  1704     0392                     IOCAN           equ	914	;# 
  1705     0393                     IOCAF           equ	915	;# 
  1706     039A                     CLKRCON         equ	922	;# 
  1707     039C                     MDCON           equ	924	;# 
  1708     039D                     MDSRC           equ	925	;# 
  1709     039E                     MDCARL          equ	926	;# 
  1710     039F                     MDCARH          equ	927	;# 
  1711     0415                     TMR4            equ	1045	;# 
  1712     0416                     PR4             equ	1046	;# 
  1713     0417                     T4CON           equ	1047	;# 
  1714     041C                     TMR6            equ	1052	;# 
  1715     041D                     PR6             equ	1053	;# 
  1716     041E                     T6CON           equ	1054	;# 
  1717     0FE4                     STATUS_SHAD     equ	4068	;# 
  1718     0FE5                     WREG_SHAD       equ	4069	;# 
  1719     0FE6                     BSR_SHAD        equ	4070	;# 
  1720     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1721     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1722     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1723     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1724     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1725     0FED                     STKPTR          equ	4077	;# 
  1726     0FEE                     TOSL            equ	4078	;# 
  1727     0FEF                     TOSH            equ	4079	;# 
  1728     0000                     INDF0           equ	0	;# 
  1729     0001                     INDF1           equ	1	;# 
  1730     0002                     PCL             equ	2	;# 
  1731     0003                     STATUS          equ	3	;# 
  1732     0004                     FSR0L           equ	4	;# 
  1733     0005                     FSR0H           equ	5	;# 
  1734     0006                     FSR1L           equ	6	;# 
  1735     0007                     FSR1H           equ	7	;# 
  1736     0008                     BSR             equ	8	;# 
  1737     0009                     WREG            equ	9	;# 
  1738     000A                     PCLATH          equ	10	;# 
  1739     000B                     INTCON          equ	11	;# 
  1740     000C                     PORTA           equ	12	;# 
  1741     000E                     PORTC           equ	14	;# 
  1742     0011                     PIR1            equ	17	;# 
  1743     0012                     PIR2            equ	18	;# 
  1744     0013                     PIR3            equ	19	;# 
  1745     0015                     TMR0            equ	21	;# 
  1746     0016                     TMR1            equ	22	;# 
  1747     0016                     TMR1L           equ	22	;# 
  1748     0017                     TMR1H           equ	23	;# 
  1749     0018                     T1CON           equ	24	;# 
  1750     0019                     T1GCON          equ	25	;# 
  1751     001A                     TMR2            equ	26	;# 
  1752     001B                     PR2             equ	27	;# 
  1753     001C                     T2CON           equ	28	;# 
  1754     001E                     CPSCON0         equ	30	;# 
  1755     001F                     CPSCON1         equ	31	;# 
  1756     008C                     TRISA           equ	140	;# 
  1757     008E                     TRISC           equ	142	;# 
  1758     0091                     PIE1            equ	145	;# 
  1759     0092                     PIE2            equ	146	;# 
  1760     0093                     PIE3            equ	147	;# 
  1761     0095                     OPTION_REG      equ	149	;# 
  1762     0096                     PCON            equ	150	;# 
  1763     0097                     WDTCON          equ	151	;# 
  1764     0098                     OSCTUNE         equ	152	;# 
  1765     0099                     OSCCON          equ	153	;# 
  1766     009A                     OSCSTAT         equ	154	;# 
  1767     009B                     ADRES           equ	155	;# 
  1768     009B                     ADRESL          equ	155	;# 
  1769     009C                     ADRESH          equ	156	;# 
  1770     009D                     ADCON0          equ	157	;# 
  1771     009E                     ADCON1          equ	158	;# 
  1772     010C                     LATA            equ	268	;# 
  1773     010E                     LATC            equ	270	;# 
  1774     0111                     CM1CON0         equ	273	;# 
  1775     0112                     CM1CON1         equ	274	;# 
  1776     0113                     CM2CON0         equ	275	;# 
  1777     0114                     CM2CON1         equ	276	;# 
  1778     0115                     CMOUT           equ	277	;# 
  1779     0116                     BORCON          equ	278	;# 
  1780     0117                     FVRCON          equ	279	;# 
  1781     0118                     DACCON0         equ	280	;# 
  1782     0119                     DACCON1         equ	281	;# 
  1783     011A                     SRCON0          equ	282	;# 
  1784     011B                     SRCON1          equ	283	;# 
  1785     011D                     APFCON0         equ	285	;# 
  1786     011E                     APFCON1         equ	286	;# 
  1787     018C                     ANSELA          equ	396	;# 
  1788     018E                     ANSELC          equ	398	;# 
  1789     0191                     EEADR           equ	401	;# 
  1790     0191                     EEADRL          equ	401	;# 
  1791     0192                     EEADRH          equ	402	;# 
  1792     0193                     EEDAT           equ	403	;# 
  1793     0193                     EEDATL          equ	403	;# 
  1794     0193                     EEDATA          equ	403	;# 
  1795     0194                     EEDATH          equ	404	;# 
  1796     0195                     EECON1          equ	405	;# 
  1797     0196                     EECON2          equ	406	;# 
  1798     0199                     RCREG           equ	409	;# 
  1799     019A                     TXREG           equ	410	;# 
  1800     019B                     SPBRG           equ	411	;# 
  1801     019B                     SPBRGL          equ	411	;# 
  1802     019C                     SPBRGH          equ	412	;# 
  1803     019D                     RCSTA           equ	413	;# 
  1804     019E                     TXSTA           equ	414	;# 
  1805     019F                     BAUDCON         equ	415	;# 
  1806     020C                     WPUA            equ	524	;# 
  1807     020E                     WPUC            equ	526	;# 
  1808     0211                     SSP1BUF         equ	529	;# 
  1809     0211                     SSPBUF          equ	529	;# 
  1810     0212                     SSP1ADD         equ	530	;# 
  1811     0212                     SSPADD          equ	530	;# 
  1812     0213                     SSP1MSK         equ	531	;# 
  1813     0213                     SSPMSK          equ	531	;# 
  1814     0214                     SSP1STAT        equ	532	;# 
  1815     0214                     SSPSTAT         equ	532	;# 
  1816     0215                     SSP1CON1        equ	533	;# 
  1817     0215                     SSPCON1         equ	533	;# 
  1818     0215                     SSPCON          equ	533	;# 
  1819     0216                     SSP1CON2        equ	534	;# 
  1820     0216                     SSPCON2         equ	534	;# 
  1821     0217                     SSP1CON3        equ	535	;# 
  1822     0217                     SSPCON3         equ	535	;# 
  1823     0291                     CCPR1           equ	657	;# 
  1824     0291                     CCPR1L          equ	657	;# 
  1825     0292                     CCPR1H          equ	658	;# 
  1826     0293                     CCP1CON         equ	659	;# 
  1827     0294                     PWM1CON         equ	660	;# 
  1828     0295                     CCP1AS          equ	661	;# 
  1829     0295                     ECCP1AS         equ	661	;# 
  1830     0296                     PSTR1CON        equ	662	;# 
  1831     0298                     CCPR2           equ	664	;# 
  1832     0298                     CCPR2L          equ	664	;# 
  1833     0299                     CCPR2H          equ	665	;# 
  1834     029A                     CCP2CON         equ	666	;# 
  1835     029B                     PWM2CON         equ	667	;# 
  1836     029C                     CCP2AS          equ	668	;# 
  1837     029D                     PSTR2CON        equ	669	;# 
  1838     029E                     CCPTMRS         equ	670	;# 
  1839     029E                     CCPTMRS0        equ	670	;# 
  1840     0311                     CCPR3           equ	785	;# 
  1841     0311                     CCPR3L          equ	785	;# 
  1842     0312                     CCPR3H          equ	786	;# 
  1843     0313                     CCP3CON         equ	787	;# 
  1844     0318                     CCPR4           equ	792	;# 
  1845     0318                     CCPR4L          equ	792	;# 
  1846     0319                     CCPR4H          equ	793	;# 
  1847     031A                     CCP4CON         equ	794	;# 
  1848     038C                     INLVLA          equ	908	;# 
  1849     038E                     INLVLC          equ	910	;# 
  1850     0391                     IOCAP           equ	913	;# 
  1851     0392                     IOCAN           equ	914	;# 
  1852     0393                     IOCAF           equ	915	;# 
  1853     039A                     CLKRCON         equ	922	;# 
  1854     039C                     MDCON           equ	924	;# 
  1855     039D                     MDSRC           equ	925	;# 
  1856     039E                     MDCARL          equ	926	;# 
  1857     039F                     MDCARH          equ	927	;# 
  1858     0415                     TMR4            equ	1045	;# 
  1859     0416                     PR4             equ	1046	;# 
  1860     0417                     T4CON           equ	1047	;# 
  1861     041C                     TMR6            equ	1052	;# 
  1862     041D                     PR6             equ	1053	;# 
  1863     041E                     T6CON           equ	1054	;# 
  1864     0FE4                     STATUS_SHAD     equ	4068	;# 
  1865     0FE5                     WREG_SHAD       equ	4069	;# 
  1866     0FE6                     BSR_SHAD        equ	4070	;# 
  1867     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1868     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1869     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1870     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1871     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1872     0FED                     STKPTR          equ	4077	;# 
  1873     0FEE                     TOSL            equ	4078	;# 
  1874     0FEF                     TOSH            equ	4079	;_dataBuffer
  1875                           
  1876 ;; Function _SPI1_Deinitialize is unused but had its address taken
  1877     0000                     _SPI1_Deinitialize equ	0
  1878                           
  1879 ;; Function _SPI1_BufferExchange is unused but had its address taken
  1880     0000                     _SPI1_BufferExchange equ	0
  1881                           
  1882 ;; Function _SPI1_ByteRead is unused but had its address taken
  1883     0000                     _SPI1_ByteRead  equ	0
  1884                           
  1885 ;; Function _SPI1_IsRxReady is unused but had its address taken
  1886     0000                     _SPI1_IsRxReady equ	0
  1887                           
  1888 ;; Function _SPI1_IsTxReady is unused but had its address taken
  1889     0000                     _SPI1_IsTxReady equ	0
  1890                           
  1891 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  1892     0000                     _INT_DefaultInterruptHandler equ	0
  1893                           
  1894 ;; Function _NVM_IsBusy is unused but had its address taken
  1895     0000                     _NVM_IsBusy     equ	0
  1896                           
  1897 ;; Function _EEPROM_ByteWrite is unused but had its address taken
  1898     0000                     _EEPROM_ByteWrite equ	0
  1899                           
  1900 ;; Function _EEPROM_ByteRead is unused but had its address taken
  1901     0000                     _EEPROM_ByteRead equ	0
  1902                           
  1903                           	psect	stringtext1
  1904     1000                     __pstringtext1:
  1905     1000                     _SPI1_Host:
  1906     1000  34DE               	retlw	low _SPI1_Initialize
  1907     1001  340E               	retlw	high _SPI1_Initialize
  1908     1002  3400               	retlw	0
  1909     1003  3400               	retlw	0
  1910     1004  3436               	retlw	low _SPI1_Open
  1911     1005  3401               	retlw	high _SPI1_Open
  1912     1006  34B3               	retlw	low _SPI1_Close
  1913     1007  340E               	retlw	high _SPI1_Close
  1914     1008  3400               	retlw	0
  1915     1009  3400               	retlw	0
  1916     100A  3409               	retlw	low _SPI1_BufferRead
  1917     100B  3400               	retlw	high _SPI1_BufferRead
  1918     100C  34E0               	retlw	low _SPI1_BufferWrite
  1919     100D  340F               	retlw	high _SPI1_BufferWrite
  1920     100E  34F3               	retlw	low _SPI1_ByteExchange
  1921     100F  340E               	retlw	high _SPI1_ByteExchange
  1922     1010  3400               	retlw	0
  1923     1011  3400               	retlw	0
  1924     1012  34B9               	retlw	low _SPI1_ByteWrite
  1925     1013  340E               	retlw	high _SPI1_ByteWrite
  1926     1014  3400               	retlw	0
  1927     1015  3400               	retlw	0
  1928     1016  3400               	retlw	0
  1929     1017  3400               	retlw	0
  1930     1018  3400               	retlw	0
  1931     1019  3400               	retlw	0
  1932     101A  3400               	retlw	0
  1933     101B  3400               	retlw	0
  1934     101C                     __end_of_SPI1_Host:
  1935                           
  1936                           	psect	stringtext2
  1937     101C                     __pstringtext2:
  1938     101C                     _spi1_configuration:
  1939     101C  3400               	retlw	0
  1940     101D  341A               	retlw	26
  1941     101E  3410               	retlw	16
  1942     101F  3407               	retlw	7
  1943     1020  3400               	retlw	0
  1944     1021  3440               	retlw	64
  1945     1022  340A               	retlw	10
  1946     1023  3410               	retlw	16
  1947     1024  3407               	retlw	7
  1948     1025  3400               	retlw	0
  1949     1026  3464               	retlw	100
  1950     1027  3400               	retlw	0
  1951     1028  3410               	retlw	16
  1952     1029  3401               	retlw	1
  1953     102A  3400               	retlw	0
  1954     102B                     __end_of_spi1_configuration:
  1955                           
  1956                           	psect	stringtext3
  1957     102B                     __pstringtext3:
  1958     102B                     _eeprom_interface:
  1959     102B  3400               	retlw	0
  1960     102C  3400               	retlw	0
  1961     102D  3400               	retlw	0
  1962     102E  3400               	retlw	0
  1963     102F  3400               	retlw	0
  1964     1030  3400               	retlw	0
  1965     1031  3400               	retlw	0
  1966     1032  3400               	retlw	0
  1967     1033  3400               	retlw	0
  1968     1034  3400               	retlw	0
  1969     1035  3400               	retlw	0
  1970     1036  3400               	retlw	0
  1971     1037  3400               	retlw	0
  1972     1038  3400               	retlw	0
  1973     1039                     __end_of_eeprom_interface:
  1974                           
  1975                           	psect	stringtext4
  1976     1051                     __pstringtext4:
  1977     1051                     _acceleration_squared_threshold:
  1978     1051  34B0               	retlw	176
  1979     1052  3404               	retlw	4
  1980     1053                     __end_of_acceleration_squared_threshold:
  1981                           
  1982                           	psect	stringtext5
  1983     1039                     __pstringtext5:
  1984     1039                     _ADXL345_init_settings:
  1985     1039  3418               	retlw	24
  1986     103A  3403               	retlw	3
  1987     103B  34FF               	retlw	255
  1988     103C  347F               	retlw	127
  1989     103D  3407               	retlw	7
  1990     103E  3418               	retlw	24
  1991     103F  3400               	retlw	0
  1992     1040  3400               	retlw	0
  1993     1041  3417               	retlw	23
  1994     1042  3408               	retlw	8
  1995     1043  3404               	retlw	4
  1996     1044  3400               	retlw	0
  1997     1045                     __end_of_ADXL345_init_settings:
  1998                           
  1999                           	psect	stringtext6
  2000     1045                     __pstringtext6:
  2001     1045                     _no_motion_init:
  2002     1045  3408               	retlw	8
  2003     1046  3403               	retlw	3
  2004     1047  3402               	retlw	2
  2005     1048  34FF               	retlw	255
  2006     1049                     __end_of_no_motion_init:
  2007                           
  2008                           	psect	stringtext7
  2009     1049                     __pstringtext7:
  2010     1049                     _impact_init:
  2011     1049  3430               	retlw	48
  2012     104A  3403               	retlw	3
  2013     104B  3401               	retlw	1
  2014     104C  347F               	retlw	127
  2015     104D                     __end_of_impact_init:
  2016                           
  2017                           	psect	stringtext8
  2018     104D                     __pstringtext8:
  2019     104D                     _fall_init:
  2020     104D  3418               	retlw	24
  2021     104E  3403               	retlw	3
  2022     104F  34FF               	retlw	255
  2023     1050  347F               	retlw	127
  2024     1051                     __end_of_fall_init:
  2025                           
  2026                           	psect	nvBANK0
  2027     006C                     __pnvBANK0:
  2028     006C                     _SW1_InterruptHandler:
  2029     006C                     	ds	2
  2030     006E                     _INT_InterruptHandler:
  2031     006E                     	ds	2
  2032     000C                     _PORTAbits      set	12
  2033     000B                     _INTCONbits     set	11
  2034     0011                     _PIR1bits       set	17
  2035     0097                     _WDTCON         set	151
  2036     0098                     _OSCTUNE        set	152
  2037     0099                     _OSCCON         set	153
  2038     008E                     _TRISC          set	142
  2039     008C                     _TRISA          set	140
  2040     0095                     _OPTION_REGbits set	149
  2041     0091                     _PIE1bits       set	145
  2042     010E                     _LATCbits       set	270
  2043     0116                     _BORCON         set	278
  2044     010C                     _LATAbits       set	268
  2045     011D                     _APFCON0        set	285
  2046     010E                     _LATC           set	270
  2047     010C                     _LATA           set	268
  2048     0191                     _EEADR          set	401
  2049     0196                     _EECON2         set	406
  2050     0193                     _EEDATL         set	403
  2051     0194                     _EEDATH         set	404
  2052     0191                     _EEADRL         set	401
  2053     0192                     _EEADRH         set	402
  2054     0193                     _EEDATA         set	403
  2055     0195                     _EECON1bits     set	405
  2056     0195                     _EECON1         set	405
  2057     018E                     _ANSELC         set	398
  2058     018C                     _ANSELA         set	396
  2059     0CAD                     _LWLO           set	3245
  2060     020E                     _WPUC           set	526
  2061     020C                     _WPUA           set	524
  2062     0211                     _SSP1BUF        set	529
  2063     0215                     _SSP1CON1bits   set	533
  2064     0212                     _SSP1ADD        set	530
  2065     0217                     _SSP1CON3       set	535
  2066     0215                     _SSP1CON1       set	533
  2067     0214                     _SSP1STAT       set	532
  2068     0393                     _IOCAFbits      set	915
  2069     0393                     _IOCAF          set	915
  2070     0392                     _IOCAN          set	914
  2071     0391                     _IOCAP          set	913
  2072     038E                     _INLVLC         set	910
  2073     038C                     _INLVLA         set	908
  2074                           
  2075                           	psect	cinit
  2076     07E5                     start_initialization:	
  2077                           ; #config settings
  2078                           
  2079     07E5                     __initialization:	;BIGRAM
  2080                           
  2081                           ; Clear objects allocated to BIGRAM
  2082     07E5  30F0               	movlw	low (0+8944)
  2083     07E6  0084               	movwf	4
  2084     07E7  3022               	movlw	high (0+8944)
  2085     07E8  0085               	movwf	5
  2086     07E9  3000               	movlw	0
  2087     07EA  00FE               	movwf	btemp
  2088     07EB  3001               	movlw	1
  2089     07EC  00FF               	movwf	btemp+1
  2090     07ED  318E  26FF  3187   	fcall	clear_ram0
  2091                           
  2092                           ; Clear objects allocated to COMMON
  2093     07F0  01FC               	clrf	__pbssCOMMON& (0+127)
  2094     07F1  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  2095                           
  2096                           ; Clear objects allocated to BANK0
  2097     07F2  3055               	movlw	low __pbssBANK0
  2098     07F3  0084               	movwf	4
  2099     07F4  3000               	movlw	high __pbssBANK0
  2100     07F5  0085               	movwf	5
  2101     07F6  3017               	movlw	23
  2102     07F7  00FE               	movwf	btemp
  2103     07F8  3000               	movlw	0
  2104     07F9  00FF               	movwf	btemp+1
  2105     07FA  318E  26FF  3187   	fcall	clear_ram0
  2106     07FD                     end_of_initialization:	
  2107                           ;End of C runtime variable initialization code
  2108                           
  2109     07FD                     __end_of__initialization:
  2110     07FD  0020               	movlb	0
  2111     07FE  3184  2C9B         	ljmp	_main	;jump to C main() function
  2112                           
  2113                           	psect	bssCOMMON
  2114     007C                     __pbssCOMMON:
  2115     007C                     _unlockKeyHigh:
  2116     007C                     	ds	1
  2117     007D                     _unlockKeyLow:
  2118     007D                     	ds	1
  2119                           
  2120                           	psect	bssBANK0
  2121     0055                     __pbssBANK0:
  2122     0055                     calibrate@F2721:
  2123     0055                     	ds	12
  2124     0061                     orientation_Up@F2710:
  2125     0061                     	ds	6
  2126     0067                     _orientation_check_timer_20ms:
  2127     0067                     	ds	2
  2128     0069                     _timer_20ms:
  2129     0069                     	ds	2
  2130     006B                     _good_orientation_count:
  2131     006B                     	ds	1
  2132                           
  2133                           	psect	clrtext
  2134     0EFF                     clear_ram0:	
  2135                           ;	Called with FSR0 containing the base address, and
  2136                           ;	btemp/btemp+1 has the size to clear
  2137                           
  2138     0EFF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2139     0F00                     clrloop0:
  2140     0F00  0180               	clrf	0	;clear RAM location pointed to by FSR
  2141     0F01  3101               	addfsr 0,1
  2142     0F02  3001               	movlw	1
  2143     0F03  02FE               	subwf	btemp,f
  2144     0F04  3000               	movlw	0
  2145     0F05  3BFF               	subwfb	btemp+1,f
  2146     0F06  087F               	movf	btemp+1,w
  2147     0F07  047E               	iorwf	btemp,w
  2148     0F08  1D03               	skipz
  2149     0F09  2F00               	goto	clrloop0	;have we reached the end yet?
  2150     0F0A  3400               	retlw	0	;all done for this memory range, return
  2151                           
  2152                           	psect	cstackBANK1
  2153     00A0                     __pcstackBANK1:
  2154     00A0                     calibrate@acc_data:
  2155                           
  2156                           ; 12 bytes @ 0x0
  2157     00A0                     	ds	12
  2158     00AC                     calibrate@Z_n1g:
  2159                           
  2160                           ; 2 bytes @ 0xC
  2161     00AC                     	ds	2
  2162     00AE                     calibrate@sum_X:
  2163                           
  2164                           ; 2 bytes @ 0xE
  2165     00AE                     	ds	2
  2166     00B0                     calibrate@sum_Y:
  2167                           
  2168                           ; 2 bytes @ 0x10
  2169     00B0                     	ds	2
  2170     00B2                     calibrate@offset_0g_X:
  2171                           
  2172                           ; 2 bytes @ 0x12
  2173     00B2                     	ds	2
  2174     00B4                     calibrate@offset_0g_Y:
  2175                           
  2176                           ; 2 bytes @ 0x14
  2177     00B4                     	ds	2
  2178     00B6                     calibrate@offset_0g_Z:
  2179                           
  2180                           ; 2 bytes @ 0x16
  2181     00B6                     	ds	2
  2182     00B8                     calibrate@i:
  2183                           
  2184                           ; 2 bytes @ 0x18
  2185     00B8                     	ds	2
  2186     00BA                     calibrate@i_838:
  2187                           
  2188                           ; 2 bytes @ 0x1A
  2189     00BA                     	ds	2
  2190     00BC                     calibrate@sum_Z:
  2191                           
  2192                           ; 2 bytes @ 0x1C
  2193     00BC                     	ds	2
  2194     00BE                     calibrate@sum_X_avg:
  2195                           
  2196                           ; 2 bytes @ 0x1E
  2197     00BE                     	ds	2
  2198     00C0                     calibrate@sum_Y_avg:
  2199                           
  2200                           ; 2 bytes @ 0x20
  2201     00C0                     	ds	2
  2202     00C2                     calibrate@msg:
  2203                           
  2204                           ; 26 bytes @ 0x22
  2205     00C2                     	ds	26
  2206     00DC                     calibrate@sum_Z_avg:
  2207                           
  2208                           ; 2 bytes @ 0x3C
  2209     00DC                     	ds	2
  2210                           
  2211                           	psect	cstackCOMMON
  2212     0070                     __pcstackCOMMON:
  2213     0070                     ?_SPI1_Initialize:
  2214     0070                     ?_SPI1_Close:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217     0070                     ?_SPI1_BufferRead:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220     0070                     ?_SPI1_BufferWrite:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223     0070                     ?_SPI1_ByteExchange:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226     0070                     ?_SPI1_ByteWrite:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229     0070                     ?_INT_SetInterruptHandler:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232     0070                     ?_SW1_SetInterruptHandler:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235     0070                     ?_SW1_DefaultInterruptHandler:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238     0070                     ?_SW1_ISR:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241     0070                     ?_NVM_Initialize:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244     0070                     ?_WDT_Initialize:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247     0070                     ?_ADXL345_validation:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250     0070                     ?_ADXL345_init:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253     0070                     ?_EEPROM_Read:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256     0070                     ?_calibrate:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259     0070                     ?_EEPROM_Write:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262     0070                     ?_NVM_StatusClear:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265     0070                     ?_INTERRUPT_Initialize:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268     0070                     ?_PIN_MANAGER_Initialize:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271     0070                     ?_PIN_MANAGER_IOC:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274     0070                     ?_CLOCK_Initialize:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277     0070                     ?_SYSTEM_Initialize:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280     0070                     ?_ADXL345_ClearInterrupt:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283     0070                     ?_setupForFreefall:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286     0070                     ?_setupForImpact:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289     0070                     ?_setupForInactivity:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292     0070                     ?_orientation_Up:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295     0070                     ?_memset:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298     0070                     ?_memcpy:	
  2299                           ; 2 bytes @ 0x0
  2300                           
  2301     0070                     ?_main:	
  2302                           ; 2 bytes @ 0x0
  2303                           
  2304     0070                     ?___wmul:	
  2305                           ; 2 bytes @ 0x0
  2306                           
  2307     0070                     SPI1_BufferRead@bufferData:	
  2308                           ; 2 bytes @ 0x0
  2309                           
  2310     0070                     SPI1_ByteExchange@byteData:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313     0070                     SPI1_ByteWrite@byteData:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316     0070                     SPI1_BufferWrite@bufferData:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319     0070                     INT_SetInterruptHandler@InterruptHandler:	
  2320                           ; 2 bytes @ 0x0
  2321                           
  2322     0070                     SW1_SetInterruptHandler@InterruptHandler:	
  2323                           ; 2 bytes @ 0x0
  2324                           
  2325     0070                     EEPROM_Read@address:	
  2326                           ; 2 bytes @ 0x0
  2327                           
  2328     0070                     EEPROM_Write@address:	
  2329                           ; 2 bytes @ 0x0
  2330                           
  2331     0070                     ___wmul@multiplier:	
  2332                           ; 2 bytes @ 0x0
  2333                           
  2334     0070                     memcpy@d1:	
  2335                           ; 2 bytes @ 0x0
  2336                           
  2337     0070                     memset@dest:	
  2338                           ; 2 bytes @ 0x0
  2339                           
  2340     0070                     ??_SPI1_Initialize:	
  2341                           ; 2 bytes @ 0x0
  2342                           
  2343     0070                     ??_SPI1_Close:	
  2344                           ; 1 bytes @ 0x0
  2345                           
  2346     0070                     ??_SW1_DefaultInterruptHandler:	
  2347                           ; 1 bytes @ 0x0
  2348                           
  2349     0070                     ??_NVM_Initialize:	
  2350                           ; 1 bytes @ 0x0
  2351                           
  2352     0070                     ??_WDT_Initialize:	
  2353                           ; 1 bytes @ 0x0
  2354                           
  2355     0070                     ??_NVM_StatusClear:	
  2356                           ; 1 bytes @ 0x0
  2357                           
  2358     0070                     ??_CLOCK_Initialize:	
  2359                           ; 1 bytes @ 0x0
  2360                           
  2361                           
  2362                           ; 1 bytes @ 0x0
  2363     0070                     	ds	1
  2364     0071                     SPI1_BufferRead@bufferSize:
  2365     0071                     ??_SPI1_ByteExchange:	
  2366                           ; 2 bytes @ 0x1
  2367                           
  2368     0071                     ??_SPI1_ByteWrite:	
  2369                           ; 1 bytes @ 0x1
  2370                           
  2371     0071                     ??_SW1_ISR:	
  2372                           ; 1 bytes @ 0x1
  2373                           
  2374     0071                     ??_PIN_MANAGER_IOC:	
  2375                           ; 1 bytes @ 0x1
  2376                           
  2377                           
  2378                           ; 1 bytes @ 0x1
  2379     0071                     	ds	1
  2380     0072                     EEPROM_Write@data:
  2381     0072                     SPI1_BufferWrite@bufferSize:	
  2382                           ; 1 bytes @ 0x2
  2383                           
  2384     0072                     ___wmul@multiplicand:	
  2385                           ; 2 bytes @ 0x2
  2386                           
  2387     0072                     memcpy@s1:	
  2388                           ; 2 bytes @ 0x2
  2389                           
  2390     0072                     memset@c:	
  2391                           ; 2 bytes @ 0x2
  2392                           
  2393     0072                     ??_INT_SetInterruptHandler:	
  2394                           ; 2 bytes @ 0x2
  2395                           
  2396     0072                     ??_SW1_SetInterruptHandler:	
  2397                           ; 1 bytes @ 0x2
  2398                           
  2399     0072                     ??_EEPROM_Read:	
  2400                           ; 1 bytes @ 0x2
  2401                           
  2402     0072                     ??_INTERRUPT_Initialize:	
  2403                           ; 1 bytes @ 0x2
  2404                           
  2405     0072                     ??_PIN_MANAGER_Initialize:	
  2406                           ; 1 bytes @ 0x2
  2407                           
  2408     0072                     ??_SYSTEM_Initialize:	
  2409                           ; 1 bytes @ 0x2
  2410                           
  2411                           
  2412                           ; 1 bytes @ 0x2
  2413     0072                     	ds	1
  2414     0073                     EEPROM_Write@globalInterruptBitValue:
  2415     0073                     SPI1_BufferRead@bufferInputSize:	
  2416                           ; 1 bytes @ 0x3
  2417                           
  2418     0073                     ??_SPI1_BufferRead:	
  2419                           ; 2 bytes @ 0x3
  2420                           
  2421     0073                     ??_EEPROM_Write:	
  2422                           ; 1 bytes @ 0x3
  2423                           
  2424                           
  2425                           ; 1 bytes @ 0x3
  2426     0073                     	ds	1
  2427     0074                     SPI1_BufferWrite@bufferInputSize:
  2428     0074                     ___wmul@product:	
  2429                           ; 2 bytes @ 0x4
  2430                           
  2431     0074                     memcpy@n:	
  2432                           ; 2 bytes @ 0x4
  2433                           
  2434     0074                     memset@n:	
  2435                           ; 2 bytes @ 0x4
  2436                           
  2437     0074                     ??_SPI1_BufferWrite:	
  2438                           ; 2 bytes @ 0x4
  2439                           
  2440     0074                     ??___wmul:	
  2441                           ; 1 bytes @ 0x4
  2442                           
  2443                           
  2444                           ; 1 bytes @ 0x4
  2445     0074                     	ds	1
  2446     0075                     SPI1_BufferRead@bufferInput:
  2447                           
  2448                           ; 1 bytes @ 0x5
  2449     0075                     	ds	1
  2450     0076                     ?_SPI1_Open:
  2451     0076                     SPI1_Open@spiConfigIndex:	
  2452                           ; 1 bytes @ 0x6
  2453                           
  2454     0076                     SPI1_BufferWrite@bufferInput:	
  2455                           ; 1 bytes @ 0x6
  2456                           
  2457     0076                     memset@p:	
  2458                           ; 1 bytes @ 0x6
  2459                           
  2460     0076                     memcpy@s:	
  2461                           ; 1 bytes @ 0x6
  2462                           
  2463     0076                     ??_memset:	
  2464                           ; 2 bytes @ 0x6
  2465                           
  2466     0076                     ??_memcpy:	
  2467                           ; 1 bytes @ 0x6
  2468                           
  2469                           
  2470                           ; 1 bytes @ 0x6
  2471     0076                     	ds	1
  2472     0077                     ??_SPI1_Open:
  2473                           
  2474                           ; 1 bytes @ 0x7
  2475     0077                     	ds	1
  2476     0078                     memcpy@tmp:
  2477                           
  2478                           ; 1 bytes @ 0x8
  2479     0078                     	ds	1
  2480     0079                     SPI1_Open@returnValue:
  2481     0079                     memcpy@d:	
  2482                           ; 1 bytes @ 0x9
  2483                           
  2484                           
  2485                           ; 1 bytes @ 0x9
  2486     0079                     	ds	1
  2487     007A                     ?_saveOffsets:
  2488     007A                     ADXL345_validation@passed:	
  2489                           ; 1 bytes @ 0xA
  2490                           
  2491     007A                     saveOffsets@y_axis:	
  2492                           ; 1 bytes @ 0xA
  2493                           
  2494     007A                     ??_ADXL345_validation:	
  2495                           ; 1 bytes @ 0xA
  2496                           
  2497     007A                     ??_ADXL345_init:	
  2498                           ; 1 bytes @ 0xA
  2499                           
  2500     007A                     ??_ADXL345_ClearInterrupt:	
  2501                           ; 1 bytes @ 0xA
  2502                           
  2503     007A                     ??_setupForFreefall:	
  2504                           ; 1 bytes @ 0xA
  2505                           
  2506     007A                     ??_setupForImpact:	
  2507                           ; 1 bytes @ 0xA
  2508                           
  2509     007A                     ??_setupForInactivity:	
  2510                           ; 1 bytes @ 0xA
  2511                           
  2512     007A                     ??_orientation_Up:	
  2513                           ; 1 bytes @ 0xA
  2514                           
  2515                           
  2516                           ; 1 bytes @ 0xA
  2517     007A                     	ds	1
  2518     007B                     saveOffsets@z_axis:
  2519                           
  2520                           ; 1 bytes @ 0xB
  2521     007B                     	ds	1
  2522     007C                     ??_saveOffsets:
  2523                           
  2524                           	psect	cstackBANK0
  2525     0020                     __pcstackBANK0:	
  2526                           ; 1 bytes @ 0xC
  2527                           
  2528     0020                     saveOffsets@x_axis:
  2529     0020                     orientation_Up@acc_data:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532     0020                     ADXL345_init@msg:	
  2533                           ; 6 bytes @ 0x0
  2534                           
  2535     0020                     setupForFreefall@msg:	
  2536                           ; 26 bytes @ 0x0
  2537                           
  2538     0020                     setupForImpact@msg:	
  2539                           ; 26 bytes @ 0x0
  2540                           
  2541     0020                     setupForInactivity@msg:	
  2542                           ; 26 bytes @ 0x0
  2543                           
  2544                           
  2545                           ; 26 bytes @ 0x0
  2546     0020                     	ds	1
  2547     0021                     saveOffsets@msg:
  2548                           
  2549                           ; 26 bytes @ 0x1
  2550     0021                     	ds	5
  2551     0026                     orientation_Up@g_magnitude:
  2552                           
  2553                           ; 2 bytes @ 0x6
  2554     0026                     	ds	2
  2555     0028                     orientation_Up@msg:
  2556                           
  2557                           ; 26 bytes @ 0x8
  2558     0028                     	ds	19
  2559     003B                     ??_calibrate:
  2560                           
  2561                           ; 1 bytes @ 0x1B
  2562     003B                     	ds	7
  2563     0042                     orientation_Up@g_deltaX:
  2564                           
  2565                           ; 2 bytes @ 0x22
  2566     0042                     	ds	2
  2567     0044                     orientation_Up@g_deltaY:
  2568                           
  2569                           ; 2 bytes @ 0x24
  2570     0044                     	ds	2
  2571     0046                     orientation_Up@g_deltaZ:
  2572                           
  2573                           ; 2 bytes @ 0x26
  2574     0046                     	ds	2
  2575     0048                     ?_MotionEventHandler:
  2576     0048                     MotionEventHandler@state:	
  2577                           ; 1 bytes @ 0x28
  2578                           
  2579                           
  2580                           ; 1 bytes @ 0x28
  2581     0048                     	ds	1
  2582     0049                     ??_MotionEventHandler:
  2583                           
  2584                           ; 1 bytes @ 0x29
  2585     0049                     	ds	2
  2586     004B                     ??_main:
  2587                           
  2588                           ; 1 bytes @ 0x2B
  2589     004B                     	ds	2
  2590     004D                     main@X_val:
  2591                           
  2592                           ; 1 bytes @ 0x2D
  2593     004D                     	ds	1
  2594     004E                     main@Y_val:
  2595                           
  2596                           ; 1 bytes @ 0x2E
  2597     004E                     	ds	1
  2598     004F                     main@Z_val:
  2599                           
  2600                           ; 1 bytes @ 0x2F
  2601     004F                     	ds	1
  2602     0050                     main@i:
  2603                           
  2604                           ; 2 bytes @ 0x30
  2605     0050                     	ds	2
  2606     0052                     main@i_715:
  2607                           
  2608                           ; 2 bytes @ 0x32
  2609     0052                     	ds	2
  2610     0054                     main@current_state:
  2611                           
  2612                           ; 1 bytes @ 0x34
  2613     0054                     	ds	1
  2614                           
  2615                           	psect	maintext
  2616     049B                     __pmaintext:	
  2617 ;;
  2618 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2619 ;;
  2620 ;; *************** function _main *****************
  2621 ;; Defined at:
  2622 ;;		line 45 in file "main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  i               2   50[BANK0 ] int 
  2627 ;;  i               2   48[BANK0 ] int 
  2628 ;;  Z_val           1   47[BANK0 ] unsigned char 
  2629 ;;  Y_val           1   46[BANK0 ] unsigned char 
  2630 ;;  X_val           1   45[BANK0 ] unsigned char 
  2631 ;;  current_stat    1   52[BANK0 ] enum E2688
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  2  273[None  ] int 
  2634 ;; Registers used:
  2635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : B1F/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2642 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2644 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2645 ;;Total ram usage:       10 bytes
  2646 ;; Hardware stack levels required when called: 4
  2647 ;; This function calls:
  2648 ;;		_ADXL345_init
  2649 ;;		_ADXL345_validation
  2650 ;;		_EEPROM_Read
  2651 ;;		_MotionEventHandler
  2652 ;;		_PIN_MANAGER_IOC
  2653 ;;		_SPI1_Initialize
  2654 ;;		_SYSTEM_Initialize
  2655 ;;		_calibrate
  2656 ;;		_saveOffsets
  2657 ;; This function is called by:
  2658 ;;		Startup code after reset
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662     049B                     _main:	
  2663                           ;psect for function _main
  2664                           
  2665     049B                     l3120:	
  2666                           ;incstack = 0
  2667                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2668                           
  2669                           
  2670                           ;main.c: 47:     SYSTEM_Initialize();
  2671     049B  318F  2727  3184   	fcall	_SYSTEM_Initialize
  2672     049E                     l3122:
  2673                           
  2674                           ;main.c: 48:     SPI1_Initialize();
  2675     049E  318E  26DE  3184   	fcall	_SPI1_Initialize
  2676     04A1                     l3124:
  2677     04A1  0022               	movlb	2	; select bank2
  2678     04A2  160E               	bsf	14,4	;volatile
  2679     04A3                     l3126:
  2680     04A3  158E               	bsf	14,3	;volatile
  2681     04A4                     l3128:
  2682                           
  2683                           ;main.c: 53:     if (ADXL345_validation()) {
  2684     04A4  318F  2785  3184   	fcall	_ADXL345_validation
  2685     04A7  3A00               	xorlw	0
  2686     04A8  1903               	skipnz
  2687     04A9  2CAB               	goto	u1291
  2688     04AA  2CAC               	goto	u1290
  2689     04AB                     u1291:
  2690     04AB  2CBE               	goto	l284
  2691     04AC                     u1290:
  2692     04AC                     l279:	
  2693                           ;main.c: 54:         do { LATAbits.LATA4 = 1; } while(0);
  2694                           
  2695     04AC  0022               	movlb	2	; select bank2
  2696     04AD  160C               	bsf	12,4	;volatile
  2697     04AE                     l3130:
  2698                           
  2699                           ;main.c: 55:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2700     04AE  3002               	movlw	2
  2701     04AF  0020               	movlb	0	; select bank0
  2702     04B0  00CC               	movwf	??_main+1
  2703     04B1  3045               	movlw	69
  2704     04B2  00CB               	movwf	??_main
  2705     04B3  30A9               	movlw	169
  2706     04B4                     u1377:
  2707     04B4  0B89               	decfsz	9,f
  2708     04B5  2CB4               	goto	u1377
  2709     04B6  0BCB               	decfsz	??_main,f
  2710     04B7  2CB4               	goto	u1377
  2711     04B8  0BCC               	decfsz	??_main+1,f
  2712     04B9  2CB4               	goto	u1377
  2713     04BA  3200               	nop2
  2714     04BB                     l3132:
  2715     04BB  0022               	movlb	2	; select bank2
  2716     04BC  120C               	bcf	12,4	;volatile
  2717     04BD  2CCF               	goto	l3138
  2718     04BE                     l284:	
  2719                           ;main.c: 58:         do { LATAbits.LATA5 = 1; } while(0);
  2720                           
  2721     04BE  0022               	movlb	2	; select bank2
  2722     04BF  168C               	bsf	12,5	;volatile
  2723     04C0                     l3134:
  2724                           
  2725                           ;main.c: 59:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2726     04C0  3002               	movlw	2
  2727     04C1  0020               	movlb	0	; select bank0
  2728     04C2  00CC               	movwf	??_main+1
  2729     04C3  3045               	movlw	69
  2730     04C4  00CB               	movwf	??_main
  2731     04C5  30A9               	movlw	169
  2732     04C6                     u1387:
  2733     04C6  0B89               	decfsz	9,f
  2734     04C7  2CC6               	goto	u1387
  2735     04C8  0BCB               	decfsz	??_main,f
  2736     04C9  2CC6               	goto	u1387
  2737     04CA  0BCC               	decfsz	??_main+1,f
  2738     04CB  2CC6               	goto	u1387
  2739     04CC  3200               	nop2
  2740     04CD                     l3136:
  2741     04CD  0022               	movlb	2	; select bank2
  2742     04CE  128C               	bcf	12,5	;volatile
  2743     04CF                     l3138:
  2744                           
  2745                           ;main.c: 63:     ADXL345_init();
  2746     04CF  3180  20D3  3184   	fcall	_ADXL345_init
  2747     04D2                     l3140:
  2748                           
  2749                           ;main.c: 65:     if (EEPROM_Read(0x10) != 0x57) {
  2750     04D2  3010               	movlw	16
  2751     04D3  00F0               	movwf	EEPROM_Read@address
  2752     04D4  3000               	movlw	0
  2753     04D5  00F1               	movwf	EEPROM_Read@address+1
  2754     04D6  318F  270B  3184   	fcall	_EEPROM_Read
  2755     04D9  3A57               	xorlw	87
  2756     04DA  1903               	skipnz
  2757     04DB  2CDD               	goto	u1301
  2758     04DC  2CDE               	goto	u1300
  2759     04DD                     u1301:
  2760     04DD  2D0B               	goto	l288
  2761     04DE                     u1300:
  2762     04DE                     l3144:
  2763     04DE  3185  256D  3184   	fcall	_calibrate
  2764     04E1  3A00               	xorlw	0
  2765     04E2  1903               	skipnz
  2766     04E3  2CE5               	goto	u1311
  2767     04E4  2CE6               	goto	u1310
  2768     04E5                     u1311:
  2769     04E5  2CDE               	goto	l3144
  2770     04E6                     u1310:
  2771     04E6                     l3146:
  2772                           
  2773                           ;main.c: 67:         for (int i = 0; i < 3; i++) {
  2774     04E6  0020               	movlb	0	; select bank0
  2775     04E7  01D0               	clrf	main@i
  2776     04E8  01D1               	clrf	main@i+1
  2777     04E9                     l294:	
  2778                           ;main.c: 68:             do { LATAbits.LATA4 = 1; } while(0);
  2779                           
  2780     04E9  0022               	movlb	2	; select bank2
  2781     04EA  160C               	bsf	12,4	;volatile
  2782     04EB                     l296:	
  2783                           ;main.c: 69:             do { LATAbits.LATA5 = 1; } while(0);
  2784                           
  2785     04EB  168C               	bsf	12,5	;volatile
  2786     04EC                     l3152:
  2787                           
  2788                           ;main.c: 70:             _delay((unsigned long)((100)*(4000000/4000.0)));
  2789     04EC  3082               	movlw	130
  2790     04ED  0020               	movlb	0	; select bank0
  2791     04EE  00CB               	movwf	??_main
  2792     04EF  30DD               	movlw	221
  2793     04F0                     u1397:
  2794     04F0  0B89               	decfsz	9,f
  2795     04F1  2CF0               	goto	u1397
  2796     04F2  0BCB               	decfsz	??_main,f
  2797     04F3  2CF0               	goto	u1397
  2798     04F4  3200               	nop2
  2799     04F5                     l3154:
  2800     04F5  0022               	movlb	2	; select bank2
  2801     04F6  120C               	bcf	12,4	;volatile
  2802     04F7                     l3156:
  2803     04F7  128C               	bcf	12,5	;volatile
  2804     04F8                     l301:
  2805                           
  2806                           ;main.c: 73:         }
  2807     04F8  3001               	movlw	1
  2808     04F9  0020               	movlb	0	; select bank0
  2809     04FA  07D0               	addwf	main@i,f
  2810     04FB  3000               	movlw	0
  2811     04FC  3DD1               	addwfc	main@i+1,f
  2812     04FD  0851               	movf	main@i+1,w
  2813     04FE  3A80               	xorlw	128
  2814     04FF  00CB               	movwf	??_main
  2815     0500  3080               	movlw	128
  2816     0501  024B               	subwf	??_main,w
  2817     0502  1D03               	skipz
  2818     0503  2D06               	goto	u1325
  2819     0504  3003               	movlw	3
  2820     0505  0250               	subwf	main@i,w
  2821     0506                     u1325:
  2822     0506  1C03               	skipc
  2823     0507  2D09               	goto	u1321
  2824     0508  2D0A               	goto	u1320
  2825     0509                     u1321:
  2826     0509  2CE9               	goto	l294
  2827     050A                     u1320:
  2828     050A  2D34               	goto	l3180
  2829     050B                     l288:
  2830                           
  2831                           ;main.c: 75:         uint8_t X_val = ( EEADR = 0x02, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2832     050B  3000               	movlw	0
  2833     050C  0023               	movlb	3	; select bank3
  2834     050D  0092               	movwf	18	;volatile
  2835     050E  3002               	movlw	2
  2836     050F  0091               	movwf	17	;volatile
  2837     0510                     l3158:
  2838     0510  303F               	movlw	63
  2839     0511  0595               	andwf	21,f	;volsfr
  2840     0512                     l3160:
  2841     0512  1415               	bsf	21,0	;volsfr
  2842     0513                     l3162:
  2843     0513  0813               	movf	19,w	;volatile
  2844     0514  0020               	movlb	0	; select bank0
  2845     0515  00CD               	movwf	main@X_val
  2846     0516                     l3164:
  2847                           
  2848                           ;main.c: 76:         uint8_t Y_val = ( EEADR = 0x04, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2849     0516  3000               	movlw	0
  2850     0517  0023               	movlb	3	; select bank3
  2851     0518  0092               	movwf	18	;volatile
  2852     0519  3004               	movlw	4
  2853     051A  0091               	movwf	17	;volatile
  2854     051B                     l3166:
  2855     051B  303F               	movlw	63
  2856     051C  0595               	andwf	21,f	;volsfr
  2857     051D                     l3168:
  2858     051D  1415               	bsf	21,0	;volsfr
  2859     051E  0813               	movf	19,w	;volatile
  2860     051F  0020               	movlb	0	; select bank0
  2861     0520  00CE               	movwf	main@Y_val
  2862     0521                     l3170:
  2863                           
  2864                           ;main.c: 77:         uint8_t Z_val = ( EEADR = 0x06, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2865     0521  3000               	movlw	0
  2866     0522  0023               	movlb	3	; select bank3
  2867     0523  0092               	movwf	18	;volatile
  2868     0524  3006               	movlw	6
  2869     0525  0091               	movwf	17	;volatile
  2870     0526                     l3172:
  2871     0526  303F               	movlw	63
  2872     0527  0595               	andwf	21,f	;volsfr
  2873     0528                     l3174:
  2874     0528  1415               	bsf	21,0	;volsfr
  2875     0529                     l3176:
  2876     0529  0813               	movf	19,w	;volatile
  2877     052A  0020               	movlb	0	; select bank0
  2878     052B  00CF               	movwf	main@Z_val
  2879     052C                     l3178:
  2880                           
  2881                           ;main.c: 78:         saveOffsets(X_val, Y_val, Z_val);
  2882     052C  084E               	movf	main@Y_val,w
  2883     052D  00FA               	movwf	saveOffsets@y_axis
  2884     052E  084F               	movf	main@Z_val,w
  2885     052F  00FB               	movwf	saveOffsets@z_axis
  2886     0530  084D               	movf	main@X_val,w
  2887     0531  3180  2075  3184   	fcall	_saveOffsets
  2888     0534                     l3180:
  2889                           
  2890                           ;main.c: 82:     State_t current_state = WAITING_FOR_FREEFALL;
  2891     0534  0020               	movlb	0	; select bank0
  2892     0535  01D4               	clrf	main@current_state
  2893     0536                     l3182:
  2894                           
  2895                           ;main.c: 85:     {;main.c: 86:         PIN_MANAGER_IOC();
  2896     0536  318E  26D5  3184   	fcall	_PIN_MANAGER_IOC
  2897     0539                     l3184:
  2898                           
  2899                           ;main.c: 87:         MotionEventHandler(&current_state);
  2900     0539  3054               	movlw	(low (main@current_state| 0))& (0+255)
  2901     053A  0020               	movlb	0	; select bank0
  2902     053B  00C8               	movwf	MotionEventHandler@state
  2903     053C  3181  21A2  3184   	fcall	_MotionEventHandler
  2904     053F                     l3186:
  2905                           
  2906                           ;main.c: 88:         if (current_state == FALL_DETECTED) {
  2907     053F  3004               	movlw	4
  2908     0540  0020               	movlb	0	; select bank0
  2909     0541  0654               	xorwf	main@current_state,w
  2910     0542  1D03               	btfss	3,2
  2911     0543  2D45               	goto	u1331
  2912     0544  2D46               	goto	u1330
  2913     0545                     u1331:
  2914     0545  2D68               	goto	l304
  2915     0546                     u1330:
  2916     0546                     l3188:
  2917                           
  2918                           ;main.c: 89:             current_state = WAITING_FOR_FREEFALL;
  2919     0546  01D4               	clrf	main@current_state
  2920                           
  2921                           ;main.c: 90:             for (int i = 0; i < 3; i++) {
  2922     0547  01D2               	clrf	main@i_715
  2923     0548  01D3               	clrf	main@i_715+1
  2924     0549                     l307:	
  2925                           ;main.c: 91:                 do { LATAbits.LATA4 = 1; } while(0);
  2926                           
  2927     0549  0022               	movlb	2	; select bank2
  2928     054A  160C               	bsf	12,4	;volatile
  2929     054B                     l3194:
  2930                           
  2931                           ;main.c: 92:                 _delay((unsigned long)((100)*(4000000/4000.0)));
  2932     054B  3082               	movlw	130
  2933     054C  0020               	movlb	0	; select bank0
  2934     054D  00CB               	movwf	??_main
  2935     054E  30DD               	movlw	221
  2936     054F                     u1407:
  2937     054F  0B89               	decfsz	9,f
  2938     0550  2D4F               	goto	u1407
  2939     0551  0BCB               	decfsz	??_main,f
  2940     0552  2D4F               	goto	u1407
  2941     0553  3200               	nop2
  2942     0554                     l3196:
  2943     0554  0022               	movlb	2	; select bank2
  2944     0555  120C               	bcf	12,4	;volatile
  2945     0556                     l310:
  2946                           
  2947                           ;main.c: 94:             }
  2948     0556  3001               	movlw	1
  2949     0557  0020               	movlb	0	; select bank0
  2950     0558  07D2               	addwf	main@i_715,f
  2951     0559  3000               	movlw	0
  2952     055A  3DD3               	addwfc	main@i_715+1,f
  2953     055B  0853               	movf	main@i_715+1,w
  2954     055C  3A80               	xorlw	128
  2955     055D  00CB               	movwf	??_main
  2956     055E  3080               	movlw	128
  2957     055F  024B               	subwf	??_main,w
  2958     0560  1D03               	skipz
  2959     0561  2D64               	goto	u1345
  2960     0562  3003               	movlw	3
  2961     0563  0252               	subwf	main@i_715,w
  2962     0564                     u1345:
  2963     0564  1C03               	skipc
  2964     0565  2D67               	goto	u1341
  2965     0566  2D68               	goto	u1340
  2966     0567                     u1341:
  2967     0567  2D49               	goto	l307
  2968     0568                     u1340:
  2969     0568                     l304:	
  2970                           ;main.c: 95:         }
  2971                           
  2972     0568  0063               	sleep	;# 
  2973                           
  2974                           ;main.c: 97:         __nop();
  2975     0569  0000               	nop
  2976     056A  2D36               	goto	l3182
  2977     056B  3180  2802         	ljmp	start
  2978     056D                     __end_of_main:
  2979                           
  2980                           	psect	text1
  2981     056D                     __ptext1:	
  2982 ;; *************** function _calibrate *****************
  2983 ;; Defined at:
  2984 ;;		line 295 in file "ADXL345.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  i               2   26[BANK1 ] int 
  2989 ;;  i               2   24[BANK1 ] int 
  2990 ;;  msg            26   34[BANK1 ] struct Message
  2991 ;;  acc_data       12    0[BANK1 ] int [6]
  2992 ;;  sum_Z_avg       2   60[BANK1 ] int 
  2993 ;;  sum_Y_avg       2   32[BANK1 ] int 
  2994 ;;  sum_X_avg       2   30[BANK1 ] int 
  2995 ;;  sum_Z           2   28[BANK1 ] int 
  2996 ;;  offset_0g_Z     2   22[BANK1 ] int 
  2997 ;;  offset_0g_Y     2   20[BANK1 ] int 
  2998 ;;  offset_0g_X     2   18[BANK1 ] int 
  2999 ;;  sum_Y           2   16[BANK1 ] int 
  3000 ;;  sum_X           2   14[BANK1 ] int 
  3001 ;;  Z_n1g           2   12[BANK1 ] short 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      _Bool 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3012 ;;      Locals:         0       0      62       0       0       0       0       0       0       0       0       0       
      +0       0
  3013 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3014 ;;      Totals:         0       3      62       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;Total ram usage:       65 bytes
  3016 ;; Hardware stack levels used: 1
  3017 ;; Hardware stack levels required when called: 3
  3018 ;; This function calls:
  3019 ;;		_EEPROM_Write
  3020 ;;		_SPI1_BufferRead
  3021 ;;		_SPI1_BufferWrite
  3022 ;;		_SPI1_ByteWrite
  3023 ;;		_SPI1_Close
  3024 ;;		_SPI1_Open
  3025 ;;		_saveOffsets
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031     056D                     _calibrate:	
  3032                           ;psect for function _calibrate
  3033                           
  3034     056D                     l2884:	
  3035                           ;incstack = 0
  3036                           ; Regs used in _calibrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3037                           
  3038                           
  3039                           ;ADXL345.c: 296:     int offset_0g_X, offset_0g_Y, offset_0g_Z;;ADXL345.c: 297:     int 
      +                          acc_data[6] = {0};
  3040     056D  30A0               	movlw	low calibrate@acc_data
  3041     056E  0086               	movwf	6
  3042     056F  3000               	movlw	high calibrate@acc_data
  3043     0570  0087               	movwf	7
  3044     0571  300C               	movlw	12
  3045     0572  0020               	movlb	0	; select bank0
  3046     0573  00BB               	movwf	??_calibrate
  3047     0574  3000               	movlw	0
  3048     0575                     u1020:
  3049     0575  001E               	movwi fsr1++
  3050     0576  0BBB               	decfsz	??_calibrate,f
  3051     0577  2D75               	goto	u1020
  3052     0578                     l2886:
  3053                           
  3054                           ;ADXL345.c: 298:     int sum_X = 0, sum_Y = 0, sum_Z = 0;
  3055     0578  0021               	movlb	1	; select bank1
  3056     0579  01AE               	clrf	calibrate@sum_X^(0+128)
  3057     057A  01AF               	clrf	(calibrate@sum_X+1)^(0+128)
  3058     057B                     l2888:
  3059     057B  01B0               	clrf	calibrate@sum_Y^(0+128)
  3060     057C  01B1               	clrf	(calibrate@sum_Y+1)^(0+128)
  3061     057D                     l2890:
  3062     057D  01BC               	clrf	calibrate@sum_Z^(0+128)
  3063     057E  01BD               	clrf	(calibrate@sum_Z+1)^(0+128)
  3064                           
  3065                           ;ADXL345.c: 299:     int sum_X_avg, sum_Y_avg, sum_Z_avg;;ADXL345.c: 301:     while (!SP
      +                          I1_Open(ADXL345)) {
  3066     057F  2D83               	goto	l2894
  3067     0580                     l2892:
  3068                           
  3069                           ;ADXL345.c: 302:         SPI1_Close();
  3070     0580  318E  26B3  3185   	fcall	_SPI1_Close
  3071     0583                     l2894:
  3072                           
  3073                           ;ADXL345.c: 301:     while (!SPI1_Open(ADXL345)) {
  3074     0583  01F6               	clrf	SPI1_Open@spiConfigIndex
  3075     0584  3181  2136  3185   	fcall	_SPI1_Open
  3076     0587  3A00               	xorlw	0
  3077     0588  1903               	skipnz
  3078     0589  2D8B               	goto	u1031
  3079     058A  2D8C               	goto	u1030
  3080     058B                     u1031:
  3081     058B  2D80               	goto	l2892
  3082     058C                     u1030:
  3083     058C                     l503:
  3084                           
  3085                           ;ADXL345.c: 305:     struct Message msg;;ADXL345.c: 306:     msg.registerAddr = 0x31;
  3086     058C  3031               	movlw	49
  3087     058D  0021               	movlb	1	; select bank1
  3088     058E  00C2               	movwf	calibrate@msg^(0+128)
  3089                           
  3090                           ;ADXL345.c: 307:     msg.data[0] = 0x0C;
  3091     058F  300C               	movlw	12
  3092     0590  00C3               	movwf	(calibrate@msg^(0+128)+1)
  3093     0591                     l504:	
  3094                           ;ADXL345.c: 308:     do { LATCbits.LATC4 = 0; } while(0);
  3095                           
  3096     0591  0022               	movlb	2	; select bank2
  3097     0592  120E               	bcf	14,4	;volatile
  3098     0593                     l2896:
  3099                           
  3100                           ;ADXL345.c: 309:     SPI1_BufferWrite(&msg, 2);
  3101     0593  30C2               	movlw	low calibrate@msg
  3102     0594  00F0               	movwf	SPI1_BufferWrite@bufferData
  3103     0595  3000               	movlw	high calibrate@msg
  3104     0596  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  3105     0597  3002               	movlw	2
  3106     0598  00F2               	movwf	SPI1_BufferWrite@bufferSize
  3107     0599  3000               	movlw	0
  3108     059A  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  3109     059B  318F  27E0  3185   	fcall	_SPI1_BufferWrite
  3110     059E                     l2898:
  3111     059E  0022               	movlb	2	; select bank2
  3112     059F  160E               	bsf	14,4	;volatile
  3113     05A0  2DB9               	goto	l2904
  3114     05A1                     l510:	
  3115                           ;ADXL345.c: 314:         do { LATAbits.LATA4 = 1; } while(0);
  3116                           
  3117     05A1  0022               	movlb	2	; select bank2
  3118     05A2  160C               	bsf	12,4	;volatile
  3119     05A3                     l2900:
  3120                           
  3121                           ;ADXL345.c: 315:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3122     05A3  3082               	movlw	130
  3123     05A4  0020               	movlb	0	; select bank0
  3124     05A5  00BB               	movwf	??_calibrate
  3125     05A6  30DD               	movlw	221
  3126     05A7                     u1417:
  3127     05A7  0B89               	decfsz	9,f
  3128     05A8  2DA7               	goto	u1417
  3129     05A9  0BBB               	decfsz	??_calibrate,f
  3130     05AA  2DA7               	goto	u1417
  3131     05AB  3200               	nop2
  3132     05AC  0064               	clrwdt	;# 
  3133     05AD                     l2902:
  3134     05AD  0022               	movlb	2	; select bank2
  3135     05AE  120C               	bcf	12,4	;volatile
  3136     05AF                     l513:
  3137                           
  3138                           ;ADXL345.c: 318:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3139     05AF  3082               	movlw	130
  3140     05B0  0020               	movlb	0	; select bank0
  3141     05B1  00BB               	movwf	??_calibrate
  3142     05B2  30DD               	movlw	221
  3143     05B3                     u1427:
  3144     05B3  0B89               	decfsz	9,f
  3145     05B4  2DB3               	goto	u1427
  3146     05B5  0BBB               	decfsz	??_calibrate,f
  3147     05B6  2DB3               	goto	u1427
  3148     05B7  3200               	nop2
  3149     05B8  0064               	clrwdt	;# 
  3150     05B9                     l2904:
  3151                           
  3152                           ;ADXL345.c: 313:     while(!PORTAbits.RA1) {
  3153     05B9  0020               	movlb	0	; select bank0
  3154     05BA  1C8C               	btfss	12,1	;volatile
  3155     05BB  2DBD               	goto	u1041
  3156     05BC  2DBE               	goto	u1040
  3157     05BD                     u1041:
  3158     05BD  2DA1               	goto	l510
  3159     05BE                     u1040:
  3160     05BE                     l514:
  3161     05BE  0064               	clrwdt	;# 
  3162     05BF                     l2906:
  3163                           
  3164                           ;ADXL345.c: 323:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3165     05BF  3008               	movlw	8
  3166     05C0  0020               	movlb	0	; select bank0
  3167     05C1  00BC               	movwf	??_calibrate+1
  3168     05C2  309D               	movlw	157
  3169     05C3  00BB               	movwf	??_calibrate
  3170     05C4  3005               	movlw	5
  3171     05C5                     u1437:
  3172     05C5  0B89               	decfsz	9,f
  3173     05C6  2DC5               	goto	u1437
  3174     05C7  0BBB               	decfsz	??_calibrate,f
  3175     05C8  2DC5               	goto	u1437
  3176     05C9  0BBC               	decfsz	??_calibrate+1,f
  3177     05CA  2DC5               	goto	u1437
  3178     05CB  3200               	nop2
  3179     05CC  0064               	clrwdt	;# 
  3180     05CD                     l2908:
  3181                           
  3182                           ;ADXL345.c: 326:     for(int i = 0; i < 128; i++) {
  3183     05CD  0021               	movlb	1	; select bank1
  3184     05CE  01B8               	clrf	calibrate@i^(0+128)
  3185     05CF  01B9               	clrf	(calibrate@i+1)^(0+128)
  3186     05D0                     l517:	
  3187                           ;ADXL345.c: 328:         do { LATCbits.LATC4 = 0; } while(0);
  3188                           
  3189     05D0  0022               	movlb	2	; select bank2
  3190     05D1  120E               	bcf	14,4	;volatile
  3191     05D2                     l2914:
  3192                           
  3193                           ;ADXL345.c: 329:         SPI1_ByteWrite(0x32);
  3194     05D2  3032               	movlw	50
  3195     05D3  00F0               	movwf	SPI1_ByteWrite@byteData
  3196     05D4  318E  26B9  3185   	fcall	_SPI1_ByteWrite
  3197     05D7                     l2916:
  3198                           
  3199                           ;ADXL345.c: 330:         SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  3200     05D7  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3201     05D8  00F0               	movwf	SPI1_BufferRead@bufferData
  3202     05D9  300C               	movlw	12
  3203     05DA  00F1               	movwf	SPI1_BufferRead@bufferSize
  3204     05DB  3000               	movlw	0
  3205     05DC  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3206     05DD  3180  2009  3185   	fcall	_SPI1_BufferRead
  3207     05E0                     l2918:
  3208     05E0  0022               	movlb	2	; select bank2
  3209     05E1  160E               	bsf	14,4	;volatile
  3210     05E2                     l2920:
  3211                           
  3212                           ;ADXL345.c: 333:         sum_X += acc_data[1];
  3213     05E2  0021               	movlb	1	; select bank1
  3214     05E3  0822               	movf	(calibrate@acc_data^(0+128)+2),w
  3215     05E4  07AE               	addwf	calibrate@sum_X^(0+128),f
  3216     05E5  0823               	movf	((calibrate@acc_data+1)^(0+128)+2),w
  3217     05E6  3DAF               	addwfc	(calibrate@sum_X+1)^(0+128),f
  3218     05E7                     l2922:
  3219                           
  3220                           ;ADXL345.c: 334:         sum_Y += acc_data[3];
  3221     05E7  0826               	movf	(calibrate@acc_data^(0+128)+6),w
  3222     05E8  07B0               	addwf	calibrate@sum_Y^(0+128),f
  3223     05E9  0827               	movf	((calibrate@acc_data+1)^(0+128)+6),w
  3224     05EA  3DB1               	addwfc	(calibrate@sum_Y+1)^(0+128),f
  3225     05EB                     l2924:
  3226                           
  3227                           ;ADXL345.c: 335:         sum_Z += acc_data[5];
  3228     05EB  082A               	movf	(calibrate@acc_data^(0+128)+10),w
  3229     05EC  07BC               	addwf	calibrate@sum_Z^(0+128),f
  3230     05ED  082B               	movf	((calibrate@acc_data+1)^(0+128)+10),w
  3231     05EE  3DBD               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3232     05EF                     l2926:
  3233                           
  3234                           ;ADXL345.c: 337:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3235     05EF  3007               	movlw	7
  3236     05F0  0020               	movlb	0	; select bank0
  3237     05F1  00BB               	movwf	??_calibrate
  3238     05F2  307D               	movlw	125
  3239     05F3                     u1447:
  3240     05F3  0B89               	decfsz	9,f
  3241     05F4  2DF3               	goto	u1447
  3242     05F5  0BBB               	decfsz	??_calibrate,f
  3243     05F6  2DF3               	goto	u1447
  3244     05F7  0064               	clrwdt	;# 
  3245     05F8                     l2928:
  3246                           
  3247                           ;ADXL345.c: 339:     }
  3248     05F8  3001               	movlw	1
  3249     05F9  0021               	movlb	1	; select bank1
  3250     05FA  07B8               	addwf	calibrate@i^(0+128),f
  3251     05FB  3000               	movlw	0
  3252     05FC  3DB9               	addwfc	(calibrate@i+1)^(0+128),f
  3253     05FD                     l2930:
  3254     05FD  0839               	movf	(calibrate@i+1)^(0+128),w
  3255     05FE  3A80               	xorlw	128
  3256     05FF  0020               	movlb	0	; select bank0
  3257     0600  00BB               	movwf	??_calibrate
  3258     0601  3080               	movlw	128
  3259     0602  023B               	subwf	??_calibrate,w
  3260     0603  1D03               	skipz
  3261     0604  2E08               	goto	u1055
  3262     0605  3080               	movlw	128
  3263     0606  0021               	movlb	1	; select bank1
  3264     0607  0238               	subwf	calibrate@i^(0+128),w
  3265     0608                     u1055:
  3266     0608  1C03               	skipc
  3267     0609  2E0B               	goto	u1051
  3268     060A  2E0C               	goto	u1050
  3269     060B                     u1051:
  3270     060B  2DD0               	goto	l517
  3271     060C                     u1050:
  3272     060C                     l2932:
  3273                           
  3274                           ;ADXL345.c: 342:     if (sum_Z == 0) return 0;
  3275     060C  0021               	movlb	1	; select bank1
  3276     060D  083C               	movf	calibrate@sum_Z^(0+128),w
  3277     060E  043D               	iorwf	(calibrate@sum_Z+1)^(0+128),w
  3278     060F  1D03               	btfss	3,2
  3279     0610  2E12               	goto	u1061
  3280     0611  2E13               	goto	u1060
  3281     0612                     u1061:
  3282     0612  2E15               	goto	l2938
  3283     0613                     u1060:
  3284     0613                     l2934:
  3285     0613  3000               	movlw	0
  3286     0614  2FE4               	goto	l522
  3287     0615                     l2938:
  3288                           
  3289                           ;ADXL345.c: 345:     sum_X_avg = sum_X >> 7;
  3290     0615  082F               	movf	(calibrate@sum_X+1)^(0+128),w
  3291     0616  0020               	movlb	0	; select bank0
  3292     0617  00BC               	movwf	??_calibrate+1
  3293     0618  0021               	movlb	1	; select bank1
  3294     0619  082E               	movf	calibrate@sum_X^(0+128),w
  3295     061A  0020               	movlb	0	; select bank0
  3296     061B  00BB               	movwf	??_calibrate
  3297     061C  3007               	movlw	7
  3298     061D  00BD               	movwf	??_calibrate+2
  3299     061E                     u1075:
  3300     061E  0D3C               	rlf	??_calibrate+1,w
  3301     061F  0CBC               	rrf	??_calibrate+1,f
  3302     0620  0CBB               	rrf	??_calibrate,f
  3303     0621  0BBD               	decfsz	??_calibrate+2,f
  3304     0622  2E1E               	goto	u1075
  3305     0623  083B               	movf	??_calibrate,w
  3306     0624  0021               	movlb	1	; select bank1
  3307     0625  00BE               	movwf	calibrate@sum_X_avg^(0+128)
  3308     0626  0020               	movlb	0	; select bank0
  3309     0627  083C               	movf	??_calibrate+1,w
  3310     0628  0021               	movlb	1	; select bank1
  3311     0629  00BF               	movwf	(calibrate@sum_X_avg+1)^(0+128)
  3312                           
  3313                           ;ADXL345.c: 346:     sum_Y_avg = sum_Y >> 7;
  3314     062A  0831               	movf	(calibrate@sum_Y+1)^(0+128),w
  3315     062B  0020               	movlb	0	; select bank0
  3316     062C  00BC               	movwf	??_calibrate+1
  3317     062D  0021               	movlb	1	; select bank1
  3318     062E  0830               	movf	calibrate@sum_Y^(0+128),w
  3319     062F  0020               	movlb	0	; select bank0
  3320     0630  00BB               	movwf	??_calibrate
  3321     0631  3007               	movlw	7
  3322     0632  00BD               	movwf	??_calibrate+2
  3323     0633                     u1085:
  3324     0633  0D3C               	rlf	??_calibrate+1,w
  3325     0634  0CBC               	rrf	??_calibrate+1,f
  3326     0635  0CBB               	rrf	??_calibrate,f
  3327     0636  0BBD               	decfsz	??_calibrate+2,f
  3328     0637  2E33               	goto	u1085
  3329     0638  083B               	movf	??_calibrate,w
  3330     0639  0021               	movlb	1	; select bank1
  3331     063A  00C0               	movwf	calibrate@sum_Y_avg^(0+128)
  3332     063B  0020               	movlb	0	; select bank0
  3333     063C  083C               	movf	??_calibrate+1,w
  3334     063D  0021               	movlb	1	; select bank1
  3335     063E  00C1               	movwf	(calibrate@sum_Y_avg+1)^(0+128)
  3336     063F                     l2940:
  3337                           
  3338                           ;ADXL345.c: 350:     if (sum_X_avg & 0x80) {
  3339     063F  1FBE               	btfss	calibrate@sum_X_avg^(0+128),7
  3340     0640  2E42               	goto	u1091
  3341     0641  2E43               	goto	u1090
  3342     0642                     u1091:
  3343     0642  2E5B               	goto	l2948
  3344     0643                     u1090:
  3345     0643                     l2942:
  3346                           
  3347                           ;ADXL345.c: 351:         if (~(sum_X_avg) + 1 >= 0x10) return 0;
  3348     0643  093E               	comf	calibrate@sum_X_avg^(0+128),w
  3349     0644  0020               	movlb	0	; select bank0
  3350     0645  00BB               	movwf	??_calibrate
  3351     0646  0021               	movlb	1	; select bank1
  3352     0647  093F               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3353     0648  0020               	movlb	0	; select bank0
  3354     0649  00BC               	movwf	??_calibrate+1
  3355     064A  0ABB               	incf	??_calibrate,f
  3356     064B  1903               	skipnz
  3357     064C  0ABC               	incf	??_calibrate+1,f
  3358     064D  083C               	movf	??_calibrate+1,w
  3359     064E  3A80               	xorlw	128
  3360     064F  00BD               	movwf	??_calibrate+2
  3361     0650  3080               	movlw	128
  3362     0651  023D               	subwf	??_calibrate+2,w
  3363     0652  1D03               	skipz
  3364     0653  2E56               	goto	u1105
  3365     0654  3010               	movlw	16
  3366     0655  023B               	subwf	??_calibrate,w
  3367     0656                     u1105:
  3368     0656  1C03               	skipc
  3369     0657  2E59               	goto	u1101
  3370     0658  2E5A               	goto	u1100
  3371     0659                     u1101:
  3372     0659  2E6B               	goto	l525
  3373     065A                     u1100:
  3374     065A  2E13               	goto	l2934
  3375     065B                     l2948:
  3376                           
  3377                           ;ADXL345.c: 353:         if (sum_X_avg >= 0x10) return 0;
  3378     065B  083F               	movf	(calibrate@sum_X_avg+1)^(0+128),w
  3379     065C  3A80               	xorlw	128
  3380     065D  0020               	movlb	0	; select bank0
  3381     065E  00BB               	movwf	??_calibrate
  3382     065F  3080               	movlw	128
  3383     0660  023B               	subwf	??_calibrate,w
  3384     0661  1D03               	skipz
  3385     0662  2E66               	goto	u1115
  3386     0663  3010               	movlw	16
  3387     0664  0021               	movlb	1	; select bank1
  3388     0665  023E               	subwf	calibrate@sum_X_avg^(0+128),w
  3389     0666                     u1115:
  3390     0666  1C03               	skipc
  3391     0667  2E69               	goto	u1111
  3392     0668  2E6A               	goto	u1110
  3393     0669                     u1111:
  3394     0669  2E6B               	goto	l525
  3395     066A                     u1110:
  3396     066A  2E13               	goto	l2934
  3397     066B                     l525:	
  3398                           ;ADXL345.c: 354:     }
  3399                           
  3400                           
  3401                           ;ADXL345.c: 356:     if (sum_Y_avg & 0x80) {
  3402     066B  0021               	movlb	1	; select bank1
  3403     066C  1FC0               	btfss	calibrate@sum_Y_avg^(0+128),7
  3404     066D  2E6F               	goto	u1121
  3405     066E  2E70               	goto	u1120
  3406     066F                     u1121:
  3407     066F  2E88               	goto	l2960
  3408     0670                     u1120:
  3409     0670                     l2954:
  3410                           
  3411                           ;ADXL345.c: 357:         if (~(sum_Y_avg) + 1 >= 0x10) return 0;
  3412     0670  0940               	comf	calibrate@sum_Y_avg^(0+128),w
  3413     0671  0020               	movlb	0	; select bank0
  3414     0672  00BB               	movwf	??_calibrate
  3415     0673  0021               	movlb	1	; select bank1
  3416     0674  0941               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3417     0675  0020               	movlb	0	; select bank0
  3418     0676  00BC               	movwf	??_calibrate+1
  3419     0677  0ABB               	incf	??_calibrate,f
  3420     0678  1903               	skipnz
  3421     0679  0ABC               	incf	??_calibrate+1,f
  3422     067A  083C               	movf	??_calibrate+1,w
  3423     067B  3A80               	xorlw	128
  3424     067C  00BD               	movwf	??_calibrate+2
  3425     067D  3080               	movlw	128
  3426     067E  023D               	subwf	??_calibrate+2,w
  3427     067F  1D03               	skipz
  3428     0680  2E83               	goto	u1135
  3429     0681  3010               	movlw	16
  3430     0682  023B               	subwf	??_calibrate,w
  3431     0683                     u1135:
  3432     0683  1C03               	skipc
  3433     0684  2E86               	goto	u1131
  3434     0685  2E87               	goto	u1130
  3435     0686                     u1131:
  3436     0686  2E98               	goto	l2966
  3437     0687                     u1130:
  3438     0687  2E13               	goto	l2934
  3439     0688                     l2960:
  3440                           
  3441                           ;ADXL345.c: 359:         if (sum_Y_avg >= 0x10) return 0;
  3442     0688  0841               	movf	(calibrate@sum_Y_avg+1)^(0+128),w
  3443     0689  3A80               	xorlw	128
  3444     068A  0020               	movlb	0	; select bank0
  3445     068B  00BB               	movwf	??_calibrate
  3446     068C  3080               	movlw	128
  3447     068D  023B               	subwf	??_calibrate,w
  3448     068E  1D03               	skipz
  3449     068F  2E93               	goto	u1145
  3450     0690  3010               	movlw	16
  3451     0691  0021               	movlb	1	; select bank1
  3452     0692  0240               	subwf	calibrate@sum_Y_avg^(0+128),w
  3453     0693                     u1145:
  3454     0693  1C03               	skipc
  3455     0694  2E96               	goto	u1141
  3456     0695  2E97               	goto	u1140
  3457     0696                     u1141:
  3458     0696  2E98               	goto	l2966
  3459     0697                     u1140:
  3460     0697  2E13               	goto	l2934
  3461     0698                     l2966:
  3462                           
  3463                           ;ADXL345.c: 362:     offset_0g_X = -sum_X_avg;
  3464     0698  0021               	movlb	1	; select bank1
  3465     0699  093E               	comf	calibrate@sum_X_avg^(0+128),w
  3466     069A  0020               	movlb	0	; select bank0
  3467     069B  00BB               	movwf	??_calibrate
  3468     069C  0021               	movlb	1	; select bank1
  3469     069D  093F               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3470     069E  0020               	movlb	0	; select bank0
  3471     069F  00BC               	movwf	??_calibrate+1
  3472     06A0  0ABB               	incf	??_calibrate,f
  3473     06A1  1903               	skipnz
  3474     06A2  0ABC               	incf	??_calibrate+1,f
  3475     06A3  083B               	movf	??_calibrate,w
  3476     06A4  0021               	movlb	1	; select bank1
  3477     06A5  00B2               	movwf	calibrate@offset_0g_X^(0+128)
  3478     06A6  0020               	movlb	0	; select bank0
  3479     06A7  083C               	movf	??_calibrate+1,w
  3480     06A8  0021               	movlb	1	; select bank1
  3481     06A9  00B3               	movwf	(calibrate@offset_0g_X+1)^(0+128)
  3482                           
  3483                           ;ADXL345.c: 363:     offset_0g_Y = -sum_Y_avg;
  3484     06AA  0940               	comf	calibrate@sum_Y_avg^(0+128),w
  3485     06AB  0020               	movlb	0	; select bank0
  3486     06AC  00BB               	movwf	??_calibrate
  3487     06AD  0021               	movlb	1	; select bank1
  3488     06AE  0941               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3489     06AF  0020               	movlb	0	; select bank0
  3490     06B0  00BC               	movwf	??_calibrate+1
  3491     06B1  0ABB               	incf	??_calibrate,f
  3492     06B2  1903               	skipnz
  3493     06B3  0ABC               	incf	??_calibrate+1,f
  3494     06B4  083B               	movf	??_calibrate,w
  3495     06B5  0021               	movlb	1	; select bank1
  3496     06B6  00B4               	movwf	calibrate@offset_0g_Y^(0+128)
  3497     06B7  0020               	movlb	0	; select bank0
  3498     06B8  083C               	movf	??_calibrate+1,w
  3499     06B9  0021               	movlb	1	; select bank1
  3500     06BA  00B5               	movwf	(calibrate@offset_0g_Y+1)^(0+128)
  3501                           
  3502                           ;ADXL345.c: 365:     sum_Z_avg = sum_Z >> 7;
  3503     06BB  083D               	movf	(calibrate@sum_Z+1)^(0+128),w
  3504     06BC  0020               	movlb	0	; select bank0
  3505     06BD  00BC               	movwf	??_calibrate+1
  3506     06BE  0021               	movlb	1	; select bank1
  3507     06BF  083C               	movf	calibrate@sum_Z^(0+128),w
  3508     06C0  0020               	movlb	0	; select bank0
  3509     06C1  00BB               	movwf	??_calibrate
  3510     06C2  3007               	movlw	7
  3511     06C3  00BD               	movwf	??_calibrate+2
  3512     06C4                     u1155:
  3513     06C4  0D3C               	rlf	??_calibrate+1,w
  3514     06C5  0CBC               	rrf	??_calibrate+1,f
  3515     06C6  0CBB               	rrf	??_calibrate,f
  3516     06C7  0BBD               	decfsz	??_calibrate+2,f
  3517     06C8  2EC4               	goto	u1155
  3518     06C9  083B               	movf	??_calibrate,w
  3519     06CA  0021               	movlb	1	; select bank1
  3520     06CB  00DC               	movwf	calibrate@sum_Z_avg^(0+128)
  3521     06CC  0020               	movlb	0	; select bank0
  3522     06CD  083C               	movf	??_calibrate+1,w
  3523     06CE  0021               	movlb	1	; select bank1
  3524     06CF  00DD               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3525     06D0                     l2968:
  3526                           
  3527                           ;ADXL345.c: 366:     sum_Z = 0;
  3528     06D0  01BC               	clrf	calibrate@sum_Z^(0+128)
  3529     06D1  01BD               	clrf	(calibrate@sum_Z+1)^(0+128)
  3530                           
  3531                           ;ADXL345.c: 369:     while(!PORTAbits.RA1) {
  3532     06D2  2EEB               	goto	l2974
  3533     06D3                     l533:	
  3534                           ;ADXL345.c: 370:         do { LATAbits.LATA5 = 1; } while(0);
  3535                           
  3536     06D3  0022               	movlb	2	; select bank2
  3537     06D4  168C               	bsf	12,5	;volatile
  3538     06D5                     l2970:
  3539                           
  3540                           ;ADXL345.c: 371:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3541     06D5  3082               	movlw	130
  3542     06D6  0020               	movlb	0	; select bank0
  3543     06D7  00BB               	movwf	??_calibrate
  3544     06D8  30DD               	movlw	221
  3545     06D9                     u1457:
  3546     06D9  0B89               	decfsz	9,f
  3547     06DA  2ED9               	goto	u1457
  3548     06DB  0BBB               	decfsz	??_calibrate,f
  3549     06DC  2ED9               	goto	u1457
  3550     06DD  3200               	nop2
  3551     06DE  0064               	clrwdt	;# 
  3552     06DF                     l2972:
  3553     06DF  0022               	movlb	2	; select bank2
  3554     06E0  128C               	bcf	12,5	;volatile
  3555     06E1                     l536:
  3556                           
  3557                           ;ADXL345.c: 374:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3558     06E1  3082               	movlw	130
  3559     06E2  0020               	movlb	0	; select bank0
  3560     06E3  00BB               	movwf	??_calibrate
  3561     06E4  30DD               	movlw	221
  3562     06E5                     u1467:
  3563     06E5  0B89               	decfsz	9,f
  3564     06E6  2EE5               	goto	u1467
  3565     06E7  0BBB               	decfsz	??_calibrate,f
  3566     06E8  2EE5               	goto	u1467
  3567     06E9  3200               	nop2
  3568     06EA  0064               	clrwdt	;# 
  3569     06EB                     l2974:
  3570                           
  3571                           ;ADXL345.c: 369:     while(!PORTAbits.RA1) {
  3572     06EB  0020               	movlb	0	; select bank0
  3573     06EC  1C8C               	btfss	12,1	;volatile
  3574     06ED  2EEF               	goto	u1161
  3575     06EE  2EF0               	goto	u1160
  3576     06EF                     u1161:
  3577     06EF  2ED3               	goto	l533
  3578     06F0                     u1160:
  3579     06F0                     l537:
  3580     06F0  0064               	clrwdt	;# 
  3581     06F1                     l2976:
  3582                           
  3583                           ;ADXL345.c: 379:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3584     06F1  3008               	movlw	8
  3585     06F2  0020               	movlb	0	; select bank0
  3586     06F3  00BC               	movwf	??_calibrate+1
  3587     06F4  309D               	movlw	157
  3588     06F5  00BB               	movwf	??_calibrate
  3589     06F6  3005               	movlw	5
  3590     06F7                     u1477:
  3591     06F7  0B89               	decfsz	9,f
  3592     06F8  2EF7               	goto	u1477
  3593     06F9  0BBB               	decfsz	??_calibrate,f
  3594     06FA  2EF7               	goto	u1477
  3595     06FB  0BBC               	decfsz	??_calibrate+1,f
  3596     06FC  2EF7               	goto	u1477
  3597     06FD  3200               	nop2
  3598     06FE  0064               	clrwdt	;# 
  3599     06FF                     l2978:
  3600                           
  3601                           ;ADXL345.c: 382:     for(int i = 0; i < 128; i++) {
  3602     06FF  0021               	movlb	1	; select bank1
  3603     0700  01BA               	clrf	calibrate@i_838^(0+128)
  3604     0701  01BB               	clrf	(calibrate@i_838+1)^(0+128)
  3605     0702                     l2980:
  3606     0702  083B               	movf	(calibrate@i_838+1)^(0+128),w
  3607     0703  3A80               	xorlw	128
  3608     0704  0020               	movlb	0	; select bank0
  3609     0705  00BB               	movwf	??_calibrate
  3610     0706  3080               	movlw	128
  3611     0707  023B               	subwf	??_calibrate,w
  3612     0708  1D03               	skipz
  3613     0709  2F0D               	goto	u1175
  3614     070A  3080               	movlw	128
  3615     070B  0021               	movlb	1	; select bank1
  3616     070C  023A               	subwf	calibrate@i_838^(0+128),w
  3617     070D                     u1175:
  3618     070D  1C03               	skipc
  3619     070E  2F10               	goto	u1171
  3620     070F  2F11               	goto	u1170
  3621     0710                     u1171:
  3622     0710  2F12               	goto	l540
  3623     0711                     u1170:
  3624     0711  2F38               	goto	l2998
  3625     0712                     l540:	
  3626                           ;ADXL345.c: 384:         do { LATCbits.LATC4 = 0; } while(0);
  3627                           
  3628     0712  0022               	movlb	2	; select bank2
  3629     0713  120E               	bcf	14,4	;volatile
  3630     0714                     l2984:
  3631                           
  3632                           ;ADXL345.c: 385:         SPI1_ByteWrite(0x32);
  3633     0714  3032               	movlw	50
  3634     0715  00F0               	movwf	SPI1_ByteWrite@byteData
  3635     0716  318E  26B9  3185   	fcall	_SPI1_ByteWrite
  3636     0719                     l2986:
  3637                           
  3638                           ;ADXL345.c: 386:         SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  3639     0719  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3640     071A  00F0               	movwf	SPI1_BufferRead@bufferData
  3641     071B  300C               	movlw	12
  3642     071C  00F1               	movwf	SPI1_BufferRead@bufferSize
  3643     071D  3000               	movlw	0
  3644     071E  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3645     071F  3180  2009  3185   	fcall	_SPI1_BufferRead
  3646     0722                     l2988:
  3647     0722  0022               	movlb	2	; select bank2
  3648     0723  160E               	bsf	14,4	;volatile
  3649     0724                     l2990:
  3650                           
  3651                           ;ADXL345.c: 389:         sum_Z += acc_data[5];
  3652     0724  0021               	movlb	1	; select bank1
  3653     0725  082A               	movf	(calibrate@acc_data^(0+128)+10),w
  3654     0726  07BC               	addwf	calibrate@sum_Z^(0+128),f
  3655     0727  082B               	movf	((calibrate@acc_data+1)^(0+128)+10),w
  3656     0728  3DBD               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3657     0729                     l2992:
  3658                           
  3659                           ;ADXL345.c: 391:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3660     0729  3007               	movlw	7
  3661     072A  0020               	movlb	0	; select bank0
  3662     072B  00BB               	movwf	??_calibrate
  3663     072C  307D               	movlw	125
  3664     072D                     u1487:
  3665     072D  0B89               	decfsz	9,f
  3666     072E  2F2D               	goto	u1487
  3667     072F  0BBB               	decfsz	??_calibrate,f
  3668     0730  2F2D               	goto	u1487
  3669     0731  0064               	clrwdt	;# 
  3670     0732                     l2994:
  3671                           
  3672                           ;ADXL345.c: 393:     }
  3673     0732  3001               	movlw	1
  3674     0733  0021               	movlb	1	; select bank1
  3675     0734  07BA               	addwf	calibrate@i_838^(0+128),f
  3676     0735  3000               	movlw	0
  3677     0736  3DBB               	addwfc	(calibrate@i_838+1)^(0+128),f
  3678     0737  2F02               	goto	l2980
  3679     0738                     l2998:
  3680                           
  3681                           ;ADXL345.c: 395:     int16_t Z_n1g = sum_Z >> 7;
  3682     0738  0021               	movlb	1	; select bank1
  3683     0739  083D               	movf	(calibrate@sum_Z+1)^(0+128),w
  3684     073A  0020               	movlb	0	; select bank0
  3685     073B  00BC               	movwf	??_calibrate+1
  3686     073C  0021               	movlb	1	; select bank1
  3687     073D  083C               	movf	calibrate@sum_Z^(0+128),w
  3688     073E  0020               	movlb	0	; select bank0
  3689     073F  00BB               	movwf	??_calibrate
  3690     0740  3007               	movlw	7
  3691     0741  00BD               	movwf	??_calibrate+2
  3692     0742                     u1185:
  3693     0742  0D3C               	rlf	??_calibrate+1,w
  3694     0743  0CBC               	rrf	??_calibrate+1,f
  3695     0744  0CBB               	rrf	??_calibrate,f
  3696     0745  0BBD               	decfsz	??_calibrate+2,f
  3697     0746  2F42               	goto	u1185
  3698     0747  083B               	movf	??_calibrate,w
  3699     0748  0021               	movlb	1	; select bank1
  3700     0749  00AC               	movwf	calibrate@Z_n1g^(0+128)
  3701     074A  0020               	movlb	0	; select bank0
  3702     074B  083C               	movf	??_calibrate+1,w
  3703     074C  0021               	movlb	1	; select bank1
  3704     074D  00AD               	movwf	(calibrate@Z_n1g+1)^(0+128)
  3705                           
  3706                           ;ADXL345.c: 396:     sum_Z_avg = (Z_n1g + sum_Z_avg) >> 1;
  3707     074E  085C               	movf	calibrate@sum_Z_avg^(0+128),w
  3708     074F  072C               	addwf	calibrate@Z_n1g^(0+128),w
  3709     0750  0020               	movlb	0	; select bank0
  3710     0751  00BB               	movwf	??_calibrate
  3711     0752  0021               	movlb	1	; select bank1
  3712     0753  085D               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3713     0754  3D2D               	addwfc	(calibrate@Z_n1g+1)^(0+128),w
  3714     0755  0020               	movlb	0	; select bank0
  3715     0756  00BC               	movwf	??_calibrate+1
  3716     0757  0D3C               	rlf	??_calibrate+1,w
  3717     0758  0C3C               	rrf	??_calibrate+1,w
  3718     0759  0021               	movlb	1	; select bank1
  3719     075A  00DD               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3720     075B  0020               	movlb	0	; select bank0
  3721     075C  0C3B               	rrf	??_calibrate,w
  3722     075D  0021               	movlb	1	; select bank1
  3723     075E  00DC               	movwf	calibrate@sum_Z_avg^(0+128)
  3724     075F                     l3000:
  3725                           
  3726                           ;ADXL345.c: 400:     if (sum_Z_avg & 0x80) {
  3727     075F  1FDC               	btfss	calibrate@sum_Z_avg^(0+128),7
  3728     0760  2F62               	goto	u1191
  3729     0761  2F63               	goto	u1190
  3730     0762                     u1191:
  3731     0762  2F7B               	goto	l3008
  3732     0763                     u1190:
  3733     0763                     l3002:
  3734                           
  3735                           ;ADXL345.c: 401:         if (~(sum_Z_avg) + 1 >= 0x20) return 0;
  3736     0763  095C               	comf	calibrate@sum_Z_avg^(0+128),w
  3737     0764  0020               	movlb	0	; select bank0
  3738     0765  00BB               	movwf	??_calibrate
  3739     0766  0021               	movlb	1	; select bank1
  3740     0767  095D               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3741     0768  0020               	movlb	0	; select bank0
  3742     0769  00BC               	movwf	??_calibrate+1
  3743     076A  0ABB               	incf	??_calibrate,f
  3744     076B  1903               	skipnz
  3745     076C  0ABC               	incf	??_calibrate+1,f
  3746     076D  083C               	movf	??_calibrate+1,w
  3747     076E  3A80               	xorlw	128
  3748     076F  00BD               	movwf	??_calibrate+2
  3749     0770  3080               	movlw	128
  3750     0771  023D               	subwf	??_calibrate+2,w
  3751     0772  1D03               	skipz
  3752     0773  2F76               	goto	u1205
  3753     0774  3020               	movlw	32
  3754     0775  023B               	subwf	??_calibrate,w
  3755     0776                     u1205:
  3756     0776  1C03               	skipc
  3757     0777  2F79               	goto	u1201
  3758     0778  2F7A               	goto	u1200
  3759     0779                     u1201:
  3760     0779  2F8B               	goto	l3014
  3761     077A                     u1200:
  3762     077A  2E13               	goto	l2934
  3763     077B                     l3008:
  3764                           
  3765                           ;ADXL345.c: 403:         if (sum_Z_avg >= 0x20) return 0;
  3766     077B  085D               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3767     077C  3A80               	xorlw	128
  3768     077D  0020               	movlb	0	; select bank0
  3769     077E  00BB               	movwf	??_calibrate
  3770     077F  3080               	movlw	128
  3771     0780  023B               	subwf	??_calibrate,w
  3772     0781  1D03               	skipz
  3773     0782  2F86               	goto	u1215
  3774     0783  3020               	movlw	32
  3775     0784  0021               	movlb	1	; select bank1
  3776     0785  025C               	subwf	calibrate@sum_Z_avg^(0+128),w
  3777     0786                     u1215:
  3778     0786  1C03               	skipc
  3779     0787  2F89               	goto	u1211
  3780     0788  2F8A               	goto	u1210
  3781     0789                     u1211:
  3782     0789  2F8B               	goto	l3014
  3783     078A                     u1210:
  3784     078A  2E13               	goto	l2934
  3785     078B                     l3014:
  3786                           
  3787                           ;ADXL345.c: 406:     offset_0g_Z = -sum_Z_avg;
  3788     078B  0021               	movlb	1	; select bank1
  3789     078C  095C               	comf	calibrate@sum_Z_avg^(0+128),w
  3790     078D  0020               	movlb	0	; select bank0
  3791     078E  00BB               	movwf	??_calibrate
  3792     078F  0021               	movlb	1	; select bank1
  3793     0790  095D               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3794     0791  0020               	movlb	0	; select bank0
  3795     0792  00BC               	movwf	??_calibrate+1
  3796     0793  0ABB               	incf	??_calibrate,f
  3797     0794  1903               	skipnz
  3798     0795  0ABC               	incf	??_calibrate+1,f
  3799     0796  083B               	movf	??_calibrate,w
  3800     0797  0021               	movlb	1	; select bank1
  3801     0798  00B6               	movwf	calibrate@offset_0g_Z^(0+128)
  3802     0799  0020               	movlb	0	; select bank0
  3803     079A  083C               	movf	??_calibrate+1,w
  3804     079B  0021               	movlb	1	; select bank1
  3805     079C  00B7               	movwf	(calibrate@offset_0g_Z+1)^(0+128)
  3806     079D                     l3016:
  3807                           
  3808                           ;ADXL345.c: 408:     saveOffsets((uint8_t)offset_0g_X, (uint8_t)offset_0g_Y, (uint8_t)of
      +                          fset_0g_Z);
  3809     079D  0834               	movf	calibrate@offset_0g_Y^(0+128),w
  3810     079E  00FA               	movwf	saveOffsets@y_axis
  3811     079F  0836               	movf	calibrate@offset_0g_Z^(0+128),w
  3812     07A0  00FB               	movwf	saveOffsets@z_axis
  3813     07A1  0832               	movf	calibrate@offset_0g_X^(0+128),w
  3814     07A2  3180  2075  3185   	fcall	_saveOffsets
  3815     07A5                     l3018:
  3816                           
  3817                           ;ADXL345.c: 411:     EEPROM_Write(0x02, (uint8_t)offset_0g_X);
  3818     07A5  3002               	movlw	2
  3819     07A6  00F0               	movwf	EEPROM_Write@address
  3820     07A7  3000               	movlw	0
  3821     07A8  00F1               	movwf	EEPROM_Write@address+1
  3822     07A9  0021               	movlb	1	; select bank1
  3823     07AA  0832               	movf	calibrate@offset_0g_X^(0+128),w
  3824     07AB  00F2               	movwf	EEPROM_Write@data
  3825     07AC  318F  27A3  3185   	fcall	_EEPROM_Write
  3826     07AF                     l3020:
  3827                           
  3828                           ;ADXL345.c: 412:     EEPROM_Write(0x04, (uint8_t)offset_0g_Y);
  3829     07AF  3004               	movlw	4
  3830     07B0  00F0               	movwf	EEPROM_Write@address
  3831     07B1  3000               	movlw	0
  3832     07B2  00F1               	movwf	EEPROM_Write@address+1
  3833     07B3  0021               	movlb	1	; select bank1
  3834     07B4  0834               	movf	calibrate@offset_0g_Y^(0+128),w
  3835     07B5  00F2               	movwf	EEPROM_Write@data
  3836     07B6  318F  27A3  3185   	fcall	_EEPROM_Write
  3837     07B9                     l3022:
  3838                           
  3839                           ;ADXL345.c: 413:     EEPROM_Write(0x06, (uint8_t)offset_0g_Z);
  3840     07B9  3006               	movlw	6
  3841     07BA  00F0               	movwf	EEPROM_Write@address
  3842     07BB  3000               	movlw	0
  3843     07BC  00F1               	movwf	EEPROM_Write@address+1
  3844     07BD  0021               	movlb	1	; select bank1
  3845     07BE  0836               	movf	calibrate@offset_0g_Z^(0+128),w
  3846     07BF  00F2               	movwf	EEPROM_Write@data
  3847     07C0  318F  27A3  3185   	fcall	_EEPROM_Write
  3848     07C3                     l3024:
  3849                           
  3850                           ;ADXL345.c: 415:     EEPROM_Write(0x10, 0x57);
  3851     07C3  3010               	movlw	16
  3852     07C4  00F0               	movwf	EEPROM_Write@address
  3853     07C5  3000               	movlw	0
  3854     07C6  00F1               	movwf	EEPROM_Write@address+1
  3855     07C7  3057               	movlw	87
  3856     07C8  00F2               	movwf	EEPROM_Write@data
  3857     07C9  318F  27A3  3185   	fcall	_EEPROM_Write
  3858     07CC                     l3026:
  3859                           
  3860                           ;ADXL345.c: 417:     msg.registerAddr = 0x31;
  3861     07CC  3031               	movlw	49
  3862     07CD  0021               	movlb	1	; select bank1
  3863     07CE  00C2               	movwf	calibrate@msg^(0+128)
  3864     07CF                     l3028:
  3865                           
  3866                           ;ADXL345.c: 418:     msg.data[0] = 0x0B;
  3867     07CF  300B               	movlw	11
  3868     07D0  00C3               	movwf	(calibrate@msg^(0+128)+1)
  3869     07D1                     l3030:
  3870     07D1  0022               	movlb	2	; select bank2
  3871     07D2  120E               	bcf	14,4	;volatile
  3872     07D3                     l3032:
  3873                           
  3874                           ;ADXL345.c: 420:     SPI1_BufferWrite(&msg, 2);
  3875     07D3  30C2               	movlw	low calibrate@msg
  3876     07D4  00F0               	movwf	SPI1_BufferWrite@bufferData
  3877     07D5  3000               	movlw	high calibrate@msg
  3878     07D6  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  3879     07D7  3002               	movlw	2
  3880     07D8  00F2               	movwf	SPI1_BufferWrite@bufferSize
  3881     07D9  3000               	movlw	0
  3882     07DA  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  3883     07DB  318F  27E0  3185   	fcall	_SPI1_BufferWrite
  3884     07DE                     l3034:
  3885     07DE  0022               	movlb	2	; select bank2
  3886     07DF  160E               	bsf	14,4	;volatile
  3887     07E0                     l3036:
  3888                           
  3889                           ;ADXL345.c: 423:     SPI1_Close();
  3890     07E0  318E  26B3  3185   	fcall	_SPI1_Close
  3891     07E3                     l3038:
  3892                           
  3893                           ;ADXL345.c: 424:     return 1;
  3894     07E3  3001               	movlw	1
  3895     07E4                     l522:
  3896     07E4  0008               	return
  3897     07E5                     __end_of_calibrate:
  3898                           
  3899                           	psect	text2
  3900     0075                     __ptext2:	
  3901 ;; *************** function _saveOffsets *****************
  3902 ;; Defined at:
  3903 ;;		line 70 in file "ADXL345.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;  x_axis          1    wreg     unsigned char 
  3906 ;;  y_axis          1   10[COMMON] unsigned char 
  3907 ;;  z_axis          1   11[COMMON] unsigned char 
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;  x_axis          1    0[BANK0 ] unsigned char 
  3910 ;;  msg            26    1[BANK0 ] struct Message
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Totals:         2      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;Total ram usage:       29 bytes
  3925 ;; Hardware stack levels used: 1
  3926 ;; Hardware stack levels required when called: 2
  3927 ;; This function calls:
  3928 ;;		_SPI1_BufferWrite
  3929 ;;		_SPI1_Close
  3930 ;;		_SPI1_Open
  3931 ;;		_memset
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;;		_calibrate
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938     0075                     _saveOffsets:	
  3939                           ;psect for function _saveOffsets
  3940                           
  3941                           
  3942                           ;incstack = 0
  3943                           ; Regs used in _saveOffsets: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3944                           ;saveOffsets@x_axis stored from wreg
  3945     0075  0020               	movlb	0	; select bank0
  3946     0076  00A0               	movwf	saveOffsets@x_axis
  3947     0077                     l2514:
  3948                           
  3949                           ;ADXL345.c: 71:     while (!SPI1_Open(ADXL345)) {
  3950     0077  287B               	goto	l2518
  3951     0078                     l2516:
  3952                           
  3953                           ;ADXL345.c: 72:         SPI1_Close();
  3954     0078  318E  26B3  3180   	fcall	_SPI1_Close
  3955     007B                     l2518:
  3956                           
  3957                           ;ADXL345.c: 71:     while (!SPI1_Open(ADXL345)) {
  3958     007B  01F6               	clrf	SPI1_Open@spiConfigIndex
  3959     007C  3181  2136  3180   	fcall	_SPI1_Open
  3960     007F  3A00               	xorlw	0
  3961     0080  1903               	skipnz
  3962     0081  2883               	goto	u901
  3963     0082  2884               	goto	u900
  3964     0083                     u901:
  3965     0083  2878               	goto	l2516
  3966     0084                     u900:
  3967     0084                     l377:
  3968                           
  3969                           ;ADXL345.c: 75:     struct Message msg;;ADXL345.c: 76:     msg.registerAddr = 0x1E;
  3970     0084  301E               	movlw	30
  3971     0085  0020               	movlb	0	; select bank0
  3972     0086  00A1               	movwf	saveOffsets@msg
  3973     0087                     l2520:
  3974                           
  3975                           ;ADXL345.c: 77:     memset(msg.data, 0, sizeof(msg.data));
  3976     0087  3022               	movlw	low (saveOffsets@msg+1)
  3977     0088  00F0               	movwf	memset@dest
  3978     0089  3000               	movlw	high (saveOffsets@msg+1)
  3979     008A  00F1               	movwf	memset@dest+1
  3980     008B  3000               	movlw	0
  3981     008C  00F2               	movwf	memset@c
  3982     008D  00F3               	movwf	memset@c+1
  3983     008E  3019               	movlw	25
  3984     008F  00F4               	movwf	memset@n
  3985     0090  3000               	movlw	0
  3986     0091  00F5               	movwf	memset@n+1
  3987     0092  318F  273A  3180   	fcall	_memset
  3988     0095                     l2522:
  3989                           
  3990                           ;ADXL345.c: 78:     msg.data[0] = x_axis;
  3991     0095  0020               	movlb	0	; select bank0
  3992     0096  0820               	movf	saveOffsets@x_axis,w
  3993     0097  00A2               	movwf	saveOffsets@msg+1
  3994     0098                     l2524:
  3995     0098  0022               	movlb	2	; select bank2
  3996     0099  120E               	bcf	14,4	;volatile
  3997     009A                     l2526:
  3998                           
  3999                           ;ADXL345.c: 80:     SPI1_BufferWrite(&msg, 2);
  4000     009A  3021               	movlw	low saveOffsets@msg
  4001     009B  00F0               	movwf	SPI1_BufferWrite@bufferData
  4002     009C  3000               	movlw	high saveOffsets@msg
  4003     009D  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4004     009E  3002               	movlw	2
  4005     009F  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4006     00A0  3000               	movlw	0
  4007     00A1  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4008     00A2  318F  27E0  3180   	fcall	_SPI1_BufferWrite
  4009     00A5                     l2528:
  4010     00A5  0022               	movlb	2	; select bank2
  4011     00A6  160E               	bsf	14,4	;volatile
  4012     00A7                     l2530:
  4013                           
  4014                           ;ADXL345.c: 83:     msg.registerAddr = 0x1F;
  4015     00A7  301F               	movlw	31
  4016     00A8  0020               	movlb	0	; select bank0
  4017     00A9  00A1               	movwf	saveOffsets@msg
  4018                           
  4019                           ;ADXL345.c: 84:     msg.data[0] = y_axis;
  4020     00AA  087A               	movf	saveOffsets@y_axis,w
  4021     00AB  00A2               	movwf	saveOffsets@msg+1
  4022     00AC                     l2532:
  4023     00AC  0022               	movlb	2	; select bank2
  4024     00AD  120E               	bcf	14,4	;volatile
  4025     00AE                     l2534:
  4026                           
  4027                           ;ADXL345.c: 86:     SPI1_BufferWrite(&msg, 2);
  4028     00AE  3021               	movlw	low saveOffsets@msg
  4029     00AF  00F0               	movwf	SPI1_BufferWrite@bufferData
  4030     00B0  3000               	movlw	high saveOffsets@msg
  4031     00B1  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4032     00B2  3002               	movlw	2
  4033     00B3  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4034     00B4  3000               	movlw	0
  4035     00B5  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4036     00B6  318F  27E0  3180   	fcall	_SPI1_BufferWrite
  4037     00B9                     l2536:
  4038     00B9  0022               	movlb	2	; select bank2
  4039     00BA  160E               	bsf	14,4	;volatile
  4040     00BB                     l2538:
  4041                           
  4042                           ;ADXL345.c: 89:     msg.registerAddr = 0x20;
  4043     00BB  3020               	movlw	32
  4044     00BC  0020               	movlb	0	; select bank0
  4045     00BD  00A1               	movwf	saveOffsets@msg
  4046     00BE                     l2540:
  4047                           
  4048                           ;ADXL345.c: 90:     msg.data[0] = z_axis;
  4049     00BE  087B               	movf	saveOffsets@z_axis,w
  4050     00BF  00A2               	movwf	saveOffsets@msg+1
  4051     00C0                     l2542:
  4052     00C0  0022               	movlb	2	; select bank2
  4053     00C1  120E               	bcf	14,4	;volatile
  4054     00C2                     l387:
  4055                           
  4056                           ;ADXL345.c: 92:     SPI1_BufferWrite(&msg, 2);
  4057     00C2  3021               	movlw	low saveOffsets@msg
  4058     00C3  00F0               	movwf	SPI1_BufferWrite@bufferData
  4059     00C4  3000               	movlw	high saveOffsets@msg
  4060     00C5  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4061     00C6  3002               	movlw	2
  4062     00C7  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4063     00C8  3000               	movlw	0
  4064     00C9  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4065     00CA  318F  27E0  3180   	fcall	_SPI1_BufferWrite
  4066     00CD                     l2544:
  4067     00CD  0022               	movlb	2	; select bank2
  4068     00CE  160E               	bsf	14,4	;volatile
  4069     00CF                     l2546:
  4070                           
  4071                           ;ADXL345.c: 95:     SPI1_Close();
  4072     00CF  318E  26B3  3180   	fcall	_SPI1_Close
  4073     00D2                     l390:
  4074     00D2  0008               	return
  4075     00D3                     __end_of_saveOffsets:
  4076                           
  4077                           	psect	text3
  4078     0FA3                     __ptext3:	
  4079 ;; *************** function _EEPROM_Write *****************
  4080 ;; Defined at:
  4081 ;;		line 242 in file "mcc_generated_files/nvm/src/nvm.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  address         2    0[COMMON] unsigned short 
  4084 ;;  data            1    2[COMMON] unsigned char 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  globalInterr    1    3[COMMON] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;Total ram usage:        4 bytes
  4101 ;; Hardware stack levels used: 1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_calibrate
  4106 ;;		_EEPROM_ByteWrite
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110     0FA3                     _EEPROM_Write:	
  4111                           ;psect for function _EEPROM_Write
  4112                           
  4113     0FA3                     l2778:	
  4114                           ;incstack = 0
  4115                           ; Regs used in _EEPROM_Write: [wreg+status,2+status,0]
  4116                           
  4117                           
  4118                           ;mcc_generated_files/nvm/src/nvm.c: 242: void EEPROM_Write(eeprom_address_t address, eep
      +                          rom_data_t data);mcc_generated_files/nvm/src/nvm.c: 243: {;mcc_generated_files/nvm/src/n
      +                          vm.c: 245:     uint8_t globalInterruptBitValue = INTCONbits.GIE;
  4119     0FA3  0D0B               	rlf	11,w	;volatile
  4120     0FA4  0D0B               	rlf	11,w	;volatile
  4121     0FA5  3901               	andlw	1
  4122     0FA6  00F3               	movwf	EEPROM_Write@globalInterruptBitValue
  4123     0FA7                     l2780:
  4124                           
  4125                           ;mcc_generated_files/nvm/src/nvm.c: 248:     EECON1bits.CFGS = 0;
  4126     0FA7  0023               	movlb	3	; select bank3
  4127     0FA8  1315               	bcf	21,6	;volsfr
  4128     0FA9                     l2782:
  4129                           
  4130                           ;mcc_generated_files/nvm/src/nvm.c: 249:     EECON1bits.EEPGD = 0;
  4131     0FA9  1395               	bcf	21,7	;volsfr
  4132     0FAA                     l2784:
  4133                           
  4134                           ;mcc_generated_files/nvm/src/nvm.c: 252:     EECON1bits.WREN = 1;
  4135     0FAA  1515               	bsf	21,2	;volsfr
  4136     0FAB                     l2786:
  4137                           
  4138                           ;mcc_generated_files/nvm/src/nvm.c: 255:     EEADRH = (uint8_t) (address >> 8);
  4139     0FAB  0871               	movf	EEPROM_Write@address+1,w
  4140     0FAC  0092               	movwf	18	;volatile
  4141     0FAD                     l2788:
  4142                           
  4143                           ;mcc_generated_files/nvm/src/nvm.c: 256:     EEADRL = (uint8_t) address;
  4144     0FAD  0870               	movf	EEPROM_Write@address,w
  4145     0FAE  0091               	movwf	17	;volatile
  4146     0FAF                     l2790:
  4147                           
  4148                           ;mcc_generated_files/nvm/src/nvm.c: 259:     EEDATL = data;
  4149     0FAF  0872               	movf	EEPROM_Write@data,w
  4150     0FB0  0093               	movwf	19	;volatile
  4151     0FB1                     l2792:
  4152                           
  4153                           ;mcc_generated_files/nvm/src/nvm.c: 262:     INTCONbits.GIE = 0;
  4154     0FB1  138B               	bcf	11,7	;volatile
  4155     0FB2                     l2794:
  4156                           
  4157                           ;mcc_generated_files/nvm/src/nvm.c: 265:     EECON2 = unlockKeyLow;
  4158     0FB2  087D               	movf	_unlockKeyLow,w	;volatile
  4159     0FB3  0096               	movwf	22	;volsfr
  4160     0FB4                     l2796:
  4161                           
  4162                           ;mcc_generated_files/nvm/src/nvm.c: 266:     EECON2 = unlockKeyHigh;
  4163     0FB4  087C               	movf	_unlockKeyHigh,w	;volatile
  4164     0FB5  0096               	movwf	22	;volsfr
  4165     0FB6                     l2798:
  4166                           
  4167                           ;mcc_generated_files/nvm/src/nvm.c: 267:     EECON1bits.WR = 1;
  4168     0FB6  1495               	bsf	21,1	;volsfr
  4169     0FB7                     l2800:
  4170                           
  4171                           ;mcc_generated_files/nvm/src/nvm.c: 268:     __nop();
  4172     0FB7  0000               	nop
  4173     0FB8                     l2802:
  4174                           
  4175                           ;mcc_generated_files/nvm/src/nvm.c: 269:     __nop();
  4176     0FB8  0000               	nop
  4177     0FB9                     l2804:
  4178                           
  4179                           ;mcc_generated_files/nvm/src/nvm.c: 272:     INTCONbits.GIE = globalInterruptBitValue;
  4180     0FB9  0C73               	rrf	EEPROM_Write@globalInterruptBitValue,w
  4181     0FBA  1C03               	skipc
  4182     0FBB  138B               	bcf	11,7	;volatile
  4183     0FBC  1803               	skipnc
  4184     0FBD  178B               	bsf	11,7	;volatile
  4185     0FBE                     l2806:
  4186                           
  4187                           ;mcc_generated_files/nvm/src/nvm.c: 275:     EECON1bits.WREN = 0;
  4188     0FBE  0023               	movlb	3	; select bank3
  4189     0FBF  1115               	bcf	21,2	;volsfr
  4190     0FC0                     l681:
  4191     0FC0  0008               	return
  4192     0FC1                     __end_of_EEPROM_Write:
  4193                           
  4194                           	psect	text4
  4195     0F27                     __ptext4:	
  4196 ;; *************** function _SYSTEM_Initialize *****************
  4197 ;; Defined at:
  4198 ;;		line 39 in file "mcc_generated_files/system/src/system.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0, pclath, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used: 1
  4218 ;; Hardware stack levels required when called: 2
  4219 ;; This function calls:
  4220 ;;		_CLOCK_Initialize
  4221 ;;		_INTERRUPT_Initialize
  4222 ;;		_NVM_Initialize
  4223 ;;		_PIN_MANAGER_Initialize
  4224 ;;		_SPI1_Initialize
  4225 ;;		_WDT_Initialize
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231     0F27                     _SYSTEM_Initialize:	
  4232                           ;psect for function _SYSTEM_Initialize
  4233                           
  4234     0F27                     l2812:	
  4235                           ;incstack = 0
  4236                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4237                           
  4238                           
  4239                           ;mcc_generated_files/system/src/system.c: 41:     CLOCK_Initialize();
  4240     0F27  318E  26CD  318F   	fcall	_CLOCK_Initialize
  4241     0F2A                     l2814:
  4242                           
  4243                           ;mcc_generated_files/system/src/system.c: 42:     PIN_MANAGER_Initialize();
  4244     0F2A  3180  2050  318F   	fcall	_PIN_MANAGER_Initialize
  4245     0F2D                     l2816:
  4246                           
  4247                           ;mcc_generated_files/system/src/system.c: 43:     NVM_Initialize();
  4248     0F2D  318E  26BD  318F   	fcall	_NVM_Initialize
  4249     0F30                     l2818:
  4250                           
  4251                           ;mcc_generated_files/system/src/system.c: 44:     SPI1_Initialize();
  4252     0F30  318E  26DE  318F   	fcall	_SPI1_Initialize
  4253     0F33                     l2820:
  4254                           
  4255                           ;mcc_generated_files/system/src/system.c: 45:     WDT_Initialize();
  4256     0F33  3180  2005  318F   	fcall	_WDT_Initialize
  4257                           
  4258                           ;mcc_generated_files/system/src/system.c: 46:     INTERRUPT_Initialize();
  4259     0F36  318E  26E8  318F   	fcall	_INTERRUPT_Initialize
  4260     0F39                     l228:
  4261     0F39  0008               	return
  4262     0F3A                     __end_of_SYSTEM_Initialize:
  4263                           
  4264                           	psect	text5
  4265     0005                     __ptext5:	
  4266 ;; *************** function _WDT_Initialize *****************
  4267 ;; Defined at:
  4268 ;;		line 36 in file "mcc_generated_files/system/src/watchdog.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		None
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used: 1
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_SYSTEM_Initialize
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295     0005                     _WDT_Initialize:	
  4296                           ;psect for function _WDT_Initialize
  4297                           
  4298     0005                     l2512:	
  4299                           ;incstack = 0
  4300                           ; Regs used in _WDT_Initialize: []
  4301                           
  4302                           
  4303                           ;mcc_generated_files/system/src/watchdog.c: 39:     WDTCON = 0x19;
  4304     0005  3019               	movlw	25
  4305     0006  0021               	movlb	1	; select bank1
  4306     0007  0097               	movwf	23	;volatile
  4307     0008                     l233:
  4308     0008  0008               	return
  4309     0009                     __end_of_WDT_Initialize:
  4310                           
  4311                           	psect	text6
  4312     0EDE                     __ptext6:	
  4313 ;; *************** function _SPI1_Initialize *****************
  4314 ;; Defined at:
  4315 ;;		line 61 in file "mcc_generated_files/spi/src/mssp.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		status,2
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used: 1
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_SYSTEM_Initialize
  4339 ;;		_main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343     0EDE                     _SPI1_Initialize:	
  4344                           ;psect for function _SPI1_Initialize
  4345                           
  4346     0EDE                     l2474:	
  4347                           ;incstack = 0
  4348                           ; Regs used in _SPI1_Initialize: [status,2]
  4349                           
  4350                           
  4351                           ;mcc_generated_files/spi/src/mssp.c: 64:     PIE1bits.SSP1IE = 0;
  4352     0EDE  0021               	movlb	1	; select bank1
  4353     0EDF  1191               	bcf	17,3	;volatile
  4354                           
  4355                           ;mcc_generated_files/spi/src/mssp.c: 65:     PIR1bits.SSP1IF = 0;
  4356     0EE0  0020               	movlb	0	; select bank0
  4357     0EE1  1191               	bcf	17,3	;volatile
  4358     0EE2                     l2476:
  4359                           
  4360                           ;mcc_generated_files/spi/src/mssp.c: 67:     SSP1STAT = 0x00;
  4361     0EE2  0024               	movlb	4	; select bank4
  4362     0EE3  0194               	clrf	20	;volatile
  4363                           
  4364                           ;mcc_generated_files/spi/src/mssp.c: 68:     SSP1CON1 = 0x00;
  4365     0EE4  0195               	clrf	21	;volatile
  4366                           
  4367                           ;mcc_generated_files/spi/src/mssp.c: 69:     SSP1CON3 = 0x00;
  4368     0EE5  0197               	clrf	23	;volatile
  4369                           
  4370                           ;mcc_generated_files/spi/src/mssp.c: 70:     SSP1ADD = 0x00;
  4371     0EE6  0192               	clrf	18	;volatile
  4372     0EE7                     l47:
  4373     0EE7  0008               	return
  4374     0EE8                     __end_of_SPI1_Initialize:
  4375                           
  4376                           	psect	text7
  4377     0050                     __ptext7:	
  4378 ;; *************** function _PIN_MANAGER_Initialize *****************
  4379 ;; Defined at:
  4380 ;;		line 40 in file "mcc_generated_files/system/src/pins.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;Total ram usage:        0 bytes
  4399 ;; Hardware stack levels used: 1
  4400 ;; Hardware stack levels required when called: 1
  4401 ;; This function calls:
  4402 ;;		_SW1_SetInterruptHandler
  4403 ;; This function is called by:
  4404 ;;		_SYSTEM_Initialize
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408     0050                     _PIN_MANAGER_Initialize:	
  4409                           ;psect for function _PIN_MANAGER_Initialize
  4410                           
  4411     0050                     l2482:	
  4412                           ;incstack = 0
  4413                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4414                           
  4415                           
  4416                           ;mcc_generated_files/system/src/pins.c: 45:     LATA = 0x0;
  4417     0050  0022               	movlb	2	; select bank2
  4418     0051  018C               	clrf	12	;volatile
  4419     0052                     l2484:
  4420                           
  4421                           ;mcc_generated_files/system/src/pins.c: 46:     LATC = 0x18;
  4422     0052  3018               	movlw	24
  4423     0053  008E               	movwf	14	;volatile
  4424     0054                     l2486:
  4425                           
  4426                           ;mcc_generated_files/system/src/pins.c: 51:     TRISA = 0xF;
  4427     0054  300F               	movlw	15
  4428     0055  0021               	movlb	1	; select bank1
  4429     0056  008C               	movwf	12	;volatile
  4430     0057                     l2488:
  4431                           
  4432                           ;mcc_generated_files/system/src/pins.c: 52:     TRISC = 0x2;
  4433     0057  3002               	movlw	2
  4434     0058  008E               	movwf	14	;volatile
  4435                           
  4436                           ;mcc_generated_files/system/src/pins.c: 57:     ANSELA = 0x0;
  4437     0059  0023               	movlb	3	; select bank3
  4438     005A  018C               	clrf	12	;volatile
  4439                           
  4440                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELC = 0x0;
  4441     005B  018E               	clrf	14	;volatile
  4442     005C                     l2490:
  4443                           
  4444                           ;mcc_generated_files/system/src/pins.c: 63:     WPUA = 0xA;
  4445     005C  300A               	movlw	10
  4446     005D  0024               	movlb	4	; select bank4
  4447     005E  008C               	movwf	12	;volatile
  4448                           
  4449                           ;mcc_generated_files/system/src/pins.c: 64:     WPUC = 0x0;
  4450     005F  018E               	clrf	14	;volatile
  4451     0060                     l2492:
  4452                           
  4453                           ;mcc_generated_files/system/src/pins.c: 65:     OPTION_REGbits.nWPUEN = 0x0;
  4454     0060  0021               	movlb	1	; select bank1
  4455     0061  1395               	bcf	21,7	;volatile
  4456                           
  4457                           ;mcc_generated_files/system/src/pins.c: 77:     INLVLA = 0x0;
  4458     0062  0027               	movlb	7	; select bank7
  4459     0063  018C               	clrf	12	;volatile
  4460                           
  4461                           ;mcc_generated_files/system/src/pins.c: 78:     INLVLC = 0x0;
  4462     0064  018E               	clrf	14	;volatile
  4463                           
  4464                           ;mcc_generated_files/system/src/pins.c: 87:     APFCON0 = 0x0;
  4465     0065  0022               	movlb	2	; select bank2
  4466     0066  019D               	clrf	29	;volatile
  4467                           
  4468                           ;mcc_generated_files/system/src/pins.c: 92:     IOCAP = 0x0;
  4469     0067  0027               	movlb	7	; select bank7
  4470     0068  0191               	clrf	17	;volatile
  4471     0069                     l2494:
  4472                           
  4473                           ;mcc_generated_files/system/src/pins.c: 93:     IOCAN = 0x2;
  4474     0069  3002               	movlw	2
  4475     006A  0092               	movwf	18	;volatile
  4476                           
  4477                           ;mcc_generated_files/system/src/pins.c: 94:     IOCAF = 0x0;
  4478     006B  0193               	clrf	19	;volatile
  4479     006C                     l2496:
  4480                           
  4481                           ;mcc_generated_files/system/src/pins.c: 96:     SW1_SetInterruptHandler(SW1_DefaultInter
      +                          ruptHandler);
  4482     006C  306B               	movlw	low _SW1_DefaultInterruptHandler
  4483     006D  00F0               	movwf	SW1_SetInterruptHandler@InterruptHandler
  4484     006E  300F               	movlw	high _SW1_DefaultInterruptHandler
  4485     006F  00F1               	movwf	SW1_SetInterruptHandler@InterruptHandler+1
  4486     0070  318E  26C7  3180   	fcall	_SW1_SetInterruptHandler
  4487     0073                     l2498:
  4488                           
  4489                           ;mcc_generated_files/system/src/pins.c: 99:     INTCONbits.IOCIE = 1;
  4490     0073  158B               	bsf	11,3	;volatile
  4491     0074                     l187:
  4492     0074  0008               	return
  4493     0075                     __end_of_PIN_MANAGER_Initialize:
  4494                           
  4495                           	psect	text8
  4496     0EC7                     __ptext8:	
  4497 ;; *************** function _SW1_SetInterruptHandler *****************
  4498 ;; Defined at:
  4499 ;;		line 129 in file "mcc_generated_files/system/src/pins.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4502 ;;		 -> SW1_DefaultInterruptHandler(1), 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;Total ram usage:        2 bytes
  4519 ;; Hardware stack levels used: 1
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		_PIN_MANAGER_Initialize
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527     0EC7                     _SW1_SetInterruptHandler:	
  4528                           ;psect for function _SW1_SetInterruptHandler
  4529                           
  4530     0EC7                     l2442:	
  4531                           ;incstack = 0
  4532                           ; Regs used in _SW1_SetInterruptHandler: [wreg]
  4533                           
  4534                           
  4535                           ;mcc_generated_files/system/src/pins.c: 130:     SW1_InterruptHandler = InterruptHandler
      +                          ;
  4536     0EC7  0871               	movf	SW1_SetInterruptHandler@InterruptHandler+1,w
  4537     0EC8  0020               	movlb	0	; select bank0
  4538     0EC9  00ED               	movwf	_SW1_InterruptHandler+1
  4539     0ECA  0870               	movf	SW1_SetInterruptHandler@InterruptHandler,w
  4540     0ECB  00EC               	movwf	_SW1_InterruptHandler
  4541     0ECC                     l198:
  4542     0ECC  0008               	return
  4543     0ECD                     __end_of_SW1_SetInterruptHandler:
  4544                           
  4545                           	psect	text9
  4546     0EBD                     __ptext9:	
  4547 ;; *************** function _NVM_Initialize *****************
  4548 ;; Defined at:
  4549 ;;		line 42 in file "mcc_generated_files/nvm/src/nvm.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		status,2, status,0, pclath, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;Total ram usage:        0 bytes
  4568 ;; Hardware stack levels used: 1
  4569 ;; Hardware stack levels required when called: 1
  4570 ;; This function calls:
  4571 ;;		_NVM_StatusClear
  4572 ;; This function is called by:
  4573 ;;		_SYSTEM_Initialize
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577     0EBD                     _NVM_Initialize:	
  4578                           ;psect for function _NVM_Initialize
  4579                           
  4580     0EBD                     l2510:	
  4581                           ;incstack = 0
  4582                           ; Regs used in _NVM_Initialize: [status,2+status,0+pclath+cstack]
  4583                           
  4584                           
  4585                           ;mcc_generated_files/nvm/src/nvm.c: 44:     NVM_StatusClear();
  4586     0EBD  318E  26B6  318E   	fcall	_NVM_StatusClear
  4587     0EC0                     l633:
  4588     0EC0  0008               	return
  4589     0EC1                     __end_of_NVM_Initialize:
  4590                           
  4591                           	psect	text10
  4592     0EB6                     __ptext10:	
  4593 ;; *************** function _NVM_StatusClear *****************
  4594 ;; Defined at:
  4595 ;;		line 64 in file "mcc_generated_files/nvm/src/nvm.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		None
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4613 ;;Total ram usage:        0 bytes
  4614 ;; Hardware stack levels used: 1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_NVM_Initialize
  4619 ;;		_EEPROM_ByteWrite
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623     0EB6                     _NVM_StatusClear:	
  4624                           ;psect for function _NVM_StatusClear
  4625                           
  4626     0EB6                     l2472:	
  4627                           ;incstack = 0
  4628                           ; Regs used in _NVM_StatusClear: []
  4629                           
  4630                           
  4631                           ;mcc_generated_files/nvm/src/nvm.c: 66:     EECON1bits.WRERR = 0;
  4632     0EB6  0023               	movlb	3	; select bank3
  4633     0EB7  1195               	bcf	21,3	;volsfr
  4634     0EB8                     l646:
  4635     0EB8  0008               	return
  4636     0EB9                     __end_of_NVM_StatusClear:
  4637                           
  4638                           	psect	text11
  4639     0EE8                     __ptext11:	
  4640 ;; *************** function _INTERRUPT_Initialize *****************
  4641 ;; Defined at:
  4642 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;		None
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;		None
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;Total ram usage:        0 bytes
  4661 ;; Hardware stack levels used: 1
  4662 ;; Hardware stack levels required when called: 1
  4663 ;; This function calls:
  4664 ;;		_INT_SetInterruptHandler
  4665 ;; This function is called by:
  4666 ;;		_SYSTEM_Initialize
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670     0EE8                     _INTERRUPT_Initialize:	
  4671                           ;psect for function _INTERRUPT_Initialize
  4672                           
  4673     0EE8                     l2478:	
  4674                           ;incstack = 0
  4675                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4676                           
  4677                           
  4678                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  4679     0EE8  108B               	bcf	11,1	;volatile
  4680                           
  4681                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  4682     0EE9  0021               	movlb	1	; select bank1
  4683     0EEA  1715               	bsf	21,6	;volatile
  4684     0EEB                     l2480:
  4685                           
  4686                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  4687     0EEB  3000               	movlw	0
  4688     0EEC  00F0               	movwf	INT_SetInterruptHandler@InterruptHandler
  4689     0EED  3000               	movlw	0
  4690     0EEE  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  4691     0EEF  318E  26C1  318E   	fcall	_INT_SetInterruptHandler
  4692     0EF2                     l123:
  4693     0EF2  0008               	return
  4694     0EF3                     __end_of_INTERRUPT_Initialize:
  4695                           
  4696                           	psect	text12
  4697     0EC1                     __ptext12:	
  4698 ;; *************** function _INT_SetInterruptHandler *****************
  4699 ;; Defined at:
  4700 ;;		line 71 in file "mcc_generated_files/system/src/interrupt.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4703 ;;		 -> INT_DefaultInterruptHandler(1), 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;Total ram usage:        2 bytes
  4720 ;; Hardware stack levels used: 1
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_INTERRUPT_Initialize
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728     0EC1                     _INT_SetInterruptHandler:	
  4729                           ;psect for function _INT_SetInterruptHandler
  4730                           
  4731     0EC1                     l2440:	
  4732                           ;incstack = 0
  4733                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  4734                           
  4735                           
  4736                           ;mcc_generated_files/system/src/interrupt.c: 72:     INT_InterruptHandler = InterruptHan
      +                          dler;
  4737     0EC1  0871               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  4738     0EC2  0020               	movlb	0	; select bank0
  4739     0EC3  00EF               	movwf	_INT_InterruptHandler+1
  4740     0EC4  0870               	movf	INT_SetInterruptHandler@InterruptHandler,w
  4741     0EC5  00EE               	movwf	_INT_InterruptHandler
  4742     0EC6                     l133:
  4743     0EC6  0008               	return
  4744     0EC7                     __end_of_INT_SetInterruptHandler:
  4745                           
  4746                           	psect	text13
  4747     0ECD                     __ptext13:	
  4748 ;; *************** function _CLOCK_Initialize *****************
  4749 ;; Defined at:
  4750 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		status,2
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;Total ram usage:        0 bytes
  4769 ;; Hardware stack levels used: 1
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_SYSTEM_Initialize
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777     0ECD                     _CLOCK_Initialize:	
  4778                           ;psect for function _CLOCK_Initialize
  4779                           
  4780     0ECD                     l2506:	
  4781                           ;incstack = 0
  4782                           ; Regs used in _CLOCK_Initialize: [status,2]
  4783                           
  4784                           
  4785                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (13 << 0x3)
  4786     0ECD  306A               	movlw	106
  4787     0ECE  0021               	movlb	1	; select bank1
  4788     0ECF  0099               	movwf	25	;volatile
  4789     0ED0                     l2508:
  4790                           
  4791                           ;mcc_generated_files/system/src/clock.c: 44:     BORCON = (0 << 0x7);
  4792     0ED0  0022               	movlb	2	; select bank2
  4793     0ED1  0196               	clrf	22	;volatile
  4794                           
  4795                           ;mcc_generated_files/system/src/clock.c: 45:     OSCTUNE = (0 << 0x0);
  4796     0ED2  0021               	movlb	1	; select bank1
  4797     0ED3  0198               	clrf	24	;volatile
  4798     0ED4                     l213:
  4799     0ED4  0008               	return
  4800     0ED5                     __end_of_CLOCK_Initialize:
  4801                           
  4802                           	psect	text14
  4803     0ED5                     __ptext14:	
  4804 ;; *************** function _PIN_MANAGER_IOC *****************
  4805 ;; Defined at:
  4806 ;;		line 102 in file "mcc_generated_files/system/src/pins.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;		None
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, pclath, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;Total ram usage:        0 bytes
  4825 ;; Hardware stack levels used: 1
  4826 ;; Hardware stack levels required when called: 2
  4827 ;; This function calls:
  4828 ;;		_SW1_ISR
  4829 ;; This function is called by:
  4830 ;;		_main
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834     0ED5                     _PIN_MANAGER_IOC:	
  4835                           ;psect for function _PIN_MANAGER_IOC
  4836                           
  4837     0ED5                     l2808:	
  4838                           ;incstack = 0
  4839                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  4840                           
  4841                           
  4842                           ;mcc_generated_files/system/src/pins.c: 105:     if(IOCAFbits.IOCAF1 == 1)
  4843     0ED5  0027               	movlb	7	; select bank7
  4844     0ED6  1C93               	btfss	19,1	;volatile
  4845     0ED7  2ED9               	goto	u981
  4846     0ED8  2EDA               	goto	u980
  4847     0ED9                     u981:
  4848     0ED9  2EDD               	goto	l191
  4849     0EDA                     u980:
  4850     0EDA                     l2810:
  4851                           
  4852                           ;mcc_generated_files/system/src/pins.c: 106:     {;mcc_generated_files/system/src/pins.c
      +                          : 107:         SW1_ISR();
  4853     0EDA  318F  2718  318E   	fcall	_SW1_ISR
  4854     0EDD                     l191:
  4855     0EDD  0008               	return
  4856     0EDE                     __end_of_PIN_MANAGER_IOC:
  4857                           
  4858                           	psect	text15
  4859     0F18                     __ptext15:	
  4860 ;; *************** function _SW1_ISR *****************
  4861 ;; Defined at:
  4862 ;;		line 114 in file "mcc_generated_files/system/src/pins.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, pclath, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4880 ;;Total ram usage:        0 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 1
  4883 ;; This function calls:
  4884 ;;		NULL
  4885 ;;		_SW1_DefaultInterruptHandler
  4886 ;; This function is called by:
  4887 ;;		_PIN_MANAGER_IOC
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891     0F18                     _SW1_ISR:	
  4892                           ;psect for function _SW1_ISR
  4893                           
  4894     0F18                     l2500:	
  4895                           ;incstack = 0
  4896                           ; Regs used in _SW1_ISR: [wreg+status,2+status,0+pclath+cstack]
  4897                           
  4898                           
  4899                           ;mcc_generated_files/system/src/pins.c: 119:     if(SW1_InterruptHandler)
  4900     0F18  0020               	movlb	0	; select bank0
  4901     0F19  086C               	movf	_SW1_InterruptHandler,w
  4902     0F1A  046D               	iorwf	_SW1_InterruptHandler+1,w
  4903     0F1B  1903               	btfsc	3,2
  4904     0F1C  2F1E               	goto	u891
  4905     0F1D  2F1F               	goto	u890
  4906     0F1E                     u891:
  4907     0F1E  2F24               	goto	l2504
  4908     0F1F                     u890:
  4909     0F1F                     l2502:
  4910                           
  4911                           ;mcc_generated_files/system/src/pins.c: 120:     {;mcc_generated_files/system/src/pins.c
      +                          : 121:         SW1_InterruptHandler();
  4912     0F1F  086D               	movf	_SW1_InterruptHandler+1,w
  4913     0F20  008A               	movwf	10
  4914     0F21  086C               	movf	_SW1_InterruptHandler,w
  4915     0F22  000A               	callw
  4916     0F23  318F               	pagesel	$
  4917     0F24                     l2504:
  4918                           
  4919                           ;mcc_generated_files/system/src/pins.c: 123:     IOCAFbits.IOCAF1 = 0;
  4920     0F24  0027               	movlb	7	; select bank7
  4921     0F25  1093               	bcf	19,1	;volatile
  4922     0F26                     l195:
  4923     0F26  0008               	return
  4924     0F27                     __end_of_SW1_ISR:
  4925                           
  4926                           	psect	text16
  4927     0F6B                     __ptext16:	
  4928 ;; *************** function _SW1_DefaultInterruptHandler *****************
  4929 ;; Defined at:
  4930 ;;		line 136 in file "mcc_generated_files/system/src/pins.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;		None
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  1    wreg      void 
  4937 ;; Registers used:
  4938 ;;		wreg, status,0
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;Total ram usage:        1 bytes
  4949 ;; Hardware stack levels used: 1
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_PIN_MANAGER_Initialize
  4954 ;;		_SW1_ISR
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958     0F6B                     _SW1_DefaultInterruptHandler:	
  4959                           ;psect for function _SW1_DefaultInterruptHandler
  4960                           
  4961     0F6B                     l2444:	
  4962                           ;incstack = 0
  4963                           ; Regs used in _SW1_DefaultInterruptHandler: [wreg+status,0]
  4964                           
  4965                           
  4966                           ;mcc_generated_files/system/src/pins.c: 139:     _delay((unsigned long)((60)*(4000000/40
      +                          00.0)));
  4967     0F6B  304E               	movlw	78
  4968     0F6C  00F0               	movwf	??_SW1_DefaultInterruptHandler
  4969     0F6D  30EB               	movlw	235
  4970     0F6E                     u1497:
  4971     0F6E  0B89               	decfsz	9,f
  4972     0F6F  2F6E               	goto	u1497
  4973     0F70  0BF0               	decfsz	??_SW1_DefaultInterruptHandler,f
  4974     0F71  2F6E               	goto	u1497
  4975     0F72  0000               	nop
  4976     0F73                     l2446:
  4977                           
  4978                           ;mcc_generated_files/system/src/pins.c: 140:     if (PORTAbits.RA1 == 0) {
  4979     0F73  0020               	movlb	0	; select bank0
  4980     0F74  188C               	btfsc	12,1	;volatile
  4981     0F75  2F77               	goto	u841
  4982     0F76  2F78               	goto	u840
  4983     0F77                     u841:
  4984     0F77  2F84               	goto	l204
  4985     0F78                     u840:
  4986     0F78                     l2448:
  4987     0F78  1003               	clrc
  4988     0F79  0022               	movlb	2	; select bank2
  4989     0F7A  1E0C               	btfss	12,4	;volatile
  4990     0F7B  1403               	setc
  4991     0F7C  1803               	btfsc	3,0
  4992     0F7D  2F7F               	goto	u851
  4993     0F7E  2F82               	goto	u850
  4994     0F7F                     u851:
  4995     0F7F  0022               	movlb	2	; select bank2
  4996     0F80  160C               	bsf	12,4	;volatile
  4997     0F81  2F84               	goto	u864
  4998     0F82                     u850:
  4999     0F82  0022               	movlb	2	; select bank2
  5000     0F83  120C               	bcf	12,4	;volatile
  5001     0F84                     u864:
  5002     0F84                     l204:
  5003     0F84  0008               	return
  5004     0F85                     __end_of_SW1_DefaultInterruptHandler:
  5005                           
  5006                           	psect	text17
  5007     01A2                     __ptext17:	
  5008 ;; *************** function _MotionEventHandler *****************
  5009 ;; Defined at:
  5010 ;;		line 15 in file "fall.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  state           1   40[BANK0 ] PTR enum E2688
  5013 ;;		 -> main@current_state(1), 
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;		None
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  1    wreg      void 
  5018 ;; Registers used:
  5019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5025 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;Total ram usage:        3 bytes
  5030 ;; Hardware stack levels used: 1
  5031 ;; Hardware stack levels required when called: 3
  5032 ;; This function calls:
  5033 ;;		_ADXL345_ClearInterrupt
  5034 ;;		_orientation_Up
  5035 ;;		_setupForFreefall
  5036 ;;		_setupForImpact
  5037 ;;		_setupForInactivity
  5038 ;; This function is called by:
  5039 ;;		_main
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043     01A2                     _MotionEventHandler:	
  5044                           ;psect for function _MotionEventHandler
  5045                           
  5046     01A2                     l3042:	
  5047                           ;incstack = 0
  5048                           ; Regs used in _MotionEventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5049                           
  5050                           
  5051                           ;fall.c: 16:     timer_20ms++;
  5052     01A2  3001               	movlw	1
  5053     01A3  0020               	movlb	0	; select bank0
  5054     01A4  07E9               	addwf	_timer_20ms,f
  5055     01A5  3000               	movlw	0
  5056     01A6  3DEA               	addwfc	_timer_20ms+1,f
  5057                           
  5058                           ;fall.c: 17:     orientation_check_timer_20ms++;
  5059     01A7  3001               	movlw	1
  5060     01A8  07E7               	addwf	_orientation_check_timer_20ms,f
  5061     01A9  3000               	movlw	0
  5062     01AA  3DE8               	addwfc	_orientation_check_timer_20ms+1,f
  5063                           
  5064                           ;fall.c: 19:     switch (*state) {
  5065     01AB  2A13               	goto	l3106
  5066     01AC                     l577:	
  5067                           ;fall.c: 20:         case WAITING_FOR_FREEFALL:
  5068                           
  5069                           
  5070                           ;fall.c: 22:             if (PORTAbits.RA2) {
  5071     01AC  1D0C               	btfss	12,2	;volatile
  5072     01AD  29AF               	goto	u1221
  5073     01AE  29B0               	goto	u1220
  5074     01AF                     u1221:
  5075     01AF  2A2F               	goto	l606
  5076     01B0                     u1220:
  5077     01B0                     l3044:
  5078                           
  5079                           ;fall.c: 23:                 setupForImpact();
  5080     01B0  3182  22C7  3181   	fcall	_setupForImpact
  5081     01B3                     l3046:
  5082                           
  5083                           ;fall.c: 24:                 timer_20ms = 0;
  5084     01B3  0020               	movlb	0	; select bank0
  5085     01B4  01E9               	clrf	_timer_20ms
  5086     01B5  01EA               	clrf	_timer_20ms+1
  5087     01B6                     l3048:
  5088                           
  5089                           ;fall.c: 25:                 *state = WAITING_FOR_IMPACT;
  5090     01B6  0848               	movf	MotionEventHandler@state,w
  5091     01B7  0086               	movwf	6
  5092     01B8  0187               	clrf	7
  5093     01B9  3001               	movlw	1
  5094     01BA  0081               	movwf	1
  5095     01BB  2A2F               	goto	l606
  5096     01BC                     l580:	
  5097                           ;fall.c: 29:         case WAITING_FOR_IMPACT:
  5098                           
  5099                           
  5100                           ;fall.c: 31:             if (PORTAbits.RA2) {
  5101     01BC  1D0C               	btfss	12,2	;volatile
  5102     01BD  29BF               	goto	u1231
  5103     01BE  29C0               	goto	u1230
  5104     01BF                     u1231:
  5105     01BF  29CA               	goto	l3054
  5106     01C0                     u1230:
  5107     01C0                     l3050:
  5108                           
  5109                           ;fall.c: 32:                 setupForInactivity();
  5110     01C0  3183  235E  3181   	fcall	_setupForInactivity
  5111     01C3                     l3052:
  5112                           
  5113                           ;fall.c: 33:                 *state = WAITING_FOR_INACTIVITY;
  5114     01C3  0020               	movlb	0	; select bank0
  5115     01C4  0848               	movf	MotionEventHandler@state,w
  5116     01C5  0086               	movwf	6
  5117     01C6  0187               	clrf	7
  5118     01C7  3002               	movlw	2
  5119     01C8  0081               	movwf	1
  5120                           
  5121                           ;fall.c: 34:             }
  5122     01C9  2A2F               	goto	l606
  5123     01CA                     l3054:
  5124     01CA  3000               	movlw	0
  5125     01CB  026A               	subwf	_timer_20ms+1,w
  5126     01CC  3019               	movlw	25
  5127     01CD  1903               	skipnz
  5128     01CE  0269               	subwf	_timer_20ms,w
  5129     01CF  1C03               	skipc
  5130     01D0  29D2               	goto	u1241
  5131     01D1  29D3               	goto	u1240
  5132     01D2                     u1241:
  5133     01D2  2A2F               	goto	l606
  5134     01D3                     u1240:
  5135     01D3                     l3056:
  5136                           
  5137                           ;fall.c: 37:                 setupForFreefall();
  5138     01D3  3182  2230  3181   	fcall	_setupForFreefall
  5139     01D6                     l3058:
  5140                           
  5141                           ;fall.c: 38:                 *state = WAITING_FOR_FREEFALL;
  5142     01D6  0020               	movlb	0	; select bank0
  5143     01D7  0848               	movf	MotionEventHandler@state,w
  5144     01D8  0086               	movwf	6
  5145     01D9  0187               	clrf	7
  5146     01DA  0181               	clrf	1
  5147     01DB  2A2F               	goto	l606
  5148     01DC                     l584:	
  5149                           ;fall.c: 42:         case WAITING_FOR_INACTIVITY:
  5150                           
  5151                           
  5152                           ;fall.c: 44:             if (PORTAbits.RA2) {
  5153     01DC  1D0C               	btfss	12,2	;volatile
  5154     01DD  29DF               	goto	u1251
  5155     01DE  29E0               	goto	u1250
  5156     01DF                     u1251:
  5157     01DF  2A03               	goto	l3078
  5158     01E0                     u1250:
  5159     01E0                     l3060:
  5160                           
  5161                           ;fall.c: 45:                 if (!orientation_Up()) {
  5162     01E0  3183  23F5  3181   	fcall	_orientation_Up
  5163     01E3  3A00               	xorlw	0
  5164     01E4  1D03               	skipz
  5165     01E5  29E7               	goto	u1261
  5166     01E6  29E8               	goto	u1260
  5167     01E7                     u1261:
  5168     01E7  29D3               	goto	l3056
  5169     01E8                     u1260:
  5170     01E8                     l587:	
  5171                           ;fall.c: 46:                     do { LATAbits.LATA5 = 1; } while(0);
  5172                           
  5173     01E8  0022               	movlb	2	; select bank2
  5174     01E9  168C               	bsf	12,5	;volatile
  5175     01EA                     l3062:
  5176                           
  5177                           ;fall.c: 47:                     _delay((unsigned long)((100)*(4000000/4000.0)));
  5178     01EA  3082               	movlw	130
  5179     01EB  0020               	movlb	0	; select bank0
  5180     01EC  00C9               	movwf	??_MotionEventHandler
  5181     01ED  30DD               	movlw	221
  5182     01EE                     u1507:
  5183     01EE  0B89               	decfsz	9,f
  5184     01EF  29EE               	goto	u1507
  5185     01F0  0BC9               	decfsz	??_MotionEventHandler,f
  5186     01F1  29EE               	goto	u1507
  5187     01F2  3200               	nop2
  5188     01F3                     l3064:
  5189     01F3  0022               	movlb	2	; select bank2
  5190     01F4  128C               	bcf	12,5	;volatile
  5191     01F5                     l3066:
  5192                           
  5193                           ;fall.c: 49:                     orientation_check_timer_20ms = 0;
  5194     01F5  0020               	movlb	0	; select bank0
  5195     01F6  01E7               	clrf	_orientation_check_timer_20ms
  5196     01F7  01E8               	clrf	_orientation_check_timer_20ms+1
  5197     01F8                     l3068:
  5198                           
  5199                           ;fall.c: 50:                     good_orientation_count = 0;
  5200     01F8  01EB               	clrf	_good_orientation_count
  5201     01F9                     l3070:
  5202                           
  5203                           ;fall.c: 51:                     ADXL345_ClearInterrupt();
  5204     01F9  318F  2751  3181   	fcall	_ADXL345_ClearInterrupt
  5205     01FC                     l3072:
  5206                           
  5207                           ;fall.c: 52:                     *state = WAITING_FOR_TIMEOUT;
  5208     01FC  0020               	movlb	0	; select bank0
  5209     01FD  0848               	movf	MotionEventHandler@state,w
  5210     01FE  0086               	movwf	6
  5211     01FF  0187               	clrf	7
  5212     0200  3003               	movlw	3
  5213     0201  0081               	movwf	1
  5214                           
  5215                           ;fall.c: 53:                 } else {
  5216     0202  2A2F               	goto	l606
  5217     0203                     l3078:
  5218     0203  3000               	movlw	0
  5219     0204  026A               	subwf	_timer_20ms+1,w
  5220     0205  30E1               	movlw	225
  5221     0206  1903               	skipnz
  5222     0207  0269               	subwf	_timer_20ms,w
  5223     0208  1C03               	skipc
  5224     0209  2A0B               	goto	u1271
  5225     020A  2A0C               	goto	u1270
  5226     020B                     u1271:
  5227     020B  2A2F               	goto	l606
  5228     020C                     u1270:
  5229     020C  29D3               	goto	l3056
  5230     020D                     l3084:
  5231                           
  5232                           ;fall.c: 68:                 *state = FALL_DETECTED;
  5233     020D  0848               	movf	MotionEventHandler@state,w
  5234     020E  0086               	movwf	6
  5235     020F  0187               	clrf	7
  5236     0210  3004               	movlw	4
  5237     0211  0081               	movwf	1
  5238                           
  5239                           ;fall.c: 69:             }
  5240     0212  2A2F               	goto	l606
  5241     0213                     l3106:
  5242     0213  0848               	movf	MotionEventHandler@state,w
  5243     0214  0086               	movwf	6
  5244     0215  0187               	clrf	7
  5245     0216  0801               	movf	1,w
  5246     0217  00C9               	movwf	??_MotionEventHandler
  5247     0218  01CA               	clrf	??_MotionEventHandler+1
  5248                           
  5249                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5250                           ; Switch size 1, requested type "simple"
  5251                           ; Number of cases is 1, Range of values is 0 to 0
  5252                           ; switch strategies available:
  5253                           ; Name         Instructions Cycles
  5254                           ; simple_byte            4     3 (average)
  5255                           ; direct_byte            8     6 (fixed)
  5256                           ; jumptable            260     6 (fixed)
  5257                           ;	Chosen strategy is simple_byte
  5258     0219  084A               	movf	??_MotionEventHandler+1,w
  5259     021A  3A00               	xorlw	0	; case 0
  5260     021B  1903               	skipnz
  5261     021C  2A1E               	goto	l3246
  5262     021D  2A2F               	goto	l606
  5263     021E                     l3246:
  5264                           
  5265                           ; Switch size 1, requested type "simple"
  5266                           ; Number of cases is 5, Range of values is 0 to 4
  5267                           ; switch strategies available:
  5268                           ; Name         Instructions Cycles
  5269                           ; direct_byte           16     6 (fixed)
  5270                           ; simple_byte           16     9 (average)
  5271                           ; jumptable            260     6 (fixed)
  5272                           ;	Chosen strategy is simple_byte
  5273     021E  0849               	movf	??_MotionEventHandler,w
  5274     021F  3A00               	xorlw	0	; case 0
  5275     0220  1903               	skipnz
  5276     0221  29AC               	goto	l577
  5277     0222  3A01               	xorlw	1	; case 1
  5278     0223  1903               	skipnz
  5279     0224  29BC               	goto	l580
  5280     0225  3A03               	xorlw	3	; case 2
  5281     0226  1903               	skipnz
  5282     0227  29DC               	goto	l584
  5283     0228  3A01               	xorlw	1	; case 3
  5284     0229  1903               	skipnz
  5285     022A  2A0D               	goto	l3084
  5286     022B  3A07               	xorlw	7	; case 4
  5287     022C  1903               	skipnz
  5288     022D  2A2F               	goto	l606
  5289     022E  2A2F               	goto	l606
  5290     022F                     l606:
  5291     022F  0008               	return
  5292     0230                     __end_of_MotionEventHandler:
  5293                           
  5294                           	psect	text18
  5295     035E                     __ptext18:	
  5296 ;; *************** function _setupForInactivity *****************
  5297 ;; Defined at:
  5298 ;;		line 207 in file "ADXL345.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;		None
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  msg            26    0[BANK0 ] struct Message
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:       26 bytes
  5317 ;; Hardware stack levels used: 1
  5318 ;; Hardware stack levels required when called: 2
  5319 ;; This function calls:
  5320 ;;		_SPI1_BufferWrite
  5321 ;;		_SPI1_ByteExchange
  5322 ;;		_SPI1_Close
  5323 ;;		_SPI1_Open
  5324 ;;		_memcpy
  5325 ;;		_memset
  5326 ;; This function is called by:
  5327 ;;		_MotionEventHandler
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331     035E                     _setupForInactivity:	
  5332                           ;psect for function _setupForInactivity
  5333                           
  5334     035E                     l2668:	
  5335                           ;incstack = 0
  5336                           ; Regs used in _setupForInactivity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5337                           
  5338                           
  5339                           ;ADXL345.c: 208:     while (!SPI1_Open(ADXL345)) {
  5340     035E  2B62               	goto	l2672
  5341     035F                     l2670:
  5342                           
  5343                           ;ADXL345.c: 209:         SPI1_Close();
  5344     035F  318E  26B3  3183   	fcall	_SPI1_Close
  5345     0362                     l2672:
  5346                           
  5347                           ;ADXL345.c: 208:     while (!SPI1_Open(ADXL345)) {
  5348     0362  01F6               	clrf	SPI1_Open@spiConfigIndex
  5349     0363  3181  2136  3183   	fcall	_SPI1_Open
  5350     0366  3A00               	xorlw	0
  5351     0367  1903               	skipnz
  5352     0368  2B6A               	goto	u941
  5353     0369  2B6B               	goto	u940
  5354     036A                     u941:
  5355     036A  2B5F               	goto	l2670
  5356     036B                     u940:
  5357     036B                     l458:	
  5358                           ;ADXL345.c: 213:     do { LATCbits.LATC4 = 0; } while(0);
  5359                           
  5360     036B  0022               	movlb	2	; select bank2
  5361     036C  120E               	bcf	14,4	;volatile
  5362     036D                     l2674:
  5363                           
  5364                           ;ADXL345.c: 214:     SPI1_ByteExchange(0x30);
  5365     036D  3030               	movlw	48
  5366     036E  00F0               	movwf	SPI1_ByteExchange@byteData
  5367     036F  318E  26F3  3183   	fcall	_SPI1_ByteExchange
  5368     0372                     l2676:
  5369     0372  0022               	movlb	2	; select bank2
  5370     0373  160E               	bsf	14,4	;volatile
  5371     0374                     l2678:
  5372                           
  5373                           ;ADXL345.c: 223:     struct Message msg;;ADXL345.c: 224:     msg.registerAddr = 0x24;
  5374     0374  3024               	movlw	36
  5375     0375  0020               	movlb	0	; select bank0
  5376     0376  00A0               	movwf	setupForInactivity@msg
  5377     0377                     l2680:
  5378                           
  5379                           ;ADXL345.c: 225:     memset(msg.data, 0, sizeof(msg.data));
  5380     0377  3021               	movlw	low (setupForInactivity@msg+1)
  5381     0378  00F0               	movwf	memset@dest
  5382     0379  3000               	movlw	high (setupForInactivity@msg+1)
  5383     037A  00F1               	movwf	memset@dest+1
  5384     037B  3000               	movlw	0
  5385     037C  00F2               	movwf	memset@c
  5386     037D  00F3               	movwf	memset@c+1
  5387     037E  3019               	movlw	25
  5388     037F  00F4               	movwf	memset@n
  5389     0380  3000               	movlw	0
  5390     0381  00F5               	movwf	memset@n+1
  5391     0382  318F  273A  3183   	fcall	_memset
  5392     0385                     l2682:
  5393                           
  5394                           ;ADXL345.c: 226:     memcpy(msg.data, no_motion_init, sizeof(no_motion_init));
  5395     0385  3021               	movlw	low (setupForInactivity@msg+1)
  5396     0386  00F0               	movwf	memcpy@d1
  5397     0387  3000               	movlw	high (setupForInactivity@msg+1)
  5398     0388  00F1               	movwf	memcpy@d1+1
  5399     0389  3045               	movlw	low (_no_motion_init| (0+32768))
  5400     038A  00F2               	movwf	memcpy@s1
  5401     038B  3090               	movlw	high (_no_motion_init| (0+32768))
  5402     038C  00F3               	movwf	memcpy@s1+1
  5403     038D  3004               	movlw	4
  5404     038E  00F4               	movwf	memcpy@n
  5405     038F  3000               	movlw	0
  5406     0390  00F5               	movwf	memcpy@n+1
  5407     0391  3180  202B  3183   	fcall	_memcpy
  5408     0394                     l2684:
  5409     0394  0022               	movlb	2	; select bank2
  5410     0395  120E               	bcf	14,4	;volatile
  5411     0396                     l2686:
  5412                           
  5413                           ;ADXL345.c: 228:     SPI1_BufferWrite(&msg, sizeof(no_motion_init) + 1);
  5414     0396  3020               	movlw	low setupForInactivity@msg
  5415     0397  00F0               	movwf	SPI1_BufferWrite@bufferData
  5416     0398  3000               	movlw	high setupForInactivity@msg
  5417     0399  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5418     039A  3005               	movlw	5
  5419     039B  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5420     039C  3000               	movlw	0
  5421     039D  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5422     039E  318F  27E0  3183   	fcall	_SPI1_BufferWrite
  5423     03A1                     l2688:
  5424     03A1  0022               	movlb	2	; select bank2
  5425     03A2  160E               	bsf	14,4	;volatile
  5426     03A3                     l2690:
  5427                           
  5428                           ;ADXL345.c: 232:     msg.registerAddr = 0x2C;
  5429     03A3  302C               	movlw	44
  5430     03A4  0020               	movlb	0	; select bank0
  5431     03A5  00A0               	movwf	setupForInactivity@msg
  5432     03A6                     l2692:
  5433                           
  5434                           ;ADXL345.c: 233:     memset(msg.data, 0, sizeof(msg.data));
  5435     03A6  3021               	movlw	low (setupForInactivity@msg+1)
  5436     03A7  00F0               	movwf	memset@dest
  5437     03A8  3000               	movlw	high (setupForInactivity@msg+1)
  5438     03A9  00F1               	movwf	memset@dest+1
  5439     03AA  3000               	movlw	0
  5440     03AB  00F2               	movwf	memset@c
  5441     03AC  00F3               	movwf	memset@c+1
  5442     03AD  3019               	movlw	25
  5443     03AE  00F4               	movwf	memset@n
  5444     03AF  3000               	movlw	0
  5445     03B0  00F5               	movwf	memset@n+1
  5446     03B1  318F  273A  3183   	fcall	_memset
  5447     03B4                     l2694:
  5448                           
  5449                           ;ADXL345.c: 234:     msg.data[0] = 0x17;
  5450     03B4  3017               	movlw	23
  5451     03B5  0020               	movlb	0	; select bank0
  5452     03B6  00A1               	movwf	setupForInactivity@msg+1
  5453     03B7                     l2696:
  5454     03B7  0022               	movlb	2	; select bank2
  5455     03B8  120E               	bcf	14,4	;volatile
  5456     03B9                     l2698:
  5457                           
  5458                           ;ADXL345.c: 236:     SPI1_BufferWrite(&msg, 2);
  5459     03B9  3020               	movlw	low setupForInactivity@msg
  5460     03BA  00F0               	movwf	SPI1_BufferWrite@bufferData
  5461     03BB  3000               	movlw	high setupForInactivity@msg
  5462     03BC  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5463     03BD  3002               	movlw	2
  5464     03BE  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5465     03BF  3000               	movlw	0
  5466     03C0  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5467     03C1  318F  27E0  3183   	fcall	_SPI1_BufferWrite
  5468     03C4                     l2700:
  5469     03C4  0022               	movlb	2	; select bank2
  5470     03C5  160E               	bsf	14,4	;volatile
  5471     03C6                     l2702:
  5472                           
  5473                           ;ADXL345.c: 240:     msg.registerAddr = 0x2E;
  5474     03C6  302E               	movlw	46
  5475     03C7  0020               	movlb	0	; select bank0
  5476     03C8  00A0               	movwf	setupForInactivity@msg
  5477     03C9                     l2704:
  5478                           
  5479                           ;ADXL345.c: 241:     memset(msg.data, 0, sizeof(msg.data));
  5480     03C9  3021               	movlw	low (setupForInactivity@msg+1)
  5481     03CA  00F0               	movwf	memset@dest
  5482     03CB  3000               	movlw	high (setupForInactivity@msg+1)
  5483     03CC  00F1               	movwf	memset@dest+1
  5484     03CD  3000               	movlw	0
  5485     03CE  00F2               	movwf	memset@c
  5486     03CF  00F3               	movwf	memset@c+1
  5487     03D0  3019               	movlw	25
  5488     03D1  00F4               	movwf	memset@n
  5489     03D2  3000               	movlw	0
  5490     03D3  00F5               	movwf	memset@n+1
  5491     03D4  318F  273A  3183   	fcall	_memset
  5492     03D7                     l2706:
  5493                           
  5494                           ;ADXL345.c: 242:     msg.data[0] = 0x08;
  5495     03D7  3008               	movlw	8
  5496     03D8  0020               	movlb	0	; select bank0
  5497     03D9  00A1               	movwf	setupForInactivity@msg+1
  5498     03DA                     l2708:
  5499     03DA  0022               	movlb	2	; select bank2
  5500     03DB  120E               	bcf	14,4	;volatile
  5501     03DC                     l2710:
  5502                           
  5503                           ;ADXL345.c: 244:     SPI1_BufferWrite(&msg, 2);
  5504     03DC  3020               	movlw	low setupForInactivity@msg
  5505     03DD  00F0               	movwf	SPI1_BufferWrite@bufferData
  5506     03DE  3000               	movlw	high setupForInactivity@msg
  5507     03DF  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5508     03E0  3002               	movlw	2
  5509     03E1  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5510     03E2  3000               	movlw	0
  5511     03E3  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5512     03E4  318F  27E0  3183   	fcall	_SPI1_BufferWrite
  5513     03E7                     l2712:
  5514     03E7  0022               	movlb	2	; select bank2
  5515     03E8  160E               	bsf	14,4	;volatile
  5516     03E9                     l2714:
  5517     03E9  120E               	bcf	14,4	;volatile
  5518     03EA                     l2716:
  5519                           
  5520                           ;ADXL345.c: 249:     SPI1_ByteExchange(0x30);
  5521     03EA  3030               	movlw	48
  5522     03EB  00F0               	movwf	SPI1_ByteExchange@byteData
  5523     03EC  318E  26F3  3183   	fcall	_SPI1_ByteExchange
  5524     03EF                     l2718:
  5525     03EF  0022               	movlb	2	; select bank2
  5526     03F0  160E               	bsf	14,4	;volatile
  5527     03F1                     l2720:
  5528                           
  5529                           ;ADXL345.c: 252:     SPI1_Close();
  5530     03F1  318E  26B3  3183   	fcall	_SPI1_Close
  5531     03F4                     l478:
  5532     03F4  0008               	return
  5533     03F5                     __end_of_setupForInactivity:
  5534                           
  5535                           	psect	text19
  5536     02C7                     __ptext19:	
  5537 ;; *************** function _setupForImpact *****************
  5538 ;; Defined at:
  5539 ;;		line 159 in file "ADXL345.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  msg            26    0[BANK0 ] struct Message
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;Total ram usage:       26 bytes
  5558 ;; Hardware stack levels used: 1
  5559 ;; Hardware stack levels required when called: 2
  5560 ;; This function calls:
  5561 ;;		_SPI1_BufferWrite
  5562 ;;		_SPI1_ByteExchange
  5563 ;;		_SPI1_Close
  5564 ;;		_SPI1_Open
  5565 ;;		_memcpy
  5566 ;;		_memset
  5567 ;; This function is called by:
  5568 ;;		_MotionEventHandler
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572     02C7                     _setupForImpact:	
  5573                           ;psect for function _setupForImpact
  5574                           
  5575     02C7                     l2614:	
  5576                           ;incstack = 0
  5577                           ; Regs used in _setupForImpact: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5578                           
  5579                           
  5580                           ;ADXL345.c: 160:     while (!SPI1_Open(ADXL345)) {
  5581     02C7  2ACB               	goto	l2618
  5582     02C8                     l2616:
  5583                           
  5584                           ;ADXL345.c: 161:         SPI1_Close();
  5585     02C8  318E  26B3  3182   	fcall	_SPI1_Close
  5586     02CB                     l2618:
  5587                           
  5588                           ;ADXL345.c: 160:     while (!SPI1_Open(ADXL345)) {
  5589     02CB  01F6               	clrf	SPI1_Open@spiConfigIndex
  5590     02CC  3181  2136  3182   	fcall	_SPI1_Open
  5591     02CF  3A00               	xorlw	0
  5592     02D0  1903               	skipnz
  5593     02D1  2AD3               	goto	u931
  5594     02D2  2AD4               	goto	u930
  5595     02D3                     u931:
  5596     02D3  2AC8               	goto	l2616
  5597     02D4                     u930:
  5598     02D4                     l432:	
  5599                           ;ADXL345.c: 165:     do { LATCbits.LATC4 = 0; } while(0);
  5600                           
  5601     02D4  0022               	movlb	2	; select bank2
  5602     02D5  120E               	bcf	14,4	;volatile
  5603     02D6                     l2620:
  5604                           
  5605                           ;ADXL345.c: 166:     SPI1_ByteExchange(0x30);
  5606     02D6  3030               	movlw	48
  5607     02D7  00F0               	movwf	SPI1_ByteExchange@byteData
  5608     02D8  318E  26F3  3182   	fcall	_SPI1_ByteExchange
  5609     02DB                     l2622:
  5610     02DB  0022               	movlb	2	; select bank2
  5611     02DC  160E               	bsf	14,4	;volatile
  5612     02DD                     l2624:
  5613                           
  5614                           ;ADXL345.c: 175:     struct Message msg;;ADXL345.c: 176:     msg.registerAddr = 0x24;
  5615     02DD  3024               	movlw	36
  5616     02DE  0020               	movlb	0	; select bank0
  5617     02DF  00A0               	movwf	setupForImpact@msg
  5618     02E0                     l2626:
  5619                           
  5620                           ;ADXL345.c: 177:     memset(msg.data, 0, sizeof(msg.data));
  5621     02E0  3021               	movlw	low (setupForImpact@msg+1)
  5622     02E1  00F0               	movwf	memset@dest
  5623     02E2  3000               	movlw	high (setupForImpact@msg+1)
  5624     02E3  00F1               	movwf	memset@dest+1
  5625     02E4  3000               	movlw	0
  5626     02E5  00F2               	movwf	memset@c
  5627     02E6  00F3               	movwf	memset@c+1
  5628     02E7  3019               	movlw	25
  5629     02E8  00F4               	movwf	memset@n
  5630     02E9  3000               	movlw	0
  5631     02EA  00F5               	movwf	memset@n+1
  5632     02EB  318F  273A  3182   	fcall	_memset
  5633     02EE                     l2628:
  5634                           
  5635                           ;ADXL345.c: 178:     memcpy(msg.data, impact_init, sizeof(impact_init));
  5636     02EE  3021               	movlw	low (setupForImpact@msg+1)
  5637     02EF  00F0               	movwf	memcpy@d1
  5638     02F0  3000               	movlw	high (setupForImpact@msg+1)
  5639     02F1  00F1               	movwf	memcpy@d1+1
  5640     02F2  3049               	movlw	low (_impact_init| (0+32768))
  5641     02F3  00F2               	movwf	memcpy@s1
  5642     02F4  3090               	movlw	high (_impact_init| (0+32768))
  5643     02F5  00F3               	movwf	memcpy@s1+1
  5644     02F6  3004               	movlw	4
  5645     02F7  00F4               	movwf	memcpy@n
  5646     02F8  3000               	movlw	0
  5647     02F9  00F5               	movwf	memcpy@n+1
  5648     02FA  3180  202B  3182   	fcall	_memcpy
  5649     02FD                     l2630:
  5650     02FD  0022               	movlb	2	; select bank2
  5651     02FE  120E               	bcf	14,4	;volatile
  5652     02FF                     l2632:
  5653                           
  5654                           ;ADXL345.c: 180:     SPI1_BufferWrite(&msg, sizeof(impact_init) + 1);
  5655     02FF  3020               	movlw	low setupForImpact@msg
  5656     0300  00F0               	movwf	SPI1_BufferWrite@bufferData
  5657     0301  3000               	movlw	high setupForImpact@msg
  5658     0302  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5659     0303  3005               	movlw	5
  5660     0304  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5661     0305  3000               	movlw	0
  5662     0306  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5663     0307  318F  27E0  3182   	fcall	_SPI1_BufferWrite
  5664     030A                     l2634:
  5665     030A  0022               	movlb	2	; select bank2
  5666     030B  160E               	bsf	14,4	;volatile
  5667     030C                     l2636:
  5668                           
  5669                           ;ADXL345.c: 184:     msg.registerAddr = 0x2C;
  5670     030C  302C               	movlw	44
  5671     030D  0020               	movlb	0	; select bank0
  5672     030E  00A0               	movwf	setupForImpact@msg
  5673     030F                     l2638:
  5674                           
  5675                           ;ADXL345.c: 185:     memset(msg.data, 0, sizeof(msg.data));
  5676     030F  3021               	movlw	low (setupForImpact@msg+1)
  5677     0310  00F0               	movwf	memset@dest
  5678     0311  3000               	movlw	high (setupForImpact@msg+1)
  5679     0312  00F1               	movwf	memset@dest+1
  5680     0313  3000               	movlw	0
  5681     0314  00F2               	movwf	memset@c
  5682     0315  00F3               	movwf	memset@c+1
  5683     0316  3019               	movlw	25
  5684     0317  00F4               	movwf	memset@n
  5685     0318  3000               	movlw	0
  5686     0319  00F5               	movwf	memset@n+1
  5687     031A  318F  273A  3182   	fcall	_memset
  5688     031D                     l2640:
  5689                           
  5690                           ;ADXL345.c: 186:     msg.data[0] = 0x1A;
  5691     031D  301A               	movlw	26
  5692     031E  0020               	movlb	0	; select bank0
  5693     031F  00A1               	movwf	setupForImpact@msg+1
  5694     0320                     l2642:
  5695     0320  0022               	movlb	2	; select bank2
  5696     0321  120E               	bcf	14,4	;volatile
  5697     0322                     l2644:
  5698                           
  5699                           ;ADXL345.c: 188:     SPI1_BufferWrite(&msg, 2);
  5700     0322  3020               	movlw	low setupForImpact@msg
  5701     0323  00F0               	movwf	SPI1_BufferWrite@bufferData
  5702     0324  3000               	movlw	high setupForImpact@msg
  5703     0325  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5704     0326  3002               	movlw	2
  5705     0327  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5706     0328  3000               	movlw	0
  5707     0329  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5708     032A  318F  27E0  3182   	fcall	_SPI1_BufferWrite
  5709     032D                     l2646:
  5710     032D  0022               	movlb	2	; select bank2
  5711     032E  160E               	bsf	14,4	;volatile
  5712     032F                     l2648:
  5713                           
  5714                           ;ADXL345.c: 192:     msg.registerAddr = 0x2E;
  5715     032F  302E               	movlw	46
  5716     0330  0020               	movlb	0	; select bank0
  5717     0331  00A0               	movwf	setupForImpact@msg
  5718     0332                     l2650:
  5719                           
  5720                           ;ADXL345.c: 193:     memset(msg.data, 0, sizeof(msg.data));
  5721     0332  3021               	movlw	low (setupForImpact@msg+1)
  5722     0333  00F0               	movwf	memset@dest
  5723     0334  3000               	movlw	high (setupForImpact@msg+1)
  5724     0335  00F1               	movwf	memset@dest+1
  5725     0336  3000               	movlw	0
  5726     0337  00F2               	movwf	memset@c
  5727     0338  00F3               	movwf	memset@c+1
  5728     0339  3019               	movlw	25
  5729     033A  00F4               	movwf	memset@n
  5730     033B  3000               	movlw	0
  5731     033C  00F5               	movwf	memset@n+1
  5732     033D  318F  273A  3182   	fcall	_memset
  5733     0340                     l2652:
  5734                           
  5735                           ;ADXL345.c: 194:     msg.data[0] = 0x04;
  5736     0340  3004               	movlw	4
  5737     0341  0020               	movlb	0	; select bank0
  5738     0342  00A1               	movwf	setupForImpact@msg+1
  5739     0343                     l2654:
  5740     0343  0022               	movlb	2	; select bank2
  5741     0344  120E               	bcf	14,4	;volatile
  5742     0345                     l2656:
  5743                           
  5744                           ;ADXL345.c: 196:     SPI1_BufferWrite(&msg, 2);
  5745     0345  3020               	movlw	low setupForImpact@msg
  5746     0346  00F0               	movwf	SPI1_BufferWrite@bufferData
  5747     0347  3000               	movlw	high setupForImpact@msg
  5748     0348  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5749     0349  3002               	movlw	2
  5750     034A  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5751     034B  3000               	movlw	0
  5752     034C  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5753     034D  318F  27E0  3182   	fcall	_SPI1_BufferWrite
  5754     0350                     l2658:
  5755     0350  0022               	movlb	2	; select bank2
  5756     0351  160E               	bsf	14,4	;volatile
  5757     0352                     l2660:
  5758     0352  120E               	bcf	14,4	;volatile
  5759     0353                     l2662:
  5760                           
  5761                           ;ADXL345.c: 201:     SPI1_ByteExchange(0x30);
  5762     0353  3030               	movlw	48
  5763     0354  00F0               	movwf	SPI1_ByteExchange@byteData
  5764     0355  318E  26F3  3182   	fcall	_SPI1_ByteExchange
  5765     0358                     l2664:
  5766     0358  0022               	movlb	2	; select bank2
  5767     0359  160E               	bsf	14,4	;volatile
  5768     035A                     l2666:
  5769                           
  5770                           ;ADXL345.c: 204:     SPI1_Close();
  5771     035A  318E  26B3  3182   	fcall	_SPI1_Close
  5772     035D                     l452:
  5773     035D  0008               	return
  5774     035E                     __end_of_setupForImpact:
  5775                           
  5776                           	psect	text20
  5777     0230                     __ptext20:	
  5778 ;; *************** function _setupForFreefall *****************
  5779 ;; Defined at:
  5780 ;;		line 111 in file "ADXL345.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;		None
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  msg            26    0[BANK0 ] struct Message
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  1    wreg      void 
  5787 ;; Registers used:
  5788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;Total ram usage:       26 bytes
  5799 ;; Hardware stack levels used: 1
  5800 ;; Hardware stack levels required when called: 2
  5801 ;; This function calls:
  5802 ;;		_SPI1_BufferWrite
  5803 ;;		_SPI1_ByteExchange
  5804 ;;		_SPI1_Close
  5805 ;;		_SPI1_Open
  5806 ;;		_memcpy
  5807 ;;		_memset
  5808 ;; This function is called by:
  5809 ;;		_MotionEventHandler
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813     0230                     _setupForFreefall:	
  5814                           ;psect for function _setupForFreefall
  5815                           
  5816     0230                     l2560:	
  5817                           ;incstack = 0
  5818                           ; Regs used in _setupForFreefall: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5819                           
  5820                           
  5821                           ;ADXL345.c: 112:     while (!SPI1_Open(ADXL345)) {
  5822     0230  2A34               	goto	l2564
  5823     0231                     l2562:
  5824                           
  5825                           ;ADXL345.c: 113:         SPI1_Close();
  5826     0231  318E  26B3  3182   	fcall	_SPI1_Close
  5827     0234                     l2564:
  5828                           
  5829                           ;ADXL345.c: 112:     while (!SPI1_Open(ADXL345)) {
  5830     0234  01F6               	clrf	SPI1_Open@spiConfigIndex
  5831     0235  3181  2136  3182   	fcall	_SPI1_Open
  5832     0238  3A00               	xorlw	0
  5833     0239  1903               	skipnz
  5834     023A  2A3C               	goto	u921
  5835     023B  2A3D               	goto	u920
  5836     023C                     u921:
  5837     023C  2A31               	goto	l2562
  5838     023D                     u920:
  5839     023D                     l406:	
  5840                           ;ADXL345.c: 117:     do { LATCbits.LATC4 = 0; } while(0);
  5841                           
  5842     023D  0022               	movlb	2	; select bank2
  5843     023E  120E               	bcf	14,4	;volatile
  5844     023F                     l2566:
  5845                           
  5846                           ;ADXL345.c: 118:     SPI1_ByteExchange(0x30);
  5847     023F  3030               	movlw	48
  5848     0240  00F0               	movwf	SPI1_ByteExchange@byteData
  5849     0241  318E  26F3  3182   	fcall	_SPI1_ByteExchange
  5850     0244                     l2568:
  5851     0244  0022               	movlb	2	; select bank2
  5852     0245  160E               	bsf	14,4	;volatile
  5853     0246                     l2570:
  5854                           
  5855                           ;ADXL345.c: 127:     struct Message msg;;ADXL345.c: 128:     msg.registerAddr = 0x24;
  5856     0246  3024               	movlw	36
  5857     0247  0020               	movlb	0	; select bank0
  5858     0248  00A0               	movwf	setupForFreefall@msg
  5859     0249                     l2572:
  5860                           
  5861                           ;ADXL345.c: 129:     memset(msg.data, 0, sizeof(msg.data));
  5862     0249  3021               	movlw	low (setupForFreefall@msg+1)
  5863     024A  00F0               	movwf	memset@dest
  5864     024B  3000               	movlw	high (setupForFreefall@msg+1)
  5865     024C  00F1               	movwf	memset@dest+1
  5866     024D  3000               	movlw	0
  5867     024E  00F2               	movwf	memset@c
  5868     024F  00F3               	movwf	memset@c+1
  5869     0250  3019               	movlw	25
  5870     0251  00F4               	movwf	memset@n
  5871     0252  3000               	movlw	0
  5872     0253  00F5               	movwf	memset@n+1
  5873     0254  318F  273A  3182   	fcall	_memset
  5874     0257                     l2574:
  5875                           
  5876                           ;ADXL345.c: 130:     memcpy(msg.data, fall_init, sizeof(fall_init));
  5877     0257  3021               	movlw	low (setupForFreefall@msg+1)
  5878     0258  00F0               	movwf	memcpy@d1
  5879     0259  3000               	movlw	high (setupForFreefall@msg+1)
  5880     025A  00F1               	movwf	memcpy@d1+1
  5881     025B  304D               	movlw	low (_fall_init| (0+32768))
  5882     025C  00F2               	movwf	memcpy@s1
  5883     025D  3090               	movlw	high (_fall_init| (0+32768))
  5884     025E  00F3               	movwf	memcpy@s1+1
  5885     025F  3004               	movlw	4
  5886     0260  00F4               	movwf	memcpy@n
  5887     0261  3000               	movlw	0
  5888     0262  00F5               	movwf	memcpy@n+1
  5889     0263  3180  202B  3182   	fcall	_memcpy
  5890     0266                     l2576:
  5891     0266  0022               	movlb	2	; select bank2
  5892     0267  120E               	bcf	14,4	;volatile
  5893     0268                     l2578:
  5894                           
  5895                           ;ADXL345.c: 132:     SPI1_BufferWrite(&msg, sizeof(fall_init) + 1);
  5896     0268  3020               	movlw	low setupForFreefall@msg
  5897     0269  00F0               	movwf	SPI1_BufferWrite@bufferData
  5898     026A  3000               	movlw	high setupForFreefall@msg
  5899     026B  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5900     026C  3005               	movlw	5
  5901     026D  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5902     026E  3000               	movlw	0
  5903     026F  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5904     0270  318F  27E0  3182   	fcall	_SPI1_BufferWrite
  5905     0273                     l2580:
  5906     0273  0022               	movlb	2	; select bank2
  5907     0274  160E               	bsf	14,4	;volatile
  5908     0275                     l2582:
  5909                           
  5910                           ;ADXL345.c: 136:     msg.registerAddr = 0x2C;
  5911     0275  302C               	movlw	44
  5912     0276  0020               	movlb	0	; select bank0
  5913     0277  00A0               	movwf	setupForFreefall@msg
  5914     0278                     l2584:
  5915                           
  5916                           ;ADXL345.c: 137:     memset(msg.data, 0, sizeof(msg.data));
  5917     0278  3021               	movlw	low (setupForFreefall@msg+1)
  5918     0279  00F0               	movwf	memset@dest
  5919     027A  3000               	movlw	high (setupForFreefall@msg+1)
  5920     027B  00F1               	movwf	memset@dest+1
  5921     027C  3000               	movlw	0
  5922     027D  00F2               	movwf	memset@c
  5923     027E  00F3               	movwf	memset@c+1
  5924     027F  3019               	movlw	25
  5925     0280  00F4               	movwf	memset@n
  5926     0281  3000               	movlw	0
  5927     0282  00F5               	movwf	memset@n+1
  5928     0283  318F  273A  3182   	fcall	_memset
  5929     0286                     l2586:
  5930                           
  5931                           ;ADXL345.c: 138:     msg.data[0] = 0x17;
  5932     0286  3017               	movlw	23
  5933     0287  0020               	movlb	0	; select bank0
  5934     0288  00A1               	movwf	setupForFreefall@msg+1
  5935     0289                     l2588:
  5936     0289  0022               	movlb	2	; select bank2
  5937     028A  120E               	bcf	14,4	;volatile
  5938     028B                     l2590:
  5939                           
  5940                           ;ADXL345.c: 140:     SPI1_BufferWrite(&msg, 2);
  5941     028B  3020               	movlw	low setupForFreefall@msg
  5942     028C  00F0               	movwf	SPI1_BufferWrite@bufferData
  5943     028D  3000               	movlw	high setupForFreefall@msg
  5944     028E  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5945     028F  3002               	movlw	2
  5946     0290  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5947     0291  3000               	movlw	0
  5948     0292  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5949     0293  318F  27E0  3182   	fcall	_SPI1_BufferWrite
  5950     0296                     l2592:
  5951     0296  0022               	movlb	2	; select bank2
  5952     0297  160E               	bsf	14,4	;volatile
  5953     0298                     l2594:
  5954                           
  5955                           ;ADXL345.c: 144:     msg.registerAddr = 0x2E;
  5956     0298  302E               	movlw	46
  5957     0299  0020               	movlb	0	; select bank0
  5958     029A  00A0               	movwf	setupForFreefall@msg
  5959     029B                     l2596:
  5960                           
  5961                           ;ADXL345.c: 145:     memset(msg.data, 0, sizeof(msg.data));
  5962     029B  3021               	movlw	low (setupForFreefall@msg+1)
  5963     029C  00F0               	movwf	memset@dest
  5964     029D  3000               	movlw	high (setupForFreefall@msg+1)
  5965     029E  00F1               	movwf	memset@dest+1
  5966     029F  3000               	movlw	0
  5967     02A0  00F2               	movwf	memset@c
  5968     02A1  00F3               	movwf	memset@c+1
  5969     02A2  3019               	movlw	25
  5970     02A3  00F4               	movwf	memset@n
  5971     02A4  3000               	movlw	0
  5972     02A5  00F5               	movwf	memset@n+1
  5973     02A6  318F  273A  3182   	fcall	_memset
  5974     02A9                     l2598:
  5975                           
  5976                           ;ADXL345.c: 146:     msg.data[0] = 0x10;
  5977     02A9  3010               	movlw	16
  5978     02AA  0020               	movlb	0	; select bank0
  5979     02AB  00A1               	movwf	setupForFreefall@msg+1
  5980     02AC                     l2600:
  5981     02AC  0022               	movlb	2	; select bank2
  5982     02AD  120E               	bcf	14,4	;volatile
  5983     02AE                     l2602:
  5984                           
  5985                           ;ADXL345.c: 148:     SPI1_BufferWrite(&msg, 2);
  5986     02AE  3020               	movlw	low setupForFreefall@msg
  5987     02AF  00F0               	movwf	SPI1_BufferWrite@bufferData
  5988     02B0  3000               	movlw	high setupForFreefall@msg
  5989     02B1  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5990     02B2  3002               	movlw	2
  5991     02B3  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5992     02B4  3000               	movlw	0
  5993     02B5  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5994     02B6  318F  27E0  3182   	fcall	_SPI1_BufferWrite
  5995     02B9                     l2604:
  5996     02B9  0022               	movlb	2	; select bank2
  5997     02BA  160E               	bsf	14,4	;volatile
  5998     02BB                     l2606:
  5999     02BB  120E               	bcf	14,4	;volatile
  6000     02BC                     l2608:
  6001                           
  6002                           ;ADXL345.c: 153:     SPI1_ByteExchange(0x30);
  6003     02BC  3030               	movlw	48
  6004     02BD  00F0               	movwf	SPI1_ByteExchange@byteData
  6005     02BE  318E  26F3  3182   	fcall	_SPI1_ByteExchange
  6006     02C1                     l2610:
  6007     02C1  0022               	movlb	2	; select bank2
  6008     02C2  160E               	bsf	14,4	;volatile
  6009     02C3                     l2612:
  6010                           
  6011                           ;ADXL345.c: 156:     SPI1_Close();
  6012     02C3  318E  26B3  3182   	fcall	_SPI1_Close
  6013     02C6                     l426:
  6014     02C6  0008               	return
  6015     02C7                     __end_of_setupForFreefall:
  6016                           
  6017                           	psect	text21
  6018     03F5                     __ptext21:	
  6019 ;; *************** function _orientation_Up *****************
  6020 ;; Defined at:
  6021 ;;		line 255 in file "ADXL345.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  msg            26    8[BANK0 ] struct Message
  6026 ;;  acc_data        6    0[BANK0 ] char [6]
  6027 ;;  g_deltaZ        2   38[BANK0 ] short 
  6028 ;;  g_deltaY        2   36[BANK0 ] short 
  6029 ;;  g_deltaX        2   34[BANK0 ] short 
  6030 ;;  g_magnitude     2    6[BANK0 ] int 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  1    wreg      _Bool 
  6033 ;; Registers used:
  6034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Totals:         2      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;Total ram usage:       42 bytes
  6045 ;; Hardware stack levels used: 1
  6046 ;; Hardware stack levels required when called: 2
  6047 ;; This function calls:
  6048 ;;		_SPI1_BufferRead
  6049 ;;		_SPI1_BufferWrite
  6050 ;;		_SPI1_ByteWrite
  6051 ;;		_SPI1_Close
  6052 ;;		_SPI1_Open
  6053 ;;		___wmul
  6054 ;; This function is called by:
  6055 ;;		_MotionEventHandler
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059     03F5                     _orientation_Up:	
  6060                           ;psect for function _orientation_Up
  6061                           
  6062     03F5                     l2722:	
  6063                           ;incstack = 0
  6064                           ; Regs used in _orientation_Up: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6065                           
  6066                           
  6067                           ;ADXL345.c: 256:     while (!SPI1_Open(ADXL345)) {
  6068     03F5  2BF9               	goto	l2726
  6069     03F6                     l2724:
  6070                           
  6071                           ;ADXL345.c: 257:         SPI1_Close();
  6072     03F6  318E  26B3  3183   	fcall	_SPI1_Close
  6073     03F9                     l2726:
  6074                           
  6075                           ;ADXL345.c: 256:     while (!SPI1_Open(ADXL345)) {
  6076     03F9  01F6               	clrf	SPI1_Open@spiConfigIndex
  6077     03FA  3181  2136  3183   	fcall	_SPI1_Open
  6078     03FD  3A00               	xorlw	0
  6079     03FE  1903               	skipnz
  6080     03FF  2C01               	goto	u951
  6081     0400  2C02               	goto	u950
  6082     0401                     u951:
  6083     0401  2BF6               	goto	l2724
  6084     0402                     u950:
  6085     0402                     l2728:
  6086                           
  6087                           ;ADXL345.c: 259:     int8_t acc_data[6] = {0};
  6088     0402  3020               	movlw	low orientation_Up@acc_data
  6089     0403  0086               	movwf	6
  6090     0404  3000               	movlw	high orientation_Up@acc_data
  6091     0405  0087               	movwf	7
  6092     0406  3006               	movlw	6
  6093     0407  00FA               	movwf	??_orientation_Up
  6094     0408  3000               	movlw	0
  6095     0409                     u960:
  6096     0409  001E               	movwi fsr1++
  6097     040A  0BFA               	decfsz	??_orientation_Up,f
  6098     040B  2C09               	goto	u960
  6099     040C                     l2730:
  6100                           
  6101                           ;ADXL345.c: 260:     int16_t g_deltaX, g_deltaY, g_deltaZ;;ADXL345.c: 262:     struct Me
      +                          ssage msg;;ADXL345.c: 263:     msg.registerAddr = 0x31;
  6102     040C  3031               	movlw	49
  6103     040D  0020               	movlb	0	; select bank0
  6104     040E  00A8               	movwf	orientation_Up@msg
  6105     040F                     l2732:
  6106                           
  6107                           ;ADXL345.c: 264:     msg.data[0] = 0x0C;
  6108     040F  300C               	movlw	12
  6109     0410  00A9               	movwf	orientation_Up@msg+1
  6110     0411                     l2734:
  6111     0411  0022               	movlb	2	; select bank2
  6112     0412  120E               	bcf	14,4	;volatile
  6113     0413                     l2736:
  6114                           
  6115                           ;ADXL345.c: 266:     SPI1_BufferWrite(&msg, 2);
  6116     0413  3028               	movlw	low orientation_Up@msg
  6117     0414  00F0               	movwf	SPI1_BufferWrite@bufferData
  6118     0415  3000               	movlw	high orientation_Up@msg
  6119     0416  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6120     0417  3002               	movlw	2
  6121     0418  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6122     0419  3000               	movlw	0
  6123     041A  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6124     041B  318F  27E0  3183   	fcall	_SPI1_BufferWrite
  6125     041E                     l2738:
  6126     041E  0022               	movlb	2	; select bank2
  6127     041F  160E               	bsf	14,4	;volatile
  6128     0420                     l2740:
  6129                           
  6130                           ;ADXL345.c: 269:     _delay((unsigned long)((10)*(4000000/4000.0)));
  6131     0420  300D               	movlw	13
  6132     0421  00FA               	movwf	??_orientation_Up
  6133     0422  30FC               	movlw	252
  6134     0423                     u1517:
  6135     0423  0B89               	decfsz	9,f
  6136     0424  2C23               	goto	u1517
  6137     0425  0BFA               	decfsz	??_orientation_Up,f
  6138     0426  2C23               	goto	u1517
  6139     0427                     l2742:
  6140     0427  0022               	movlb	2	; select bank2
  6141     0428  120E               	bcf	14,4	;volatile
  6142     0429                     l2744:
  6143                           
  6144                           ;ADXL345.c: 273:     SPI1_ByteWrite(0x32);
  6145     0429  3032               	movlw	50
  6146     042A  00F0               	movwf	SPI1_ByteWrite@byteData
  6147     042B  318E  26B9  3183   	fcall	_SPI1_ByteWrite
  6148     042E                     l2746:
  6149                           
  6150                           ;ADXL345.c: 274:     SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  6151     042E  3020               	movlw	(low (orientation_Up@acc_data| 0))& (0+255)
  6152     042F  00F0               	movwf	SPI1_BufferRead@bufferData
  6153     0430  3006               	movlw	6
  6154     0431  00F1               	movwf	SPI1_BufferRead@bufferSize
  6155     0432  3000               	movlw	0
  6156     0433  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  6157     0434  3180  2009  3183   	fcall	_SPI1_BufferRead
  6158     0437                     l2748:
  6159     0437  0022               	movlb	2	; select bank2
  6160     0438  160E               	bsf	14,4	;volatile
  6161     0439                     l2750:
  6162                           
  6163                           ;ADXL345.c: 276:     SPI1_Close();
  6164     0439  318E  26B3  3183   	fcall	_SPI1_Close
  6165     043C                     l2752:
  6166                           
  6167                           ;ADXL345.c: 279:     g_deltaX = (int8_t)acc_data[1] - 0x40;
  6168     043C  0020               	movlb	0	; select bank0
  6169     043D  0821               	movf	orientation_Up@acc_data+1,w
  6170     043E  00FA               	movwf	??_orientation_Up
  6171     043F  01FB               	clrf	??_orientation_Up+1
  6172     0440  1BFA               	btfsc	??_orientation_Up,7
  6173     0441  03FB               	decf	??_orientation_Up+1,f
  6174     0442  087A               	movf	??_orientation_Up,w
  6175     0443  3EC0               	addlw	192
  6176     0444  00C2               	movwf	orientation_Up@g_deltaX
  6177     0445  30FF               	movlw	255
  6178     0446  3D7B               	addwfc	??_orientation_Up+1,w
  6179     0447  00C3               	movwf	orientation_Up@g_deltaX+1
  6180     0448                     l2754:
  6181                           
  6182                           ;ADXL345.c: 280:     g_deltaY = (int8_t)acc_data[3];
  6183     0448  0823               	movf	orientation_Up@acc_data+3,w
  6184     0449  00C4               	movwf	orientation_Up@g_deltaY
  6185     044A  01C5               	clrf	orientation_Up@g_deltaY+1
  6186     044B  1BC4               	btfsc	orientation_Up@g_deltaY,7
  6187     044C  03C5               	decf	orientation_Up@g_deltaY+1,f
  6188     044D                     l2756:
  6189                           
  6190                           ;ADXL345.c: 281:     g_deltaZ = (int8_t)acc_data[5];
  6191     044D  0825               	movf	orientation_Up@acc_data+5,w
  6192     044E  00C6               	movwf	orientation_Up@g_deltaZ
  6193     044F  01C7               	clrf	orientation_Up@g_deltaZ+1
  6194     0450  1BC6               	btfsc	orientation_Up@g_deltaZ,7
  6195     0451  03C7               	decf	orientation_Up@g_deltaZ+1,f
  6196     0452                     l2758:
  6197                           
  6198                           ;ADXL345.c: 284:     g_deltaX *= g_deltaX;
  6199     0452  0843               	movf	orientation_Up@g_deltaX+1,w
  6200     0453  00F1               	movwf	___wmul@multiplier+1
  6201     0454  0842               	movf	orientation_Up@g_deltaX,w
  6202     0455  00F0               	movwf	___wmul@multiplier
  6203     0456  0843               	movf	orientation_Up@g_deltaX+1,w
  6204     0457  00F3               	movwf	___wmul@multiplicand+1
  6205     0458  0842               	movf	orientation_Up@g_deltaX,w
  6206     0459  00F2               	movwf	___wmul@multiplicand
  6207     045A  318F  27C1  3183   	fcall	___wmul
  6208     045D  0871               	movf	?___wmul+1,w
  6209     045E  0020               	movlb	0	; select bank0
  6210     045F  00C3               	movwf	orientation_Up@g_deltaX+1
  6211     0460  0870               	movf	?___wmul,w
  6212     0461  00C2               	movwf	orientation_Up@g_deltaX
  6213     0462                     l2760:
  6214                           
  6215                           ;ADXL345.c: 285:     g_deltaY *= g_deltaY;
  6216     0462  0845               	movf	orientation_Up@g_deltaY+1,w
  6217     0463  00F1               	movwf	___wmul@multiplier+1
  6218     0464  0844               	movf	orientation_Up@g_deltaY,w
  6219     0465  00F0               	movwf	___wmul@multiplier
  6220     0466  0845               	movf	orientation_Up@g_deltaY+1,w
  6221     0467  00F3               	movwf	___wmul@multiplicand+1
  6222     0468  0844               	movf	orientation_Up@g_deltaY,w
  6223     0469  00F2               	movwf	___wmul@multiplicand
  6224     046A  318F  27C1  3183   	fcall	___wmul
  6225     046D  0871               	movf	?___wmul+1,w
  6226     046E  0020               	movlb	0	; select bank0
  6227     046F  00C5               	movwf	orientation_Up@g_deltaY+1
  6228     0470  0870               	movf	?___wmul,w
  6229     0471  00C4               	movwf	orientation_Up@g_deltaY
  6230     0472                     l2762:
  6231                           
  6232                           ;ADXL345.c: 286:     g_deltaZ *= g_deltaZ;
  6233     0472  0847               	movf	orientation_Up@g_deltaZ+1,w
  6234     0473  00F1               	movwf	___wmul@multiplier+1
  6235     0474  0846               	movf	orientation_Up@g_deltaZ,w
  6236     0475  00F0               	movwf	___wmul@multiplier
  6237     0476  0847               	movf	orientation_Up@g_deltaZ+1,w
  6238     0477  00F3               	movwf	___wmul@multiplicand+1
  6239     0478  0846               	movf	orientation_Up@g_deltaZ,w
  6240     0479  00F2               	movwf	___wmul@multiplicand
  6241     047A  318F  27C1  3183   	fcall	___wmul
  6242     047D  0871               	movf	?___wmul+1,w
  6243     047E  0020               	movlb	0	; select bank0
  6244     047F  00C7               	movwf	orientation_Up@g_deltaZ+1
  6245     0480  0870               	movf	?___wmul,w
  6246     0481  00C6               	movwf	orientation_Up@g_deltaZ
  6247     0482                     l2764:
  6248                           
  6249                           ;ADXL345.c: 287:     int g_magnitude = g_deltaX + g_deltaY + g_deltaZ;
  6250     0482  0844               	movf	orientation_Up@g_deltaY,w
  6251     0483  0742               	addwf	orientation_Up@g_deltaX,w
  6252     0484  00FA               	movwf	??_orientation_Up
  6253     0485  0845               	movf	orientation_Up@g_deltaY+1,w
  6254     0486  3D43               	addwfc	orientation_Up@g_deltaX+1,w
  6255     0487  00FB               	movwf	??_orientation_Up+1
  6256     0488  0846               	movf	orientation_Up@g_deltaZ,w
  6257     0489  077A               	addwf	??_orientation_Up,w
  6258     048A  00A6               	movwf	orientation_Up@g_magnitude
  6259     048B  0847               	movf	orientation_Up@g_deltaZ+1,w
  6260     048C  3D7B               	addwfc	??_orientation_Up+1,w
  6261     048D  00A7               	movwf	orientation_Up@g_magnitude+1
  6262     048E                     l2766:
  6263                           
  6264                           ;ADXL345.c: 288:     if (g_magnitude < acceleration_squared_threshold) {
  6265     048E  3004               	movlw	4
  6266     048F  0227               	subwf	orientation_Up@g_magnitude+1,w
  6267     0490  30B0               	movlw	176
  6268     0491  1903               	skipnz
  6269     0492  0226               	subwf	orientation_Up@g_magnitude,w
  6270     0493  1803               	skipnc
  6271     0494  2C96               	goto	u971
  6272     0495  2C97               	goto	u970
  6273     0496                     u971:
  6274     0496  2C99               	goto	l2774
  6275     0497                     u970:
  6276     0497                     l2768:
  6277                           
  6278                           ;ADXL345.c: 289:         return 1;
  6279     0497  3001               	movlw	1
  6280     0498  2C9A               	goto	l495
  6281     0499                     l2774:
  6282                           
  6283                           ;ADXL345.c: 291:         return 0;
  6284     0499  3000               	movlw	0
  6285     049A                     l495:
  6286     049A  0008               	return
  6287     049B                     __end_of_orientation_Up:
  6288                           
  6289                           	psect	text22
  6290     0EB9                     __ptext22:	
  6291 ;; *************** function _SPI1_ByteWrite *****************
  6292 ;; Defined at:
  6293 ;;		line 172 in file "mcc_generated_files/spi/src/mssp.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  byteData        1    0[COMMON] unsigned char 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;		None
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      void 
  6300 ;; Registers used:
  6301 ;;		wreg
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6307 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;Total ram usage:        1 bytes
  6312 ;; Hardware stack levels used: 1
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_orientation_Up
  6317 ;;		_calibrate
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321     0EB9                     _SPI1_ByteWrite:	
  6322                           ;psect for function _SPI1_ByteWrite
  6323                           
  6324     0EB9                     l2438:	
  6325                           ;incstack = 0
  6326                           ; Regs used in _SPI1_ByteWrite: [wreg]
  6327                           
  6328                           
  6329                           ;mcc_generated_files/spi/src/mssp.c: 172: void SPI1_ByteWrite(uint8_t byteData);mcc_gene
      +                          rated_files/spi/src/mssp.c: 173: {;mcc_generated_files/spi/src/mssp.c: 174:     SSP1BUF 
      +                          = byteData;
  6330     0EB9  0870               	movf	SPI1_ByteWrite@byteData,w
  6331     0EBA  0024               	movlb	4	; select bank4
  6332     0EBB  0091               	movwf	17	;volatile
  6333     0EBC                     l94:
  6334     0EBC  0008               	return
  6335     0EBD                     __end_of_SPI1_ByteWrite:
  6336                           
  6337                           	psect	text23
  6338     0009                     __ptext23:	
  6339 ;; *************** function _SPI1_BufferRead *****************
  6340 ;; Defined at:
  6341 ;;		line 143 in file "mcc_generated_files/spi/src/mssp.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  bufferData      1    0[COMMON] PTR void 
  6344 ;;		 -> calibrate@acc_data(12), orientation_Up@acc_data(6), 
  6345 ;;  bufferSize      2    1[COMMON] unsigned int 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  bufferInputS    2    3[COMMON] unsigned int 
  6348 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  6349 ;;		 -> calibrate@acc_data(12), orientation_Up@acc_data(6), 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      void 
  6352 ;; Registers used:
  6353 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6359 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;Total ram usage:        6 bytes
  6364 ;; Hardware stack levels used: 1
  6365 ;; This function calls:
  6366 ;;		Nothing
  6367 ;; This function is called by:
  6368 ;;		_orientation_Up
  6369 ;;		_calibrate
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373     0009                     _SPI1_BufferRead:	
  6374                           ;psect for function _SPI1_BufferRead
  6375                           
  6376     0009                     l2420:	
  6377                           ;incstack = 0
  6378                           ; Regs used in _SPI1_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  6379                           
  6380                           
  6381                           ;mcc_generated_files/spi/src/mssp.c: 143: void SPI1_BufferRead(void *bufferData, size_t 
      +                          bufferSize);mcc_generated_files/spi/src/mssp.c: 144: {;mcc_generated_files/spi/src/mssp.
      +                          c: 145:     uint8_t *bufferInput = bufferData;
  6382     0009  0870               	movf	SPI1_BufferRead@bufferData,w
  6383     000A  00F5               	movwf	SPI1_BufferRead@bufferInput
  6384                           
  6385                           ;mcc_generated_files/spi/src/mssp.c: 146:     size_t bufferInputSize = bufferSize;
  6386     000B  0872               	movf	SPI1_BufferRead@bufferSize+1,w
  6387     000C  00F4               	movwf	SPI1_BufferRead@bufferInputSize+1
  6388     000D  0871               	movf	SPI1_BufferRead@bufferSize,w
  6389     000E  00F3               	movwf	SPI1_BufferRead@bufferInputSize
  6390                           
  6391                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6392     000F  2824               	goto	l2430
  6393     0010                     l2422:
  6394                           
  6395                           ;mcc_generated_files/spi/src/mssp.c: 148:     {;mcc_generated_files/spi/src/mssp.c: 149:
      +                                   SSP1BUF = 0x00;
  6396     0010  0024               	movlb	4	; select bank4
  6397     0011  0191               	clrf	17	;volatile
  6398     0012                     l81:	
  6399                           ;mcc_generated_files/spi/src/mssp.c: 151:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          153:         }
  6400                           
  6401                           
  6402                           ;mcc_generated_files/spi/src/mssp.c: 150:         while (!PIR1bits.SSP1IF)
  6403     0012  0020               	movlb	0	; select bank0
  6404     0013  1D91               	btfss	17,3	;volatile
  6405     0014  2816               	goto	u811
  6406     0015  2817               	goto	u810
  6407     0016                     u811:
  6408     0016  2812               	goto	l81
  6409     0017                     u810:
  6410     0017                     l83:
  6411                           
  6412                           ;mcc_generated_files/spi/src/mssp.c: 154:         PIR1bits.SSP1IF = 0;
  6413     0017  1191               	bcf	17,3	;volatile
  6414     0018                     l2424:
  6415                           
  6416                           ;mcc_generated_files/spi/src/mssp.c: 155:         *bufferInput = SSP1BUF;
  6417     0018  0875               	movf	SPI1_BufferRead@bufferInput,w
  6418     0019  0086               	movwf	6
  6419     001A  0187               	clrf	7
  6420     001B  0024               	movlb	4	; select bank4
  6421     001C  0811               	movf	17,w	;volatile
  6422     001D  0081               	movwf	1
  6423     001E                     l2426:
  6424                           
  6425                           ;mcc_generated_files/spi/src/mssp.c: 156:         bufferInput++;
  6426     001E  3001               	movlw	1
  6427     001F  07F5               	addwf	SPI1_BufferRead@bufferInput,f
  6428     0020                     l2428:
  6429                           
  6430                           ;mcc_generated_files/spi/src/mssp.c: 157:         bufferInputSize--;
  6431     0020  3001               	movlw	1
  6432     0021  02F3               	subwf	SPI1_BufferRead@bufferInputSize,f
  6433     0022  3000               	movlw	0
  6434     0023  3BF4               	subwfb	SPI1_BufferRead@bufferInputSize+1,f
  6435     0024                     l2430:
  6436                           
  6437                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6438     0024  0873               	movf	SPI1_BufferRead@bufferInputSize,w
  6439     0025  0474               	iorwf	SPI1_BufferRead@bufferInputSize+1,w
  6440     0026  1D03               	btfss	3,2
  6441     0027  2829               	goto	u821
  6442     0028  282A               	goto	u820
  6443     0029                     u821:
  6444     0029  2810               	goto	l2422
  6445     002A                     u820:
  6446     002A                     l85:
  6447     002A  0008               	return
  6448     002B                     __end_of_SPI1_BufferRead:
  6449                           
  6450                           	psect	text24
  6451     0F51                     __ptext24:	
  6452 ;; *************** function _ADXL345_ClearInterrupt *****************
  6453 ;; Defined at:
  6454 ;;		line 98 in file "ADXL345.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;		None
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;		None
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      void 
  6461 ;; Registers used:
  6462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;Total ram usage:        0 bytes
  6473 ;; Hardware stack levels used: 1
  6474 ;; Hardware stack levels required when called: 2
  6475 ;; This function calls:
  6476 ;;		_SPI1_ByteExchange
  6477 ;;		_SPI1_Close
  6478 ;;		_SPI1_Open
  6479 ;; This function is called by:
  6480 ;;		_MotionEventHandler
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484     0F51                     _ADXL345_ClearInterrupt:	
  6485                           ;psect for function _ADXL345_ClearInterrupt
  6486                           
  6487     0F51                     l2548:	
  6488                           ;incstack = 0
  6489                           ; Regs used in _ADXL345_ClearInterrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6490                           
  6491                           
  6492                           ;ADXL345.c: 99:     while (!SPI1_Open(ADXL345)) {
  6493     0F51  2F55               	goto	l2552
  6494     0F52                     l2550:
  6495                           
  6496                           ;ADXL345.c: 100:         SPI1_Close();
  6497     0F52  318E  26B3  318F   	fcall	_SPI1_Close
  6498     0F55                     l2552:
  6499                           
  6500                           ;ADXL345.c: 99:     while (!SPI1_Open(ADXL345)) {
  6501     0F55  01F6               	clrf	SPI1_Open@spiConfigIndex
  6502     0F56  3181  2136  318F   	fcall	_SPI1_Open
  6503     0F59  3A00               	xorlw	0
  6504     0F5A  1903               	skipnz
  6505     0F5B  2F5D               	goto	u911
  6506     0F5C  2F5E               	goto	u910
  6507     0F5D                     u911:
  6508     0F5D  2F52               	goto	l2550
  6509     0F5E                     u910:
  6510     0F5E                     l396:	
  6511                           ;ADXL345.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  6512                           
  6513     0F5E  0022               	movlb	2	; select bank2
  6514     0F5F  120E               	bcf	14,4	;volatile
  6515     0F60                     l2554:
  6516                           
  6517                           ;ADXL345.c: 105:     SPI1_ByteExchange(0x30);
  6518     0F60  3030               	movlw	48
  6519     0F61  00F0               	movwf	SPI1_ByteExchange@byteData
  6520     0F62  318E  26F3  318F   	fcall	_SPI1_ByteExchange
  6521     0F65                     l2556:
  6522     0F65  0022               	movlb	2	; select bank2
  6523     0F66  160E               	bsf	14,4	;volatile
  6524     0F67                     l2558:
  6525                           
  6526                           ;ADXL345.c: 108:     SPI1_Close();
  6527     0F67  318E  26B3  318F   	fcall	_SPI1_Close
  6528     0F6A                     l400:
  6529     0F6A  0008               	return
  6530     0F6B                     __end_of_ADXL345_ClearInterrupt:
  6531                           
  6532                           	psect	text25
  6533     0F0B                     __ptext25:	
  6534 ;; *************** function _EEPROM_Read *****************
  6535 ;; Defined at:
  6536 ;;		line 224 in file "mcc_generated_files/nvm/src/nvm.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  address         2    0[COMMON] unsigned short 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      unsigned char 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;Total ram usage:        2 bytes
  6555 ;; Hardware stack levels used: 1
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_main
  6560 ;;		_EEPROM_ByteRead
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564     0F0B                     _EEPROM_Read:	
  6565                           ;psect for function _EEPROM_Read
  6566                           
  6567     0F0B                     l2868:	
  6568                           ;incstack = 0
  6569                           ; Regs used in _EEPROM_Read: [wreg+status,2]
  6570                           
  6571                           
  6572                           ;mcc_generated_files/nvm/src/nvm.c: 224: eeprom_data_t EEPROM_Read(eeprom_address_t addr
      +                          ess);mcc_generated_files/nvm/src/nvm.c: 225: {;mcc_generated_files/nvm/src/nvm.c: 227:  
      +                             EECON1bits.CFGS = 0;
  6573     0F0B  0023               	movlb	3	; select bank3
  6574     0F0C  1315               	bcf	21,6	;volsfr
  6575                           
  6576                           ;mcc_generated_files/nvm/src/nvm.c: 228:     EECON1bits.EEPGD = 0;
  6577     0F0D  1395               	bcf	21,7	;volsfr
  6578     0F0E                     l2870:
  6579                           
  6580                           ;mcc_generated_files/nvm/src/nvm.c: 231:     EEADRH = (uint8_t) (address >> 8);
  6581     0F0E  0871               	movf	EEPROM_Read@address+1,w
  6582     0F0F  0092               	movwf	18	;volatile
  6583     0F10                     l2872:
  6584                           
  6585                           ;mcc_generated_files/nvm/src/nvm.c: 232:     EEADRL = (uint8_t) address;
  6586     0F10  0870               	movf	EEPROM_Read@address,w
  6587     0F11  0091               	movwf	17	;volatile
  6588     0F12                     l2874:
  6589                           
  6590                           ;mcc_generated_files/nvm/src/nvm.c: 235:     EECON1bits.RD = 1;
  6591     0F12  1415               	bsf	21,0	;volsfr
  6592     0F13                     l2876:
  6593                           
  6594                           ;mcc_generated_files/nvm/src/nvm.c: 236:     __nop();
  6595     0F13  0000               	nop
  6596     0F14                     l2878:
  6597                           
  6598                           ;mcc_generated_files/nvm/src/nvm.c: 237:     __nop();
  6599     0F14  0000               	nop
  6600     0F15                     l2880:
  6601                           
  6602                           ;mcc_generated_files/nvm/src/nvm.c: 239:     return EEDATL;
  6603     0F15  0023               	movlb	3	; select bank3
  6604     0F16  0813               	movf	19,w	;volatile
  6605     0F17                     l678:
  6606     0F17  0008               	return
  6607     0F18                     __end_of_EEPROM_Read:
  6608                           
  6609                           	psect	text26
  6610     0F85                     __ptext26:	
  6611 ;; *************** function _ADXL345_validation *****************
  6612 ;; Defined at:
  6613 ;;		line 57 in file "ADXL345.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;		None
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  passed          1   10[COMMON] _Bool 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      _Bool 
  6620 ;; Registers used:
  6621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;Total ram usage:        1 bytes
  6632 ;; Hardware stack levels used: 1
  6633 ;; Hardware stack levels required when called: 2
  6634 ;; This function calls:
  6635 ;;		_SPI1_ByteExchange
  6636 ;;		_SPI1_Close
  6637 ;;		_SPI1_Open
  6638 ;; This function is called by:
  6639 ;;		_main
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643     0F85                     _ADXL345_validation:	
  6644                           ;psect for function _ADXL345_validation
  6645                           
  6646     0F85                     l2822:	
  6647                           ;incstack = 0
  6648                           ; Regs used in _ADXL345_validation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6649                           
  6650                           
  6651                           ;ADXL345.c: 58:     _Bool passed = 0;
  6652     0F85  01FA               	clrf	ADXL345_validation@passed
  6653     0F86                     l2824:
  6654                           
  6655                           ;ADXL345.c: 59:     if (SPI1_Open(ADXL345)) {
  6656     0F86  01F6               	clrf	SPI1_Open@spiConfigIndex
  6657     0F87  3181  2136  318F   	fcall	_SPI1_Open
  6658     0F8A  3A00               	xorlw	0
  6659     0F8B  1903               	skipnz
  6660     0F8C  2F8E               	goto	u991
  6661     0F8D  2F8F               	goto	u990
  6662     0F8E                     u991:
  6663     0F8E  2F9E               	goto	l2830
  6664     0F8F                     u990:
  6665     0F8F                     l367:	
  6666                           ;ADXL345.c: 60:         do { LATCbits.LATC4 = 0; } while(0);
  6667                           
  6668     0F8F  0022               	movlb	2	; select bank2
  6669     0F90  120E               	bcf	14,4	;volatile
  6670     0F91                     l2826:
  6671                           
  6672                           ;ADXL345.c: 61:         if (SPI1_ByteExchange(0x00) == 0xE5) {
  6673     0F91  01F0               	clrf	SPI1_ByteExchange@byteData
  6674     0F92  318E  26F3  318F   	fcall	_SPI1_ByteExchange
  6675     0F95  3AE5               	xorlw	229
  6676     0F96  1D03               	skipz
  6677     0F97  2F99               	goto	u1001
  6678     0F98  2F9A               	goto	u1000
  6679     0F99                     u1001:
  6680     0F99  2F9C               	goto	l370
  6681     0F9A                     u1000:
  6682     0F9A                     l2828:
  6683                           
  6684                           ;ADXL345.c: 62:             passed = 1;
  6685     0F9A  3001               	movlw	1
  6686     0F9B  00FA               	movwf	ADXL345_validation@passed
  6687     0F9C                     l370:	
  6688                           ;ADXL345.c: 64:         do { LATCbits.LATC4 = 1; } while(0);
  6689                           
  6690     0F9C  0022               	movlb	2	; select bank2
  6691     0F9D  160E               	bsf	14,4	;volatile
  6692     0F9E                     l2830:
  6693                           
  6694                           ;ADXL345.c: 66:     SPI1_Close();
  6695     0F9E  318E  26B3  318F   	fcall	_SPI1_Close
  6696     0FA1                     l2832:
  6697                           
  6698                           ;ADXL345.c: 67:     return passed;
  6699     0FA1  087A               	movf	ADXL345_validation@passed,w
  6700     0FA2                     l372:
  6701     0FA2  0008               	return
  6702     0FA3                     __end_of_ADXL345_validation:
  6703                           
  6704                           	psect	text27
  6705     0EF3                     __ptext27:	
  6706 ;; *************** function _SPI1_ByteExchange *****************
  6707 ;; Defined at:
  6708 ;;		line 161 in file "mcc_generated_files/spi/src/mssp.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;  byteData        1    0[COMMON] unsigned char 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;		None
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      unsigned char 
  6715 ;; Registers used:
  6716 ;;		wreg
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6722 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;Total ram usage:        1 bytes
  6727 ;; Hardware stack levels used: 1
  6728 ;; This function calls:
  6729 ;;		Nothing
  6730 ;; This function is called by:
  6731 ;;		_ADXL345_validation
  6732 ;;		_ADXL345_ClearInterrupt
  6733 ;;		_setupForFreefall
  6734 ;;		_setupForImpact
  6735 ;;		_setupForInactivity
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739     0EF3                     _SPI1_ByteExchange:	
  6740                           ;psect for function _SPI1_ByteExchange
  6741                           
  6742     0EF3                     l2432:	
  6743                           ;incstack = 0
  6744                           ; Regs used in _SPI1_ByteExchange: [wreg]
  6745                           
  6746                           
  6747                           ;mcc_generated_files/spi/src/mssp.c: 161: uint8_t SPI1_ByteExchange(uint8_t byteData);mc
      +                          c_generated_files/spi/src/mssp.c: 162: {;mcc_generated_files/spi/src/mssp.c: 163:     SS
      +                          P1BUF = byteData;
  6748     0EF3  0870               	movf	SPI1_ByteExchange@byteData,w
  6749     0EF4  0024               	movlb	4	; select bank4
  6750     0EF5  0091               	movwf	17	;volatile
  6751     0EF6                     l88:	
  6752                           ;mcc_generated_files/spi/src/mssp.c: 165:     {;mcc_generated_files/spi/src/mssp.c: 167:
      +                               }
  6753                           
  6754                           
  6755                           ;mcc_generated_files/spi/src/mssp.c: 164:     while (!PIR1bits.SSP1IF)
  6756     0EF6  0020               	movlb	0	; select bank0
  6757     0EF7  1D91               	btfss	17,3	;volatile
  6758     0EF8  2EFA               	goto	u831
  6759     0EF9  2EFB               	goto	u830
  6760     0EFA                     u831:
  6761     0EFA  2EF6               	goto	l88
  6762     0EFB                     u830:
  6763     0EFB                     l90:
  6764                           
  6765                           ;mcc_generated_files/spi/src/mssp.c: 168:     PIR1bits.SSP1IF = 0;
  6766     0EFB  1191               	bcf	17,3	;volatile
  6767     0EFC                     l2434:
  6768                           
  6769                           ;mcc_generated_files/spi/src/mssp.c: 169:     return SSP1BUF;
  6770     0EFC  0024               	movlb	4	; select bank4
  6771     0EFD  0811               	movf	17,w	;volatile
  6772     0EFE                     l91:
  6773     0EFE  0008               	return
  6774     0EFF                     __end_of_SPI1_ByteExchange:
  6775                           
  6776                           	psect	text28
  6777     00D3                     __ptext28:	
  6778 ;; *************** function _ADXL345_init *****************
  6779 ;; Defined at:
  6780 ;;		line 33 in file "ADXL345.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;		None
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  msg            26    0[BANK0 ] struct Message
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      _Bool 
  6787 ;; Registers used:
  6788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:       26 bytes
  6799 ;; Hardware stack levels used: 1
  6800 ;; Hardware stack levels required when called: 2
  6801 ;; This function calls:
  6802 ;;		_SPI1_BufferWrite
  6803 ;;		_SPI1_Close
  6804 ;;		_SPI1_Open
  6805 ;;		_memcpy
  6806 ;;		_memset
  6807 ;; This function is called by:
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812     00D3                     _ADXL345_init:	
  6813                           ;psect for function _ADXL345_init
  6814                           
  6815     00D3                     l2836:	
  6816                           ;incstack = 0
  6817                           ; Regs used in _ADXL345_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6818                           
  6819                           
  6820                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  6821     00D3  28D7               	goto	l2840
  6822     00D4                     l2838:
  6823                           
  6824                           ;ADXL345.c: 35:         SPI1_Close();
  6825     00D4  318E  26B3  3180   	fcall	_SPI1_Close
  6826     00D7                     l2840:
  6827                           
  6828                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  6829     00D7  01F6               	clrf	SPI1_Open@spiConfigIndex
  6830     00D8  3181  2136  3180   	fcall	_SPI1_Open
  6831     00DB  3A00               	xorlw	0
  6832     00DC  1903               	skipnz
  6833     00DD  28DF               	goto	u1011
  6834     00DE  28E0               	goto	u1010
  6835     00DF                     u1011:
  6836     00DF  28D4               	goto	l2838
  6837     00E0                     u1010:
  6838     00E0                     l354:
  6839                           
  6840                           ;ADXL345.c: 38:     struct Message msg;;ADXL345.c: 39:     msg.registerAddr = 0x24;
  6841     00E0  3024               	movlw	36
  6842     00E1  0020               	movlb	0	; select bank0
  6843     00E2  00A0               	movwf	ADXL345_init@msg
  6844     00E3                     l2842:
  6845                           
  6846                           ;ADXL345.c: 40:     memset(msg.data, 0, sizeof(msg.data));
  6847     00E3  3021               	movlw	low (ADXL345_init@msg+1)
  6848     00E4  00F0               	movwf	memset@dest
  6849     00E5  3000               	movlw	high (ADXL345_init@msg+1)
  6850     00E6  00F1               	movwf	memset@dest+1
  6851     00E7  3000               	movlw	0
  6852     00E8  00F2               	movwf	memset@c
  6853     00E9  00F3               	movwf	memset@c+1
  6854     00EA  3019               	movlw	25
  6855     00EB  00F4               	movwf	memset@n
  6856     00EC  3000               	movlw	0
  6857     00ED  00F5               	movwf	memset@n+1
  6858     00EE  318F  273A  3180   	fcall	_memset
  6859     00F1                     l2844:
  6860                           
  6861                           ;ADXL345.c: 41:     memcpy(msg.data, ADXL345_init_settings, sizeof(ADXL345_init_settings
      +                          ));
  6862     00F1  3021               	movlw	low (ADXL345_init@msg+1)
  6863     00F2  00F0               	movwf	memcpy@d1
  6864     00F3  3000               	movlw	high (ADXL345_init@msg+1)
  6865     00F4  00F1               	movwf	memcpy@d1+1
  6866     00F5  3039               	movlw	low (_ADXL345_init_settings| (0+32768))
  6867     00F6  00F2               	movwf	memcpy@s1
  6868     00F7  3090               	movlw	high (_ADXL345_init_settings| (0+32768))
  6869     00F8  00F3               	movwf	memcpy@s1+1
  6870     00F9  300C               	movlw	12
  6871     00FA  00F4               	movwf	memcpy@n
  6872     00FB  3000               	movlw	0
  6873     00FC  00F5               	movwf	memcpy@n+1
  6874     00FD  3180  202B  3180   	fcall	_memcpy
  6875     0100                     l2846:
  6876     0100  0022               	movlb	2	; select bank2
  6877     0101  120E               	bcf	14,4	;volatile
  6878     0102                     l2848:
  6879                           
  6880                           ;ADXL345.c: 43:     SPI1_BufferWrite(&msg, sizeof(ADXL345_init_settings) + 1);
  6881     0102  3020               	movlw	low ADXL345_init@msg
  6882     0103  00F0               	movwf	SPI1_BufferWrite@bufferData
  6883     0104  3000               	movlw	high ADXL345_init@msg
  6884     0105  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6885     0106  300D               	movlw	13
  6886     0107  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6887     0108  3000               	movlw	0
  6888     0109  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6889     010A  318F  27E0  3180   	fcall	_SPI1_BufferWrite
  6890     010D                     l2850:
  6891     010D  0022               	movlb	2	; select bank2
  6892     010E  160E               	bsf	14,4	;volatile
  6893     010F                     l2852:
  6894                           
  6895                           ;ADXL345.c: 46:     msg.registerAddr = 0x31;
  6896     010F  3031               	movlw	49
  6897     0110  0020               	movlb	0	; select bank0
  6898     0111  00A0               	movwf	ADXL345_init@msg
  6899     0112                     l2854:
  6900                           
  6901                           ;ADXL345.c: 47:     memset(msg.data, 0, sizeof(msg.data));
  6902     0112  3021               	movlw	low (ADXL345_init@msg+1)
  6903     0113  00F0               	movwf	memset@dest
  6904     0114  3000               	movlw	high (ADXL345_init@msg+1)
  6905     0115  00F1               	movwf	memset@dest+1
  6906     0116  3000               	movlw	0
  6907     0117  00F2               	movwf	memset@c
  6908     0118  00F3               	movwf	memset@c+1
  6909     0119  3019               	movlw	25
  6910     011A  00F4               	movwf	memset@n
  6911     011B  3000               	movlw	0
  6912     011C  00F5               	movwf	memset@n+1
  6913     011D  318F  273A  3180   	fcall	_memset
  6914     0120                     l2856:
  6915                           
  6916                           ;ADXL345.c: 48:     msg.data[0] = 0x0B;
  6917     0120  300B               	movlw	11
  6918     0121  0020               	movlb	0	; select bank0
  6919     0122  00A1               	movwf	ADXL345_init@msg+1
  6920     0123                     l2858:
  6921     0123  0022               	movlb	2	; select bank2
  6922     0124  120E               	bcf	14,4	;volatile
  6923     0125                     l2860:
  6924                           
  6925                           ;ADXL345.c: 50:     SPI1_BufferWrite(&msg, 2);
  6926     0125  3020               	movlw	low ADXL345_init@msg
  6927     0126  00F0               	movwf	SPI1_BufferWrite@bufferData
  6928     0127  3000               	movlw	high ADXL345_init@msg
  6929     0128  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6930     0129  3002               	movlw	2
  6931     012A  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6932     012B  3000               	movlw	0
  6933     012C  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6934     012D  318F  27E0  3180   	fcall	_SPI1_BufferWrite
  6935     0130                     l2862:
  6936     0130  0022               	movlb	2	; select bank2
  6937     0131  160E               	bsf	14,4	;volatile
  6938     0132                     l2864:
  6939                           
  6940                           ;ADXL345.c: 53:     SPI1_Close();
  6941     0132  318E  26B3  3180   	fcall	_SPI1_Close
  6942     0135                     l363:
  6943     0135  0008               	return
  6944     0136                     __end_of_ADXL345_init:
  6945                           
  6946                           	psect	text29
  6947     0F3A                     __ptext29:	
  6948 ;; *************** function _memset *****************
  6949 ;; Defined at:
  6950 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memset.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  dest            2    0[COMMON] PTR void 
  6953 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), saveOffsets@msg(26), 
  6954 ;;		 -> ADXL345_init@msg(26), 
  6955 ;;  c               2    2[COMMON] int 
  6956 ;;  n               2    4[COMMON] unsigned int 
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  p               1    6[COMMON] PTR unsigned char 
  6959 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), saveOffsets@msg(26), 
  6960 ;;		 -> ADXL345_init@msg(26), 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  2    0[COMMON] PTR void 
  6963 ;; Registers used:
  6964 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:        7 bytes
  6975 ;; Hardware stack levels used: 1
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_ADXL345_init
  6980 ;;		_saveOffsets
  6981 ;;		_setupForFreefall
  6982 ;;		_setupForImpact
  6983 ;;		_setupForInactivity
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987     0F3A                     _memset:	
  6988                           ;psect for function _memset
  6989                           
  6990     0F3A                     l2450:	
  6991                           ;incstack = 0
  6992                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6993                           
  6994     0F3A  0870               	movf	memset@dest,w
  6995     0F3B  00F6               	movwf	memset@p
  6996     0F3C  2F44               	goto	l2456
  6997     0F3D                     l2452:
  6998     0F3D  0876               	movf	memset@p,w
  6999     0F3E  0086               	movwf	6
  7000     0F3F  0187               	clrf	7
  7001     0F40  0872               	movf	memset@c,w
  7002     0F41  0081               	movwf	1
  7003     0F42                     l2454:
  7004     0F42  3001               	movlw	1
  7005     0F43  07F6               	addwf	memset@p,f
  7006     0F44                     l2456:
  7007     0F44  3001               	movlw	1
  7008     0F45  02F4               	subwf	memset@n,f
  7009     0F46  3000               	movlw	0
  7010     0F47  3BF5               	subwfb	memset@n+1,f
  7011     0F48  0A74               	incf	memset@n,w
  7012     0F49  1D03               	skipz
  7013     0F4A  2F4F               	goto	u871
  7014     0F4B  0A75               	incf	memset@n+1,w
  7015     0F4C  1D03               	btfss	3,2
  7016     0F4D  2F4F               	goto	u871
  7017     0F4E  2F50               	goto	u870
  7018     0F4F                     u871:
  7019     0F4F  2F3D               	goto	l2452
  7020     0F50                     u870:
  7021     0F50                     l1330:
  7022     0F50  0008               	return
  7023     0F51                     __end_of_memset:
  7024                           
  7025                           	psect	text30
  7026     002B                     __ptext30:	
  7027 ;; *************** function _memcpy *****************
  7028 ;; Defined at:
  7029 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memcpy.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  d1              2    0[COMMON] PTR void 
  7032 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7033 ;;  s1              2    2[COMMON] PTR const void 
  7034 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7035 ;;  n               2    4[COMMON] unsigned int 
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;  s               2    6[COMMON] PTR const unsigned char 
  7038 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7039 ;;  d               1    9[COMMON] PTR unsigned char 
  7040 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7041 ;;  tmp             1    8[COMMON] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  2    0[COMMON] PTR void 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7051 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;Total ram usage:       10 bytes
  7056 ;; Hardware stack levels used: 1
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		_ADXL345_init
  7061 ;;		_setupForFreefall
  7062 ;;		_setupForImpact
  7063 ;;		_setupForInactivity
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067     002B                     _memcpy:	
  7068                           ;psect for function _memcpy
  7069                           
  7070     002B                     l2458:	
  7071                           ;incstack = 0
  7072                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7073                           
  7074     002B  0873               	movf	memcpy@s1+1,w
  7075     002C  00F7               	movwf	memcpy@s+1
  7076     002D  0872               	movf	memcpy@s1,w
  7077     002E  00F6               	movwf	memcpy@s
  7078     002F                     l2460:
  7079     002F  0870               	movf	memcpy@d1,w
  7080     0030  00F9               	movwf	memcpy@d
  7081     0031  2843               	goto	l2470
  7082     0032                     l2462:
  7083     0032  0876               	movf	memcpy@s,w
  7084     0033  0084               	movwf	4
  7085     0034  0877               	movf	memcpy@s+1,w
  7086     0035  0085               	movwf	5
  7087     0036  0800               	movf	0,w	;code access
  7088     0037  00F8               	movwf	memcpy@tmp
  7089     0038                     l2464:
  7090     0038  3001               	movlw	1
  7091     0039  07F6               	addwf	memcpy@s,f
  7092     003A  3000               	movlw	0
  7093     003B  3DF7               	addwfc	memcpy@s+1,f
  7094     003C                     l2466:
  7095     003C  0879               	movf	memcpy@d,w
  7096     003D  0086               	movwf	6
  7097     003E  0187               	clrf	7
  7098     003F  0878               	movf	memcpy@tmp,w
  7099     0040  0081               	movwf	1
  7100     0041                     l2468:
  7101     0041  3001               	movlw	1
  7102     0042  07F9               	addwf	memcpy@d,f
  7103     0043                     l2470:
  7104     0043  3001               	movlw	1
  7105     0044  02F4               	subwf	memcpy@n,f
  7106     0045  3000               	movlw	0
  7107     0046  3BF5               	subwfb	memcpy@n+1,f
  7108     0047  0A74               	incf	memcpy@n,w
  7109     0048  1D03               	skipz
  7110     0049  284E               	goto	u881
  7111     004A  0A75               	incf	memcpy@n+1,w
  7112     004B  1D03               	btfss	3,2
  7113     004C  284E               	goto	u881
  7114     004D  284F               	goto	u880
  7115     004E                     u881:
  7116     004E  2832               	goto	l2462
  7117     004F                     u880:
  7118     004F                     l1324:
  7119     004F  0008               	return
  7120     0050                     __end_of_memcpy:
  7121                           
  7122                           	psect	text31
  7123     0136                     __ptext31:	
  7124 ;; *************** function _SPI1_Open *****************
  7125 ;; Defined at:
  7126 ;;		line 82 in file "mcc_generated_files/spi/src/mssp.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  spiConfigInd    1    6[COMMON] unsigned char 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  returnValue     1    9[COMMON] _Bool 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      _Bool 
  7133 ;; Registers used:
  7134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7140 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;Total ram usage:        4 bytes
  7145 ;; Hardware stack levels used: 1
  7146 ;; Hardware stack levels required when called: 1
  7147 ;; This function calls:
  7148 ;;		___wmul
  7149 ;; This function is called by:
  7150 ;;		_ADXL345_init
  7151 ;;		_ADXL345_validation
  7152 ;;		_saveOffsets
  7153 ;;		_ADXL345_ClearInterrupt
  7154 ;;		_setupForFreefall
  7155 ;;		_setupForImpact
  7156 ;;		_setupForInactivity
  7157 ;;		_orientation_Up
  7158 ;;		_calibrate
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162     0136                     _SPI1_Open:	
  7163                           ;psect for function _SPI1_Open
  7164                           
  7165     0136                     l2390:	
  7166                           ;incstack = 0
  7167                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7168                           
  7169     0136                     l2392:
  7170                           
  7171                           ;mcc_generated_files/spi/src/mssp.c: 85:     if (SSP1CON1bits.SSPEN == 0)
  7172     0136  0024               	movlb	4	; select bank4
  7173     0137  1A95               	btfsc	21,5	;volatile
  7174     0138  293A               	goto	u781
  7175     0139  293B               	goto	u780
  7176     013A                     u781:
  7177     013A  299F               	goto	l2400
  7178     013B                     u780:
  7179     013B                     l2394:
  7180                           
  7181                           ;mcc_generated_files/spi/src/mssp.c: 86:     {;mcc_generated_files/spi/src/mssp.c: 87:  
      +                                 SSP1STAT = spi1_configuration[spiConfigIndex].stat;
  7182     013B  0876               	movf	SPI1_Open@spiConfigIndex,w
  7183     013C  00F7               	movwf	??_SPI1_Open
  7184     013D  01F8               	clrf	??_SPI1_Open+1
  7185     013E  0877               	movf	??_SPI1_Open,w
  7186     013F  00F0               	movwf	___wmul@multiplier
  7187     0140  0878               	movf	??_SPI1_Open+1,w
  7188     0141  00F1               	movwf	___wmul@multiplier+1
  7189     0142  3005               	movlw	5
  7190     0143  00F2               	movwf	___wmul@multiplicand
  7191     0144  3000               	movlw	0
  7192     0145  00F3               	movwf	___wmul@multiplicand+1
  7193     0146  318F  27C1  3181   	fcall	___wmul
  7194     0149  301C               	movlw	low _spi1_configuration
  7195     014A  0770               	addwf	?___wmul,w
  7196     014B  0084               	movwf	4
  7197     014C  3010               	movlw	high _spi1_configuration
  7198     014D  3D71               	addwfc	?___wmul+1,w
  7199     014E  3880               	iorlw	128
  7200     014F  0085               	movwf	5
  7201     0150  0800               	movf	0,w	;code access
  7202     0151  0024               	movlb	4	; select bank4
  7203     0152  0094               	movwf	20	;volatile
  7204                           
  7205                           ;mcc_generated_files/spi/src/mssp.c: 88:         SSP1CON1 = spi1_configuration[spiConfig
      +                          Index].con1;
  7206     0153  0876               	movf	SPI1_Open@spiConfigIndex,w
  7207     0154  00F7               	movwf	??_SPI1_Open
  7208     0155  01F8               	clrf	??_SPI1_Open+1
  7209     0156  0877               	movf	??_SPI1_Open,w
  7210     0157  00F0               	movwf	___wmul@multiplier
  7211     0158  0878               	movf	??_SPI1_Open+1,w
  7212     0159  00F1               	movwf	___wmul@multiplier+1
  7213     015A  3005               	movlw	5
  7214     015B  00F2               	movwf	___wmul@multiplicand
  7215     015C  3000               	movlw	0
  7216     015D  00F3               	movwf	___wmul@multiplicand+1
  7217     015E  318F  27C1  3181   	fcall	___wmul
  7218     0161  301D               	movlw	low (_spi1_configuration+1)
  7219     0162  0770               	addwf	?___wmul,w
  7220     0163  0084               	movwf	4
  7221     0164  3010               	movlw	high (_spi1_configuration+1)
  7222     0165  3D71               	addwfc	?___wmul+1,w
  7223     0166  3880               	iorlw	128
  7224     0167  0085               	movwf	5
  7225     0168  0800               	movf	0,w	;code access
  7226     0169  0024               	movlb	4	; select bank4
  7227     016A  0095               	movwf	21	;volatile
  7228                           
  7229                           ;mcc_generated_files/spi/src/mssp.c: 89:         SSP1CON3 = spi1_configuration[spiConfig
      +                          Index].con3;
  7230     016B  0876               	movf	SPI1_Open@spiConfigIndex,w
  7231     016C  00F7               	movwf	??_SPI1_Open
  7232     016D  01F8               	clrf	??_SPI1_Open+1
  7233     016E  0877               	movf	??_SPI1_Open,w
  7234     016F  00F0               	movwf	___wmul@multiplier
  7235     0170  0878               	movf	??_SPI1_Open+1,w
  7236     0171  00F1               	movwf	___wmul@multiplier+1
  7237     0172  3005               	movlw	5
  7238     0173  00F2               	movwf	___wmul@multiplicand
  7239     0174  3000               	movlw	0
  7240     0175  00F3               	movwf	___wmul@multiplicand+1
  7241     0176  318F  27C1  3181   	fcall	___wmul
  7242     0179  301E               	movlw	low (_spi1_configuration+2)
  7243     017A  0770               	addwf	?___wmul,w
  7244     017B  0084               	movwf	4
  7245     017C  3010               	movlw	high (_spi1_configuration+2)
  7246     017D  3D71               	addwfc	?___wmul+1,w
  7247     017E  3880               	iorlw	128
  7248     017F  0085               	movwf	5
  7249     0180  0800               	movf	0,w	;code access
  7250     0181  0024               	movlb	4	; select bank4
  7251     0182  0097               	movwf	23	;volatile
  7252                           
  7253                           ;mcc_generated_files/spi/src/mssp.c: 90:         SSP1ADD = spi1_configuration[spiConfigI
      +                          ndex].baud;
  7254     0183  0876               	movf	SPI1_Open@spiConfigIndex,w
  7255     0184  00F7               	movwf	??_SPI1_Open
  7256     0185  01F8               	clrf	??_SPI1_Open+1
  7257     0186  0877               	movf	??_SPI1_Open,w
  7258     0187  00F0               	movwf	___wmul@multiplier
  7259     0188  0878               	movf	??_SPI1_Open+1,w
  7260     0189  00F1               	movwf	___wmul@multiplier+1
  7261     018A  3005               	movlw	5
  7262     018B  00F2               	movwf	___wmul@multiplicand
  7263     018C  3000               	movlw	0
  7264     018D  00F3               	movwf	___wmul@multiplicand+1
  7265     018E  318F  27C1  3181   	fcall	___wmul
  7266     0191  301F               	movlw	low (_spi1_configuration+3)
  7267     0192  0770               	addwf	?___wmul,w
  7268     0193  0084               	movwf	4
  7269     0194  3010               	movlw	high (_spi1_configuration+3)
  7270     0195  3D71               	addwfc	?___wmul+1,w
  7271     0196  3880               	iorlw	128
  7272     0197  0085               	movwf	5
  7273     0198  0800               	movf	0,w	;code access
  7274     0199  0024               	movlb	4	; select bank4
  7275     019A  0092               	movwf	18	;volatile
  7276     019B                     l2396:
  7277                           
  7278                           ;mcc_generated_files/spi/src/mssp.c: 92:         SSP1CON1bits.SSPEN = 1;
  7279     019B  1695               	bsf	21,5	;volatile
  7280     019C                     l2398:
  7281                           
  7282                           ;mcc_generated_files/spi/src/mssp.c: 94:         returnValue = 1;
  7283     019C  3001               	movlw	1
  7284     019D  00F9               	movwf	SPI1_Open@returnValue
  7285                           
  7286                           ;mcc_generated_files/spi/src/mssp.c: 95:     }
  7287     019E  29A0               	goto	l2402
  7288     019F                     l2400:
  7289                           
  7290                           ;mcc_generated_files/spi/src/mssp.c: 97:     {;mcc_generated_files/spi/src/mssp.c: 98:  
      +                                 returnValue = 0;
  7291     019F  01F9               	clrf	SPI1_Open@returnValue
  7292     01A0                     l2402:
  7293                           
  7294                           ;mcc_generated_files/spi/src/mssp.c: 100:     return returnValue;
  7295     01A0  0879               	movf	SPI1_Open@returnValue,w
  7296     01A1                     l55:
  7297     01A1  0008               	return
  7298     01A2                     __end_of_SPI1_Open:
  7299                           
  7300                           	psect	text32
  7301     0FC1                     __ptext32:	
  7302 ;; *************** function ___wmul *****************
  7303 ;; Defined at:
  7304 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  multiplier      2    0[COMMON] unsigned int 
  7307 ;;  multiplicand    2    2[COMMON] unsigned int 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  product         2    4[COMMON] unsigned int 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  2    0[COMMON] unsigned int 
  7312 ;; Registers used:
  7313 ;;		wreg, status,2, status,0
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        6 bytes
  7324 ;; Hardware stack levels used: 1
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_SPI1_Open
  7329 ;;		_orientation_Up
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333     0FC1                     ___wmul:	
  7334                           ;psect for function ___wmul
  7335                           
  7336     0FC1                     l2376:	
  7337                           ;incstack = 0
  7338                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7339                           
  7340     0FC1  01F4               	clrf	___wmul@product
  7341     0FC2  01F5               	clrf	___wmul@product+1
  7342     0FC3                     l2378:
  7343     0FC3  1C70               	btfss	___wmul@multiplier,0
  7344     0FC4  2FC6               	goto	u741
  7345     0FC5  2FC7               	goto	u740
  7346     0FC6                     u741:
  7347     0FC6  2FCB               	goto	l862
  7348     0FC7                     u740:
  7349     0FC7                     l2380:
  7350     0FC7  0872               	movf	___wmul@multiplicand,w
  7351     0FC8  07F4               	addwf	___wmul@product,f
  7352     0FC9  0873               	movf	___wmul@multiplicand+1,w
  7353     0FCA  3DF5               	addwfc	___wmul@product+1,f
  7354     0FCB                     l862:
  7355     0FCB  3001               	movlw	1
  7356     0FCC                     u755:
  7357     0FCC  35F2               	lslf	___wmul@multiplicand,f
  7358     0FCD  0DF3               	rlf	___wmul@multiplicand+1,f
  7359     0FCE  0B89               	decfsz	9,f
  7360     0FCF  2FCC               	goto	u755
  7361     0FD0                     l2382:
  7362     0FD0  3001               	movlw	1
  7363     0FD1                     u765:
  7364     0FD1  36F1               	lsrf	___wmul@multiplier+1,f
  7365     0FD2  0CF0               	rrf	___wmul@multiplier,f
  7366     0FD3  0B89               	decfsz	9,f
  7367     0FD4  2FD1               	goto	u765
  7368     0FD5                     l2384:
  7369     0FD5  0870               	movf	___wmul@multiplier,w
  7370     0FD6  0471               	iorwf	___wmul@multiplier+1,w
  7371     0FD7  1D03               	btfss	3,2
  7372     0FD8  2FDA               	goto	u771
  7373     0FD9  2FDB               	goto	u770
  7374     0FDA                     u771:
  7375     0FDA  2FC3               	goto	l2378
  7376     0FDB                     u770:
  7377     0FDB                     l2386:
  7378     0FDB  0875               	movf	___wmul@product+1,w
  7379     0FDC  00F1               	movwf	?___wmul+1
  7380     0FDD  0874               	movf	___wmul@product,w
  7381     0FDE  00F0               	movwf	?___wmul
  7382     0FDF                     l864:
  7383     0FDF  0008               	return
  7384     0FE0                     __end_of___wmul:
  7385                           
  7386                           	psect	text33
  7387     0EB3                     __ptext33:	
  7388 ;; *************** function _SPI1_Close *****************
  7389 ;; Defined at:
  7390 ;;		line 103 in file "mcc_generated_files/spi/src/mssp.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;		None
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;		None
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  1    wreg      void 
  7397 ;; Registers used:
  7398 ;;		None
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;Total ram usage:        0 bytes
  7409 ;; Hardware stack levels used: 1
  7410 ;; This function calls:
  7411 ;;		Nothing
  7412 ;; This function is called by:
  7413 ;;		_ADXL345_init
  7414 ;;		_ADXL345_validation
  7415 ;;		_saveOffsets
  7416 ;;		_ADXL345_ClearInterrupt
  7417 ;;		_setupForFreefall
  7418 ;;		_setupForImpact
  7419 ;;		_setupForInactivity
  7420 ;;		_orientation_Up
  7421 ;;		_calibrate
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425     0EB3                     _SPI1_Close:	
  7426                           ;psect for function _SPI1_Close
  7427                           
  7428     0EB3                     l2406:	
  7429                           ;incstack = 0
  7430                           ; Regs used in _SPI1_Close: []
  7431                           
  7432                           
  7433                           ;mcc_generated_files/spi/src/mssp.c: 105:     SSP1CON1bits.SSPEN = 0;
  7434     0EB3  0024               	movlb	4	; select bank4
  7435     0EB4  1295               	bcf	21,5	;volatile
  7436     0EB5                     l58:
  7437     0EB5  0008               	return
  7438     0EB6                     __end_of_SPI1_Close:
  7439                           
  7440                           	psect	text34
  7441     0FE0                     __ptext34:	
  7442 ;; *************** function _SPI1_BufferWrite *****************
  7443 ;; Defined at:
  7444 ;;		line 126 in file "mcc_generated_files/spi/src/mssp.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;  bufferData      2    0[COMMON] PTR void 
  7447 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7448 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7449 ;;  bufferSize      2    2[COMMON] unsigned int 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;  bufferInputS    2    4[COMMON] unsigned int 
  7452 ;;  bufferInput     1    6[COMMON] PTR unsigned char 
  7453 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7454 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:        7 bytes
  7469 ;; Hardware stack levels used: 1
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_ADXL345_init
  7474 ;;		_saveOffsets
  7475 ;;		_setupForFreefall
  7476 ;;		_setupForImpact
  7477 ;;		_setupForInactivity
  7478 ;;		_orientation_Up
  7479 ;;		_calibrate
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483     0FE0                     _SPI1_BufferWrite:	
  7484                           ;psect for function _SPI1_BufferWrite
  7485                           
  7486     0FE0                     l2408:	
  7487                           ;incstack = 0
  7488                           ; Regs used in _SPI1_BufferWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7489                           
  7490                           
  7491                           ;mcc_generated_files/spi/src/mssp.c: 126: void SPI1_BufferWrite(void *bufferData, size_t
      +                           bufferSize);mcc_generated_files/spi/src/mssp.c: 127: {;mcc_generated_files/spi/src/mssp
      +                          .c: 128:     uint8_t *bufferInput = bufferData;
  7492     0FE0  0870               	movf	SPI1_BufferWrite@bufferData,w
  7493     0FE1  00F6               	movwf	SPI1_BufferWrite@bufferInput
  7494     0FE2                     l2410:
  7495                           
  7496                           ;mcc_generated_files/spi/src/mssp.c: 129:     size_t bufferInputSize = bufferSize;
  7497     0FE2  0873               	movf	SPI1_BufferWrite@bufferSize+1,w
  7498     0FE3  00F5               	movwf	SPI1_BufferWrite@bufferInputSize+1
  7499     0FE4  0872               	movf	SPI1_BufferWrite@bufferSize,w
  7500     0FE5  00F4               	movwf	SPI1_BufferWrite@bufferInputSize
  7501                           
  7502                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7503     0FE6  2FF9               	goto	l2418
  7504     0FE7                     l2412:
  7505                           
  7506                           ;mcc_generated_files/spi/src/mssp.c: 131:     {;mcc_generated_files/spi/src/mssp.c: 132:
      +                                   SSP1BUF = *bufferInput;
  7507     0FE7  0876               	movf	SPI1_BufferWrite@bufferInput,w
  7508     0FE8  0086               	movwf	6
  7509     0FE9  0187               	clrf	7
  7510     0FEA  0801               	movf	1,w
  7511     0FEB  0024               	movlb	4	; select bank4
  7512     0FEC  0091               	movwf	17	;volatile
  7513     0FED                     l72:	
  7514                           ;mcc_generated_files/spi/src/mssp.c: 134:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          136:         }
  7515                           
  7516                           
  7517                           ;mcc_generated_files/spi/src/mssp.c: 133:         while (!PIR1bits.SSP1IF)
  7518     0FED  0020               	movlb	0	; select bank0
  7519     0FEE  1D91               	btfss	17,3	;volatile
  7520     0FEF  2FF1               	goto	u791
  7521     0FF0  2FF2               	goto	u790
  7522     0FF1                     u791:
  7523     0FF1  2FED               	goto	l72
  7524     0FF2                     u790:
  7525     0FF2                     l74:
  7526                           
  7527                           ;mcc_generated_files/spi/src/mssp.c: 137:         PIR1bits.SSP1IF = 0;
  7528     0FF2  1191               	bcf	17,3	;volatile
  7529     0FF3                     l2414:
  7530                           
  7531                           ;mcc_generated_files/spi/src/mssp.c: 138:         bufferInput++;
  7532     0FF3  3001               	movlw	1
  7533     0FF4  07F6               	addwf	SPI1_BufferWrite@bufferInput,f
  7534     0FF5                     l2416:
  7535                           
  7536                           ;mcc_generated_files/spi/src/mssp.c: 139:         bufferInputSize--;
  7537     0FF5  3001               	movlw	1
  7538     0FF6  02F4               	subwf	SPI1_BufferWrite@bufferInputSize,f
  7539     0FF7  3000               	movlw	0
  7540     0FF8  3BF5               	subwfb	SPI1_BufferWrite@bufferInputSize+1,f
  7541     0FF9                     l2418:
  7542                           
  7543                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7544     0FF9  0874               	movf	SPI1_BufferWrite@bufferInputSize,w
  7545     0FFA  0475               	iorwf	SPI1_BufferWrite@bufferInputSize+1,w
  7546     0FFB  1D03               	btfss	3,2
  7547     0FFC  2FFE               	goto	u801
  7548     0FFD  2FFF               	goto	u800
  7549     0FFE                     u801:
  7550     0FFE  2FE7               	goto	l2412
  7551     0FFF                     u800:
  7552     0FFF                     l76:
  7553     0FFF  0008               	return
  7554     1000                     __end_of_SPI1_BufferWrite:
  7555     0002                     ___latbits      equ	2
  7556     007E                     btemp           set	126	;btemp
  7557     007E                     wtemp0          set	126
  7558     22F0                     __pbssBIGRAM    equ	8944
  7559                           
  7560                           	psect	config
  7561                           
  7562                           ;Config register CONFIG1 @ 0x8007
  7563                           ;	Oscillator Selection
  7564                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7565                           ;	Watchdog Timer Enable
  7566                           ;	WDTE = SWDTEN, WDT controlled by the SWDTEN bit in the WDTCON register
  7567                           ;	Power-up Timer Enable
  7568                           ;	PWRTE = ON, PWRT enabled
  7569                           ;	MCLR Pin Function Select
  7570                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7571                           ;	Flash Program Memory Code Protection
  7572                           ;	CP = OFF, Program memory code protection is disabled
  7573                           ;	Data Memory Code Protection
  7574                           ;	CPD = OFF, Data memory code protection is disabled
  7575                           ;	Brown-out Reset Enable
  7576                           ;	BOREN = ON, Brown-out Reset enabled
  7577                           ;	Clock Out Enable
  7578                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7579                           ;	Internal/External Switchover
  7580                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7581                           ;	Fail-Safe Clock Monitor Enable
  7582                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7583     8007                     	org	32775
  7584     8007  3FCC               	dw	16332
  7585                           
  7586                           ;Config register CONFIG2 @ 0x8008
  7587                           ;	Flash Memory Self-Write Protection
  7588                           ;	WRT = OFF, Write protection off
  7589                           ;	PLL Enable
  7590                           ;	PLLEN = OFF, 4x PLL disabled
  7591                           ;	Stack Overflow/Underflow Reset Enable
  7592                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7593                           ;	Brown-out Reset Voltage Selection
  7594                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7595                           ;	In-Circuit Debugger Mode
  7596                           ;	DEBUG = 0x1, unprogrammed default
  7597                           ;	Low-Voltage Programming Enable
  7598                           ;	LVP = ON, Low-voltage programming enabled
  7599     8008                     	org	32776
  7600     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    83
    Data        0
    BSS         25
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     53      80
    BANK1            80     62      62
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    eeprom_interface$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    eeprom_interface$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    eeprom_interface$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    eeprom_interface$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@d1	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memcpy@s1	PTR const void  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memset@dest	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), 
		 -> setupForInactivity@msg(BANK0[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), 
		 -> setupForInactivity@msg(BANK0[26]), 

    MotionEventHandler@state	PTR enum E2688 size(1) Largest target is 1
		 -> main@current_state(BANK0[1]), 

    NULL$0	PTR FTN()void  size(2) Largest target is 0

    S38$4$0	PTR void  size(2) Largest target is 0

    S38$5$0	PTR void  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    S38$6$0	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    S38SPI_INTERFACE$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    S38SPI_INTERFACE$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    S38SPI_INTERFACE$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    S38SPI_INTERFACE$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    S38SPI_INTERFACE$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    S38SPI_INTERFACE$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    S38SPI_INTERFACE$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    S38SPI_INTERFACE$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    S38SPI_INTERFACE$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    S38SPI_INTERFACE$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    S38SPI_INTERFACE$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    S38SPI_INTERFACE$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    S38SPI_INTERFACE$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S38SPI_INTERFACE$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S965$4$1	PTR unsigned char  size(2) Largest target is 0

    S965$5$1	PTR unsigned char  size(2) Largest target is 0

    S965EEPROM_INTERFACE$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    S965EEPROM_INTERFACE$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    S965EEPROM_INTERFACE$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    S965EEPROM_INTERFACE$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S965EEPROM_INTERFACE$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S965EEPROM_INTERFACE$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S965EEPROM_INTERFACE$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    sp__memcpy	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    sp__memset	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), 
		 -> setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferRead@bufferData	PTR void  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferRead@bufferInput	PTR unsigned char  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferWrite@bufferData	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferWrite@bufferInput	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_Host$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    SPI1_Host$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    SPI1_Host$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    SPI1_Host$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    SPI1_Host$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    SPI1_Host$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    SPI1_Host$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    SPI1_Host$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    SPI1_Host$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    SPI1_Host$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    SPI1_Host$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    SPI1_Host$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    SPI1_Host$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SPI1_Host$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SW1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SW1_DefaultInterruptHandler(), NULL(), 

    SW1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SW1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_saveOffsets
    _calibrate->_saveOffsets
    _saveOffsets->_SPI1_Open
    _PIN_MANAGER_Initialize->_SW1_SetInterruptHandler
    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _SW1_ISR->_SW1_DefaultInterruptHandler
    _MotionEventHandler->_orientation_Up
    _setupForInactivity->_SPI1_Open
    _setupForInactivity->_memcpy
    _setupForImpact->_SPI1_Open
    _setupForImpact->_memcpy
    _setupForFreefall->_SPI1_Open
    _setupForFreefall->_memcpy
    _orientation_Up->_SPI1_Open
    _ADXL345_ClearInterrupt->_SPI1_Open
    _ADXL345_validation->_SPI1_Open
    _ADXL345_init->_SPI1_Open
    _ADXL345_init->_memcpy
    _SPI1_Open->___wmul

Critical Paths under _main in BANK0

    _main->_MotionEventHandler
    _calibrate->_saveOffsets
    _MotionEventHandler->_orientation_Up

Critical Paths under _main in BANK1

    _main->_calibrate

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    8358
                                             43 BANK0     10    10      0
                       _ADXL345_init
                 _ADXL345_validation
                        _EEPROM_Read
                 _MotionEventHandler
                    _PIN_MANAGER_IOC
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                          _calibrate
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           65    65      0    2197
                                             27 BANK0      3     3      0
                                              0 BANK1     62    62      0
                       _EEPROM_Write
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                     _SPI1_ByteWrite
                         _SPI1_Close
                          _SPI1_Open
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _saveOffsets                                         29    27      2     729
                                             10 COMMON     2     0      2
                                              0 BANK0     27    27      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
                             _memset
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         4     1      3      99
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      46
                   _CLOCK_Initialize
               _INTERRUPT_Initialize
                     _NVM_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      23
            _SW1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _SW1_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _NVM_Initialize                                       0     0      0       0
                    _NVM_StatusClear
 ---------------------------------------------------------------------------------
 (3) _NVM_StatusClear                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0      23
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_IOC                                      0     0      0       0
                            _SW1_ISR
 ---------------------------------------------------------------------------------
 (2) _SW1_ISR                                              0     0      0       0
                                NULL *
        _SW1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (3) _SW1_DefaultInterruptHandler                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotionEventHandler                                   3     2      1    4052
                                             40 BANK0      3     2      1
             _ADXL345_ClearInterrupt
                     _orientation_Up
                   _setupForFreefall
                     _setupForImpact
                 _setupForInactivity
 ---------------------------------------------------------------------------------
 (2) _setupForInactivity                                  26    26      0     881
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForImpact                                      26    26      0     881
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForFreefall                                    26    26      0     881
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _orientation_Up                                      42    42      0     952
                                             10 COMMON     2     2      0
                                              0 BANK0     40    40      0
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                     _SPI1_ByteWrite
                         _SPI1_Close
                          _SPI1_Open
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SPI1_ByteWrite                                       1     0      1      25
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferRead                                      6     3      3      98
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (2) _ADXL345_ClearInterrupt                               0     0      0     258
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          2     0      2      46
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADXL345_validation                                   1     1      0     282
                                             10 COMMON     1     1      0
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (3) _SPI1_ByteExchange                                    1     0      1      30
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (1) _ADXL345_init                                        26    26      0     782
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     1      6     132
                                              0 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6     155
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (2) _SPI1_Open                                            4     3      1     228
                                              6 COMMON     4     3      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     106
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SPI1_Close                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferWrite                                     7     3      4     126
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADXL345_init
     _SPI1_BufferWrite
     _SPI1_Close
     _SPI1_Open
       ___wmul
     _memcpy
     _memset
   _ADXL345_validation
     _SPI1_ByteExchange
     _SPI1_Close
     _SPI1_Open
   _EEPROM_Read
   _MotionEventHandler
     _ADXL345_ClearInterrupt
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
     _orientation_Up
       _SPI1_BufferRead
       _SPI1_BufferWrite
       _SPI1_ByteWrite
       _SPI1_Close
       _SPI1_Open
       ___wmul
     _setupForFreefall
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForImpact
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForInactivity
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
   _PIN_MANAGER_IOC
     _SW1_ISR
       NULL(Fake) *
       _SW1_DefaultInterruptHandler *
   _SPI1_Initialize
   _SYSTEM_Initialize
     _CLOCK_Initialize
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _NVM_Initialize
       _NVM_StatusClear
     _PIN_MANAGER_Initialize
       _SW1_SetInterruptHandler
     _SPI1_Initialize
     _WDT_Initialize
   _calibrate
     _EEPROM_Write
     _SPI1_BufferRead
     _SPI1_BufferWrite
     _SPI1_ByteWrite
     _SPI1_Close
     _SPI1_Open
     _saveOffsets
       _SPI1_BufferWrite
       _SPI1_Close
       _SPI1_Open
       _memset
   _saveOffsets

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14     12      14    100.0%
BANK0               80     53      80    100.0%
BANK1               80     62      62     77.5%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               80      0       0      0.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               32      0       0      0.0%
BANK10               0      0       0      0.0%
BANK11               0      0       0      0.0%
BANK12               0      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     156      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Feb 05 13:42:21 2025

                      _SPI1_ByteExchange 0EF3                                       l55 01A1  
                                     l47 0EE7                                       l72 0FED  
                                     l81 0012                                       l74 0FF2  
                                     l58 0EB5                                       l90 0EFB  
                                     l91 0EFE                                       l83 0017  
                                     l76 0FFF                                       l85 002A  
                                     l94 0EBC                                       l88 0EF6  
                     ?_SPI1_ByteExchange 0070                      ___wmul@multiplicand 0072  
                                    l123 0EF2                                      l204 0F84  
                                    l213 0ED4                                      l133 0EC6  
                                    l301 04F8                                      l310 0556  
                                    l400 0F6A                                      l304 0568  
                                    l233 0008                                      l307 0549  
                                    l228 0F39                                      l406 023D  
                                    l510 05A1                                      l191 0EDD  
                                    l503 058C                                      l432 02D4  
                                    l504 0591                                      l513 05AF  
                                    l354 00E0                                      l370 0F9C  
                                    l426 02C6                                      l522 07E4  
                                    l514 05BE                                      l363 0135  
                                    l195 0F26                                      l187 0074  
                                    l372 0FA2                                      l452 035D  
                                    l540 0712                                      l284 04BE  
                                    l533 06D3                                      l525 066B  
                                    l517 05D0                                      l606 022F  
                                    l198 0ECC                                      l390 00D2  
                                    l294 04E9                                      l367 0F8F  
                                    l279 04AC                                      l536 06E1  
                                    l296 04EB                                      l288 050B  
                                    l633 0EC0                                      l377 0084  
                                    l537 06F0                                      l458 036B  
                                    l387 00C2                                      l396 0F5E  
                                    l580 01BC                                      l478 03F4  
                                    l646 0EB8                                      l495 049A  
                                    l584 01DC                                      l577 01AC  
                                    l681 0FC0                                      l587 01E8  
                                    l862 0FCB                                      l678 0F17  
                                    l864 0FDF                                      u800 0FFF  
                                    u801 0FFE                                      u810 0017  
                                    u811 0016                                      u740 0FC7  
                                    u820 002A                                      u900 0084  
                                    u741 0FC6                                      u821 0029  
                                    u901 0083                                      u830 0EFB  
                                    u910 0F5E                                      u831 0EFA  
                                    u911 0F5D                                      u920 023D  
                                    u840 0F78                                      u921 023C  
                                    u841 0F77                                      u770 0FDB  
                                    u930 02D4                                      u850 0F82  
                                    u771 0FDA                                      u755 0FCC  
                                    u931 02D3                                      u851 0F7F  
                                    u780 013B                                      u940 036B  
                                    u765 0FD1                                      u781 013A  
                                    u941 036A                                      u790 0FF2  
                                    u870 0F50                                      u950 0402  
                                    u791 0FF1                                      u871 0F4F  
                                    u951 0401                                      u880 004F  
                                    u960 0409                                      u864 0F84  
                                    u881 004E                                      u970 0497  
                                    u890 0F1F                                      u971 0496  
                                    u891 0F1E                                      u980 0EDA  
                                    u981 0ED9                                      u990 0F8F  
                                    u991 0F8E                      ??_SPI1_ByteExchange 0071  
                      orientation_Up@msg 0028                                      wreg 0009  
                                   l3000 075F                                     l1330 0F50  
                                   l3002 0763                                     l1324 004F  
                                   l3020 07AF                                     l3030 07D1  
                                   l3022 07B9                                     l3014 078B  
                                   l2400 019F                                     l3032 07D3  
                                   l3024 07C3                                     l3016 079D  
                                   l3008 077B                                     l3120 049B  
                                   l2410 0FE2                                     l2402 01A0  
                                   l3050 01C0                                     l3106 0213  
                                   l3042 01A2                                     l3034 07DE  
                                   l3026 07CC                                     l3018 07A5  
                                   l3130 04AE                                     l3122 049E  
                                   l2412 0FE7                                     l2420 0009  
                                   l3060 01E0                                     l3052 01C3  
                                   l3044 01B0                                     l2500 0F18  
                                   l3036 07E0                                     l3028 07CF  
                                   l3140 04D2                                     l3132 04BB  
                                   l3124 04A1                                     l2414 0FF3  
                                   l2406 0EB3                                     l2422 0010  
                                   l2430 0024                                     l3070 01F9  
                                   l3062 01EA                                     l3054 01CA  
                                   l3046 01B3                                     l2502 0F1F  
                                   l2510 0EBD                                     l3038 07E3  
                                   l3134 04C0                                     l3126 04A3  
                                   l2416 0FF5                                     l2408 0FE0  
                                   l2432 0EF3                                     l2424 0018  
                                   l2600 02AC                                     l3072 01FC  
                                   l3064 01F3                                     l3056 01D3  
                                   l3048 01B6                                     l2504 0F24  
                                   l2440 0EC1                                     l2512 0005  
                                   l2520 0087                                     l3160 0512  
                                   l3152 04EC                                     l3144 04DE  
                                   l3136 04CD                                     l3128 04A4  
                                   l2418 0FF9                                     l2450 0F3A  
                                   l2434 0EFC                                     l2426 001E  
                                   l2610 02C1                                     l2602 02AE  
                                   l3066 01F5                                     l3058 01D6  
                                   l2506 0ECD                                     l2442 0EC7  
                                   l2530 00A7                                     l2522 0095  
                                   l2514 0077                                     l3170 0521  
                                   l3162 0513                                     l3154 04F5  
                                   l3146 04E6                                     l3138 04CF  
                                   l2380 0FC7                                     l2460 002F  
                                   l2452 0F3D                                     l2428 0020  
                                   l2612 02C3                                     l2604 02B9  
                                   l2620 02D6                                     l2700 03C4  
                                   l3084 020D                                     l3068 01F8  
                                   l2444 0F6B                                     l2508 0ED0  
                                   l2540 00BE                                     l2532 00AC  
                                   l2524 0098                                     l2516 0078  
                                   l3172 0526                                     l3164 0516  
                                   l3180 0534                                     l3156 04F7  
                                   l2382 0FD0                                     l2390 0136  
                                   l2462 0032                                     l2470 0043  
                                   l2454 0F42                                     l2550 0F52  
                                   l2438 0EB9                                     l2606 02BB  
                                   l2630 02FD                                     l2622 02DB  
                                   l2614 02C7                                     l2710 03DC  
                                   l2702 03C6                                     l3246 021E  
                                   l3078 0203                                     l2446 0F73  
                                   l2542 00C0                                     l2534 00AE  
                                   l2526 009A                                     l2518 007B  
                                   l3182 0536                                     l3174 0528  
                                   l3166 051B                                     l3158 0510  
                                   l2384 0FD5                                     l2376 0FC1  
                                   l2392 0136                                     l2464 0038  
                                   l2456 0F44                                     l2552 0F55  
                                   l2608 02BC                                     l2560 0230  
                                   l2640 031D                                     l2632 02FF  
                                   l2624 02DD                                     l2616 02C8  
                                   l2720 03F1                                     l2712 03E7  
                                   l2704 03C9                                     l2448 0F78  
                                   l2480 0EEB                                     l2472 0EB6  
                                   l2800 0FB7                                     l2544 00CD  
                                   l2536 00B9                                     l2528 00A5  
                                   l3184 0539                                     l3176 0529  
                                   l3168 051D                                     l2386 0FDB  
                                   l2378 0FC3                                     l2394 013B  
                                   l2466 003C                                     l2458 002B  
                                   l2554 0F60                                     l2730 040C  
                                   l2722 03F5                                     l2570 0246  
                                   l2562 0231                                     l2650 0332  
                                   l2642 0320                                     l2634 030A  
                                   l2626 02E0                                     l2618 02CB  
                                   l2714 03E9                                     l2706 03D7  
                                   l2810 0EDA                                     l2490 005C  
                                   l2482 0050                                     l2474 0EDE  
                                   l2802 0FB8                                     l2546 00CF  
                                   l2538 00BB                                     l3194 054B  
                                   l3186 053F                                     l3178 052C  
                                   l2396 019B                                     l2468 0041  
                                   l2556 0F65                                     l2548 0F51  
                                   l2740 0420                                     l2732 040F  
                                   l2724 03F6                                     l2580 0273  
                                   l2572 0249                                     l2564 0234  
                                   l2660 0352                                     l2652 0340  
                                   l2644 0322                                     l2636 030C  
                                   l2628 02EE                                     l2716 03EA  
                                   l2708 03DA                                     l2492 0060  
                                   l2484 0052                                     l2476 0EE2  
                                   l2820 0F33                                     l2812 0F27  
                                   l2804 0FB9                                     l2900 05A3  
                                   l3196 0554                                     l3188 0546  
                                   l2398 019C                                     l2830 0F9E  
                                   l2822 0F85                                     l2558 0F67  
                                   l2750 0439                                     l2742 0427  
                                   l2734 0411                                     l2726 03F9  
                                   l2590 028B                                     l2582 0275  
                                   l2574 0257                                     l2566 023F  
                                   l2662 0353                                     l2654 0343  
                                   l2646 032D                                     l2638 030F  
                                   l2718 03EF                                     l2670 035F  
                                   l2478 0EE8                                     l2494 0069  
                                   l2486 0054                                     l2814 0F2A  
                                   l2806 0FBE                                     l2902 05AD  
                                   l2840 00D7                                     l2832 0FA1  
                                   l2824 0F86                                     l2760 0462  
                                   l2752 043C                                     l2744 0429  
                                   l2736 0413                                     l2728 0402  
                                   l2592 0296                                     l2584 0278  
                                   l2576 0266                                     l2568 0244  
                                   l2664 0358                                     l2656 0345  
                                   l2648 032F                                     l2680 0377  
                                   l2672 0362                                     l2808 0ED5  
                                   l2496 006C                                     l2488 0057  
                                   l2816 0F2D                                     l2920 05E2  
                                   l2904 05B9                                     l2850 010D  
                                   l2842 00E3                                     l2826 0F91  
                                   l2762 0472                                     l2754 0448  
                                   l2746 042E                                     l2738 041E  
                                   l2594 0298                                     l2586 0286  
                                   l2578 0268                                     l2666 035A  
                                   l2658 0350                                     l2690 03A3  
                                   l2682 0385                                     l2674 036D  
                                   l2498 0073                                     l2818 0F30  
                                   l2930 05FD                                     l2922 05E7  
                                   l2914 05D2                                     l2906 05BF  
                                   l2860 0125                                     l2852 010F  
                                   l2844 00F1                                     l2836 00D3  
                                   l2828 0F9A                                     l2764 0482  
                                   l2756 044D                                     l2748 0437  
                                   l2596 029B                                     l2588 0289  
                                   l2692 03A6                                     l2684 0394  
                                   l2676 0372                                     l2668 035E  
                                   l2780 0FA7                                     l2940 063F  
                                   l2932 060C                                     l2924 05EB  
                                   l2916 05D7                                     l2908 05CD  
                                   l2862 0130                                     l2854 0112  
                                   l2846 0100                                     l2838 00D4  
                                   l2870 0F0E                                     l2774 0499  
                                   l2766 048E                                     l2758 0452  
                                   l2598 02A9                                     l2694 03B4  
                                   l2686 0396                                     l2678 0374  
                                   l2790 0FAF                                     l2782 0FA9  
                                   l2942 0643                                     l2934 0613  
                                   l2926 05EF                                     l2918 05E0  
                                   l2864 0132                                     l2856 0120  
                                   l2848 0102                                     l2880 0F15  
                                   l2872 0F10                                     l2768 0497  
                                   l2696 03B7                                     l2688 03A1  
                                   l2792 0FB1                                     l2784 0FAA  
                                   l2960 0688                                     l2928 05F8  
                                   l2858 0123                                     l2874 0F12  
                                   l2698 03B9                                     l2794 0FB2  
                                   l2786 0FAB                                     l2778 0FA3  
                                   l2970 06D5                                     l2954 0670  
                                   l2938 0615                                     l2890 057D  
                                   l2876 0F13                                     l2868 0F0B  
                                   l2796 0FB4                                     l2788 0FAD  
                                   l2980 0702                                     l2972 06DF  
                                   l2948 065B                                     l2892 0580  
                                   l2884 056D                                     l2878 0F14  
                                   l2798 0FB6                                     l2990 0724  
                                   l2974 06EB                                     l2966 0698  
                                   l2894 0583                                     l2886 0578  
                                   l2992 0729                                     l2984 0714  
                                   l2976 06F1                                     l2968 06D0  
                                   l2896 0593                                     l2888 057B  
                                   l2994 0732                                     l2986 0719  
                                   l2978 06FF                                     l2898 059E  
                                   l2988 0722                                     l2998 0738  
                                   u1000 0F9A                                     u1001 0F99  
                                   u1010 00E0                                     u1011 00DF  
                                   u1100 065A                                     u1020 0575  
                                   u1101 0659                                     u1110 066A  
                                   u1030 058C                                     u1111 0669  
                                   u1031 058B                                     u1200 077A  
                                   u1120 0670                                     u1040 05BE  
                                   u1201 0779                                     u1121 066F  
                                   u1105 0656                                     u1041 05BD  
                                   u1210 078A                                     u1130 0687  
                                   u1050 060C                                     u1211 0789  
                                   u1131 0686                                     u1115 0666  
                                   u1051 060B                                     u1220 01B0  
                                   u1140 0697                                     u1060 0613  
                                   u1300 04DE                                     u1221 01AF  
                                   u1205 0776                                     u1141 0696  
                                   u1061 0612                                     u1301 04DD  
                                   u1230 01C0                                     u1310 04E6  
                                   u1231 01BF                                     u1215 0786  
                                   u1135 0683                                     u1055 0608  
                                   u1311 04E5                                     u1240 01D3  
                                   u1160 06F0                                     u1320 050A  
                                   u1241 01D2                                     u1161 06EF  
                                   u1145 0693                                     u1321 0509  
                                   u1250 01E0                                     u1170 0711  
                                   u1090 0643                                     u1330 0546  
                                   u1251 01DF                                     u1171 0710  
                                   u1155 06C4                                     u1091 0642  
                                   u1075 061E                                     u1331 0545  
                                   u1260 01E8                                     u1340 0568  
                                   u1261 01E7                                     u1085 0633  
                                   u1341 0567                                     u1325 0506  
                                   _LATA 010C                                     u1270 020C  
                                   u1190 0763                                     u1271 020B  
                                   u1191 0762                                     u1175 070D  
                                   u1407 054F                                     _LATC 010E  
                                   u1185 0742                                     u1417 05A7  
                                   u1345 0564                                     u1290 04AC  
                                   u1507 01EE                                     u1427 05B3  
                                   u1291 04AB                                     u1517 0423  
                                   u1437 05C5                                     u1447 05F3  
                                   u1457 06D9                                     u1377 04B4  
                                   u1467 06E5                                     u1387 04C6  
                                   u1477 06F7                                     u1397 04F0  
                                   u1487 072D                                     u1497 0F6E  
                                   _LWLO 0CAD                                     _WPUA 020C  
                                   _WPUC 020E                        main@current_state 0054  
                        __end_of_SW1_ISR 0F27                  __end_of_NVM_StatusClear 0EB9  
                                   _main 049B                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006                                     btemp 007E  
                           _unlockKeyLow 007D              _INT_DefaultInterruptHandler 0000  
                                   start 0002                __end_of_SPI1_ByteExchange 0EFF  
        __end_of_INT_SetInterruptHandler 0EC7                     __end_of_EEPROM_Write 0FC1  
                         _no_motion_init 1045                              ?_SPI1_Close 0070  
                                  ?_main 0070                                    _EEADR 0191  
                                  _IOCAF 0393                                    _IOCAN 0392  
                                  _IOCAP 0391                                    _TRISA 008C  
                                  _TRISC 008E                      orientation_Up@F2710 0061  
                           _ADXL345_init 00D3                  __end_of_PIN_MANAGER_IOC 0EDE  
                         _WDT_Initialize 0005                                    main@i 0050  
                _SW1_SetInterruptHandler 0EC7                            _unlockKeyHigh 007C  
                                  pclath 000A          SPI1_BufferWrite@bufferInputSize 0074  
                                  status 0003                                    wtemp0 007E  
                       ??_setupForImpact 007A                       _ADXL345_validation 0F85  
                       EEPROM_Write@data 0072                          __initialization 07E5  
                           __end_of_main 056D                      ?_ADXL345_validation 0070  
                 __end_of_no_motion_init 1049           SPI1_BufferRead@bufferInputSize 0073  
                                 ??_main 004B                             ?_saveOffsets 007A  
                 __end_of_WDT_Initialize 0009                                ??_SW1_ISR 0071  
                   ??_ADXL345_validation 007A                                   _EEADRH 0192  
                                 _EEADRL 0191                                   _EEDATA 0193  
                                 _EEDATH 0194                                   _EEDATL 0193  
                                 _EECON1 0195                                   _EECON2 0196  
               __end_of_SPI1_BufferWrite 1000                                   _ANSELA 018C  
                                 _ANSELC 018E                                   _BORCON 0116  
                                 _INLVLA 038C                                   _INLVLC 038E  
                                 _OSCCON 0099                                   _WDTCON 0097  
                       ?_NVM_StatusClear 0070                         _eeprom_interface 102B  
                      __end_of_SPI1_Host 101C                        __end_of_SPI1_Open 01A2  
                                 ___wmul 0FC1                 __end_of_setupForFreefall 02C7  
                                 _memcpy 002B                                   _memset 0F3A  
                      ?_CLOCK_Initialize 0070                        ??_SPI1_BufferRead 0073  
               ??_ADXL345_ClearInterrupt 007A                       ??_CLOCK_Initialize 0070  
                        ?_WDT_Initialize 0070                ??_SW1_SetInterruptHandler 0072  
                      setupForImpact@msg 0020  SW1_SetInterruptHandler@InterruptHandler 0070  
INT_SetInterruptHandler@InterruptHandler 0070                         ?_PIN_MANAGER_IOC 0070  
                         _SPI1_IsRxReady 0000                           _SPI1_IsTxReady 0000  
                       ??_NVM_Initialize 0070                        _SYSTEM_Initialize 0F27  
                __end_of__initialization 07FD                           _SPI1_ByteWrite 0EB9  
                     ?_SYSTEM_Initialize 0070            __end_of_ADXL345_init_settings 1045  
                         __pcstackCOMMON 0070                           calibrate@F2721 0055  
                    ??_SYSTEM_Initialize 0072                        ??_SPI1_Initialize 0070  
                         calibrate@i_838 00BA                           calibrate@Z_n1g 00AC  
                     _spi1_configuration 101C                           _OPTION_REGbits 0095  
                         calibrate@sum_X 00AE                           calibrate@sum_Y 00B0  
                         calibrate@sum_Z 00BC                               _dataBuffer 22F0  
              __end_of_SYSTEM_Initialize 0F3A                        calibrate@acc_data 00A0  
                      saveOffsets@x_axis 0020                             _EEPROM_Write 0FA3  
                      saveOffsets@y_axis 007A                               __pbssBANK0 0055  
                      saveOffsets@z_axis 007B                   __end_of_SPI1_ByteWrite 0EBD  
             __end_of_MotionEventHandler 0230              SPI1_BufferWrite@bufferInput 0076  
                             __pmaintext 049B                                  ?___wmul 0070  
              SPI1_BufferRead@bufferData 0070                SPI1_BufferRead@bufferSize 0071  
                                ?_memcpy 0070                                  ?_memset 0070  
                                _APFCON0 011D                             ??_SPI1_Close 0070  
                                _OSCTUNE 0098                                  _SSP1ADD 0212  
                                _SSP1BUF 0211                                  _SW1_ISR 0F18  
                      __end_of_calibrate 07E5                          ?_SPI1_ByteWrite 0070  
                      __end_of_fall_init 1051                  MotionEventHandler@state 0048  
                             calibrate@i 00B8                       __end_of_SPI1_Close 0EB6  
                                __ptext1 056D                                  __ptext2 0075  
                                __ptext3 0FA3                                  __ptext4 0F27  
                                __ptext5 0005                                  __ptext6 0EDE  
                                __ptext7 0050                                  __ptext8 0EC7  
                                __ptext9 0EBD                 __end_of_eeprom_interface 1039  
               ??_PIN_MANAGER_Initialize 0072                                _IOCAFbits 0393  
                _INT_SetInterruptHandler 0EC1                                  clrloop0 0F00  
                   end_of_initialization 07FD                        ?_SPI1_BufferWrite 0070  
           ?_SW1_DefaultInterruptHandler 0070                                  memcpy@d 0079  
                                memcpy@n 0074                                  memcpy@s 0076  
                          ??_EEPROM_Read 0072                                  memset@c 0072  
                                memset@n 0074                                  memset@p 0076  
                     ??_SPI1_BufferWrite 0074                          _EEPROM_ByteRead 0000  
                 _ADXL345_ClearInterrupt 0F51                          _SPI1_BufferRead 0009  
                             _timer_20ms 0069                                _SPI1_Host 1000  
                      ?_setupForFreefall 0070                                _SPI1_Open 0136  
                       ??_WDT_Initialize 0070                       ??_setupForFreefall 007A  
                              _PORTAbits 000C                      _SPI1_BufferExchange 0000  
          ??_SW1_DefaultInterruptHandler 0070                          _SPI1_Initialize 0EDE  
                    __end_of_EEPROM_Read 0F18             __end_of_INTERRUPT_Initialize 0EF3  
                             ?_SPI1_Open 0076                           __end_of___wmul 0FE0  
                         __end_of_memcpy 0050                           __end_of_memset 0F51  
              ??_INT_SetInterruptHandler 0072                      start_initialization 07E5  
                           calibrate@msg 00C2                  __end_of_SPI1_BufferRead 002B  
                  setupForInactivity@msg 0020                          ADXL345_init@msg 0020  
                  _ADXL345_init_settings 1039                                 ??___wmul 0074  
                     _MotionEventHandler 01A2                           _orientation_Up 03F5  
             __end_of_setupForInactivity 03F5                                 ??_memcpy 0076  
                               ??_memset 0076                               memset@dest 0070  
               ?_SW1_SetInterruptHandler 0070                      ?_MotionEventHandler 0048  
                          _SPI1_ByteRead 0000                              __pbssBIGRAM 22F0  
                          ?_ADXL345_init 0070                              __pbssCOMMON 007C  
                              ___latbits 0002                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                         ??_SPI1_ByteWrite 0071  
                               ?_SW1_ISR 0070                  __end_of_SPI1_Initialize 0EE8  
                              _calibrate 056D                              _EEPROM_Read 0F0B  
                   ??_MotionEventHandler 0049                                __pnvBANK0 006C  
             SPI1_BufferWrite@bufferData 0070                   _PIN_MANAGER_Initialize 0050  
             SPI1_BufferWrite@bufferSize 0072                   __end_of_orientation_Up 049B  
                   SPI1_Open@returnValue 0079                                _fall_init 104D  
                            ??_SPI1_Open 0077                            ??_saveOffsets 007C  
             SPI1_BufferRead@bufferInput 0075                           ??_ADXL345_init 007A  
                      ??_NVM_StatusClear 0070                      __end_of_impact_init 104D  
                   _INTERRUPT_Initialize 0EE8                  ?_ADXL345_ClearInterrupt 0070  
                       _CLOCK_Initialize 0ECD                               ?_calibrate 0070  
                         ___wmul@product 0074                         ?_SPI1_BufferRead 0070  
                               _LATAbits 010C                                 _LATCbits 010E  
                              clear_ram0 0EFF                                 _PIE1bits 0091  
                               _PIR1bits 0011                          ?_orientation_Up 0070  
                   _SW1_InterruptHandler 006C                                 _SSP1CON1 0215  
                               _SSP1CON3 0217          __end_of_SW1_SetInterruptHandler 0ECD  
                     calibrate@sum_X_avg 00BE                       calibrate@sum_Y_avg 00C0  
                     calibrate@sum_Z_avg 00DC                                 _SSP1STAT 0214  
                      ??_PIN_MANAGER_IOC 0071                           _setupForImpact 02C7  
                      _SPI1_Deinitialize 0000                                main@i_715 0052  
                      ___wmul@multiplier 0070                                main@X_val 004D  
                              main@Y_val 004E                                main@Z_val 004F  
                    __end_of_saveOffsets 00D3                         ?_SPI1_Initialize 0070  
         __end_of_ADXL345_ClearInterrupt 0F6B                    ?_INTERRUPT_Initialize 0070  
                         saveOffsets@msg 0021                               _EECON1bits 0195  
                   calibrate@offset_0g_X 00B2                     calibrate@offset_0g_Y 00B4  
                   calibrate@offset_0g_Z 00B6                                memcpy@tmp 0078  
                 __end_of_setupForImpact 035E                              _impact_init 1049  
             __end_of_ADXL345_validation 0FA3                                 __ptext10 0EB6  
                               __ptext11 0EE8                                 __ptext20 0230  
                               __ptext12 0EC1                                 __ptext21 03F5  
                               __ptext13 0ECD                                 __ptext30 002B  
                               __ptext22 0EB9                                 __ptext14 0ED5  
                               __ptext31 0136                                 __ptext23 0009  
                               __ptext15 0F18                                 __ptext32 0FC1  
                               __ptext24 0F51                                 __ptext16 0F6B  
                               __ptext33 0EB3                                 __ptext25 0F0B  
                               __ptext17 01A2                                 __ptext34 0FE0  
                               __ptext26 0F85                                 __ptext18 035E  
                               __ptext27 0EF3                                 __ptext19 02C7  
                               __ptext28 00D3                                 __ptext29 0F3A  
                           _SSP1CON1bits 0215                            ?_EEPROM_Write 0070  
                 SPI1_ByteWrite@byteData 0070                              ??_calibrate 003B  
 __end_of_acceleration_squared_threshold 1053           _acceleration_squared_threshold 1051  
                    setupForFreefall@msg 0020                     __end_of_ADXL345_init 0136  
                         _NVM_Initialize 0EBD                          ?_setupForImpact 0070  
                            _saveOffsets 0075                               _INTCONbits 000B  
                               memcpy@d1 0070                                 memcpy@s1 0072  
                   _INT_InterruptHandler 006E                   orientation_Up@acc_data 0020  
                     _setupForInactivity 035E                   ??_INTERRUPT_Initialize 0072  
                         ??_EEPROM_Write 0073      __end_of_SW1_DefaultInterruptHandler 0F85  
            _SW1_DefaultInterruptHandler 0F6B             _orientation_check_timer_20ms 0067  
                 orientation_Up@g_deltaX 0042                   orientation_Up@g_deltaY 0044  
                 orientation_Up@g_deltaZ 0046                         _EEPROM_ByteWrite 0000  
               ADXL345_validation@passed 007A                      ?_setupForInactivity 0070  
                           ?_EEPROM_Read 0070                  ?_PIN_MANAGER_Initialize 0070  
              SPI1_ByteExchange@byteData 0070                   _good_orientation_count 006B  
                 __end_of_NVM_Initialize 0EC1                orientation_Up@g_magnitude 0026  
                     EEPROM_Read@address 0070                          _NVM_StatusClear 0EB6  
                       _SPI1_BufferWrite 0FE0                 ?_INT_SetInterruptHandler 0070  
               __end_of_CLOCK_Initialize 0ED5                     ??_setupForInactivity 007A  
                          __pstringtext1 1000                            __pstringtext2 101C  
                          __pstringtext3 102B                            __pstringtext4 1051  
                          __pstringtext5 1039                            __pstringtext6 1045  
                          __pstringtext7 1049                            __pstringtext8 104D  
                             _SPI1_Close 0EB3                         _setupForFreefall 0230  
    EEPROM_Write@globalInterruptBitValue 0073           __end_of_PIN_MANAGER_Initialize 0075  
                       ??_orientation_Up 007A                          _PIN_MANAGER_IOC 0ED5  
                             _NVM_IsBusy 0000                  SPI1_Open@spiConfigIndex 0076  
                        ?_NVM_Initialize 0070                      EEPROM_Write@address 0070  
             __end_of_spi1_configuration 102B  
