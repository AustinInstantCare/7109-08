

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Feb 05 17:14:23 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16LF1825
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,space=0,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,space=0,delta=2,noexec
    13                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    15                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	clrtext,global,class=CODE,space=0,delta=2
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=2
    54                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=2
    55                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2,group=1
    57                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    60                           	dabs	1,0x620,48
    61                           	dabs	1,0x5A0,80
    62                           	dabs	1,0x520,80
    63                           	dabs	1,0x4C0,48
    64                           	dabs	1,0x22F0,0,_dataBuffer
    65                           	dabs	1,0x7E,2
    66     0000                     
    67                           ; Generated 07/09/2023 GMT
    68                           ; 
    69                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16LF1825 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101     0008                     bsr             equ	8
   102     0005                     fsr0h           equ	5
   103     0004                     fsr0l           equ	4
   104     0007                     fsr1h           equ	7
   105     0006                     fsr1l           equ	6
   106     0000                     indf            equ	0
   107     0000                     indf0           equ	0
   108     0001                     indf1           equ	1
   109     000B                     intcon          equ	11
   110     0002                     pc              equ	2
   111     0002                     pcl             equ	2
   112     000A                     pclath          equ	10
   113     0003                     status          equ	3
   114     0009                     wreg            equ	9
   115     0000                     INDF0           equ	0	;# 
   116     0001                     INDF1           equ	1	;# 
   117     0002                     PCL             equ	2	;# 
   118     0003                     STATUS          equ	3	;# 
   119     0004                     FSR0L           equ	4	;# 
   120     0005                     FSR0H           equ	5	;# 
   121     0006                     FSR1L           equ	6	;# 
   122     0007                     FSR1H           equ	7	;# 
   123     0008                     BSR             equ	8	;# 
   124     0009                     WREG            equ	9	;# 
   125     000A                     PCLATH          equ	10	;# 
   126     000B                     INTCON          equ	11	;# 
   127     000C                     PORTA           equ	12	;# 
   128     000E                     PORTC           equ	14	;# 
   129     0011                     PIR1            equ	17	;# 
   130     0012                     PIR2            equ	18	;# 
   131     0013                     PIR3            equ	19	;# 
   132     0015                     TMR0            equ	21	;# 
   133     0016                     TMR1            equ	22	;# 
   134     0016                     TMR1L           equ	22	;# 
   135     0017                     TMR1H           equ	23	;# 
   136     0018                     T1CON           equ	24	;# 
   137     0019                     T1GCON          equ	25	;# 
   138     001A                     TMR2            equ	26	;# 
   139     001B                     PR2             equ	27	;# 
   140     001C                     T2CON           equ	28	;# 
   141     001E                     CPSCON0         equ	30	;# 
   142     001F                     CPSCON1         equ	31	;# 
   143     008C                     TRISA           equ	140	;# 
   144     008E                     TRISC           equ	142	;# 
   145     0091                     PIE1            equ	145	;# 
   146     0092                     PIE2            equ	146	;# 
   147     0093                     PIE3            equ	147	;# 
   148     0095                     OPTION_REG      equ	149	;# 
   149     0096                     PCON            equ	150	;# 
   150     0097                     WDTCON          equ	151	;# 
   151     0098                     OSCTUNE         equ	152	;# 
   152     0099                     OSCCON          equ	153	;# 
   153     009A                     OSCSTAT         equ	154	;# 
   154     009B                     ADRES           equ	155	;# 
   155     009B                     ADRESL          equ	155	;# 
   156     009C                     ADRESH          equ	156	;# 
   157     009D                     ADCON0          equ	157	;# 
   158     009E                     ADCON1          equ	158	;# 
   159     010C                     LATA            equ	268	;# 
   160     010E                     LATC            equ	270	;# 
   161     0111                     CM1CON0         equ	273	;# 
   162     0112                     CM1CON1         equ	274	;# 
   163     0113                     CM2CON0         equ	275	;# 
   164     0114                     CM2CON1         equ	276	;# 
   165     0115                     CMOUT           equ	277	;# 
   166     0116                     BORCON          equ	278	;# 
   167     0117                     FVRCON          equ	279	;# 
   168     0118                     DACCON0         equ	280	;# 
   169     0119                     DACCON1         equ	281	;# 
   170     011A                     SRCON0          equ	282	;# 
   171     011B                     SRCON1          equ	283	;# 
   172     011D                     APFCON0         equ	285	;# 
   173     011E                     APFCON1         equ	286	;# 
   174     018C                     ANSELA          equ	396	;# 
   175     018E                     ANSELC          equ	398	;# 
   176     0191                     EEADR           equ	401	;# 
   177     0191                     EEADRL          equ	401	;# 
   178     0192                     EEADRH          equ	402	;# 
   179     0193                     EEDAT           equ	403	;# 
   180     0193                     EEDATL          equ	403	;# 
   181     0193                     EEDATA          equ	403	;# 
   182     0194                     EEDATH          equ	404	;# 
   183     0195                     EECON1          equ	405	;# 
   184     0196                     EECON2          equ	406	;# 
   185     0199                     RCREG           equ	409	;# 
   186     019A                     TXREG           equ	410	;# 
   187     019B                     SPBRG           equ	411	;# 
   188     019B                     SPBRGL          equ	411	;# 
   189     019C                     SPBRGH          equ	412	;# 
   190     019D                     RCSTA           equ	413	;# 
   191     019E                     TXSTA           equ	414	;# 
   192     019F                     BAUDCON         equ	415	;# 
   193     020C                     WPUA            equ	524	;# 
   194     020E                     WPUC            equ	526	;# 
   195     0211                     SSP1BUF         equ	529	;# 
   196     0211                     SSPBUF          equ	529	;# 
   197     0212                     SSP1ADD         equ	530	;# 
   198     0212                     SSPADD          equ	530	;# 
   199     0213                     SSP1MSK         equ	531	;# 
   200     0213                     SSPMSK          equ	531	;# 
   201     0214                     SSP1STAT        equ	532	;# 
   202     0214                     SSPSTAT         equ	532	;# 
   203     0215                     SSP1CON1        equ	533	;# 
   204     0215                     SSPCON1         equ	533	;# 
   205     0215                     SSPCON          equ	533	;# 
   206     0216                     SSP1CON2        equ	534	;# 
   207     0216                     SSPCON2         equ	534	;# 
   208     0217                     SSP1CON3        equ	535	;# 
   209     0217                     SSPCON3         equ	535	;# 
   210     0291                     CCPR1           equ	657	;# 
   211     0291                     CCPR1L          equ	657	;# 
   212     0292                     CCPR1H          equ	658	;# 
   213     0293                     CCP1CON         equ	659	;# 
   214     0294                     PWM1CON         equ	660	;# 
   215     0295                     CCP1AS          equ	661	;# 
   216     0295                     ECCP1AS         equ	661	;# 
   217     0296                     PSTR1CON        equ	662	;# 
   218     0298                     CCPR2           equ	664	;# 
   219     0298                     CCPR2L          equ	664	;# 
   220     0299                     CCPR2H          equ	665	;# 
   221     029A                     CCP2CON         equ	666	;# 
   222     029B                     PWM2CON         equ	667	;# 
   223     029C                     CCP2AS          equ	668	;# 
   224     029D                     PSTR2CON        equ	669	;# 
   225     029E                     CCPTMRS         equ	670	;# 
   226     029E                     CCPTMRS0        equ	670	;# 
   227     0311                     CCPR3           equ	785	;# 
   228     0311                     CCPR3L          equ	785	;# 
   229     0312                     CCPR3H          equ	786	;# 
   230     0313                     CCP3CON         equ	787	;# 
   231     0318                     CCPR4           equ	792	;# 
   232     0318                     CCPR4L          equ	792	;# 
   233     0319                     CCPR4H          equ	793	;# 
   234     031A                     CCP4CON         equ	794	;# 
   235     038C                     INLVLA          equ	908	;# 
   236     038E                     INLVLC          equ	910	;# 
   237     0391                     IOCAP           equ	913	;# 
   238     0392                     IOCAN           equ	914	;# 
   239     0393                     IOCAF           equ	915	;# 
   240     039A                     CLKRCON         equ	922	;# 
   241     039C                     MDCON           equ	924	;# 
   242     039D                     MDSRC           equ	925	;# 
   243     039E                     MDCARL          equ	926	;# 
   244     039F                     MDCARH          equ	927	;# 
   245     0415                     TMR4            equ	1045	;# 
   246     0416                     PR4             equ	1046	;# 
   247     0417                     T4CON           equ	1047	;# 
   248     041C                     TMR6            equ	1052	;# 
   249     041D                     PR6             equ	1053	;# 
   250     041E                     T6CON           equ	1054	;# 
   251     0FE4                     STATUS_SHAD     equ	4068	;# 
   252     0FE5                     WREG_SHAD       equ	4069	;# 
   253     0FE6                     BSR_SHAD        equ	4070	;# 
   254     0FE7                     PCLATH_SHAD     equ	4071	;# 
   255     0FE8                     FSR0L_SHAD      equ	4072	;# 
   256     0FE9                     FSR0H_SHAD      equ	4073	;# 
   257     0FEA                     FSR1L_SHAD      equ	4074	;# 
   258     0FEB                     FSR1H_SHAD      equ	4075	;# 
   259     0FED                     STKPTR          equ	4077	;# 
   260     0FEE                     TOSL            equ	4078	;# 
   261     0FEF                     TOSH            equ	4079	;# 
   262     0000                     INDF0           equ	0	;# 
   263     0001                     INDF1           equ	1	;# 
   264     0002                     PCL             equ	2	;# 
   265     0003                     STATUS          equ	3	;# 
   266     0004                     FSR0L           equ	4	;# 
   267     0005                     FSR0H           equ	5	;# 
   268     0006                     FSR1L           equ	6	;# 
   269     0007                     FSR1H           equ	7	;# 
   270     0008                     BSR             equ	8	;# 
   271     0009                     WREG            equ	9	;# 
   272     000A                     PCLATH          equ	10	;# 
   273     000B                     INTCON          equ	11	;# 
   274     000C                     PORTA           equ	12	;# 
   275     000E                     PORTC           equ	14	;# 
   276     0011                     PIR1            equ	17	;# 
   277     0012                     PIR2            equ	18	;# 
   278     0013                     PIR3            equ	19	;# 
   279     0015                     TMR0            equ	21	;# 
   280     0016                     TMR1            equ	22	;# 
   281     0016                     TMR1L           equ	22	;# 
   282     0017                     TMR1H           equ	23	;# 
   283     0018                     T1CON           equ	24	;# 
   284     0019                     T1GCON          equ	25	;# 
   285     001A                     TMR2            equ	26	;# 
   286     001B                     PR2             equ	27	;# 
   287     001C                     T2CON           equ	28	;# 
   288     001E                     CPSCON0         equ	30	;# 
   289     001F                     CPSCON1         equ	31	;# 
   290     008C                     TRISA           equ	140	;# 
   291     008E                     TRISC           equ	142	;# 
   292     0091                     PIE1            equ	145	;# 
   293     0092                     PIE2            equ	146	;# 
   294     0093                     PIE3            equ	147	;# 
   295     0095                     OPTION_REG      equ	149	;# 
   296     0096                     PCON            equ	150	;# 
   297     0097                     WDTCON          equ	151	;# 
   298     0098                     OSCTUNE         equ	152	;# 
   299     0099                     OSCCON          equ	153	;# 
   300     009A                     OSCSTAT         equ	154	;# 
   301     009B                     ADRES           equ	155	;# 
   302     009B                     ADRESL          equ	155	;# 
   303     009C                     ADRESH          equ	156	;# 
   304     009D                     ADCON0          equ	157	;# 
   305     009E                     ADCON1          equ	158	;# 
   306     010C                     LATA            equ	268	;# 
   307     010E                     LATC            equ	270	;# 
   308     0111                     CM1CON0         equ	273	;# 
   309     0112                     CM1CON1         equ	274	;# 
   310     0113                     CM2CON0         equ	275	;# 
   311     0114                     CM2CON1         equ	276	;# 
   312     0115                     CMOUT           equ	277	;# 
   313     0116                     BORCON          equ	278	;# 
   314     0117                     FVRCON          equ	279	;# 
   315     0118                     DACCON0         equ	280	;# 
   316     0119                     DACCON1         equ	281	;# 
   317     011A                     SRCON0          equ	282	;# 
   318     011B                     SRCON1          equ	283	;# 
   319     011D                     APFCON0         equ	285	;# 
   320     011E                     APFCON1         equ	286	;# 
   321     018C                     ANSELA          equ	396	;# 
   322     018E                     ANSELC          equ	398	;# 
   323     0191                     EEADR           equ	401	;# 
   324     0191                     EEADRL          equ	401	;# 
   325     0192                     EEADRH          equ	402	;# 
   326     0193                     EEDAT           equ	403	;# 
   327     0193                     EEDATL          equ	403	;# 
   328     0193                     EEDATA          equ	403	;# 
   329     0194                     EEDATH          equ	404	;# 
   330     0195                     EECON1          equ	405	;# 
   331     0196                     EECON2          equ	406	;# 
   332     0199                     RCREG           equ	409	;# 
   333     019A                     TXREG           equ	410	;# 
   334     019B                     SPBRG           equ	411	;# 
   335     019B                     SPBRGL          equ	411	;# 
   336     019C                     SPBRGH          equ	412	;# 
   337     019D                     RCSTA           equ	413	;# 
   338     019E                     TXSTA           equ	414	;# 
   339     019F                     BAUDCON         equ	415	;# 
   340     020C                     WPUA            equ	524	;# 
   341     020E                     WPUC            equ	526	;# 
   342     0211                     SSP1BUF         equ	529	;# 
   343     0211                     SSPBUF          equ	529	;# 
   344     0212                     SSP1ADD         equ	530	;# 
   345     0212                     SSPADD          equ	530	;# 
   346     0213                     SSP1MSK         equ	531	;# 
   347     0213                     SSPMSK          equ	531	;# 
   348     0214                     SSP1STAT        equ	532	;# 
   349     0214                     SSPSTAT         equ	532	;# 
   350     0215                     SSP1CON1        equ	533	;# 
   351     0215                     SSPCON1         equ	533	;# 
   352     0215                     SSPCON          equ	533	;# 
   353     0216                     SSP1CON2        equ	534	;# 
   354     0216                     SSPCON2         equ	534	;# 
   355     0217                     SSP1CON3        equ	535	;# 
   356     0217                     SSPCON3         equ	535	;# 
   357     0291                     CCPR1           equ	657	;# 
   358     0291                     CCPR1L          equ	657	;# 
   359     0292                     CCPR1H          equ	658	;# 
   360     0293                     CCP1CON         equ	659	;# 
   361     0294                     PWM1CON         equ	660	;# 
   362     0295                     CCP1AS          equ	661	;# 
   363     0295                     ECCP1AS         equ	661	;# 
   364     0296                     PSTR1CON        equ	662	;# 
   365     0298                     CCPR2           equ	664	;# 
   366     0298                     CCPR2L          equ	664	;# 
   367     0299                     CCPR2H          equ	665	;# 
   368     029A                     CCP2CON         equ	666	;# 
   369     029B                     PWM2CON         equ	667	;# 
   370     029C                     CCP2AS          equ	668	;# 
   371     029D                     PSTR2CON        equ	669	;# 
   372     029E                     CCPTMRS         equ	670	;# 
   373     029E                     CCPTMRS0        equ	670	;# 
   374     0311                     CCPR3           equ	785	;# 
   375     0311                     CCPR3L          equ	785	;# 
   376     0312                     CCPR3H          equ	786	;# 
   377     0313                     CCP3CON         equ	787	;# 
   378     0318                     CCPR4           equ	792	;# 
   379     0318                     CCPR4L          equ	792	;# 
   380     0319                     CCPR4H          equ	793	;# 
   381     031A                     CCP4CON         equ	794	;# 
   382     038C                     INLVLA          equ	908	;# 
   383     038E                     INLVLC          equ	910	;# 
   384     0391                     IOCAP           equ	913	;# 
   385     0392                     IOCAN           equ	914	;# 
   386     0393                     IOCAF           equ	915	;# 
   387     039A                     CLKRCON         equ	922	;# 
   388     039C                     MDCON           equ	924	;# 
   389     039D                     MDSRC           equ	925	;# 
   390     039E                     MDCARL          equ	926	;# 
   391     039F                     MDCARH          equ	927	;# 
   392     0415                     TMR4            equ	1045	;# 
   393     0416                     PR4             equ	1046	;# 
   394     0417                     T4CON           equ	1047	;# 
   395     041C                     TMR6            equ	1052	;# 
   396     041D                     PR6             equ	1053	;# 
   397     041E                     T6CON           equ	1054	;# 
   398     0FE4                     STATUS_SHAD     equ	4068	;# 
   399     0FE5                     WREG_SHAD       equ	4069	;# 
   400     0FE6                     BSR_SHAD        equ	4070	;# 
   401     0FE7                     PCLATH_SHAD     equ	4071	;# 
   402     0FE8                     FSR0L_SHAD      equ	4072	;# 
   403     0FE9                     FSR0H_SHAD      equ	4073	;# 
   404     0FEA                     FSR1L_SHAD      equ	4074	;# 
   405     0FEB                     FSR1H_SHAD      equ	4075	;# 
   406     0FED                     STKPTR          equ	4077	;# 
   407     0FEE                     TOSL            equ	4078	;# 
   408     0FEF                     TOSH            equ	4079	;# 
   409     0000                     INDF0           equ	0	;# 
   410     0001                     INDF1           equ	1	;# 
   411     0002                     PCL             equ	2	;# 
   412     0003                     STATUS          equ	3	;# 
   413     0004                     FSR0L           equ	4	;# 
   414     0005                     FSR0H           equ	5	;# 
   415     0006                     FSR1L           equ	6	;# 
   416     0007                     FSR1H           equ	7	;# 
   417     0008                     BSR             equ	8	;# 
   418     0009                     WREG            equ	9	;# 
   419     000A                     PCLATH          equ	10	;# 
   420     000B                     INTCON          equ	11	;# 
   421     000C                     PORTA           equ	12	;# 
   422     000E                     PORTC           equ	14	;# 
   423     0011                     PIR1            equ	17	;# 
   424     0012                     PIR2            equ	18	;# 
   425     0013                     PIR3            equ	19	;# 
   426     0015                     TMR0            equ	21	;# 
   427     0016                     TMR1            equ	22	;# 
   428     0016                     TMR1L           equ	22	;# 
   429     0017                     TMR1H           equ	23	;# 
   430     0018                     T1CON           equ	24	;# 
   431     0019                     T1GCON          equ	25	;# 
   432     001A                     TMR2            equ	26	;# 
   433     001B                     PR2             equ	27	;# 
   434     001C                     T2CON           equ	28	;# 
   435     001E                     CPSCON0         equ	30	;# 
   436     001F                     CPSCON1         equ	31	;# 
   437     008C                     TRISA           equ	140	;# 
   438     008E                     TRISC           equ	142	;# 
   439     0091                     PIE1            equ	145	;# 
   440     0092                     PIE2            equ	146	;# 
   441     0093                     PIE3            equ	147	;# 
   442     0095                     OPTION_REG      equ	149	;# 
   443     0096                     PCON            equ	150	;# 
   444     0097                     WDTCON          equ	151	;# 
   445     0098                     OSCTUNE         equ	152	;# 
   446     0099                     OSCCON          equ	153	;# 
   447     009A                     OSCSTAT         equ	154	;# 
   448     009B                     ADRES           equ	155	;# 
   449     009B                     ADRESL          equ	155	;# 
   450     009C                     ADRESH          equ	156	;# 
   451     009D                     ADCON0          equ	157	;# 
   452     009E                     ADCON1          equ	158	;# 
   453     010C                     LATA            equ	268	;# 
   454     010E                     LATC            equ	270	;# 
   455     0111                     CM1CON0         equ	273	;# 
   456     0112                     CM1CON1         equ	274	;# 
   457     0113                     CM2CON0         equ	275	;# 
   458     0114                     CM2CON1         equ	276	;# 
   459     0115                     CMOUT           equ	277	;# 
   460     0116                     BORCON          equ	278	;# 
   461     0117                     FVRCON          equ	279	;# 
   462     0118                     DACCON0         equ	280	;# 
   463     0119                     DACCON1         equ	281	;# 
   464     011A                     SRCON0          equ	282	;# 
   465     011B                     SRCON1          equ	283	;# 
   466     011D                     APFCON0         equ	285	;# 
   467     011E                     APFCON1         equ	286	;# 
   468     018C                     ANSELA          equ	396	;# 
   469     018E                     ANSELC          equ	398	;# 
   470     0191                     EEADR           equ	401	;# 
   471     0191                     EEADRL          equ	401	;# 
   472     0192                     EEADRH          equ	402	;# 
   473     0193                     EEDAT           equ	403	;# 
   474     0193                     EEDATL          equ	403	;# 
   475     0193                     EEDATA          equ	403	;# 
   476     0194                     EEDATH          equ	404	;# 
   477     0195                     EECON1          equ	405	;# 
   478     0196                     EECON2          equ	406	;# 
   479     0199                     RCREG           equ	409	;# 
   480     019A                     TXREG           equ	410	;# 
   481     019B                     SPBRG           equ	411	;# 
   482     019B                     SPBRGL          equ	411	;# 
   483     019C                     SPBRGH          equ	412	;# 
   484     019D                     RCSTA           equ	413	;# 
   485     019E                     TXSTA           equ	414	;# 
   486     019F                     BAUDCON         equ	415	;# 
   487     020C                     WPUA            equ	524	;# 
   488     020E                     WPUC            equ	526	;# 
   489     0211                     SSP1BUF         equ	529	;# 
   490     0211                     SSPBUF          equ	529	;# 
   491     0212                     SSP1ADD         equ	530	;# 
   492     0212                     SSPADD          equ	530	;# 
   493     0213                     SSP1MSK         equ	531	;# 
   494     0213                     SSPMSK          equ	531	;# 
   495     0214                     SSP1STAT        equ	532	;# 
   496     0214                     SSPSTAT         equ	532	;# 
   497     0215                     SSP1CON1        equ	533	;# 
   498     0215                     SSPCON1         equ	533	;# 
   499     0215                     SSPCON          equ	533	;# 
   500     0216                     SSP1CON2        equ	534	;# 
   501     0216                     SSPCON2         equ	534	;# 
   502     0217                     SSP1CON3        equ	535	;# 
   503     0217                     SSPCON3         equ	535	;# 
   504     0291                     CCPR1           equ	657	;# 
   505     0291                     CCPR1L          equ	657	;# 
   506     0292                     CCPR1H          equ	658	;# 
   507     0293                     CCP1CON         equ	659	;# 
   508     0294                     PWM1CON         equ	660	;# 
   509     0295                     CCP1AS          equ	661	;# 
   510     0295                     ECCP1AS         equ	661	;# 
   511     0296                     PSTR1CON        equ	662	;# 
   512     0298                     CCPR2           equ	664	;# 
   513     0298                     CCPR2L          equ	664	;# 
   514     0299                     CCPR2H          equ	665	;# 
   515     029A                     CCP2CON         equ	666	;# 
   516     029B                     PWM2CON         equ	667	;# 
   517     029C                     CCP2AS          equ	668	;# 
   518     029D                     PSTR2CON        equ	669	;# 
   519     029E                     CCPTMRS         equ	670	;# 
   520     029E                     CCPTMRS0        equ	670	;# 
   521     0311                     CCPR3           equ	785	;# 
   522     0311                     CCPR3L          equ	785	;# 
   523     0312                     CCPR3H          equ	786	;# 
   524     0313                     CCP3CON         equ	787	;# 
   525     0318                     CCPR4           equ	792	;# 
   526     0318                     CCPR4L          equ	792	;# 
   527     0319                     CCPR4H          equ	793	;# 
   528     031A                     CCP4CON         equ	794	;# 
   529     038C                     INLVLA          equ	908	;# 
   530     038E                     INLVLC          equ	910	;# 
   531     0391                     IOCAP           equ	913	;# 
   532     0392                     IOCAN           equ	914	;# 
   533     0393                     IOCAF           equ	915	;# 
   534     039A                     CLKRCON         equ	922	;# 
   535     039C                     MDCON           equ	924	;# 
   536     039D                     MDSRC           equ	925	;# 
   537     039E                     MDCARL          equ	926	;# 
   538     039F                     MDCARH          equ	927	;# 
   539     0415                     TMR4            equ	1045	;# 
   540     0416                     PR4             equ	1046	;# 
   541     0417                     T4CON           equ	1047	;# 
   542     041C                     TMR6            equ	1052	;# 
   543     041D                     PR6             equ	1053	;# 
   544     041E                     T6CON           equ	1054	;# 
   545     0FE4                     STATUS_SHAD     equ	4068	;# 
   546     0FE5                     WREG_SHAD       equ	4069	;# 
   547     0FE6                     BSR_SHAD        equ	4070	;# 
   548     0FE7                     PCLATH_SHAD     equ	4071	;# 
   549     0FE8                     FSR0L_SHAD      equ	4072	;# 
   550     0FE9                     FSR0H_SHAD      equ	4073	;# 
   551     0FEA                     FSR1L_SHAD      equ	4074	;# 
   552     0FEB                     FSR1H_SHAD      equ	4075	;# 
   553     0FED                     STKPTR          equ	4077	;# 
   554     0FEE                     TOSL            equ	4078	;# 
   555     0FEF                     TOSH            equ	4079	;# 
   556     0000                     INDF0           equ	0	;# 
   557     0001                     INDF1           equ	1	;# 
   558     0002                     PCL             equ	2	;# 
   559     0003                     STATUS          equ	3	;# 
   560     0004                     FSR0L           equ	4	;# 
   561     0005                     FSR0H           equ	5	;# 
   562     0006                     FSR1L           equ	6	;# 
   563     0007                     FSR1H           equ	7	;# 
   564     0008                     BSR             equ	8	;# 
   565     0009                     WREG            equ	9	;# 
   566     000A                     PCLATH          equ	10	;# 
   567     000B                     INTCON          equ	11	;# 
   568     000C                     PORTA           equ	12	;# 
   569     000E                     PORTC           equ	14	;# 
   570     0011                     PIR1            equ	17	;# 
   571     0012                     PIR2            equ	18	;# 
   572     0013                     PIR3            equ	19	;# 
   573     0015                     TMR0            equ	21	;# 
   574     0016                     TMR1            equ	22	;# 
   575     0016                     TMR1L           equ	22	;# 
   576     0017                     TMR1H           equ	23	;# 
   577     0018                     T1CON           equ	24	;# 
   578     0019                     T1GCON          equ	25	;# 
   579     001A                     TMR2            equ	26	;# 
   580     001B                     PR2             equ	27	;# 
   581     001C                     T2CON           equ	28	;# 
   582     001E                     CPSCON0         equ	30	;# 
   583     001F                     CPSCON1         equ	31	;# 
   584     008C                     TRISA           equ	140	;# 
   585     008E                     TRISC           equ	142	;# 
   586     0091                     PIE1            equ	145	;# 
   587     0092                     PIE2            equ	146	;# 
   588     0093                     PIE3            equ	147	;# 
   589     0095                     OPTION_REG      equ	149	;# 
   590     0096                     PCON            equ	150	;# 
   591     0097                     WDTCON          equ	151	;# 
   592     0098                     OSCTUNE         equ	152	;# 
   593     0099                     OSCCON          equ	153	;# 
   594     009A                     OSCSTAT         equ	154	;# 
   595     009B                     ADRES           equ	155	;# 
   596     009B                     ADRESL          equ	155	;# 
   597     009C                     ADRESH          equ	156	;# 
   598     009D                     ADCON0          equ	157	;# 
   599     009E                     ADCON1          equ	158	;# 
   600     010C                     LATA            equ	268	;# 
   601     010E                     LATC            equ	270	;# 
   602     0111                     CM1CON0         equ	273	;# 
   603     0112                     CM1CON1         equ	274	;# 
   604     0113                     CM2CON0         equ	275	;# 
   605     0114                     CM2CON1         equ	276	;# 
   606     0115                     CMOUT           equ	277	;# 
   607     0116                     BORCON          equ	278	;# 
   608     0117                     FVRCON          equ	279	;# 
   609     0118                     DACCON0         equ	280	;# 
   610     0119                     DACCON1         equ	281	;# 
   611     011A                     SRCON0          equ	282	;# 
   612     011B                     SRCON1          equ	283	;# 
   613     011D                     APFCON0         equ	285	;# 
   614     011E                     APFCON1         equ	286	;# 
   615     018C                     ANSELA          equ	396	;# 
   616     018E                     ANSELC          equ	398	;# 
   617     0191                     EEADR           equ	401	;# 
   618     0191                     EEADRL          equ	401	;# 
   619     0192                     EEADRH          equ	402	;# 
   620     0193                     EEDAT           equ	403	;# 
   621     0193                     EEDATL          equ	403	;# 
   622     0193                     EEDATA          equ	403	;# 
   623     0194                     EEDATH          equ	404	;# 
   624     0195                     EECON1          equ	405	;# 
   625     0196                     EECON2          equ	406	;# 
   626     0199                     RCREG           equ	409	;# 
   627     019A                     TXREG           equ	410	;# 
   628     019B                     SPBRG           equ	411	;# 
   629     019B                     SPBRGL          equ	411	;# 
   630     019C                     SPBRGH          equ	412	;# 
   631     019D                     RCSTA           equ	413	;# 
   632     019E                     TXSTA           equ	414	;# 
   633     019F                     BAUDCON         equ	415	;# 
   634     020C                     WPUA            equ	524	;# 
   635     020E                     WPUC            equ	526	;# 
   636     0211                     SSP1BUF         equ	529	;# 
   637     0211                     SSPBUF          equ	529	;# 
   638     0212                     SSP1ADD         equ	530	;# 
   639     0212                     SSPADD          equ	530	;# 
   640     0213                     SSP1MSK         equ	531	;# 
   641     0213                     SSPMSK          equ	531	;# 
   642     0214                     SSP1STAT        equ	532	;# 
   643     0214                     SSPSTAT         equ	532	;# 
   644     0215                     SSP1CON1        equ	533	;# 
   645     0215                     SSPCON1         equ	533	;# 
   646     0215                     SSPCON          equ	533	;# 
   647     0216                     SSP1CON2        equ	534	;# 
   648     0216                     SSPCON2         equ	534	;# 
   649     0217                     SSP1CON3        equ	535	;# 
   650     0217                     SSPCON3         equ	535	;# 
   651     0291                     CCPR1           equ	657	;# 
   652     0291                     CCPR1L          equ	657	;# 
   653     0292                     CCPR1H          equ	658	;# 
   654     0293                     CCP1CON         equ	659	;# 
   655     0294                     PWM1CON         equ	660	;# 
   656     0295                     CCP1AS          equ	661	;# 
   657     0295                     ECCP1AS         equ	661	;# 
   658     0296                     PSTR1CON        equ	662	;# 
   659     0298                     CCPR2           equ	664	;# 
   660     0298                     CCPR2L          equ	664	;# 
   661     0299                     CCPR2H          equ	665	;# 
   662     029A                     CCP2CON         equ	666	;# 
   663     029B                     PWM2CON         equ	667	;# 
   664     029C                     CCP2AS          equ	668	;# 
   665     029D                     PSTR2CON        equ	669	;# 
   666     029E                     CCPTMRS         equ	670	;# 
   667     029E                     CCPTMRS0        equ	670	;# 
   668     0311                     CCPR3           equ	785	;# 
   669     0311                     CCPR3L          equ	785	;# 
   670     0312                     CCPR3H          equ	786	;# 
   671     0313                     CCP3CON         equ	787	;# 
   672     0318                     CCPR4           equ	792	;# 
   673     0318                     CCPR4L          equ	792	;# 
   674     0319                     CCPR4H          equ	793	;# 
   675     031A                     CCP4CON         equ	794	;# 
   676     038C                     INLVLA          equ	908	;# 
   677     038E                     INLVLC          equ	910	;# 
   678     0391                     IOCAP           equ	913	;# 
   679     0392                     IOCAN           equ	914	;# 
   680     0393                     IOCAF           equ	915	;# 
   681     039A                     CLKRCON         equ	922	;# 
   682     039C                     MDCON           equ	924	;# 
   683     039D                     MDSRC           equ	925	;# 
   684     039E                     MDCARL          equ	926	;# 
   685     039F                     MDCARH          equ	927	;# 
   686     0415                     TMR4            equ	1045	;# 
   687     0416                     PR4             equ	1046	;# 
   688     0417                     T4CON           equ	1047	;# 
   689     041C                     TMR6            equ	1052	;# 
   690     041D                     PR6             equ	1053	;# 
   691     041E                     T6CON           equ	1054	;# 
   692     0FE4                     STATUS_SHAD     equ	4068	;# 
   693     0FE5                     WREG_SHAD       equ	4069	;# 
   694     0FE6                     BSR_SHAD        equ	4070	;# 
   695     0FE7                     PCLATH_SHAD     equ	4071	;# 
   696     0FE8                     FSR0L_SHAD      equ	4072	;# 
   697     0FE9                     FSR0H_SHAD      equ	4073	;# 
   698     0FEA                     FSR1L_SHAD      equ	4074	;# 
   699     0FEB                     FSR1H_SHAD      equ	4075	;# 
   700     0FED                     STKPTR          equ	4077	;# 
   701     0FEE                     TOSL            equ	4078	;# 
   702     0FEF                     TOSH            equ	4079	;# 
   703     0000                     INDF0           equ	0	;# 
   704     0001                     INDF1           equ	1	;# 
   705     0002                     PCL             equ	2	;# 
   706     0003                     STATUS          equ	3	;# 
   707     0004                     FSR0L           equ	4	;# 
   708     0005                     FSR0H           equ	5	;# 
   709     0006                     FSR1L           equ	6	;# 
   710     0007                     FSR1H           equ	7	;# 
   711     0008                     BSR             equ	8	;# 
   712     0009                     WREG            equ	9	;# 
   713     000A                     PCLATH          equ	10	;# 
   714     000B                     INTCON          equ	11	;# 
   715     000C                     PORTA           equ	12	;# 
   716     000E                     PORTC           equ	14	;# 
   717     0011                     PIR1            equ	17	;# 
   718     0012                     PIR2            equ	18	;# 
   719     0013                     PIR3            equ	19	;# 
   720     0015                     TMR0            equ	21	;# 
   721     0016                     TMR1            equ	22	;# 
   722     0016                     TMR1L           equ	22	;# 
   723     0017                     TMR1H           equ	23	;# 
   724     0018                     T1CON           equ	24	;# 
   725     0019                     T1GCON          equ	25	;# 
   726     001A                     TMR2            equ	26	;# 
   727     001B                     PR2             equ	27	;# 
   728     001C                     T2CON           equ	28	;# 
   729     001E                     CPSCON0         equ	30	;# 
   730     001F                     CPSCON1         equ	31	;# 
   731     008C                     TRISA           equ	140	;# 
   732     008E                     TRISC           equ	142	;# 
   733     0091                     PIE1            equ	145	;# 
   734     0092                     PIE2            equ	146	;# 
   735     0093                     PIE3            equ	147	;# 
   736     0095                     OPTION_REG      equ	149	;# 
   737     0096                     PCON            equ	150	;# 
   738     0097                     WDTCON          equ	151	;# 
   739     0098                     OSCTUNE         equ	152	;# 
   740     0099                     OSCCON          equ	153	;# 
   741     009A                     OSCSTAT         equ	154	;# 
   742     009B                     ADRES           equ	155	;# 
   743     009B                     ADRESL          equ	155	;# 
   744     009C                     ADRESH          equ	156	;# 
   745     009D                     ADCON0          equ	157	;# 
   746     009E                     ADCON1          equ	158	;# 
   747     010C                     LATA            equ	268	;# 
   748     010E                     LATC            equ	270	;# 
   749     0111                     CM1CON0         equ	273	;# 
   750     0112                     CM1CON1         equ	274	;# 
   751     0113                     CM2CON0         equ	275	;# 
   752     0114                     CM2CON1         equ	276	;# 
   753     0115                     CMOUT           equ	277	;# 
   754     0116                     BORCON          equ	278	;# 
   755     0117                     FVRCON          equ	279	;# 
   756     0118                     DACCON0         equ	280	;# 
   757     0119                     DACCON1         equ	281	;# 
   758     011A                     SRCON0          equ	282	;# 
   759     011B                     SRCON1          equ	283	;# 
   760     011D                     APFCON0         equ	285	;# 
   761     011E                     APFCON1         equ	286	;# 
   762     018C                     ANSELA          equ	396	;# 
   763     018E                     ANSELC          equ	398	;# 
   764     0191                     EEADR           equ	401	;# 
   765     0191                     EEADRL          equ	401	;# 
   766     0192                     EEADRH          equ	402	;# 
   767     0193                     EEDAT           equ	403	;# 
   768     0193                     EEDATL          equ	403	;# 
   769     0193                     EEDATA          equ	403	;# 
   770     0194                     EEDATH          equ	404	;# 
   771     0195                     EECON1          equ	405	;# 
   772     0196                     EECON2          equ	406	;# 
   773     0199                     RCREG           equ	409	;# 
   774     019A                     TXREG           equ	410	;# 
   775     019B                     SPBRG           equ	411	;# 
   776     019B                     SPBRGL          equ	411	;# 
   777     019C                     SPBRGH          equ	412	;# 
   778     019D                     RCSTA           equ	413	;# 
   779     019E                     TXSTA           equ	414	;# 
   780     019F                     BAUDCON         equ	415	;# 
   781     020C                     WPUA            equ	524	;# 
   782     020E                     WPUC            equ	526	;# 
   783     0211                     SSP1BUF         equ	529	;# 
   784     0211                     SSPBUF          equ	529	;# 
   785     0212                     SSP1ADD         equ	530	;# 
   786     0212                     SSPADD          equ	530	;# 
   787     0213                     SSP1MSK         equ	531	;# 
   788     0213                     SSPMSK          equ	531	;# 
   789     0214                     SSP1STAT        equ	532	;# 
   790     0214                     SSPSTAT         equ	532	;# 
   791     0215                     SSP1CON1        equ	533	;# 
   792     0215                     SSPCON1         equ	533	;# 
   793     0215                     SSPCON          equ	533	;# 
   794     0216                     SSP1CON2        equ	534	;# 
   795     0216                     SSPCON2         equ	534	;# 
   796     0217                     SSP1CON3        equ	535	;# 
   797     0217                     SSPCON3         equ	535	;# 
   798     0291                     CCPR1           equ	657	;# 
   799     0291                     CCPR1L          equ	657	;# 
   800     0292                     CCPR1H          equ	658	;# 
   801     0293                     CCP1CON         equ	659	;# 
   802     0294                     PWM1CON         equ	660	;# 
   803     0295                     CCP1AS          equ	661	;# 
   804     0295                     ECCP1AS         equ	661	;# 
   805     0296                     PSTR1CON        equ	662	;# 
   806     0298                     CCPR2           equ	664	;# 
   807     0298                     CCPR2L          equ	664	;# 
   808     0299                     CCPR2H          equ	665	;# 
   809     029A                     CCP2CON         equ	666	;# 
   810     029B                     PWM2CON         equ	667	;# 
   811     029C                     CCP2AS          equ	668	;# 
   812     029D                     PSTR2CON        equ	669	;# 
   813     029E                     CCPTMRS         equ	670	;# 
   814     029E                     CCPTMRS0        equ	670	;# 
   815     0311                     CCPR3           equ	785	;# 
   816     0311                     CCPR3L          equ	785	;# 
   817     0312                     CCPR3H          equ	786	;# 
   818     0313                     CCP3CON         equ	787	;# 
   819     0318                     CCPR4           equ	792	;# 
   820     0318                     CCPR4L          equ	792	;# 
   821     0319                     CCPR4H          equ	793	;# 
   822     031A                     CCP4CON         equ	794	;# 
   823     038C                     INLVLA          equ	908	;# 
   824     038E                     INLVLC          equ	910	;# 
   825     0391                     IOCAP           equ	913	;# 
   826     0392                     IOCAN           equ	914	;# 
   827     0393                     IOCAF           equ	915	;# 
   828     039A                     CLKRCON         equ	922	;# 
   829     039C                     MDCON           equ	924	;# 
   830     039D                     MDSRC           equ	925	;# 
   831     039E                     MDCARL          equ	926	;# 
   832     039F                     MDCARH          equ	927	;# 
   833     0415                     TMR4            equ	1045	;# 
   834     0416                     PR4             equ	1046	;# 
   835     0417                     T4CON           equ	1047	;# 
   836     041C                     TMR6            equ	1052	;# 
   837     041D                     PR6             equ	1053	;# 
   838     041E                     T6CON           equ	1054	;# 
   839     0FE4                     STATUS_SHAD     equ	4068	;# 
   840     0FE5                     WREG_SHAD       equ	4069	;# 
   841     0FE6                     BSR_SHAD        equ	4070	;# 
   842     0FE7                     PCLATH_SHAD     equ	4071	;# 
   843     0FE8                     FSR0L_SHAD      equ	4072	;# 
   844     0FE9                     FSR0H_SHAD      equ	4073	;# 
   845     0FEA                     FSR1L_SHAD      equ	4074	;# 
   846     0FEB                     FSR1H_SHAD      equ	4075	;# 
   847     0FED                     STKPTR          equ	4077	;# 
   848     0FEE                     TOSL            equ	4078	;# 
   849     0FEF                     TOSH            equ	4079	;# 
   850     0000                     INDF0           equ	0	;# 
   851     0001                     INDF1           equ	1	;# 
   852     0002                     PCL             equ	2	;# 
   853     0003                     STATUS          equ	3	;# 
   854     0004                     FSR0L           equ	4	;# 
   855     0005                     FSR0H           equ	5	;# 
   856     0006                     FSR1L           equ	6	;# 
   857     0007                     FSR1H           equ	7	;# 
   858     0008                     BSR             equ	8	;# 
   859     0009                     WREG            equ	9	;# 
   860     000A                     PCLATH          equ	10	;# 
   861     000B                     INTCON          equ	11	;# 
   862     000C                     PORTA           equ	12	;# 
   863     000E                     PORTC           equ	14	;# 
   864     0011                     PIR1            equ	17	;# 
   865     0012                     PIR2            equ	18	;# 
   866     0013                     PIR3            equ	19	;# 
   867     0015                     TMR0            equ	21	;# 
   868     0016                     TMR1            equ	22	;# 
   869     0016                     TMR1L           equ	22	;# 
   870     0017                     TMR1H           equ	23	;# 
   871     0018                     T1CON           equ	24	;# 
   872     0019                     T1GCON          equ	25	;# 
   873     001A                     TMR2            equ	26	;# 
   874     001B                     PR2             equ	27	;# 
   875     001C                     T2CON           equ	28	;# 
   876     001E                     CPSCON0         equ	30	;# 
   877     001F                     CPSCON1         equ	31	;# 
   878     008C                     TRISA           equ	140	;# 
   879     008E                     TRISC           equ	142	;# 
   880     0091                     PIE1            equ	145	;# 
   881     0092                     PIE2            equ	146	;# 
   882     0093                     PIE3            equ	147	;# 
   883     0095                     OPTION_REG      equ	149	;# 
   884     0096                     PCON            equ	150	;# 
   885     0097                     WDTCON          equ	151	;# 
   886     0098                     OSCTUNE         equ	152	;# 
   887     0099                     OSCCON          equ	153	;# 
   888     009A                     OSCSTAT         equ	154	;# 
   889     009B                     ADRES           equ	155	;# 
   890     009B                     ADRESL          equ	155	;# 
   891     009C                     ADRESH          equ	156	;# 
   892     009D                     ADCON0          equ	157	;# 
   893     009E                     ADCON1          equ	158	;# 
   894     010C                     LATA            equ	268	;# 
   895     010E                     LATC            equ	270	;# 
   896     0111                     CM1CON0         equ	273	;# 
   897     0112                     CM1CON1         equ	274	;# 
   898     0113                     CM2CON0         equ	275	;# 
   899     0114                     CM2CON1         equ	276	;# 
   900     0115                     CMOUT           equ	277	;# 
   901     0116                     BORCON          equ	278	;# 
   902     0117                     FVRCON          equ	279	;# 
   903     0118                     DACCON0         equ	280	;# 
   904     0119                     DACCON1         equ	281	;# 
   905     011A                     SRCON0          equ	282	;# 
   906     011B                     SRCON1          equ	283	;# 
   907     011D                     APFCON0         equ	285	;# 
   908     011E                     APFCON1         equ	286	;# 
   909     018C                     ANSELA          equ	396	;# 
   910     018E                     ANSELC          equ	398	;# 
   911     0191                     EEADR           equ	401	;# 
   912     0191                     EEADRL          equ	401	;# 
   913     0192                     EEADRH          equ	402	;# 
   914     0193                     EEDAT           equ	403	;# 
   915     0193                     EEDATL          equ	403	;# 
   916     0193                     EEDATA          equ	403	;# 
   917     0194                     EEDATH          equ	404	;# 
   918     0195                     EECON1          equ	405	;# 
   919     0196                     EECON2          equ	406	;# 
   920     0199                     RCREG           equ	409	;# 
   921     019A                     TXREG           equ	410	;# 
   922     019B                     SPBRG           equ	411	;# 
   923     019B                     SPBRGL          equ	411	;# 
   924     019C                     SPBRGH          equ	412	;# 
   925     019D                     RCSTA           equ	413	;# 
   926     019E                     TXSTA           equ	414	;# 
   927     019F                     BAUDCON         equ	415	;# 
   928     020C                     WPUA            equ	524	;# 
   929     020E                     WPUC            equ	526	;# 
   930     0211                     SSP1BUF         equ	529	;# 
   931     0211                     SSPBUF          equ	529	;# 
   932     0212                     SSP1ADD         equ	530	;# 
   933     0212                     SSPADD          equ	530	;# 
   934     0213                     SSP1MSK         equ	531	;# 
   935     0213                     SSPMSK          equ	531	;# 
   936     0214                     SSP1STAT        equ	532	;# 
   937     0214                     SSPSTAT         equ	532	;# 
   938     0215                     SSP1CON1        equ	533	;# 
   939     0215                     SSPCON1         equ	533	;# 
   940     0215                     SSPCON          equ	533	;# 
   941     0216                     SSP1CON2        equ	534	;# 
   942     0216                     SSPCON2         equ	534	;# 
   943     0217                     SSP1CON3        equ	535	;# 
   944     0217                     SSPCON3         equ	535	;# 
   945     0291                     CCPR1           equ	657	;# 
   946     0291                     CCPR1L          equ	657	;# 
   947     0292                     CCPR1H          equ	658	;# 
   948     0293                     CCP1CON         equ	659	;# 
   949     0294                     PWM1CON         equ	660	;# 
   950     0295                     CCP1AS          equ	661	;# 
   951     0295                     ECCP1AS         equ	661	;# 
   952     0296                     PSTR1CON        equ	662	;# 
   953     0298                     CCPR2           equ	664	;# 
   954     0298                     CCPR2L          equ	664	;# 
   955     0299                     CCPR2H          equ	665	;# 
   956     029A                     CCP2CON         equ	666	;# 
   957     029B                     PWM2CON         equ	667	;# 
   958     029C                     CCP2AS          equ	668	;# 
   959     029D                     PSTR2CON        equ	669	;# 
   960     029E                     CCPTMRS         equ	670	;# 
   961     029E                     CCPTMRS0        equ	670	;# 
   962     0311                     CCPR3           equ	785	;# 
   963     0311                     CCPR3L          equ	785	;# 
   964     0312                     CCPR3H          equ	786	;# 
   965     0313                     CCP3CON         equ	787	;# 
   966     0318                     CCPR4           equ	792	;# 
   967     0318                     CCPR4L          equ	792	;# 
   968     0319                     CCPR4H          equ	793	;# 
   969     031A                     CCP4CON         equ	794	;# 
   970     038C                     INLVLA          equ	908	;# 
   971     038E                     INLVLC          equ	910	;# 
   972     0391                     IOCAP           equ	913	;# 
   973     0392                     IOCAN           equ	914	;# 
   974     0393                     IOCAF           equ	915	;# 
   975     039A                     CLKRCON         equ	922	;# 
   976     039C                     MDCON           equ	924	;# 
   977     039D                     MDSRC           equ	925	;# 
   978     039E                     MDCARL          equ	926	;# 
   979     039F                     MDCARH          equ	927	;# 
   980     0415                     TMR4            equ	1045	;# 
   981     0416                     PR4             equ	1046	;# 
   982     0417                     T4CON           equ	1047	;# 
   983     041C                     TMR6            equ	1052	;# 
   984     041D                     PR6             equ	1053	;# 
   985     041E                     T6CON           equ	1054	;# 
   986     0FE4                     STATUS_SHAD     equ	4068	;# 
   987     0FE5                     WREG_SHAD       equ	4069	;# 
   988     0FE6                     BSR_SHAD        equ	4070	;# 
   989     0FE7                     PCLATH_SHAD     equ	4071	;# 
   990     0FE8                     FSR0L_SHAD      equ	4072	;# 
   991     0FE9                     FSR0H_SHAD      equ	4073	;# 
   992     0FEA                     FSR1L_SHAD      equ	4074	;# 
   993     0FEB                     FSR1H_SHAD      equ	4075	;# 
   994     0FED                     STKPTR          equ	4077	;# 
   995     0FEE                     TOSL            equ	4078	;# 
   996     0FEF                     TOSH            equ	4079	;# 
   997     0000                     INDF0           equ	0	;# 
   998     0001                     INDF1           equ	1	;# 
   999     0002                     PCL             equ	2	;# 
  1000     0003                     STATUS          equ	3	;# 
  1001     0004                     FSR0L           equ	4	;# 
  1002     0005                     FSR0H           equ	5	;# 
  1003     0006                     FSR1L           equ	6	;# 
  1004     0007                     FSR1H           equ	7	;# 
  1005     0008                     BSR             equ	8	;# 
  1006     0009                     WREG            equ	9	;# 
  1007     000A                     PCLATH          equ	10	;# 
  1008     000B                     INTCON          equ	11	;# 
  1009     000C                     PORTA           equ	12	;# 
  1010     000E                     PORTC           equ	14	;# 
  1011     0011                     PIR1            equ	17	;# 
  1012     0012                     PIR2            equ	18	;# 
  1013     0013                     PIR3            equ	19	;# 
  1014     0015                     TMR0            equ	21	;# 
  1015     0016                     TMR1            equ	22	;# 
  1016     0016                     TMR1L           equ	22	;# 
  1017     0017                     TMR1H           equ	23	;# 
  1018     0018                     T1CON           equ	24	;# 
  1019     0019                     T1GCON          equ	25	;# 
  1020     001A                     TMR2            equ	26	;# 
  1021     001B                     PR2             equ	27	;# 
  1022     001C                     T2CON           equ	28	;# 
  1023     001E                     CPSCON0         equ	30	;# 
  1024     001F                     CPSCON1         equ	31	;# 
  1025     008C                     TRISA           equ	140	;# 
  1026     008E                     TRISC           equ	142	;# 
  1027     0091                     PIE1            equ	145	;# 
  1028     0092                     PIE2            equ	146	;# 
  1029     0093                     PIE3            equ	147	;# 
  1030     0095                     OPTION_REG      equ	149	;# 
  1031     0096                     PCON            equ	150	;# 
  1032     0097                     WDTCON          equ	151	;# 
  1033     0098                     OSCTUNE         equ	152	;# 
  1034     0099                     OSCCON          equ	153	;# 
  1035     009A                     OSCSTAT         equ	154	;# 
  1036     009B                     ADRES           equ	155	;# 
  1037     009B                     ADRESL          equ	155	;# 
  1038     009C                     ADRESH          equ	156	;# 
  1039     009D                     ADCON0          equ	157	;# 
  1040     009E                     ADCON1          equ	158	;# 
  1041     010C                     LATA            equ	268	;# 
  1042     010E                     LATC            equ	270	;# 
  1043     0111                     CM1CON0         equ	273	;# 
  1044     0112                     CM1CON1         equ	274	;# 
  1045     0113                     CM2CON0         equ	275	;# 
  1046     0114                     CM2CON1         equ	276	;# 
  1047     0115                     CMOUT           equ	277	;# 
  1048     0116                     BORCON          equ	278	;# 
  1049     0117                     FVRCON          equ	279	;# 
  1050     0118                     DACCON0         equ	280	;# 
  1051     0119                     DACCON1         equ	281	;# 
  1052     011A                     SRCON0          equ	282	;# 
  1053     011B                     SRCON1          equ	283	;# 
  1054     011D                     APFCON0         equ	285	;# 
  1055     011E                     APFCON1         equ	286	;# 
  1056     018C                     ANSELA          equ	396	;# 
  1057     018E                     ANSELC          equ	398	;# 
  1058     0191                     EEADR           equ	401	;# 
  1059     0191                     EEADRL          equ	401	;# 
  1060     0192                     EEADRH          equ	402	;# 
  1061     0193                     EEDAT           equ	403	;# 
  1062     0193                     EEDATL          equ	403	;# 
  1063     0193                     EEDATA          equ	403	;# 
  1064     0194                     EEDATH          equ	404	;# 
  1065     0195                     EECON1          equ	405	;# 
  1066     0196                     EECON2          equ	406	;# 
  1067     0199                     RCREG           equ	409	;# 
  1068     019A                     TXREG           equ	410	;# 
  1069     019B                     SPBRG           equ	411	;# 
  1070     019B                     SPBRGL          equ	411	;# 
  1071     019C                     SPBRGH          equ	412	;# 
  1072     019D                     RCSTA           equ	413	;# 
  1073     019E                     TXSTA           equ	414	;# 
  1074     019F                     BAUDCON         equ	415	;# 
  1075     020C                     WPUA            equ	524	;# 
  1076     020E                     WPUC            equ	526	;# 
  1077     0211                     SSP1BUF         equ	529	;# 
  1078     0211                     SSPBUF          equ	529	;# 
  1079     0212                     SSP1ADD         equ	530	;# 
  1080     0212                     SSPADD          equ	530	;# 
  1081     0213                     SSP1MSK         equ	531	;# 
  1082     0213                     SSPMSK          equ	531	;# 
  1083     0214                     SSP1STAT        equ	532	;# 
  1084     0214                     SSPSTAT         equ	532	;# 
  1085     0215                     SSP1CON1        equ	533	;# 
  1086     0215                     SSPCON1         equ	533	;# 
  1087     0215                     SSPCON          equ	533	;# 
  1088     0216                     SSP1CON2        equ	534	;# 
  1089     0216                     SSPCON2         equ	534	;# 
  1090     0217                     SSP1CON3        equ	535	;# 
  1091     0217                     SSPCON3         equ	535	;# 
  1092     0291                     CCPR1           equ	657	;# 
  1093     0291                     CCPR1L          equ	657	;# 
  1094     0292                     CCPR1H          equ	658	;# 
  1095     0293                     CCP1CON         equ	659	;# 
  1096     0294                     PWM1CON         equ	660	;# 
  1097     0295                     CCP1AS          equ	661	;# 
  1098     0295                     ECCP1AS         equ	661	;# 
  1099     0296                     PSTR1CON        equ	662	;# 
  1100     0298                     CCPR2           equ	664	;# 
  1101     0298                     CCPR2L          equ	664	;# 
  1102     0299                     CCPR2H          equ	665	;# 
  1103     029A                     CCP2CON         equ	666	;# 
  1104     029B                     PWM2CON         equ	667	;# 
  1105     029C                     CCP2AS          equ	668	;# 
  1106     029D                     PSTR2CON        equ	669	;# 
  1107     029E                     CCPTMRS         equ	670	;# 
  1108     029E                     CCPTMRS0        equ	670	;# 
  1109     0311                     CCPR3           equ	785	;# 
  1110     0311                     CCPR3L          equ	785	;# 
  1111     0312                     CCPR3H          equ	786	;# 
  1112     0313                     CCP3CON         equ	787	;# 
  1113     0318                     CCPR4           equ	792	;# 
  1114     0318                     CCPR4L          equ	792	;# 
  1115     0319                     CCPR4H          equ	793	;# 
  1116     031A                     CCP4CON         equ	794	;# 
  1117     038C                     INLVLA          equ	908	;# 
  1118     038E                     INLVLC          equ	910	;# 
  1119     0391                     IOCAP           equ	913	;# 
  1120     0392                     IOCAN           equ	914	;# 
  1121     0393                     IOCAF           equ	915	;# 
  1122     039A                     CLKRCON         equ	922	;# 
  1123     039C                     MDCON           equ	924	;# 
  1124     039D                     MDSRC           equ	925	;# 
  1125     039E                     MDCARL          equ	926	;# 
  1126     039F                     MDCARH          equ	927	;# 
  1127     0415                     TMR4            equ	1045	;# 
  1128     0416                     PR4             equ	1046	;# 
  1129     0417                     T4CON           equ	1047	;# 
  1130     041C                     TMR6            equ	1052	;# 
  1131     041D                     PR6             equ	1053	;# 
  1132     041E                     T6CON           equ	1054	;# 
  1133     0FE4                     STATUS_SHAD     equ	4068	;# 
  1134     0FE5                     WREG_SHAD       equ	4069	;# 
  1135     0FE6                     BSR_SHAD        equ	4070	;# 
  1136     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1137     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1138     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1139     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1140     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1141     0FED                     STKPTR          equ	4077	;# 
  1142     0FEE                     TOSL            equ	4078	;# 
  1143     0FEF                     TOSH            equ	4079	;# 
  1144     0000                     INDF0           equ	0	;# 
  1145     0001                     INDF1           equ	1	;# 
  1146     0002                     PCL             equ	2	;# 
  1147     0003                     STATUS          equ	3	;# 
  1148     0004                     FSR0L           equ	4	;# 
  1149     0005                     FSR0H           equ	5	;# 
  1150     0006                     FSR1L           equ	6	;# 
  1151     0007                     FSR1H           equ	7	;# 
  1152     0008                     BSR             equ	8	;# 
  1153     0009                     WREG            equ	9	;# 
  1154     000A                     PCLATH          equ	10	;# 
  1155     000B                     INTCON          equ	11	;# 
  1156     000C                     PORTA           equ	12	;# 
  1157     000E                     PORTC           equ	14	;# 
  1158     0011                     PIR1            equ	17	;# 
  1159     0012                     PIR2            equ	18	;# 
  1160     0013                     PIR3            equ	19	;# 
  1161     0015                     TMR0            equ	21	;# 
  1162     0016                     TMR1            equ	22	;# 
  1163     0016                     TMR1L           equ	22	;# 
  1164     0017                     TMR1H           equ	23	;# 
  1165     0018                     T1CON           equ	24	;# 
  1166     0019                     T1GCON          equ	25	;# 
  1167     001A                     TMR2            equ	26	;# 
  1168     001B                     PR2             equ	27	;# 
  1169     001C                     T2CON           equ	28	;# 
  1170     001E                     CPSCON0         equ	30	;# 
  1171     001F                     CPSCON1         equ	31	;# 
  1172     008C                     TRISA           equ	140	;# 
  1173     008E                     TRISC           equ	142	;# 
  1174     0091                     PIE1            equ	145	;# 
  1175     0092                     PIE2            equ	146	;# 
  1176     0093                     PIE3            equ	147	;# 
  1177     0095                     OPTION_REG      equ	149	;# 
  1178     0096                     PCON            equ	150	;# 
  1179     0097                     WDTCON          equ	151	;# 
  1180     0098                     OSCTUNE         equ	152	;# 
  1181     0099                     OSCCON          equ	153	;# 
  1182     009A                     OSCSTAT         equ	154	;# 
  1183     009B                     ADRES           equ	155	;# 
  1184     009B                     ADRESL          equ	155	;# 
  1185     009C                     ADRESH          equ	156	;# 
  1186     009D                     ADCON0          equ	157	;# 
  1187     009E                     ADCON1          equ	158	;# 
  1188     010C                     LATA            equ	268	;# 
  1189     010E                     LATC            equ	270	;# 
  1190     0111                     CM1CON0         equ	273	;# 
  1191     0112                     CM1CON1         equ	274	;# 
  1192     0113                     CM2CON0         equ	275	;# 
  1193     0114                     CM2CON1         equ	276	;# 
  1194     0115                     CMOUT           equ	277	;# 
  1195     0116                     BORCON          equ	278	;# 
  1196     0117                     FVRCON          equ	279	;# 
  1197     0118                     DACCON0         equ	280	;# 
  1198     0119                     DACCON1         equ	281	;# 
  1199     011A                     SRCON0          equ	282	;# 
  1200     011B                     SRCON1          equ	283	;# 
  1201     011D                     APFCON0         equ	285	;# 
  1202     011E                     APFCON1         equ	286	;# 
  1203     018C                     ANSELA          equ	396	;# 
  1204     018E                     ANSELC          equ	398	;# 
  1205     0191                     EEADR           equ	401	;# 
  1206     0191                     EEADRL          equ	401	;# 
  1207     0192                     EEADRH          equ	402	;# 
  1208     0193                     EEDAT           equ	403	;# 
  1209     0193                     EEDATL          equ	403	;# 
  1210     0193                     EEDATA          equ	403	;# 
  1211     0194                     EEDATH          equ	404	;# 
  1212     0195                     EECON1          equ	405	;# 
  1213     0196                     EECON2          equ	406	;# 
  1214     0199                     RCREG           equ	409	;# 
  1215     019A                     TXREG           equ	410	;# 
  1216     019B                     SPBRG           equ	411	;# 
  1217     019B                     SPBRGL          equ	411	;# 
  1218     019C                     SPBRGH          equ	412	;# 
  1219     019D                     RCSTA           equ	413	;# 
  1220     019E                     TXSTA           equ	414	;# 
  1221     019F                     BAUDCON         equ	415	;# 
  1222     020C                     WPUA            equ	524	;# 
  1223     020E                     WPUC            equ	526	;# 
  1224     0211                     SSP1BUF         equ	529	;# 
  1225     0211                     SSPBUF          equ	529	;# 
  1226     0212                     SSP1ADD         equ	530	;# 
  1227     0212                     SSPADD          equ	530	;# 
  1228     0213                     SSP1MSK         equ	531	;# 
  1229     0213                     SSPMSK          equ	531	;# 
  1230     0214                     SSP1STAT        equ	532	;# 
  1231     0214                     SSPSTAT         equ	532	;# 
  1232     0215                     SSP1CON1        equ	533	;# 
  1233     0215                     SSPCON1         equ	533	;# 
  1234     0215                     SSPCON          equ	533	;# 
  1235     0216                     SSP1CON2        equ	534	;# 
  1236     0216                     SSPCON2         equ	534	;# 
  1237     0217                     SSP1CON3        equ	535	;# 
  1238     0217                     SSPCON3         equ	535	;# 
  1239     0291                     CCPR1           equ	657	;# 
  1240     0291                     CCPR1L          equ	657	;# 
  1241     0292                     CCPR1H          equ	658	;# 
  1242     0293                     CCP1CON         equ	659	;# 
  1243     0294                     PWM1CON         equ	660	;# 
  1244     0295                     CCP1AS          equ	661	;# 
  1245     0295                     ECCP1AS         equ	661	;# 
  1246     0296                     PSTR1CON        equ	662	;# 
  1247     0298                     CCPR2           equ	664	;# 
  1248     0298                     CCPR2L          equ	664	;# 
  1249     0299                     CCPR2H          equ	665	;# 
  1250     029A                     CCP2CON         equ	666	;# 
  1251     029B                     PWM2CON         equ	667	;# 
  1252     029C                     CCP2AS          equ	668	;# 
  1253     029D                     PSTR2CON        equ	669	;# 
  1254     029E                     CCPTMRS         equ	670	;# 
  1255     029E                     CCPTMRS0        equ	670	;# 
  1256     0311                     CCPR3           equ	785	;# 
  1257     0311                     CCPR3L          equ	785	;# 
  1258     0312                     CCPR3H          equ	786	;# 
  1259     0313                     CCP3CON         equ	787	;# 
  1260     0318                     CCPR4           equ	792	;# 
  1261     0318                     CCPR4L          equ	792	;# 
  1262     0319                     CCPR4H          equ	793	;# 
  1263     031A                     CCP4CON         equ	794	;# 
  1264     038C                     INLVLA          equ	908	;# 
  1265     038E                     INLVLC          equ	910	;# 
  1266     0391                     IOCAP           equ	913	;# 
  1267     0392                     IOCAN           equ	914	;# 
  1268     0393                     IOCAF           equ	915	;# 
  1269     039A                     CLKRCON         equ	922	;# 
  1270     039C                     MDCON           equ	924	;# 
  1271     039D                     MDSRC           equ	925	;# 
  1272     039E                     MDCARL          equ	926	;# 
  1273     039F                     MDCARH          equ	927	;# 
  1274     0415                     TMR4            equ	1045	;# 
  1275     0416                     PR4             equ	1046	;# 
  1276     0417                     T4CON           equ	1047	;# 
  1277     041C                     TMR6            equ	1052	;# 
  1278     041D                     PR6             equ	1053	;# 
  1279     041E                     T6CON           equ	1054	;# 
  1280     0FE4                     STATUS_SHAD     equ	4068	;# 
  1281     0FE5                     WREG_SHAD       equ	4069	;# 
  1282     0FE6                     BSR_SHAD        equ	4070	;# 
  1283     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1284     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1285     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1286     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1287     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1288     0FED                     STKPTR          equ	4077	;# 
  1289     0FEE                     TOSL            equ	4078	;# 
  1290     0FEF                     TOSH            equ	4079	;# 
  1291     0000                     INDF0           equ	0	;# 
  1292     0001                     INDF1           equ	1	;# 
  1293     0002                     PCL             equ	2	;# 
  1294     0003                     STATUS          equ	3	;# 
  1295     0004                     FSR0L           equ	4	;# 
  1296     0005                     FSR0H           equ	5	;# 
  1297     0006                     FSR1L           equ	6	;# 
  1298     0007                     FSR1H           equ	7	;# 
  1299     0008                     BSR             equ	8	;# 
  1300     0009                     WREG            equ	9	;# 
  1301     000A                     PCLATH          equ	10	;# 
  1302     000B                     INTCON          equ	11	;# 
  1303     000C                     PORTA           equ	12	;# 
  1304     000E                     PORTC           equ	14	;# 
  1305     0011                     PIR1            equ	17	;# 
  1306     0012                     PIR2            equ	18	;# 
  1307     0013                     PIR3            equ	19	;# 
  1308     0015                     TMR0            equ	21	;# 
  1309     0016                     TMR1            equ	22	;# 
  1310     0016                     TMR1L           equ	22	;# 
  1311     0017                     TMR1H           equ	23	;# 
  1312     0018                     T1CON           equ	24	;# 
  1313     0019                     T1GCON          equ	25	;# 
  1314     001A                     TMR2            equ	26	;# 
  1315     001B                     PR2             equ	27	;# 
  1316     001C                     T2CON           equ	28	;# 
  1317     001E                     CPSCON0         equ	30	;# 
  1318     001F                     CPSCON1         equ	31	;# 
  1319     008C                     TRISA           equ	140	;# 
  1320     008E                     TRISC           equ	142	;# 
  1321     0091                     PIE1            equ	145	;# 
  1322     0092                     PIE2            equ	146	;# 
  1323     0093                     PIE3            equ	147	;# 
  1324     0095                     OPTION_REG      equ	149	;# 
  1325     0096                     PCON            equ	150	;# 
  1326     0097                     WDTCON          equ	151	;# 
  1327     0098                     OSCTUNE         equ	152	;# 
  1328     0099                     OSCCON          equ	153	;# 
  1329     009A                     OSCSTAT         equ	154	;# 
  1330     009B                     ADRES           equ	155	;# 
  1331     009B                     ADRESL          equ	155	;# 
  1332     009C                     ADRESH          equ	156	;# 
  1333     009D                     ADCON0          equ	157	;# 
  1334     009E                     ADCON1          equ	158	;# 
  1335     010C                     LATA            equ	268	;# 
  1336     010E                     LATC            equ	270	;# 
  1337     0111                     CM1CON0         equ	273	;# 
  1338     0112                     CM1CON1         equ	274	;# 
  1339     0113                     CM2CON0         equ	275	;# 
  1340     0114                     CM2CON1         equ	276	;# 
  1341     0115                     CMOUT           equ	277	;# 
  1342     0116                     BORCON          equ	278	;# 
  1343     0117                     FVRCON          equ	279	;# 
  1344     0118                     DACCON0         equ	280	;# 
  1345     0119                     DACCON1         equ	281	;# 
  1346     011A                     SRCON0          equ	282	;# 
  1347     011B                     SRCON1          equ	283	;# 
  1348     011D                     APFCON0         equ	285	;# 
  1349     011E                     APFCON1         equ	286	;# 
  1350     018C                     ANSELA          equ	396	;# 
  1351     018E                     ANSELC          equ	398	;# 
  1352     0191                     EEADR           equ	401	;# 
  1353     0191                     EEADRL          equ	401	;# 
  1354     0192                     EEADRH          equ	402	;# 
  1355     0193                     EEDAT           equ	403	;# 
  1356     0193                     EEDATL          equ	403	;# 
  1357     0193                     EEDATA          equ	403	;# 
  1358     0194                     EEDATH          equ	404	;# 
  1359     0195                     EECON1          equ	405	;# 
  1360     0196                     EECON2          equ	406	;# 
  1361     0199                     RCREG           equ	409	;# 
  1362     019A                     TXREG           equ	410	;# 
  1363     019B                     SPBRG           equ	411	;# 
  1364     019B                     SPBRGL          equ	411	;# 
  1365     019C                     SPBRGH          equ	412	;# 
  1366     019D                     RCSTA           equ	413	;# 
  1367     019E                     TXSTA           equ	414	;# 
  1368     019F                     BAUDCON         equ	415	;# 
  1369     020C                     WPUA            equ	524	;# 
  1370     020E                     WPUC            equ	526	;# 
  1371     0211                     SSP1BUF         equ	529	;# 
  1372     0211                     SSPBUF          equ	529	;# 
  1373     0212                     SSP1ADD         equ	530	;# 
  1374     0212                     SSPADD          equ	530	;# 
  1375     0213                     SSP1MSK         equ	531	;# 
  1376     0213                     SSPMSK          equ	531	;# 
  1377     0214                     SSP1STAT        equ	532	;# 
  1378     0214                     SSPSTAT         equ	532	;# 
  1379     0215                     SSP1CON1        equ	533	;# 
  1380     0215                     SSPCON1         equ	533	;# 
  1381     0215                     SSPCON          equ	533	;# 
  1382     0216                     SSP1CON2        equ	534	;# 
  1383     0216                     SSPCON2         equ	534	;# 
  1384     0217                     SSP1CON3        equ	535	;# 
  1385     0217                     SSPCON3         equ	535	;# 
  1386     0291                     CCPR1           equ	657	;# 
  1387     0291                     CCPR1L          equ	657	;# 
  1388     0292                     CCPR1H          equ	658	;# 
  1389     0293                     CCP1CON         equ	659	;# 
  1390     0294                     PWM1CON         equ	660	;# 
  1391     0295                     CCP1AS          equ	661	;# 
  1392     0295                     ECCP1AS         equ	661	;# 
  1393     0296                     PSTR1CON        equ	662	;# 
  1394     0298                     CCPR2           equ	664	;# 
  1395     0298                     CCPR2L          equ	664	;# 
  1396     0299                     CCPR2H          equ	665	;# 
  1397     029A                     CCP2CON         equ	666	;# 
  1398     029B                     PWM2CON         equ	667	;# 
  1399     029C                     CCP2AS          equ	668	;# 
  1400     029D                     PSTR2CON        equ	669	;# 
  1401     029E                     CCPTMRS         equ	670	;# 
  1402     029E                     CCPTMRS0        equ	670	;# 
  1403     0311                     CCPR3           equ	785	;# 
  1404     0311                     CCPR3L          equ	785	;# 
  1405     0312                     CCPR3H          equ	786	;# 
  1406     0313                     CCP3CON         equ	787	;# 
  1407     0318                     CCPR4           equ	792	;# 
  1408     0318                     CCPR4L          equ	792	;# 
  1409     0319                     CCPR4H          equ	793	;# 
  1410     031A                     CCP4CON         equ	794	;# 
  1411     038C                     INLVLA          equ	908	;# 
  1412     038E                     INLVLC          equ	910	;# 
  1413     0391                     IOCAP           equ	913	;# 
  1414     0392                     IOCAN           equ	914	;# 
  1415     0393                     IOCAF           equ	915	;# 
  1416     039A                     CLKRCON         equ	922	;# 
  1417     039C                     MDCON           equ	924	;# 
  1418     039D                     MDSRC           equ	925	;# 
  1419     039E                     MDCARL          equ	926	;# 
  1420     039F                     MDCARH          equ	927	;# 
  1421     0415                     TMR4            equ	1045	;# 
  1422     0416                     PR4             equ	1046	;# 
  1423     0417                     T4CON           equ	1047	;# 
  1424     041C                     TMR6            equ	1052	;# 
  1425     041D                     PR6             equ	1053	;# 
  1426     041E                     T6CON           equ	1054	;# 
  1427     0FE4                     STATUS_SHAD     equ	4068	;# 
  1428     0FE5                     WREG_SHAD       equ	4069	;# 
  1429     0FE6                     BSR_SHAD        equ	4070	;# 
  1430     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1431     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1432     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1433     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1434     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1435     0FED                     STKPTR          equ	4077	;# 
  1436     0FEE                     TOSL            equ	4078	;# 
  1437     0FEF                     TOSH            equ	4079	;# 
  1438     0000                     INDF0           equ	0	;# 
  1439     0001                     INDF1           equ	1	;# 
  1440     0002                     PCL             equ	2	;# 
  1441     0003                     STATUS          equ	3	;# 
  1442     0004                     FSR0L           equ	4	;# 
  1443     0005                     FSR0H           equ	5	;# 
  1444     0006                     FSR1L           equ	6	;# 
  1445     0007                     FSR1H           equ	7	;# 
  1446     0008                     BSR             equ	8	;# 
  1447     0009                     WREG            equ	9	;# 
  1448     000A                     PCLATH          equ	10	;# 
  1449     000B                     INTCON          equ	11	;# 
  1450     000C                     PORTA           equ	12	;# 
  1451     000E                     PORTC           equ	14	;# 
  1452     0011                     PIR1            equ	17	;# 
  1453     0012                     PIR2            equ	18	;# 
  1454     0013                     PIR3            equ	19	;# 
  1455     0015                     TMR0            equ	21	;# 
  1456     0016                     TMR1            equ	22	;# 
  1457     0016                     TMR1L           equ	22	;# 
  1458     0017                     TMR1H           equ	23	;# 
  1459     0018                     T1CON           equ	24	;# 
  1460     0019                     T1GCON          equ	25	;# 
  1461     001A                     TMR2            equ	26	;# 
  1462     001B                     PR2             equ	27	;# 
  1463     001C                     T2CON           equ	28	;# 
  1464     001E                     CPSCON0         equ	30	;# 
  1465     001F                     CPSCON1         equ	31	;# 
  1466     008C                     TRISA           equ	140	;# 
  1467     008E                     TRISC           equ	142	;# 
  1468     0091                     PIE1            equ	145	;# 
  1469     0092                     PIE2            equ	146	;# 
  1470     0093                     PIE3            equ	147	;# 
  1471     0095                     OPTION_REG      equ	149	;# 
  1472     0096                     PCON            equ	150	;# 
  1473     0097                     WDTCON          equ	151	;# 
  1474     0098                     OSCTUNE         equ	152	;# 
  1475     0099                     OSCCON          equ	153	;# 
  1476     009A                     OSCSTAT         equ	154	;# 
  1477     009B                     ADRES           equ	155	;# 
  1478     009B                     ADRESL          equ	155	;# 
  1479     009C                     ADRESH          equ	156	;# 
  1480     009D                     ADCON0          equ	157	;# 
  1481     009E                     ADCON1          equ	158	;# 
  1482     010C                     LATA            equ	268	;# 
  1483     010E                     LATC            equ	270	;# 
  1484     0111                     CM1CON0         equ	273	;# 
  1485     0112                     CM1CON1         equ	274	;# 
  1486     0113                     CM2CON0         equ	275	;# 
  1487     0114                     CM2CON1         equ	276	;# 
  1488     0115                     CMOUT           equ	277	;# 
  1489     0116                     BORCON          equ	278	;# 
  1490     0117                     FVRCON          equ	279	;# 
  1491     0118                     DACCON0         equ	280	;# 
  1492     0119                     DACCON1         equ	281	;# 
  1493     011A                     SRCON0          equ	282	;# 
  1494     011B                     SRCON1          equ	283	;# 
  1495     011D                     APFCON0         equ	285	;# 
  1496     011E                     APFCON1         equ	286	;# 
  1497     018C                     ANSELA          equ	396	;# 
  1498     018E                     ANSELC          equ	398	;# 
  1499     0191                     EEADR           equ	401	;# 
  1500     0191                     EEADRL          equ	401	;# 
  1501     0192                     EEADRH          equ	402	;# 
  1502     0193                     EEDAT           equ	403	;# 
  1503     0193                     EEDATL          equ	403	;# 
  1504     0193                     EEDATA          equ	403	;# 
  1505     0194                     EEDATH          equ	404	;# 
  1506     0195                     EECON1          equ	405	;# 
  1507     0196                     EECON2          equ	406	;# 
  1508     0199                     RCREG           equ	409	;# 
  1509     019A                     TXREG           equ	410	;# 
  1510     019B                     SPBRG           equ	411	;# 
  1511     019B                     SPBRGL          equ	411	;# 
  1512     019C                     SPBRGH          equ	412	;# 
  1513     019D                     RCSTA           equ	413	;# 
  1514     019E                     TXSTA           equ	414	;# 
  1515     019F                     BAUDCON         equ	415	;# 
  1516     020C                     WPUA            equ	524	;# 
  1517     020E                     WPUC            equ	526	;# 
  1518     0211                     SSP1BUF         equ	529	;# 
  1519     0211                     SSPBUF          equ	529	;# 
  1520     0212                     SSP1ADD         equ	530	;# 
  1521     0212                     SSPADD          equ	530	;# 
  1522     0213                     SSP1MSK         equ	531	;# 
  1523     0213                     SSPMSK          equ	531	;# 
  1524     0214                     SSP1STAT        equ	532	;# 
  1525     0214                     SSPSTAT         equ	532	;# 
  1526     0215                     SSP1CON1        equ	533	;# 
  1527     0215                     SSPCON1         equ	533	;# 
  1528     0215                     SSPCON          equ	533	;# 
  1529     0216                     SSP1CON2        equ	534	;# 
  1530     0216                     SSPCON2         equ	534	;# 
  1531     0217                     SSP1CON3        equ	535	;# 
  1532     0217                     SSPCON3         equ	535	;# 
  1533     0291                     CCPR1           equ	657	;# 
  1534     0291                     CCPR1L          equ	657	;# 
  1535     0292                     CCPR1H          equ	658	;# 
  1536     0293                     CCP1CON         equ	659	;# 
  1537     0294                     PWM1CON         equ	660	;# 
  1538     0295                     CCP1AS          equ	661	;# 
  1539     0295                     ECCP1AS         equ	661	;# 
  1540     0296                     PSTR1CON        equ	662	;# 
  1541     0298                     CCPR2           equ	664	;# 
  1542     0298                     CCPR2L          equ	664	;# 
  1543     0299                     CCPR2H          equ	665	;# 
  1544     029A                     CCP2CON         equ	666	;# 
  1545     029B                     PWM2CON         equ	667	;# 
  1546     029C                     CCP2AS          equ	668	;# 
  1547     029D                     PSTR2CON        equ	669	;# 
  1548     029E                     CCPTMRS         equ	670	;# 
  1549     029E                     CCPTMRS0        equ	670	;# 
  1550     0311                     CCPR3           equ	785	;# 
  1551     0311                     CCPR3L          equ	785	;# 
  1552     0312                     CCPR3H          equ	786	;# 
  1553     0313                     CCP3CON         equ	787	;# 
  1554     0318                     CCPR4           equ	792	;# 
  1555     0318                     CCPR4L          equ	792	;# 
  1556     0319                     CCPR4H          equ	793	;# 
  1557     031A                     CCP4CON         equ	794	;# 
  1558     038C                     INLVLA          equ	908	;# 
  1559     038E                     INLVLC          equ	910	;# 
  1560     0391                     IOCAP           equ	913	;# 
  1561     0392                     IOCAN           equ	914	;# 
  1562     0393                     IOCAF           equ	915	;# 
  1563     039A                     CLKRCON         equ	922	;# 
  1564     039C                     MDCON           equ	924	;# 
  1565     039D                     MDSRC           equ	925	;# 
  1566     039E                     MDCARL          equ	926	;# 
  1567     039F                     MDCARH          equ	927	;# 
  1568     0415                     TMR4            equ	1045	;# 
  1569     0416                     PR4             equ	1046	;# 
  1570     0417                     T4CON           equ	1047	;# 
  1571     041C                     TMR6            equ	1052	;# 
  1572     041D                     PR6             equ	1053	;# 
  1573     041E                     T6CON           equ	1054	;# 
  1574     0FE4                     STATUS_SHAD     equ	4068	;# 
  1575     0FE5                     WREG_SHAD       equ	4069	;# 
  1576     0FE6                     BSR_SHAD        equ	4070	;# 
  1577     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1578     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1579     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1580     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1581     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1582     0FED                     STKPTR          equ	4077	;# 
  1583     0FEE                     TOSL            equ	4078	;# 
  1584     0FEF                     TOSH            equ	4079	;# 
  1585     0000                     INDF0           equ	0	;# 
  1586     0001                     INDF1           equ	1	;# 
  1587     0002                     PCL             equ	2	;# 
  1588     0003                     STATUS          equ	3	;# 
  1589     0004                     FSR0L           equ	4	;# 
  1590     0005                     FSR0H           equ	5	;# 
  1591     0006                     FSR1L           equ	6	;# 
  1592     0007                     FSR1H           equ	7	;# 
  1593     0008                     BSR             equ	8	;# 
  1594     0009                     WREG            equ	9	;# 
  1595     000A                     PCLATH          equ	10	;# 
  1596     000B                     INTCON          equ	11	;# 
  1597     000C                     PORTA           equ	12	;# 
  1598     000E                     PORTC           equ	14	;# 
  1599     0011                     PIR1            equ	17	;# 
  1600     0012                     PIR2            equ	18	;# 
  1601     0013                     PIR3            equ	19	;# 
  1602     0015                     TMR0            equ	21	;# 
  1603     0016                     TMR1            equ	22	;# 
  1604     0016                     TMR1L           equ	22	;# 
  1605     0017                     TMR1H           equ	23	;# 
  1606     0018                     T1CON           equ	24	;# 
  1607     0019                     T1GCON          equ	25	;# 
  1608     001A                     TMR2            equ	26	;# 
  1609     001B                     PR2             equ	27	;# 
  1610     001C                     T2CON           equ	28	;# 
  1611     001E                     CPSCON0         equ	30	;# 
  1612     001F                     CPSCON1         equ	31	;# 
  1613     008C                     TRISA           equ	140	;# 
  1614     008E                     TRISC           equ	142	;# 
  1615     0091                     PIE1            equ	145	;# 
  1616     0092                     PIE2            equ	146	;# 
  1617     0093                     PIE3            equ	147	;# 
  1618     0095                     OPTION_REG      equ	149	;# 
  1619     0096                     PCON            equ	150	;# 
  1620     0097                     WDTCON          equ	151	;# 
  1621     0098                     OSCTUNE         equ	152	;# 
  1622     0099                     OSCCON          equ	153	;# 
  1623     009A                     OSCSTAT         equ	154	;# 
  1624     009B                     ADRES           equ	155	;# 
  1625     009B                     ADRESL          equ	155	;# 
  1626     009C                     ADRESH          equ	156	;# 
  1627     009D                     ADCON0          equ	157	;# 
  1628     009E                     ADCON1          equ	158	;# 
  1629     010C                     LATA            equ	268	;# 
  1630     010E                     LATC            equ	270	;# 
  1631     0111                     CM1CON0         equ	273	;# 
  1632     0112                     CM1CON1         equ	274	;# 
  1633     0113                     CM2CON0         equ	275	;# 
  1634     0114                     CM2CON1         equ	276	;# 
  1635     0115                     CMOUT           equ	277	;# 
  1636     0116                     BORCON          equ	278	;# 
  1637     0117                     FVRCON          equ	279	;# 
  1638     0118                     DACCON0         equ	280	;# 
  1639     0119                     DACCON1         equ	281	;# 
  1640     011A                     SRCON0          equ	282	;# 
  1641     011B                     SRCON1          equ	283	;# 
  1642     011D                     APFCON0         equ	285	;# 
  1643     011E                     APFCON1         equ	286	;# 
  1644     018C                     ANSELA          equ	396	;# 
  1645     018E                     ANSELC          equ	398	;# 
  1646     0191                     EEADR           equ	401	;# 
  1647     0191                     EEADRL          equ	401	;# 
  1648     0192                     EEADRH          equ	402	;# 
  1649     0193                     EEDAT           equ	403	;# 
  1650     0193                     EEDATL          equ	403	;# 
  1651     0193                     EEDATA          equ	403	;# 
  1652     0194                     EEDATH          equ	404	;# 
  1653     0195                     EECON1          equ	405	;# 
  1654     0196                     EECON2          equ	406	;# 
  1655     0199                     RCREG           equ	409	;# 
  1656     019A                     TXREG           equ	410	;# 
  1657     019B                     SPBRG           equ	411	;# 
  1658     019B                     SPBRGL          equ	411	;# 
  1659     019C                     SPBRGH          equ	412	;# 
  1660     019D                     RCSTA           equ	413	;# 
  1661     019E                     TXSTA           equ	414	;# 
  1662     019F                     BAUDCON         equ	415	;# 
  1663     020C                     WPUA            equ	524	;# 
  1664     020E                     WPUC            equ	526	;# 
  1665     0211                     SSP1BUF         equ	529	;# 
  1666     0211                     SSPBUF          equ	529	;# 
  1667     0212                     SSP1ADD         equ	530	;# 
  1668     0212                     SSPADD          equ	530	;# 
  1669     0213                     SSP1MSK         equ	531	;# 
  1670     0213                     SSPMSK          equ	531	;# 
  1671     0214                     SSP1STAT        equ	532	;# 
  1672     0214                     SSPSTAT         equ	532	;# 
  1673     0215                     SSP1CON1        equ	533	;# 
  1674     0215                     SSPCON1         equ	533	;# 
  1675     0215                     SSPCON          equ	533	;# 
  1676     0216                     SSP1CON2        equ	534	;# 
  1677     0216                     SSPCON2         equ	534	;# 
  1678     0217                     SSP1CON3        equ	535	;# 
  1679     0217                     SSPCON3         equ	535	;# 
  1680     0291                     CCPR1           equ	657	;# 
  1681     0291                     CCPR1L          equ	657	;# 
  1682     0292                     CCPR1H          equ	658	;# 
  1683     0293                     CCP1CON         equ	659	;# 
  1684     0294                     PWM1CON         equ	660	;# 
  1685     0295                     CCP1AS          equ	661	;# 
  1686     0295                     ECCP1AS         equ	661	;# 
  1687     0296                     PSTR1CON        equ	662	;# 
  1688     0298                     CCPR2           equ	664	;# 
  1689     0298                     CCPR2L          equ	664	;# 
  1690     0299                     CCPR2H          equ	665	;# 
  1691     029A                     CCP2CON         equ	666	;# 
  1692     029B                     PWM2CON         equ	667	;# 
  1693     029C                     CCP2AS          equ	668	;# 
  1694     029D                     PSTR2CON        equ	669	;# 
  1695     029E                     CCPTMRS         equ	670	;# 
  1696     029E                     CCPTMRS0        equ	670	;# 
  1697     0311                     CCPR3           equ	785	;# 
  1698     0311                     CCPR3L          equ	785	;# 
  1699     0312                     CCPR3H          equ	786	;# 
  1700     0313                     CCP3CON         equ	787	;# 
  1701     0318                     CCPR4           equ	792	;# 
  1702     0318                     CCPR4L          equ	792	;# 
  1703     0319                     CCPR4H          equ	793	;# 
  1704     031A                     CCP4CON         equ	794	;# 
  1705     038C                     INLVLA          equ	908	;# 
  1706     038E                     INLVLC          equ	910	;# 
  1707     0391                     IOCAP           equ	913	;# 
  1708     0392                     IOCAN           equ	914	;# 
  1709     0393                     IOCAF           equ	915	;# 
  1710     039A                     CLKRCON         equ	922	;# 
  1711     039C                     MDCON           equ	924	;# 
  1712     039D                     MDSRC           equ	925	;# 
  1713     039E                     MDCARL          equ	926	;# 
  1714     039F                     MDCARH          equ	927	;# 
  1715     0415                     TMR4            equ	1045	;# 
  1716     0416                     PR4             equ	1046	;# 
  1717     0417                     T4CON           equ	1047	;# 
  1718     041C                     TMR6            equ	1052	;# 
  1719     041D                     PR6             equ	1053	;# 
  1720     041E                     T6CON           equ	1054	;# 
  1721     0FE4                     STATUS_SHAD     equ	4068	;# 
  1722     0FE5                     WREG_SHAD       equ	4069	;# 
  1723     0FE6                     BSR_SHAD        equ	4070	;# 
  1724     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1725     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1726     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1727     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1728     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1729     0FED                     STKPTR          equ	4077	;# 
  1730     0FEE                     TOSL            equ	4078	;# 
  1731     0FEF                     TOSH            equ	4079	;# 
  1732     0000                     INDF0           equ	0	;# 
  1733     0001                     INDF1           equ	1	;# 
  1734     0002                     PCL             equ	2	;# 
  1735     0003                     STATUS          equ	3	;# 
  1736     0004                     FSR0L           equ	4	;# 
  1737     0005                     FSR0H           equ	5	;# 
  1738     0006                     FSR1L           equ	6	;# 
  1739     0007                     FSR1H           equ	7	;# 
  1740     0008                     BSR             equ	8	;# 
  1741     0009                     WREG            equ	9	;# 
  1742     000A                     PCLATH          equ	10	;# 
  1743     000B                     INTCON          equ	11	;# 
  1744     000C                     PORTA           equ	12	;# 
  1745     000E                     PORTC           equ	14	;# 
  1746     0011                     PIR1            equ	17	;# 
  1747     0012                     PIR2            equ	18	;# 
  1748     0013                     PIR3            equ	19	;# 
  1749     0015                     TMR0            equ	21	;# 
  1750     0016                     TMR1            equ	22	;# 
  1751     0016                     TMR1L           equ	22	;# 
  1752     0017                     TMR1H           equ	23	;# 
  1753     0018                     T1CON           equ	24	;# 
  1754     0019                     T1GCON          equ	25	;# 
  1755     001A                     TMR2            equ	26	;# 
  1756     001B                     PR2             equ	27	;# 
  1757     001C                     T2CON           equ	28	;# 
  1758     001E                     CPSCON0         equ	30	;# 
  1759     001F                     CPSCON1         equ	31	;# 
  1760     008C                     TRISA           equ	140	;# 
  1761     008E                     TRISC           equ	142	;# 
  1762     0091                     PIE1            equ	145	;# 
  1763     0092                     PIE2            equ	146	;# 
  1764     0093                     PIE3            equ	147	;# 
  1765     0095                     OPTION_REG      equ	149	;# 
  1766     0096                     PCON            equ	150	;# 
  1767     0097                     WDTCON          equ	151	;# 
  1768     0098                     OSCTUNE         equ	152	;# 
  1769     0099                     OSCCON          equ	153	;# 
  1770     009A                     OSCSTAT         equ	154	;# 
  1771     009B                     ADRES           equ	155	;# 
  1772     009B                     ADRESL          equ	155	;# 
  1773     009C                     ADRESH          equ	156	;# 
  1774     009D                     ADCON0          equ	157	;# 
  1775     009E                     ADCON1          equ	158	;# 
  1776     010C                     LATA            equ	268	;# 
  1777     010E                     LATC            equ	270	;# 
  1778     0111                     CM1CON0         equ	273	;# 
  1779     0112                     CM1CON1         equ	274	;# 
  1780     0113                     CM2CON0         equ	275	;# 
  1781     0114                     CM2CON1         equ	276	;# 
  1782     0115                     CMOUT           equ	277	;# 
  1783     0116                     BORCON          equ	278	;# 
  1784     0117                     FVRCON          equ	279	;# 
  1785     0118                     DACCON0         equ	280	;# 
  1786     0119                     DACCON1         equ	281	;# 
  1787     011A                     SRCON0          equ	282	;# 
  1788     011B                     SRCON1          equ	283	;# 
  1789     011D                     APFCON0         equ	285	;# 
  1790     011E                     APFCON1         equ	286	;# 
  1791     018C                     ANSELA          equ	396	;# 
  1792     018E                     ANSELC          equ	398	;# 
  1793     0191                     EEADR           equ	401	;# 
  1794     0191                     EEADRL          equ	401	;# 
  1795     0192                     EEADRH          equ	402	;# 
  1796     0193                     EEDAT           equ	403	;# 
  1797     0193                     EEDATL          equ	403	;# 
  1798     0193                     EEDATA          equ	403	;# 
  1799     0194                     EEDATH          equ	404	;# 
  1800     0195                     EECON1          equ	405	;# 
  1801     0196                     EECON2          equ	406	;# 
  1802     0199                     RCREG           equ	409	;# 
  1803     019A                     TXREG           equ	410	;# 
  1804     019B                     SPBRG           equ	411	;# 
  1805     019B                     SPBRGL          equ	411	;# 
  1806     019C                     SPBRGH          equ	412	;# 
  1807     019D                     RCSTA           equ	413	;# 
  1808     019E                     TXSTA           equ	414	;# 
  1809     019F                     BAUDCON         equ	415	;# 
  1810     020C                     WPUA            equ	524	;# 
  1811     020E                     WPUC            equ	526	;# 
  1812     0211                     SSP1BUF         equ	529	;# 
  1813     0211                     SSPBUF          equ	529	;# 
  1814     0212                     SSP1ADD         equ	530	;# 
  1815     0212                     SSPADD          equ	530	;# 
  1816     0213                     SSP1MSK         equ	531	;# 
  1817     0213                     SSPMSK          equ	531	;# 
  1818     0214                     SSP1STAT        equ	532	;# 
  1819     0214                     SSPSTAT         equ	532	;# 
  1820     0215                     SSP1CON1        equ	533	;# 
  1821     0215                     SSPCON1         equ	533	;# 
  1822     0215                     SSPCON          equ	533	;# 
  1823     0216                     SSP1CON2        equ	534	;# 
  1824     0216                     SSPCON2         equ	534	;# 
  1825     0217                     SSP1CON3        equ	535	;# 
  1826     0217                     SSPCON3         equ	535	;# 
  1827     0291                     CCPR1           equ	657	;# 
  1828     0291                     CCPR1L          equ	657	;# 
  1829     0292                     CCPR1H          equ	658	;# 
  1830     0293                     CCP1CON         equ	659	;# 
  1831     0294                     PWM1CON         equ	660	;# 
  1832     0295                     CCP1AS          equ	661	;# 
  1833     0295                     ECCP1AS         equ	661	;# 
  1834     0296                     PSTR1CON        equ	662	;# 
  1835     0298                     CCPR2           equ	664	;# 
  1836     0298                     CCPR2L          equ	664	;# 
  1837     0299                     CCPR2H          equ	665	;# 
  1838     029A                     CCP2CON         equ	666	;# 
  1839     029B                     PWM2CON         equ	667	;# 
  1840     029C                     CCP2AS          equ	668	;# 
  1841     029D                     PSTR2CON        equ	669	;# 
  1842     029E                     CCPTMRS         equ	670	;# 
  1843     029E                     CCPTMRS0        equ	670	;# 
  1844     0311                     CCPR3           equ	785	;# 
  1845     0311                     CCPR3L          equ	785	;# 
  1846     0312                     CCPR3H          equ	786	;# 
  1847     0313                     CCP3CON         equ	787	;# 
  1848     0318                     CCPR4           equ	792	;# 
  1849     0318                     CCPR4L          equ	792	;# 
  1850     0319                     CCPR4H          equ	793	;# 
  1851     031A                     CCP4CON         equ	794	;# 
  1852     038C                     INLVLA          equ	908	;# 
  1853     038E                     INLVLC          equ	910	;# 
  1854     0391                     IOCAP           equ	913	;# 
  1855     0392                     IOCAN           equ	914	;# 
  1856     0393                     IOCAF           equ	915	;# 
  1857     039A                     CLKRCON         equ	922	;# 
  1858     039C                     MDCON           equ	924	;# 
  1859     039D                     MDSRC           equ	925	;# 
  1860     039E                     MDCARL          equ	926	;# 
  1861     039F                     MDCARH          equ	927	;# 
  1862     0415                     TMR4            equ	1045	;# 
  1863     0416                     PR4             equ	1046	;# 
  1864     0417                     T4CON           equ	1047	;# 
  1865     041C                     TMR6            equ	1052	;# 
  1866     041D                     PR6             equ	1053	;# 
  1867     041E                     T6CON           equ	1054	;# 
  1868     0FE4                     STATUS_SHAD     equ	4068	;# 
  1869     0FE5                     WREG_SHAD       equ	4069	;# 
  1870     0FE6                     BSR_SHAD        equ	4070	;# 
  1871     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1872     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1873     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1874     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1875     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1876     0FED                     STKPTR          equ	4077	;# 
  1877     0FEE                     TOSL            equ	4078	;# 
  1878     0FEF                     TOSH            equ	4079	;_dataBuffer
  1879                           
  1880 ;; Function _EEPROM_ByteWrite is unused but had its address taken
  1881     0000                     _EEPROM_ByteWrite equ	0
  1882                           
  1883 ;; Function _EEPROM_ByteRead is unused but had its address taken
  1884     0000                     _EEPROM_ByteRead equ	0
  1885                           
  1886 ;; Function _NVM_IsBusy is unused but had its address taken
  1887     0000                     _NVM_IsBusy     equ	0
  1888                           
  1889 ;; Function _SPI1_Deinitialize is unused but had its address taken
  1890     0000                     _SPI1_Deinitialize equ	0
  1891                           
  1892 ;; Function _SPI1_ByteRead is unused but had its address taken
  1893     0000                     _SPI1_ByteRead  equ	0
  1894                           
  1895 ;; Function _SPI1_IsRxReady is unused but had its address taken
  1896     0000                     _SPI1_IsRxReady equ	0
  1897                           
  1898 ;; Function _SPI1_IsTxReady is unused but had its address taken
  1899     0000                     _SPI1_IsTxReady equ	0
  1900                           
  1901 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  1902     0000                     _INT_DefaultInterruptHandler equ	0
  1903                           
  1904                           	psect	idataBANK0
  1905     0E31                     __pidataBANK0:
  1906                           
  1907                           ;initializer for ADXL345_validation@F2696
  1908     0E31  3480               	retlw	128
  1909     0E32  3400               	retlw	0
  1910                           
  1911                           	psect	stringtext1
  1912     1000                     __pstringtext1:
  1913     1000                     _SPI1_Host:
  1914     1000  3462               	retlw	low _SPI1_Initialize
  1915     1001  340E               	retlw	high _SPI1_Initialize
  1916     1002  3400               	retlw	0
  1917     1003  3400               	retlw	0
  1918     1004  34DC               	retlw	low _SPI1_Open
  1919     1005  3400               	retlw	high _SPI1_Open
  1920     1006  3433               	retlw	low _SPI1_Close
  1921     1007  340E               	retlw	high _SPI1_Close
  1922     1008  34AD               	retlw	low _SPI1_BufferExchange
  1923     1009  340F               	retlw	high _SPI1_BufferExchange
  1924     100A  3466               	retlw	low _SPI1_BufferRead
  1925     100B  340F               	retlw	high _SPI1_BufferRead
  1926     100C  3446               	retlw	low _SPI1_BufferWrite
  1927     100D  340F               	retlw	high _SPI1_BufferWrite
  1928     100E  3477               	retlw	low _SPI1_ByteExchange
  1929     100F  340E               	retlw	high _SPI1_ByteExchange
  1930     1010  3400               	retlw	0
  1931     1011  3400               	retlw	0
  1932     1012  3439               	retlw	low _SPI1_ByteWrite
  1933     1013  340E               	retlw	high _SPI1_ByteWrite
  1934     1014  3400               	retlw	0
  1935     1015  3400               	retlw	0
  1936     1016  3400               	retlw	0
  1937     1017  3400               	retlw	0
  1938     1018  3400               	retlw	0
  1939     1019  3400               	retlw	0
  1940     101A  3400               	retlw	0
  1941     101B  3400               	retlw	0
  1942     101C                     __end_of_SPI1_Host:
  1943                           
  1944                           	psect	stringtext2
  1945     101C                     __pstringtext2:
  1946     101C                     _spi1_configuration:
  1947     101C  3400               	retlw	0
  1948     101D  341A               	retlw	26
  1949     101E  3410               	retlw	16
  1950     101F  3407               	retlw	7
  1951     1020  3400               	retlw	0
  1952     1021  3440               	retlw	64
  1953     1022  340A               	retlw	10
  1954     1023  3410               	retlw	16
  1955     1024  3407               	retlw	7
  1956     1025  3400               	retlw	0
  1957     1026  3464               	retlw	100
  1958     1027  3400               	retlw	0
  1959     1028  3410               	retlw	16
  1960     1029  3401               	retlw	1
  1961     102A  3400               	retlw	0
  1962     102B                     __end_of_spi1_configuration:
  1963                           
  1964                           	psect	stringtext3
  1965     102B                     __pstringtext3:
  1966     102B                     _eeprom_interface:
  1967     102B  3400               	retlw	0
  1968     102C  3400               	retlw	0
  1969     102D  3400               	retlw	0
  1970     102E  3400               	retlw	0
  1971     102F  3400               	retlw	0
  1972     1030  3400               	retlw	0
  1973     1031  3400               	retlw	0
  1974     1032  3400               	retlw	0
  1975     1033  3400               	retlw	0
  1976     1034  3400               	retlw	0
  1977     1035  3400               	retlw	0
  1978     1036  3400               	retlw	0
  1979     1037  3400               	retlw	0
  1980     1038  3400               	retlw	0
  1981     1039                     __end_of_eeprom_interface:
  1982                           
  1983                           	psect	stringtext4
  1984     1051                     __pstringtext4:
  1985     1051                     _acceleration_squared_threshold:
  1986     1051  34B0               	retlw	176
  1987     1052  3404               	retlw	4
  1988     1053                     __end_of_acceleration_squared_threshold:
  1989                           
  1990                           	psect	stringtext5
  1991     1039                     __pstringtext5:
  1992     1039                     _ADXL345_init_settings:
  1993     1039  3418               	retlw	24
  1994     103A  3403               	retlw	3
  1995     103B  34FF               	retlw	255
  1996     103C  347F               	retlw	127
  1997     103D  3407               	retlw	7
  1998     103E  3418               	retlw	24
  1999     103F  3400               	retlw	0
  2000     1040  3400               	retlw	0
  2001     1041  3417               	retlw	23
  2002     1042  3408               	retlw	8
  2003     1043  3404               	retlw	4
  2004     1044  3400               	retlw	0
  2005     1045                     __end_of_ADXL345_init_settings:
  2006                           
  2007                           	psect	stringtext6
  2008     1045                     __pstringtext6:
  2009     1045                     _no_motion_init:
  2010     1045  3408               	retlw	8
  2011     1046  3403               	retlw	3
  2012     1047  3402               	retlw	2
  2013     1048  34FF               	retlw	255
  2014     1049                     __end_of_no_motion_init:
  2015                           
  2016                           	psect	stringtext7
  2017     1049                     __pstringtext7:
  2018     1049                     _impact_init:
  2019     1049  3430               	retlw	48
  2020     104A  3403               	retlw	3
  2021     104B  3401               	retlw	1
  2022     104C  347F               	retlw	127
  2023     104D                     __end_of_impact_init:
  2024                           
  2025                           	psect	stringtext8
  2026     104D                     __pstringtext8:
  2027     104D                     _fall_init:
  2028     104D  3418               	retlw	24
  2029     104E  3403               	retlw	3
  2030     104F  34FF               	retlw	255
  2031     1050  347F               	retlw	127
  2032     1051                     __end_of_fall_init:
  2033                           
  2034                           	psect	nvBANK0
  2035     0061                     __pnvBANK0:
  2036     0061                     _SW1_InterruptHandler:
  2037     0061                     	ds	2
  2038     0063                     _INT_InterruptHandler:
  2039     0063                     	ds	2
  2040     000C                     _PORTAbits      set	12
  2041     0011                     _PIR1bits       set	17
  2042     000B                     _INTCONbits     set	11
  2043     0097                     _WDTCON         set	151
  2044     0098                     _OSCTUNE        set	152
  2045     0099                     _OSCCON         set	153
  2046     008E                     _TRISC          set	142
  2047     008C                     _TRISA          set	140
  2048     0095                     _OPTION_REGbits set	149
  2049     0091                     _PIE1bits       set	145
  2050     010E                     _LATCbits       set	270
  2051     0116                     _BORCON         set	278
  2052     010C                     _LATAbits       set	268
  2053     011D                     _APFCON0        set	285
  2054     010E                     _LATC           set	270
  2055     010C                     _LATA           set	268
  2056     0191                     _EEADR          set	401
  2057     0193                     _EEDATA         set	403
  2058     0195                     _EECON1         set	405
  2059     018E                     _ANSELC         set	398
  2060     018C                     _ANSELA         set	396
  2061     0196                     _EECON2         set	406
  2062     0193                     _EEDATL         set	403
  2063     0194                     _EEDATH         set	404
  2064     0191                     _EEADRL         set	401
  2065     0192                     _EEADRH         set	402
  2066     0195                     _EECON1bits     set	405
  2067     0CAD                     _LWLO           set	3245
  2068     020E                     _WPUC           set	526
  2069     020C                     _WPUA           set	524
  2070     0211                     _SSP1BUF        set	529
  2071     0215                     _SSP1CON1bits   set	533
  2072     0212                     _SSP1ADD        set	530
  2073     0217                     _SSP1CON3       set	535
  2074     0215                     _SSP1CON1       set	533
  2075     0214                     _SSP1STAT       set	532
  2076     0393                     _IOCAFbits      set	915
  2077     0393                     _IOCAF          set	915
  2078     0392                     _IOCAN          set	914
  2079     0391                     _IOCAP          set	913
  2080     038E                     _INLVLC         set	910
  2081     038C                     _INLVLA         set	908
  2082                           
  2083                           	psect	cinit
  2084     07D2                     start_initialization:	
  2085                           ; #config settings
  2086                           
  2087     07D2                     __initialization:	;BIGRAM
  2088                           
  2089                           ; Initialize objects allocated to BANK0
  2090     07D2  318E  2631  3187   	fcall	__pidataBANK0	;fetch initializer
  2091     07D5  00E5               	movwf	__pdataBANK0& (0+127)
  2092     07D6  318E  2632  3187   	fcall	__pidataBANK0+1	;fetch initializer
  2093     07D9  00E6               	movwf	(__pdataBANK0+1)& (0+127)
  2094                           
  2095                           ; Clear objects allocated to BIGRAM
  2096     07DA  30F0               	movlw	low (0+8944)
  2097     07DB  0084               	movwf	4
  2098     07DC  3022               	movlw	high (0+8944)
  2099     07DD  0085               	movwf	5
  2100     07DE  3000               	movlw	0
  2101     07DF  00FE               	movwf	btemp
  2102     07E0  3001               	movlw	1
  2103     07E1  00FF               	movwf	btemp+1
  2104     07E2  318E  2683  3187   	fcall	clear_ram0
  2105                           
  2106                           ; Clear objects allocated to COMMON
  2107     07E5  01FC               	clrf	__pbssCOMMON& (0+127)
  2108     07E6  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  2109                           
  2110                           ; Clear objects allocated to BANK0
  2111     07E7  3056               	movlw	low __pbssBANK0
  2112     07E8  0084               	movwf	4
  2113     07E9  3000               	movlw	high __pbssBANK0
  2114     07EA  0085               	movwf	5
  2115     07EB  300B               	movlw	11
  2116     07EC  00FE               	movwf	btemp
  2117     07ED  3000               	movlw	0
  2118     07EE  00FF               	movwf	btemp+1
  2119     07EF  318E  2683  3187   	fcall	clear_ram0
  2120                           
  2121                           ; Clear objects allocated to BANK1
  2122     07F2  30E0               	movlw	low __pbssBANK1
  2123     07F3  0084               	movwf	4
  2124     07F4  3000               	movlw	high __pbssBANK1
  2125     07F5  0085               	movwf	5
  2126     07F6  300C               	movlw	12
  2127     07F7  00FE               	movwf	btemp
  2128     07F8  3000               	movlw	0
  2129     07F9  00FF               	movwf	btemp+1
  2130     07FA  318E  2683  3187   	fcall	clear_ram0
  2131     07FD                     end_of_initialization:	
  2132                           ;End of C runtime variable initialization code
  2133                           
  2134     07FD                     __end_of__initialization:
  2135     07FD  0020               	movlb	0
  2136     07FE  3184  2C47         	ljmp	_main	;jump to C main() function
  2137                           
  2138                           	psect	bssCOMMON
  2139     007C                     __pbssCOMMON:
  2140     007C                     _unlockKeyHigh:
  2141     007C                     	ds	1
  2142     007D                     _unlockKeyLow:
  2143     007D                     	ds	1
  2144                           
  2145                           	psect	bssBANK0
  2146     0056                     __pbssBANK0:
  2147     0056                     orientation_Up@F2712:
  2148     0056                     	ds	6
  2149     005C                     _orientation_check_timer_20ms:
  2150     005C                     	ds	2
  2151     005E                     _timer_20ms:
  2152     005E                     	ds	2
  2153     0060                     _good_orientation_count:
  2154     0060                     	ds	1
  2155                           
  2156                           	psect	dataBANK0
  2157     0065                     __pdataBANK0:
  2158     0065                     ADXL345_validation@F2696:
  2159     0065                     	ds	2
  2160                           
  2161                           	psect	bssBANK1
  2162     00E0                     __pbssBANK1:
  2163     00E0                     calibrate@F2724:
  2164     00E0                     	ds	12
  2165                           
  2166                           	psect	clrtext
  2167     0E83                     clear_ram0:	
  2168                           ;	Called with FSR0 containing the base address, and
  2169                           ;	btemp/btemp+1 has the size to clear
  2170                           
  2171     0E83  0064               	clrwdt	;clear the watchdog before getting into this loop
  2172     0E84                     clrloop0:
  2173     0E84  0180               	clrf	0	;clear RAM location pointed to by FSR
  2174     0E85  3101               	addfsr 0,1
  2175     0E86  3001               	movlw	1
  2176     0E87  02FE               	subwf	btemp,f
  2177     0E88  3000               	movlw	0
  2178     0E89  3BFF               	subwfb	btemp+1,f
  2179     0E8A  087F               	movf	btemp+1,w
  2180     0E8B  047E               	iorwf	btemp,w
  2181     0E8C  1D03               	skipz
  2182     0E8D  2E84               	goto	clrloop0	;have we reached the end yet?
  2183     0E8E  3400               	retlw	0	;all done for this memory range, return
  2184                           
  2185                           	psect	cstackBANK1
  2186     00A0                     __pcstackBANK1:
  2187     00A0                     calibrate@acc_data:
  2188                           
  2189                           ; 12 bytes @ 0x0
  2190     00A0                     	ds	12
  2191     00AC                     calibrate@Z_n1g:
  2192                           
  2193                           ; 2 bytes @ 0xC
  2194     00AC                     	ds	2
  2195     00AE                     calibrate@sum_X:
  2196                           
  2197                           ; 2 bytes @ 0xE
  2198     00AE                     	ds	2
  2199     00B0                     calibrate@sum_Y:
  2200                           
  2201                           ; 2 bytes @ 0x10
  2202     00B0                     	ds	2
  2203     00B2                     calibrate@offset_0g_X:
  2204                           
  2205                           ; 2 bytes @ 0x12
  2206     00B2                     	ds	2
  2207     00B4                     calibrate@offset_0g_Y:
  2208                           
  2209                           ; 2 bytes @ 0x14
  2210     00B4                     	ds	2
  2211     00B6                     calibrate@offset_0g_Z:
  2212                           
  2213                           ; 2 bytes @ 0x16
  2214     00B6                     	ds	2
  2215     00B8                     calibrate@i:
  2216                           
  2217                           ; 2 bytes @ 0x18
  2218     00B8                     	ds	2
  2219     00BA                     calibrate@i_1010:
  2220                           
  2221                           ; 2 bytes @ 0x1A
  2222     00BA                     	ds	2
  2223     00BC                     calibrate@addr_val:
  2224                           
  2225                           ; 1 bytes @ 0x1C
  2226     00BC                     	ds	1
  2227     00BD                     calibrate@addr_val_1011:
  2228                           
  2229                           ; 1 bytes @ 0x1D
  2230     00BD                     	ds	1
  2231     00BE                     calibrate@sum_Z:
  2232                           
  2233                           ; 2 bytes @ 0x1E
  2234     00BE                     	ds	2
  2235     00C0                     calibrate@sum_X_avg:
  2236                           
  2237                           ; 2 bytes @ 0x20
  2238     00C0                     	ds	2
  2239     00C2                     calibrate@sum_Y_avg:
  2240                           
  2241                           ; 2 bytes @ 0x22
  2242     00C2                     	ds	2
  2243     00C4                     calibrate@msg:
  2244                           
  2245                           ; 26 bytes @ 0x24
  2246     00C4                     	ds	26
  2247     00DE                     calibrate@sum_Z_avg:
  2248                           
  2249                           ; 2 bytes @ 0x3E
  2250     00DE                     	ds	2
  2251                           
  2252                           	psect	cstackCOMMON
  2253     0070                     __pcstackCOMMON:
  2254     0070                     ?_EEPROM_Write:
  2255     0070                     ?_NVM_StatusClear:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258     0070                     ?_EEPROM_Read:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261     0070                     ?_SPI1_Initialize:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264     0070                     ?_SPI1_Close:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267     0070                     ?_SPI1_BufferExchange:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270     0070                     ?_SPI1_BufferRead:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273     0070                     ?_SPI1_BufferWrite:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276     0070                     ?_SPI1_ByteExchange:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279     0070                     ?_SPI1_ByteWrite:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282     0070                     ?_INT_SetInterruptHandler:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285     0070                     ?_SW1_SetInterruptHandler:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288     0070                     ?_SW1_DefaultInterruptHandler:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291     0070                     ?_SW1_ISR:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294     0070                     ?_WDT_Initialize:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297     0070                     ?_ADXL345_validation:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300     0070                     ?_ADXL345_init:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303     0070                     ?_calibrate:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306     0070                     ?_NVM_Initialize:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309     0070                     ?_INTERRUPT_Initialize:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312     0070                     ?_PIN_MANAGER_Initialize:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315     0070                     ?_PIN_MANAGER_IOC:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318     0070                     ?_CLOCK_Initialize:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321     0070                     ?_SYSTEM_Initialize:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324     0070                     ?_ADXL345_ClearInterrupt:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327     0070                     ?_setupForFreefall:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330     0070                     ?_setupForImpact:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333     0070                     ?_setupForInactivity:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336     0070                     ?_orientation_Up:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339     0070                     ?_memset:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342     0070                     ?_memcpy:	
  2343                           ; 2 bytes @ 0x0
  2344                           
  2345     0070                     ?_main:	
  2346                           ; 2 bytes @ 0x0
  2347                           
  2348     0070                     ?___wmul:	
  2349                           ; 2 bytes @ 0x0
  2350                           
  2351     0070                     SPI1_BufferExchange@bufferData:	
  2352                           ; 2 bytes @ 0x0
  2353                           
  2354     0070                     SPI1_BufferRead@bufferData:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357     0070                     SPI1_ByteExchange@byteData:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360     0070                     SPI1_ByteWrite@byteData:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363     0070                     EEPROM_Read@address:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366     0070                     EEPROM_Write@address:	
  2367                           ; 2 bytes @ 0x0
  2368                           
  2369     0070                     SPI1_BufferWrite@bufferData:	
  2370                           ; 2 bytes @ 0x0
  2371                           
  2372     0070                     INT_SetInterruptHandler@InterruptHandler:	
  2373                           ; 2 bytes @ 0x0
  2374                           
  2375     0070                     SW1_SetInterruptHandler@InterruptHandler:	
  2376                           ; 2 bytes @ 0x0
  2377                           
  2378     0070                     ___wmul@multiplier:	
  2379                           ; 2 bytes @ 0x0
  2380                           
  2381     0070                     memcpy@d1:	
  2382                           ; 2 bytes @ 0x0
  2383                           
  2384     0070                     memset@dest:	
  2385                           ; 2 bytes @ 0x0
  2386                           
  2387     0070                     ??_NVM_StatusClear:	
  2388                           ; 2 bytes @ 0x0
  2389                           
  2390     0070                     ??_SPI1_Initialize:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393     0070                     ??_SPI1_Close:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396     0070                     ??_SW1_DefaultInterruptHandler:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399     0070                     ??_WDT_Initialize:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402     0070                     ??_NVM_Initialize:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405     0070                     ??_CLOCK_Initialize:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408                           
  2409                           ; 1 bytes @ 0x0
  2410     0070                     	ds	1
  2411     0071                     SPI1_BufferExchange@bufferSize:
  2412     0071                     SPI1_BufferRead@bufferSize:	
  2413                           ; 2 bytes @ 0x1
  2414                           
  2415     0071                     ??_SPI1_ByteExchange:	
  2416                           ; 2 bytes @ 0x1
  2417                           
  2418     0071                     ??_SPI1_ByteWrite:	
  2419                           ; 1 bytes @ 0x1
  2420                           
  2421     0071                     ??_SW1_ISR:	
  2422                           ; 1 bytes @ 0x1
  2423                           
  2424     0071                     ??_PIN_MANAGER_IOC:	
  2425                           ; 1 bytes @ 0x1
  2426                           
  2427                           
  2428                           ; 1 bytes @ 0x1
  2429     0071                     	ds	1
  2430     0072                     EEPROM_Write@data:
  2431     0072                     SPI1_BufferWrite@bufferSize:	
  2432                           ; 1 bytes @ 0x2
  2433                           
  2434     0072                     ___wmul@multiplicand:	
  2435                           ; 2 bytes @ 0x2
  2436                           
  2437     0072                     memcpy@s1:	
  2438                           ; 2 bytes @ 0x2
  2439                           
  2440     0072                     memset@c:	
  2441                           ; 2 bytes @ 0x2
  2442                           
  2443     0072                     ??_EEPROM_Read:	
  2444                           ; 2 bytes @ 0x2
  2445                           
  2446     0072                     ??_INT_SetInterruptHandler:	
  2447                           ; 1 bytes @ 0x2
  2448                           
  2449     0072                     ??_SW1_SetInterruptHandler:	
  2450                           ; 1 bytes @ 0x2
  2451                           
  2452     0072                     ??_INTERRUPT_Initialize:	
  2453                           ; 1 bytes @ 0x2
  2454                           
  2455     0072                     ??_PIN_MANAGER_Initialize:	
  2456                           ; 1 bytes @ 0x2
  2457                           
  2458     0072                     ??_SYSTEM_Initialize:	
  2459                           ; 1 bytes @ 0x2
  2460                           
  2461                           
  2462                           ; 1 bytes @ 0x2
  2463     0072                     	ds	1
  2464     0073                     EEPROM_Write@globalInterruptBitValue:
  2465     0073                     SPI1_BufferExchange@bufferInputSize:	
  2466                           ; 1 bytes @ 0x3
  2467                           
  2468     0073                     SPI1_BufferRead@bufferInputSize:	
  2469                           ; 2 bytes @ 0x3
  2470                           
  2471     0073                     ??_EEPROM_Write:	
  2472                           ; 2 bytes @ 0x3
  2473                           
  2474     0073                     ??_SPI1_BufferExchange:	
  2475                           ; 1 bytes @ 0x3
  2476                           
  2477     0073                     ??_SPI1_BufferRead:	
  2478                           ; 1 bytes @ 0x3
  2479                           
  2480                           
  2481                           ; 1 bytes @ 0x3
  2482     0073                     	ds	1
  2483     0074                     SPI1_BufferWrite@bufferInputSize:
  2484     0074                     ___wmul@product:	
  2485                           ; 2 bytes @ 0x4
  2486                           
  2487     0074                     memcpy@n:	
  2488                           ; 2 bytes @ 0x4
  2489                           
  2490     0074                     memset@n:	
  2491                           ; 2 bytes @ 0x4
  2492                           
  2493     0074                     ??_SPI1_BufferWrite:	
  2494                           ; 2 bytes @ 0x4
  2495                           
  2496     0074                     ??___wmul:	
  2497                           ; 1 bytes @ 0x4
  2498                           
  2499                           
  2500                           ; 1 bytes @ 0x4
  2501     0074                     	ds	1
  2502     0075                     SPI1_BufferExchange@bufferInput:
  2503     0075                     SPI1_BufferRead@bufferInput:	
  2504                           ; 1 bytes @ 0x5
  2505                           
  2506                           
  2507                           ; 1 bytes @ 0x5
  2508     0075                     	ds	1
  2509     0076                     ?_SPI1_Open:
  2510     0076                     SPI1_Open@spiConfigIndex:	
  2511                           ; 1 bytes @ 0x6
  2512                           
  2513     0076                     SPI1_BufferWrite@bufferInput:	
  2514                           ; 1 bytes @ 0x6
  2515                           
  2516     0076                     memset@p:	
  2517                           ; 1 bytes @ 0x6
  2518                           
  2519     0076                     memcpy@s:	
  2520                           ; 1 bytes @ 0x6
  2521                           
  2522     0076                     ??_memset:	
  2523                           ; 2 bytes @ 0x6
  2524                           
  2525     0076                     ??_memcpy:	
  2526                           ; 1 bytes @ 0x6
  2527                           
  2528                           
  2529                           ; 1 bytes @ 0x6
  2530     0076                     	ds	1
  2531     0077                     ??_SPI1_Open:
  2532                           
  2533                           ; 1 bytes @ 0x7
  2534     0077                     	ds	1
  2535     0078                     memcpy@tmp:
  2536                           
  2537                           ; 1 bytes @ 0x8
  2538     0078                     	ds	1
  2539     0079                     SPI1_Open@returnValue:
  2540     0079                     memcpy@d:	
  2541                           ; 1 bytes @ 0x9
  2542                           
  2543                           
  2544                           ; 1 bytes @ 0x9
  2545     0079                     	ds	1
  2546     007A                     ?_saveOffsets:
  2547     007A                     saveOffsets@y_axis:	
  2548                           ; 1 bytes @ 0xA
  2549                           
  2550     007A                     ADXL345_validation@temp:	
  2551                           ; 1 bytes @ 0xA
  2552                           
  2553     007A                     ??_ADXL345_validation:	
  2554                           ; 2 bytes @ 0xA
  2555                           
  2556     007A                     ??_ADXL345_init:	
  2557                           ; 1 bytes @ 0xA
  2558                           
  2559     007A                     ??_ADXL345_ClearInterrupt:	
  2560                           ; 1 bytes @ 0xA
  2561                           
  2562     007A                     ??_setupForFreefall:	
  2563                           ; 1 bytes @ 0xA
  2564                           
  2565     007A                     ??_setupForImpact:	
  2566                           ; 1 bytes @ 0xA
  2567                           
  2568     007A                     ??_setupForInactivity:	
  2569                           ; 1 bytes @ 0xA
  2570                           
  2571     007A                     ??_orientation_Up:	
  2572                           ; 1 bytes @ 0xA
  2573                           
  2574                           
  2575                           ; 1 bytes @ 0xA
  2576     007A                     	ds	1
  2577     007B                     saveOffsets@z_axis:
  2578                           
  2579                           ; 1 bytes @ 0xB
  2580     007B                     	ds	1
  2581     007C                     ??_saveOffsets:
  2582                           
  2583                           	psect	cstackBANK0
  2584     0020                     __pcstackBANK0:	
  2585                           ; 1 bytes @ 0xC
  2586                           
  2587     0020                     saveOffsets@x_axis:
  2588     0020                     orientation_Up@acc_data:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591     0020                     ADXL345_init@msg:	
  2592                           ; 6 bytes @ 0x0
  2593                           
  2594     0020                     setupForFreefall@msg:	
  2595                           ; 26 bytes @ 0x0
  2596                           
  2597     0020                     setupForImpact@msg:	
  2598                           ; 26 bytes @ 0x0
  2599                           
  2600     0020                     setupForInactivity@msg:	
  2601                           ; 26 bytes @ 0x0
  2602                           
  2603                           
  2604                           ; 26 bytes @ 0x0
  2605     0020                     	ds	1
  2606     0021                     saveOffsets@msg:
  2607                           
  2608                           ; 26 bytes @ 0x1
  2609     0021                     	ds	5
  2610     0026                     orientation_Up@g_magnitude:
  2611                           
  2612                           ; 2 bytes @ 0x6
  2613     0026                     	ds	2
  2614     0028                     orientation_Up@msg:
  2615                           
  2616                           ; 26 bytes @ 0x8
  2617     0028                     	ds	19
  2618     003B                     ??_calibrate:
  2619                           
  2620                           ; 1 bytes @ 0x1B
  2621     003B                     	ds	7
  2622     0042                     orientation_Up@addr_val:
  2623                           
  2624                           ; 1 bytes @ 0x22
  2625     0042                     	ds	1
  2626     0043                     orientation_Up@g_deltaX:
  2627                           
  2628                           ; 2 bytes @ 0x23
  2629     0043                     	ds	2
  2630     0045                     orientation_Up@g_deltaY:
  2631                           
  2632                           ; 2 bytes @ 0x25
  2633     0045                     	ds	2
  2634     0047                     orientation_Up@g_deltaZ:
  2635                           
  2636                           ; 2 bytes @ 0x27
  2637     0047                     	ds	2
  2638     0049                     ?_MotionEventHandler:
  2639     0049                     MotionEventHandler@state:	
  2640                           ; 1 bytes @ 0x29
  2641                           
  2642                           
  2643                           ; 1 bytes @ 0x29
  2644     0049                     	ds	1
  2645     004A                     ??_MotionEventHandler:
  2646                           
  2647                           ; 1 bytes @ 0x2A
  2648     004A                     	ds	2
  2649     004C                     ??_main:
  2650                           
  2651                           ; 1 bytes @ 0x2C
  2652     004C                     	ds	2
  2653     004E                     main@X_val:
  2654                           
  2655                           ; 1 bytes @ 0x2E
  2656     004E                     	ds	1
  2657     004F                     main@Y_val:
  2658                           
  2659                           ; 1 bytes @ 0x2F
  2660     004F                     	ds	1
  2661     0050                     main@Z_val:
  2662                           
  2663                           ; 1 bytes @ 0x30
  2664     0050                     	ds	1
  2665     0051                     main@i:
  2666                           
  2667                           ; 2 bytes @ 0x31
  2668     0051                     	ds	2
  2669     0053                     main@i_875:
  2670                           
  2671                           ; 2 bytes @ 0x33
  2672     0053                     	ds	2
  2673     0055                     main@current_state:
  2674                           
  2675                           ; 1 bytes @ 0x35
  2676     0055                     	ds	1
  2677                           
  2678                           	psect	maintext
  2679     0447                     __pmaintext:	
  2680 ;;
  2681 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2682 ;;
  2683 ;; *************** function _main *****************
  2684 ;; Defined at:
  2685 ;;		line 45 in file "main.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  i               2   51[BANK0 ] int 
  2690 ;;  i               2   49[BANK0 ] int 
  2691 ;;  Z_val           1   48[BANK0 ] unsigned char 
  2692 ;;  Y_val           1   47[BANK0 ] unsigned char 
  2693 ;;  X_val           1   46[BANK0 ] unsigned char 
  2694 ;;  current_stat    1   53[BANK0 ] enum E2688
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  2  377[None  ] int 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : B1F/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2705 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2707 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2708 ;;Total ram usage:       10 bytes
  2709 ;; Hardware stack levels required when called: 4
  2710 ;; This function calls:
  2711 ;;		_ADXL345_init
  2712 ;;		_ADXL345_validation
  2713 ;;		_EEPROM_Read
  2714 ;;		_MotionEventHandler
  2715 ;;		_PIN_MANAGER_IOC
  2716 ;;		_SPI1_Initialize
  2717 ;;		_SYSTEM_Initialize
  2718 ;;		_calibrate
  2719 ;;		_saveOffsets
  2720 ;; This function is called by:
  2721 ;;		Startup code after reset
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725     0447                     _main:	
  2726                           ;psect for function _main
  2727                           
  2728     0447                     l3206:	
  2729                           ;incstack = 0
  2730                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2731                           
  2732                           
  2733                           ;main.c: 47:     SYSTEM_Initialize();
  2734     0447  318E  26AB  3184   	fcall	_SYSTEM_Initialize
  2735     044A                     l3208:
  2736                           
  2737                           ;main.c: 48:     SPI1_Initialize();
  2738     044A  318E  2662  3184   	fcall	_SPI1_Initialize
  2739     044D                     l3210:
  2740                           
  2741                           ;main.c: 50:     if (ADXL345_validation()) {
  2742     044D  318F  27D3  3184   	fcall	_ADXL345_validation
  2743     0450  3A00               	xorlw	0
  2744     0451  1903               	skipnz
  2745     0452  2C54               	goto	u1341
  2746     0453  2C55               	goto	u1340
  2747     0454                     u1341:
  2748     0454  2C67               	goto	l384
  2749     0455                     u1340:
  2750     0455                     l379:	
  2751                           ;main.c: 51:         do { LATAbits.LATA4 = 1; } while(0);
  2752                           
  2753     0455  0022               	movlb	2	; select bank2
  2754     0456  160C               	bsf	12,4	;volatile
  2755     0457                     l3212:
  2756                           
  2757                           ;main.c: 52:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2758     0457  3002               	movlw	2
  2759     0458  0020               	movlb	0	; select bank0
  2760     0459  00CD               	movwf	??_main+1
  2761     045A  3045               	movlw	69
  2762     045B  00CC               	movwf	??_main
  2763     045C  30A9               	movlw	169
  2764     045D                     u1417:
  2765     045D  0B89               	decfsz	9,f
  2766     045E  2C5D               	goto	u1417
  2767     045F  0BCC               	decfsz	??_main,f
  2768     0460  2C5D               	goto	u1417
  2769     0461  0BCD               	decfsz	??_main+1,f
  2770     0462  2C5D               	goto	u1417
  2771     0463  3200               	nop2
  2772     0464                     l3214:
  2773     0464  0022               	movlb	2	; select bank2
  2774     0465  120C               	bcf	12,4	;volatile
  2775     0466  2C78               	goto	l383
  2776     0467                     l384:	
  2777                           ;main.c: 55:         do { LATAbits.LATA5 = 1; } while(0);
  2778                           
  2779     0467  0022               	movlb	2	; select bank2
  2780     0468  168C               	bsf	12,5	;volatile
  2781     0469                     l3216:
  2782                           
  2783                           ;main.c: 56:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2784     0469  3002               	movlw	2
  2785     046A  0020               	movlb	0	; select bank0
  2786     046B  00CD               	movwf	??_main+1
  2787     046C  3045               	movlw	69
  2788     046D  00CC               	movwf	??_main
  2789     046E  30A9               	movlw	169
  2790     046F                     u1427:
  2791     046F  0B89               	decfsz	9,f
  2792     0470  2C6F               	goto	u1427
  2793     0471  0BCC               	decfsz	??_main,f
  2794     0472  2C6F               	goto	u1427
  2795     0473  0BCD               	decfsz	??_main+1,f
  2796     0474  2C6F               	goto	u1427
  2797     0475  3200               	nop2
  2798     0476                     l3218:
  2799     0476  0022               	movlb	2	; select bank2
  2800     0477  128C               	bcf	12,5	;volatile
  2801     0478                     l383:	
  2802                           ;main.c: 58:     }
  2803                           
  2804     0478  0064               	clrwdt	;# 
  2805                           
  2806                           ;main.c: 61:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2807     0479  3002               	movlw	2
  2808     047A  0020               	movlb	0	; select bank0
  2809     047B  00CD               	movwf	??_main+1
  2810     047C  3045               	movlw	69
  2811     047D  00CC               	movwf	??_main
  2812     047E  30A9               	movlw	169
  2813     047F                     u1437:
  2814     047F  0B89               	decfsz	9,f
  2815     0480  2C7F               	goto	u1437
  2816     0481  0BCC               	decfsz	??_main,f
  2817     0482  2C7F               	goto	u1437
  2818     0483  0BCD               	decfsz	??_main+1,f
  2819     0484  2C7F               	goto	u1437
  2820     0485  3200               	nop2
  2821     0486  0064               	clrwdt	;# 
  2822     0487                     l3220:
  2823                           
  2824                           ;main.c: 64:     if (ADXL345_init()) {
  2825     0487  3180  2078  3184   	fcall	_ADXL345_init
  2826     048A  3A00               	xorlw	0
  2827     048B  1903               	skipnz
  2828     048C  2C8E               	goto	u1351
  2829     048D  2C8F               	goto	u1350
  2830     048E                     u1351:
  2831     048E  2CA1               	goto	l394
  2832     048F                     u1350:
  2833     048F                     l389:	
  2834                           ;main.c: 65:         do { LATAbits.LATA4 = 1; } while(0);
  2835                           
  2836     048F  0022               	movlb	2	; select bank2
  2837     0490  160C               	bsf	12,4	;volatile
  2838     0491                     l3222:
  2839                           
  2840                           ;main.c: 66:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2841     0491  3002               	movlw	2
  2842     0492  0020               	movlb	0	; select bank0
  2843     0493  00CD               	movwf	??_main+1
  2844     0494  3045               	movlw	69
  2845     0495  00CC               	movwf	??_main
  2846     0496  30A9               	movlw	169
  2847     0497                     u1447:
  2848     0497  0B89               	decfsz	9,f
  2849     0498  2C97               	goto	u1447
  2850     0499  0BCC               	decfsz	??_main,f
  2851     049A  2C97               	goto	u1447
  2852     049B  0BCD               	decfsz	??_main+1,f
  2853     049C  2C97               	goto	u1447
  2854     049D  3200               	nop2
  2855     049E                     l3224:
  2856     049E  0022               	movlb	2	; select bank2
  2857     049F  120C               	bcf	12,4	;volatile
  2858     04A0  2CB2               	goto	l393
  2859     04A1                     l394:	
  2860                           ;main.c: 69:         do { LATAbits.LATA5 = 1; } while(0);
  2861                           
  2862     04A1  0022               	movlb	2	; select bank2
  2863     04A2  168C               	bsf	12,5	;volatile
  2864     04A3                     l3226:
  2865                           
  2866                           ;main.c: 70:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2867     04A3  3002               	movlw	2
  2868     04A4  0020               	movlb	0	; select bank0
  2869     04A5  00CD               	movwf	??_main+1
  2870     04A6  3045               	movlw	69
  2871     04A7  00CC               	movwf	??_main
  2872     04A8  30A9               	movlw	169
  2873     04A9                     u1457:
  2874     04A9  0B89               	decfsz	9,f
  2875     04AA  2CA9               	goto	u1457
  2876     04AB  0BCC               	decfsz	??_main,f
  2877     04AC  2CA9               	goto	u1457
  2878     04AD  0BCD               	decfsz	??_main+1,f
  2879     04AE  2CA9               	goto	u1457
  2880     04AF  3200               	nop2
  2881     04B0                     l3228:
  2882     04B0  0022               	movlb	2	; select bank2
  2883     04B1  128C               	bcf	12,5	;volatile
  2884     04B2                     l393:	
  2885                           ;main.c: 72:     }
  2886                           
  2887     04B2  0064               	clrwdt	;# 
  2888     04B3                     l3230:
  2889                           
  2890                           ;main.c: 75:     if (EEPROM_Read(0x10) != 0x57) {
  2891     04B3  3010               	movlw	16
  2892     04B4  00F0               	movwf	EEPROM_Read@address
  2893     04B5  3000               	movlw	0
  2894     04B6  00F1               	movwf	EEPROM_Read@address+1
  2895     04B7  318E  268F  3184   	fcall	_EEPROM_Read
  2896     04BA  3A57               	xorlw	87
  2897     04BB  1903               	skipnz
  2898     04BC  2CBE               	goto	u1361
  2899     04BD  2CBF               	goto	u1360
  2900     04BE                     u1361:
  2901     04BE  2CEC               	goto	l398
  2902     04BF                     u1360:
  2903     04BF                     l3234:
  2904     04BF  3185  254E  3184   	fcall	_calibrate
  2905     04C2  3A00               	xorlw	0
  2906     04C3  1903               	skipnz
  2907     04C4  2CC6               	goto	u1371
  2908     04C5  2CC7               	goto	u1370
  2909     04C6                     u1371:
  2910     04C6  2CBF               	goto	l3234
  2911     04C7                     u1370:
  2912     04C7                     l3236:
  2913                           
  2914                           ;main.c: 77:         for (int i = 0; i < 3; i++) {
  2915     04C7  0020               	movlb	0	; select bank0
  2916     04C8  01D1               	clrf	main@i
  2917     04C9  01D2               	clrf	main@i+1
  2918     04CA                     l404:	
  2919                           ;main.c: 78:             do { LATAbits.LATA4 = 1; } while(0);
  2920                           
  2921     04CA  0022               	movlb	2	; select bank2
  2922     04CB  160C               	bsf	12,4	;volatile
  2923     04CC                     l406:	
  2924                           ;main.c: 79:             do { LATAbits.LATA5 = 1; } while(0);
  2925                           
  2926     04CC  168C               	bsf	12,5	;volatile
  2927     04CD                     l3242:
  2928                           
  2929                           ;main.c: 80:             _delay((unsigned long)((100)*(4000000/4000.0)));
  2930     04CD  3082               	movlw	130
  2931     04CE  0020               	movlb	0	; select bank0
  2932     04CF  00CC               	movwf	??_main
  2933     04D0  30DD               	movlw	221
  2934     04D1                     u1467:
  2935     04D1  0B89               	decfsz	9,f
  2936     04D2  2CD1               	goto	u1467
  2937     04D3  0BCC               	decfsz	??_main,f
  2938     04D4  2CD1               	goto	u1467
  2939     04D5  3200               	nop2
  2940     04D6                     l3244:
  2941     04D6  0022               	movlb	2	; select bank2
  2942     04D7  120C               	bcf	12,4	;volatile
  2943     04D8                     l3246:
  2944     04D8  128C               	bcf	12,5	;volatile
  2945     04D9                     l411:
  2946                           
  2947                           ;main.c: 83:         }
  2948     04D9  3001               	movlw	1
  2949     04DA  0020               	movlb	0	; select bank0
  2950     04DB  07D1               	addwf	main@i,f
  2951     04DC  3000               	movlw	0
  2952     04DD  3DD2               	addwfc	main@i+1,f
  2953     04DE  0852               	movf	main@i+1,w
  2954     04DF  3A80               	xorlw	128
  2955     04E0  00CC               	movwf	??_main
  2956     04E1  3080               	movlw	128
  2957     04E2  024C               	subwf	??_main,w
  2958     04E3  1D03               	skipz
  2959     04E4  2CE7               	goto	u1385
  2960     04E5  3003               	movlw	3
  2961     04E6  0251               	subwf	main@i,w
  2962     04E7                     u1385:
  2963     04E7  1C03               	skipc
  2964     04E8  2CEA               	goto	u1381
  2965     04E9  2CEB               	goto	u1380
  2966     04EA                     u1381:
  2967     04EA  2CCA               	goto	l404
  2968     04EB                     u1380:
  2969     04EB  2D15               	goto	l3270
  2970     04EC                     l398:
  2971                           
  2972                           ;main.c: 85:         uint8_t X_val = ( EEADR = 0x02, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2973     04EC  3000               	movlw	0
  2974     04ED  0023               	movlb	3	; select bank3
  2975     04EE  0092               	movwf	18	;volatile
  2976     04EF  3002               	movlw	2
  2977     04F0  0091               	movwf	17	;volatile
  2978     04F1                     l3248:
  2979     04F1  303F               	movlw	63
  2980     04F2  0595               	andwf	21,f	;volsfr
  2981     04F3                     l3250:
  2982     04F3  1415               	bsf	21,0	;volsfr
  2983     04F4                     l3252:
  2984     04F4  0813               	movf	19,w	;volatile
  2985     04F5  0020               	movlb	0	; select bank0
  2986     04F6  00CE               	movwf	main@X_val
  2987     04F7                     l3254:
  2988                           
  2989                           ;main.c: 86:         uint8_t Y_val = ( EEADR = 0x04, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2990     04F7  3000               	movlw	0
  2991     04F8  0023               	movlb	3	; select bank3
  2992     04F9  0092               	movwf	18	;volatile
  2993     04FA  3004               	movlw	4
  2994     04FB  0091               	movwf	17	;volatile
  2995     04FC                     l3256:
  2996     04FC  303F               	movlw	63
  2997     04FD  0595               	andwf	21,f	;volsfr
  2998     04FE                     l3258:
  2999     04FE  1415               	bsf	21,0	;volsfr
  3000     04FF  0813               	movf	19,w	;volatile
  3001     0500  0020               	movlb	0	; select bank0
  3002     0501  00CF               	movwf	main@Y_val
  3003     0502                     l3260:
  3004                           
  3005                           ;main.c: 87:         uint8_t Z_val = ( EEADR = 0x06, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  3006     0502  3000               	movlw	0
  3007     0503  0023               	movlb	3	; select bank3
  3008     0504  0092               	movwf	18	;volatile
  3009     0505  3006               	movlw	6
  3010     0506  0091               	movwf	17	;volatile
  3011     0507                     l3262:
  3012     0507  303F               	movlw	63
  3013     0508  0595               	andwf	21,f	;volsfr
  3014     0509                     l3264:
  3015     0509  1415               	bsf	21,0	;volsfr
  3016     050A                     l3266:
  3017     050A  0813               	movf	19,w	;volatile
  3018     050B  0020               	movlb	0	; select bank0
  3019     050C  00D0               	movwf	main@Z_val
  3020     050D                     l3268:
  3021                           
  3022                           ;main.c: 88:         saveOffsets(X_val, Y_val, Z_val);
  3023     050D  084F               	movf	main@Y_val,w
  3024     050E  00FA               	movwf	saveOffsets@y_axis
  3025     050F  0850               	movf	main@Z_val,w
  3026     0510  00FB               	movwf	saveOffsets@z_axis
  3027     0511  084E               	movf	main@X_val,w
  3028     0512  3180  2029  3184   	fcall	_saveOffsets
  3029     0515                     l3270:
  3030                           
  3031                           ;main.c: 91:     State_t current_state = WAITING_FOR_FREEFALL;
  3032     0515  0020               	movlb	0	; select bank0
  3033     0516  01D5               	clrf	main@current_state
  3034     0517                     l3272:
  3035                           
  3036                           ;main.c: 94:     {;main.c: 95:         PIN_MANAGER_IOC();
  3037     0517  318E  2659  3184   	fcall	_PIN_MANAGER_IOC
  3038     051A                     l3274:
  3039                           
  3040                           ;main.c: 96:         MotionEventHandler(&current_state);
  3041     051A  3055               	movlw	(low (main@current_state| 0))& (0+255)
  3042     051B  0020               	movlb	0	; select bank0
  3043     051C  00C9               	movwf	MotionEventHandler@state
  3044     051D  3181  2148  3184   	fcall	_MotionEventHandler
  3045     0520                     l3276:
  3046                           
  3047                           ;main.c: 97:         if (current_state == FALL_DETECTED) {
  3048     0520  3004               	movlw	4
  3049     0521  0020               	movlb	0	; select bank0
  3050     0522  0655               	xorwf	main@current_state,w
  3051     0523  1D03               	btfss	3,2
  3052     0524  2D26               	goto	u1391
  3053     0525  2D27               	goto	u1390
  3054     0526                     u1391:
  3055     0526  2D49               	goto	l414
  3056     0527                     u1390:
  3057     0527                     l3278:
  3058                           
  3059                           ;main.c: 98:             current_state = WAITING_FOR_FREEFALL;
  3060     0527  01D5               	clrf	main@current_state
  3061                           
  3062                           ;main.c: 99:             for (int i = 0; i < 3; i++) {
  3063     0528  01D3               	clrf	main@i_875
  3064     0529  01D4               	clrf	main@i_875+1
  3065     052A                     l417:	
  3066                           ;main.c: 100:                 do { LATAbits.LATA4 = 1; } while(0);
  3067                           
  3068     052A  0022               	movlb	2	; select bank2
  3069     052B  160C               	bsf	12,4	;volatile
  3070     052C                     l3284:
  3071                           
  3072                           ;main.c: 101:                 _delay((unsigned long)((100)*(4000000/4000.0)));
  3073     052C  3082               	movlw	130
  3074     052D  0020               	movlb	0	; select bank0
  3075     052E  00CC               	movwf	??_main
  3076     052F  30DD               	movlw	221
  3077     0530                     u1477:
  3078     0530  0B89               	decfsz	9,f
  3079     0531  2D30               	goto	u1477
  3080     0532  0BCC               	decfsz	??_main,f
  3081     0533  2D30               	goto	u1477
  3082     0534  3200               	nop2
  3083     0535                     l3286:
  3084     0535  0022               	movlb	2	; select bank2
  3085     0536  120C               	bcf	12,4	;volatile
  3086     0537                     l420:
  3087                           
  3088                           ;main.c: 103:             }
  3089     0537  3001               	movlw	1
  3090     0538  0020               	movlb	0	; select bank0
  3091     0539  07D3               	addwf	main@i_875,f
  3092     053A  3000               	movlw	0
  3093     053B  3DD4               	addwfc	main@i_875+1,f
  3094     053C  0854               	movf	main@i_875+1,w
  3095     053D  3A80               	xorlw	128
  3096     053E  00CC               	movwf	??_main
  3097     053F  3080               	movlw	128
  3098     0540  024C               	subwf	??_main,w
  3099     0541  1D03               	skipz
  3100     0542  2D45               	goto	u1405
  3101     0543  3003               	movlw	3
  3102     0544  0253               	subwf	main@i_875,w
  3103     0545                     u1405:
  3104     0545  1C03               	skipc
  3105     0546  2D48               	goto	u1401
  3106     0547  2D49               	goto	u1400
  3107     0548                     u1401:
  3108     0548  2D2A               	goto	l417
  3109     0549                     u1400:
  3110     0549                     l414:	
  3111                           ;main.c: 104:         }
  3112                           
  3113     0549  0063               	sleep	;# 
  3114                           
  3115                           ;main.c: 106:         __nop();
  3116     054A  0000               	nop
  3117     054B  2D17               	goto	l3272
  3118     054C  3180  2802         	ljmp	start
  3119     054E                     __end_of_main:
  3120                           
  3121                           	psect	text1
  3122     054E                     __ptext1:	
  3123 ;; *************** function _calibrate *****************
  3124 ;; Defined at:
  3125 ;;		line 299 in file "ADXL345.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  addr_val        1   29[BANK1 ] unsigned char 
  3130 ;;  addr_val        1   28[BANK1 ] unsigned char 
  3131 ;;  i               2   26[BANK1 ] int 
  3132 ;;  i               2   24[BANK1 ] int 
  3133 ;;  msg            26   36[BANK1 ] struct Message
  3134 ;;  acc_data       12    0[BANK1 ] int [6]
  3135 ;;  sum_Z_avg       2   62[BANK1 ] int 
  3136 ;;  sum_Y_avg       2   34[BANK1 ] int 
  3137 ;;  sum_X_avg       2   32[BANK1 ] int 
  3138 ;;  sum_Z           2   30[BANK1 ] int 
  3139 ;;  offset_0g_Z     2   22[BANK1 ] int 
  3140 ;;  offset_0g_Y     2   20[BANK1 ] int 
  3141 ;;  offset_0g_X     2   18[BANK1 ] int 
  3142 ;;  sum_Y           2   16[BANK1 ] int 
  3143 ;;  sum_X           2   14[BANK1 ] int 
  3144 ;;  Z_n1g           2   12[BANK1 ] short 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      _Bool 
  3147 ;; Registers used:
  3148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3155 ;;      Locals:         0       0      64       0       0       0       0       0       0       0       0       0       
      +0       0
  3156 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3157 ;;      Totals:         0       3      64       0       0       0       0       0       0       0       0       0       
      +0       0
  3158 ;;Total ram usage:       67 bytes
  3159 ;; Hardware stack levels used: 1
  3160 ;; Hardware stack levels required when called: 3
  3161 ;; This function calls:
  3162 ;;		_EEPROM_Write
  3163 ;;		_SPI1_BufferRead
  3164 ;;		_SPI1_BufferWrite
  3165 ;;		_SPI1_ByteWrite
  3166 ;;		_SPI1_Close
  3167 ;;		_SPI1_Open
  3168 ;;		_saveOffsets
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174     054E                     _calibrate:	
  3175                           ;psect for function _calibrate
  3176                           
  3177     054E                     l2938:	
  3178                           ;incstack = 0
  3179                           ; Regs used in _calibrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3180                           
  3181                           
  3182                           ;ADXL345.c: 300:     int offset_0g_X, offset_0g_Y, offset_0g_Z;;ADXL345.c: 301:     int 
      +                          acc_data[6] = {0};
  3183     054E  30A0               	movlw	low calibrate@acc_data
  3184     054F  0086               	movwf	6
  3185     0550  3000               	movlw	high calibrate@acc_data
  3186     0551  0087               	movwf	7
  3187     0552  300C               	movlw	12
  3188     0553  0020               	movlb	0	; select bank0
  3189     0554  00BB               	movwf	??_calibrate
  3190     0555  3000               	movlw	0
  3191     0556                     u1050:
  3192     0556  001E               	movwi fsr1++
  3193     0557  0BBB               	decfsz	??_calibrate,f
  3194     0558  2D56               	goto	u1050
  3195     0559                     l2940:
  3196                           
  3197                           ;ADXL345.c: 302:     int sum_X = 0, sum_Y = 0, sum_Z = 0;
  3198     0559  0021               	movlb	1	; select bank1
  3199     055A  01AE               	clrf	calibrate@sum_X^(0+128)
  3200     055B  01AF               	clrf	(calibrate@sum_X+1)^(0+128)
  3201     055C                     l2942:
  3202     055C  01B0               	clrf	calibrate@sum_Y^(0+128)
  3203     055D  01B1               	clrf	(calibrate@sum_Y+1)^(0+128)
  3204     055E                     l2944:
  3205     055E  01BE               	clrf	calibrate@sum_Z^(0+128)
  3206     055F  01BF               	clrf	(calibrate@sum_Z+1)^(0+128)
  3207                           
  3208                           ;ADXL345.c: 303:     int sum_X_avg, sum_Y_avg, sum_Z_avg;;ADXL345.c: 305:     while (!SP
      +                          I1_Open(ADXL345)) {
  3209     0560  2D64               	goto	l2948
  3210     0561                     l2946:
  3211                           
  3212                           ;ADXL345.c: 306:         SPI1_Close();
  3213     0561  318E  2633  3185   	fcall	_SPI1_Close
  3214     0564                     l2948:
  3215                           
  3216                           ;ADXL345.c: 305:     while (!SPI1_Open(ADXL345)) {
  3217     0564  01F6               	clrf	SPI1_Open@spiConfigIndex
  3218     0565  3180  20DC  3185   	fcall	_SPI1_Open
  3219     0568  3A00               	xorlw	0
  3220     0569  1903               	skipnz
  3221     056A  2D6C               	goto	u1061
  3222     056B  2D6D               	goto	u1060
  3223     056C                     u1061:
  3224     056C  2D61               	goto	l2946
  3225     056D                     u1060:
  3226     056D                     l619:
  3227                           
  3228                           ;ADXL345.c: 309:     struct Message msg;;ADXL345.c: 310:     msg.registerAddr = 0x31;
  3229     056D  3031               	movlw	49
  3230     056E  0021               	movlb	1	; select bank1
  3231     056F  00C4               	movwf	calibrate@msg^(0+128)
  3232                           
  3233                           ;ADXL345.c: 311:     msg.data[0] = 0x0C;
  3234     0570  300C               	movlw	12
  3235     0571  00C5               	movwf	(calibrate@msg^(0+128)+1)
  3236     0572                     l620:	
  3237                           ;ADXL345.c: 312:     do { LATCbits.LATC4 = 0; } while(0);
  3238                           
  3239     0572  0022               	movlb	2	; select bank2
  3240     0573  120E               	bcf	14,4	;volatile
  3241     0574                     l2950:
  3242                           
  3243                           ;ADXL345.c: 313:     SPI1_BufferWrite(&msg, 2);
  3244     0574  30C4               	movlw	low calibrate@msg
  3245     0575  00F0               	movwf	SPI1_BufferWrite@bufferData
  3246     0576  3000               	movlw	high calibrate@msg
  3247     0577  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  3248     0578  3002               	movlw	2
  3249     0579  00F2               	movwf	SPI1_BufferWrite@bufferSize
  3250     057A  3000               	movlw	0
  3251     057B  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  3252     057C  318F  2746  3185   	fcall	_SPI1_BufferWrite
  3253     057F                     l2952:
  3254     057F  0022               	movlb	2	; select bank2
  3255     0580  160E               	bsf	14,4	;volatile
  3256     0581  2D9A               	goto	l2958
  3257     0582                     l626:	
  3258                           ;ADXL345.c: 318:         do { LATAbits.LATA4 = 1; } while(0);
  3259                           
  3260     0582  0022               	movlb	2	; select bank2
  3261     0583  160C               	bsf	12,4	;volatile
  3262     0584                     l2954:
  3263                           
  3264                           ;ADXL345.c: 319:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3265     0584  3082               	movlw	130
  3266     0585  0020               	movlb	0	; select bank0
  3267     0586  00BB               	movwf	??_calibrate
  3268     0587  30DD               	movlw	221
  3269     0588                     u1487:
  3270     0588  0B89               	decfsz	9,f
  3271     0589  2D88               	goto	u1487
  3272     058A  0BBB               	decfsz	??_calibrate,f
  3273     058B  2D88               	goto	u1487
  3274     058C  3200               	nop2
  3275     058D  0064               	clrwdt	;# 
  3276     058E                     l2956:
  3277     058E  0022               	movlb	2	; select bank2
  3278     058F  120C               	bcf	12,4	;volatile
  3279     0590                     l629:
  3280                           
  3281                           ;ADXL345.c: 322:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3282     0590  3082               	movlw	130
  3283     0591  0020               	movlb	0	; select bank0
  3284     0592  00BB               	movwf	??_calibrate
  3285     0593  30DD               	movlw	221
  3286     0594                     u1497:
  3287     0594  0B89               	decfsz	9,f
  3288     0595  2D94               	goto	u1497
  3289     0596  0BBB               	decfsz	??_calibrate,f
  3290     0597  2D94               	goto	u1497
  3291     0598  3200               	nop2
  3292     0599  0064               	clrwdt	;# 
  3293     059A                     l2958:
  3294                           
  3295                           ;ADXL345.c: 317:     while(PORTAbits.RA1) {
  3296     059A  0020               	movlb	0	; select bank0
  3297     059B  188C               	btfsc	12,1	;volatile
  3298     059C  2D9E               	goto	u1071
  3299     059D  2D9F               	goto	u1070
  3300     059E                     u1071:
  3301     059E  2D82               	goto	l626
  3302     059F                     u1070:
  3303     059F                     l630:
  3304     059F  0064               	clrwdt	;# 
  3305     05A0                     l2960:
  3306                           
  3307                           ;ADXL345.c: 327:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3308     05A0  3008               	movlw	8
  3309     05A1  0020               	movlb	0	; select bank0
  3310     05A2  00BC               	movwf	??_calibrate+1
  3311     05A3  309D               	movlw	157
  3312     05A4  00BB               	movwf	??_calibrate
  3313     05A5  3005               	movlw	5
  3314     05A6                     u1507:
  3315     05A6  0B89               	decfsz	9,f
  3316     05A7  2DA6               	goto	u1507
  3317     05A8  0BBB               	decfsz	??_calibrate,f
  3318     05A9  2DA6               	goto	u1507
  3319     05AA  0BBC               	decfsz	??_calibrate+1,f
  3320     05AB  2DA6               	goto	u1507
  3321     05AC  3200               	nop2
  3322     05AD  0064               	clrwdt	;# 
  3323     05AE                     l2962:
  3324                           
  3325                           ;ADXL345.c: 330:     for(int i = 0; i < 128; i++) {
  3326     05AE  0021               	movlb	1	; select bank1
  3327     05AF  01B8               	clrf	calibrate@i^(0+128)
  3328     05B0  01B9               	clrf	(calibrate@i+1)^(0+128)
  3329     05B1                     l633:	
  3330                           ;ADXL345.c: 332:         do { LATCbits.LATC4 = 0; } while(0);
  3331                           
  3332     05B1  0022               	movlb	2	; select bank2
  3333     05B2  120E               	bcf	14,4	;volatile
  3334     05B3                     l634:
  3335                           
  3336                           ;ADXL345.c: 333:         uint8_t addr_val = 0x32 | 0x80;
  3337     05B3  30B2               	movlw	178
  3338     05B4  0021               	movlb	1	; select bank1
  3339     05B5  00BC               	movwf	calibrate@addr_val^(0+128)
  3340     05B6                     l2968:
  3341                           
  3342                           ;ADXL345.c: 334:         addr_val = addr_val | 0x40;
  3343     05B6  083C               	movf	calibrate@addr_val^(0+128),w
  3344     05B7  3840               	iorlw	64
  3345     05B8  00BC               	movwf	calibrate@addr_val^(0+128)
  3346     05B9                     l2970:
  3347                           
  3348                           ;ADXL345.c: 335:         SPI1_ByteWrite(addr_val);
  3349     05B9  083C               	movf	calibrate@addr_val^(0+128),w
  3350     05BA  00F0               	movwf	SPI1_ByteWrite@byteData
  3351     05BB  318E  2639  3185   	fcall	_SPI1_ByteWrite
  3352     05BE                     l2972:
  3353                           
  3354                           ;ADXL345.c: 336:         SPI1_BufferRead((uint8_t *)acc_data, 6);
  3355     05BE  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3356     05BF  00F0               	movwf	SPI1_BufferRead@bufferData
  3357     05C0  3006               	movlw	6
  3358     05C1  00F1               	movwf	SPI1_BufferRead@bufferSize
  3359     05C2  3000               	movlw	0
  3360     05C3  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3361     05C4  318F  2766  3185   	fcall	_SPI1_BufferRead
  3362     05C7                     l2974:
  3363     05C7  0022               	movlb	2	; select bank2
  3364     05C8  160E               	bsf	14,4	;volatile
  3365     05C9                     l2976:
  3366                           
  3367                           ;ADXL345.c: 339:         sum_X += acc_data[1];
  3368     05C9  0021               	movlb	1	; select bank1
  3369     05CA  0822               	movf	(calibrate@acc_data^(0+128)+2),w
  3370     05CB  07AE               	addwf	calibrate@sum_X^(0+128),f
  3371     05CC  0823               	movf	((calibrate@acc_data+1)^(0+128)+2),w
  3372     05CD  3DAF               	addwfc	(calibrate@sum_X+1)^(0+128),f
  3373     05CE                     l2978:
  3374                           
  3375                           ;ADXL345.c: 340:         sum_Y += acc_data[3];
  3376     05CE  0826               	movf	(calibrate@acc_data^(0+128)+6),w
  3377     05CF  07B0               	addwf	calibrate@sum_Y^(0+128),f
  3378     05D0  0827               	movf	((calibrate@acc_data+1)^(0+128)+6),w
  3379     05D1  3DB1               	addwfc	(calibrate@sum_Y+1)^(0+128),f
  3380     05D2                     l2980:
  3381                           
  3382                           ;ADXL345.c: 341:         sum_Z += acc_data[5];
  3383     05D2  082A               	movf	(calibrate@acc_data^(0+128)+10),w
  3384     05D3  07BE               	addwf	calibrate@sum_Z^(0+128),f
  3385     05D4  082B               	movf	((calibrate@acc_data+1)^(0+128)+10),w
  3386     05D5  3DBF               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3387     05D6                     l2982:
  3388                           
  3389                           ;ADXL345.c: 343:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3390     05D6  3007               	movlw	7
  3391     05D7  0020               	movlb	0	; select bank0
  3392     05D8  00BB               	movwf	??_calibrate
  3393     05D9  307D               	movlw	125
  3394     05DA                     u1517:
  3395     05DA  0B89               	decfsz	9,f
  3396     05DB  2DDA               	goto	u1517
  3397     05DC  0BBB               	decfsz	??_calibrate,f
  3398     05DD  2DDA               	goto	u1517
  3399     05DE  0064               	clrwdt	;# 
  3400     05DF                     l2984:
  3401                           
  3402                           ;ADXL345.c: 345:     }
  3403     05DF  3001               	movlw	1
  3404     05E0  0021               	movlb	1	; select bank1
  3405     05E1  07B8               	addwf	calibrate@i^(0+128),f
  3406     05E2  3000               	movlw	0
  3407     05E3  3DB9               	addwfc	(calibrate@i+1)^(0+128),f
  3408     05E4                     l2986:
  3409     05E4  0839               	movf	(calibrate@i+1)^(0+128),w
  3410     05E5  3A80               	xorlw	128
  3411     05E6  0020               	movlb	0	; select bank0
  3412     05E7  00BB               	movwf	??_calibrate
  3413     05E8  3080               	movlw	128
  3414     05E9  023B               	subwf	??_calibrate,w
  3415     05EA  1D03               	skipz
  3416     05EB  2DEF               	goto	u1085
  3417     05EC  3080               	movlw	128
  3418     05ED  0021               	movlb	1	; select bank1
  3419     05EE  0238               	subwf	calibrate@i^(0+128),w
  3420     05EF                     u1085:
  3421     05EF  1C03               	skipc
  3422     05F0  2DF2               	goto	u1081
  3423     05F1  2DF3               	goto	u1080
  3424     05F2                     u1081:
  3425     05F2  2DB1               	goto	l633
  3426     05F3                     u1080:
  3427     05F3                     l2988:
  3428                           
  3429                           ;ADXL345.c: 348:     if (sum_Z == 0) return 0;
  3430     05F3  0021               	movlb	1	; select bank1
  3431     05F4  083E               	movf	calibrate@sum_Z^(0+128),w
  3432     05F5  043F               	iorwf	(calibrate@sum_Z+1)^(0+128),w
  3433     05F6  1D03               	btfss	3,2
  3434     05F7  2DF9               	goto	u1091
  3435     05F8  2DFA               	goto	u1090
  3436     05F9                     u1091:
  3437     05F9  2DFC               	goto	l2994
  3438     05FA                     u1090:
  3439     05FA                     l2990:
  3440     05FA  3000               	movlw	0
  3441     05FB  2FD1               	goto	l638
  3442     05FC                     l2994:
  3443                           
  3444                           ;ADXL345.c: 351:     sum_X_avg = sum_X >> 7;
  3445     05FC  082F               	movf	(calibrate@sum_X+1)^(0+128),w
  3446     05FD  0020               	movlb	0	; select bank0
  3447     05FE  00BC               	movwf	??_calibrate+1
  3448     05FF  0021               	movlb	1	; select bank1
  3449     0600  082E               	movf	calibrate@sum_X^(0+128),w
  3450     0601  0020               	movlb	0	; select bank0
  3451     0602  00BB               	movwf	??_calibrate
  3452     0603  3007               	movlw	7
  3453     0604  00BD               	movwf	??_calibrate+2
  3454     0605                     u1105:
  3455     0605  0D3C               	rlf	??_calibrate+1,w
  3456     0606  0CBC               	rrf	??_calibrate+1,f
  3457     0607  0CBB               	rrf	??_calibrate,f
  3458     0608  0BBD               	decfsz	??_calibrate+2,f
  3459     0609  2E05               	goto	u1105
  3460     060A  083B               	movf	??_calibrate,w
  3461     060B  0021               	movlb	1	; select bank1
  3462     060C  00C0               	movwf	calibrate@sum_X_avg^(0+128)
  3463     060D  0020               	movlb	0	; select bank0
  3464     060E  083C               	movf	??_calibrate+1,w
  3465     060F  0021               	movlb	1	; select bank1
  3466     0610  00C1               	movwf	(calibrate@sum_X_avg+1)^(0+128)
  3467                           
  3468                           ;ADXL345.c: 352:     sum_Y_avg = sum_Y >> 7;
  3469     0611  0831               	movf	(calibrate@sum_Y+1)^(0+128),w
  3470     0612  0020               	movlb	0	; select bank0
  3471     0613  00BC               	movwf	??_calibrate+1
  3472     0614  0021               	movlb	1	; select bank1
  3473     0615  0830               	movf	calibrate@sum_Y^(0+128),w
  3474     0616  0020               	movlb	0	; select bank0
  3475     0617  00BB               	movwf	??_calibrate
  3476     0618  3007               	movlw	7
  3477     0619  00BD               	movwf	??_calibrate+2
  3478     061A                     u1115:
  3479     061A  0D3C               	rlf	??_calibrate+1,w
  3480     061B  0CBC               	rrf	??_calibrate+1,f
  3481     061C  0CBB               	rrf	??_calibrate,f
  3482     061D  0BBD               	decfsz	??_calibrate+2,f
  3483     061E  2E1A               	goto	u1115
  3484     061F  083B               	movf	??_calibrate,w
  3485     0620  0021               	movlb	1	; select bank1
  3486     0621  00C2               	movwf	calibrate@sum_Y_avg^(0+128)
  3487     0622  0020               	movlb	0	; select bank0
  3488     0623  083C               	movf	??_calibrate+1,w
  3489     0624  0021               	movlb	1	; select bank1
  3490     0625  00C3               	movwf	(calibrate@sum_Y_avg+1)^(0+128)
  3491     0626                     l2996:
  3492                           
  3493                           ;ADXL345.c: 356:     if (sum_X_avg & 0x80) {
  3494     0626  1FC0               	btfss	calibrate@sum_X_avg^(0+128),7
  3495     0627  2E29               	goto	u1121
  3496     0628  2E2A               	goto	u1120
  3497     0629                     u1121:
  3498     0629  2E42               	goto	l3004
  3499     062A                     u1120:
  3500     062A                     l2998:
  3501                           
  3502                           ;ADXL345.c: 357:         if (~(sum_X_avg) + 1 >= 0x10) return 0;
  3503     062A  0940               	comf	calibrate@sum_X_avg^(0+128),w
  3504     062B  0020               	movlb	0	; select bank0
  3505     062C  00BB               	movwf	??_calibrate
  3506     062D  0021               	movlb	1	; select bank1
  3507     062E  0941               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3508     062F  0020               	movlb	0	; select bank0
  3509     0630  00BC               	movwf	??_calibrate+1
  3510     0631  0ABB               	incf	??_calibrate,f
  3511     0632  1903               	skipnz
  3512     0633  0ABC               	incf	??_calibrate+1,f
  3513     0634  083C               	movf	??_calibrate+1,w
  3514     0635  3A80               	xorlw	128
  3515     0636  00BD               	movwf	??_calibrate+2
  3516     0637  3080               	movlw	128
  3517     0638  023D               	subwf	??_calibrate+2,w
  3518     0639  1D03               	skipz
  3519     063A  2E3D               	goto	u1135
  3520     063B  3010               	movlw	16
  3521     063C  023B               	subwf	??_calibrate,w
  3522     063D                     u1135:
  3523     063D  1C03               	skipc
  3524     063E  2E40               	goto	u1131
  3525     063F  2E41               	goto	u1130
  3526     0640                     u1131:
  3527     0640  2E52               	goto	l641
  3528     0641                     u1130:
  3529     0641  2DFA               	goto	l2990
  3530     0642                     l3004:
  3531                           
  3532                           ;ADXL345.c: 359:         if (sum_X_avg >= 0x10) return 0;
  3533     0642  0841               	movf	(calibrate@sum_X_avg+1)^(0+128),w
  3534     0643  3A80               	xorlw	128
  3535     0644  0020               	movlb	0	; select bank0
  3536     0645  00BB               	movwf	??_calibrate
  3537     0646  3080               	movlw	128
  3538     0647  023B               	subwf	??_calibrate,w
  3539     0648  1D03               	skipz
  3540     0649  2E4D               	goto	u1145
  3541     064A  3010               	movlw	16
  3542     064B  0021               	movlb	1	; select bank1
  3543     064C  0240               	subwf	calibrate@sum_X_avg^(0+128),w
  3544     064D                     u1145:
  3545     064D  1C03               	skipc
  3546     064E  2E50               	goto	u1141
  3547     064F  2E51               	goto	u1140
  3548     0650                     u1141:
  3549     0650  2E52               	goto	l641
  3550     0651                     u1140:
  3551     0651  2DFA               	goto	l2990
  3552     0652                     l641:	
  3553                           ;ADXL345.c: 360:     }
  3554                           
  3555                           
  3556                           ;ADXL345.c: 362:     if (sum_Y_avg & 0x80) {
  3557     0652  0021               	movlb	1	; select bank1
  3558     0653  1FC2               	btfss	calibrate@sum_Y_avg^(0+128),7
  3559     0654  2E56               	goto	u1151
  3560     0655  2E57               	goto	u1150
  3561     0656                     u1151:
  3562     0656  2E6F               	goto	l3016
  3563     0657                     u1150:
  3564     0657                     l3010:
  3565                           
  3566                           ;ADXL345.c: 363:         if (~(sum_Y_avg) + 1 >= 0x10) return 0;
  3567     0657  0942               	comf	calibrate@sum_Y_avg^(0+128),w
  3568     0658  0020               	movlb	0	; select bank0
  3569     0659  00BB               	movwf	??_calibrate
  3570     065A  0021               	movlb	1	; select bank1
  3571     065B  0943               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3572     065C  0020               	movlb	0	; select bank0
  3573     065D  00BC               	movwf	??_calibrate+1
  3574     065E  0ABB               	incf	??_calibrate,f
  3575     065F  1903               	skipnz
  3576     0660  0ABC               	incf	??_calibrate+1,f
  3577     0661  083C               	movf	??_calibrate+1,w
  3578     0662  3A80               	xorlw	128
  3579     0663  00BD               	movwf	??_calibrate+2
  3580     0664  3080               	movlw	128
  3581     0665  023D               	subwf	??_calibrate+2,w
  3582     0666  1D03               	skipz
  3583     0667  2E6A               	goto	u1165
  3584     0668  3010               	movlw	16
  3585     0669  023B               	subwf	??_calibrate,w
  3586     066A                     u1165:
  3587     066A  1C03               	skipc
  3588     066B  2E6D               	goto	u1161
  3589     066C  2E6E               	goto	u1160
  3590     066D                     u1161:
  3591     066D  2E7F               	goto	l3022
  3592     066E                     u1160:
  3593     066E  2DFA               	goto	l2990
  3594     066F                     l3016:
  3595                           
  3596                           ;ADXL345.c: 365:         if (sum_Y_avg >= 0x10) return 0;
  3597     066F  0843               	movf	(calibrate@sum_Y_avg+1)^(0+128),w
  3598     0670  3A80               	xorlw	128
  3599     0671  0020               	movlb	0	; select bank0
  3600     0672  00BB               	movwf	??_calibrate
  3601     0673  3080               	movlw	128
  3602     0674  023B               	subwf	??_calibrate,w
  3603     0675  1D03               	skipz
  3604     0676  2E7A               	goto	u1175
  3605     0677  3010               	movlw	16
  3606     0678  0021               	movlb	1	; select bank1
  3607     0679  0242               	subwf	calibrate@sum_Y_avg^(0+128),w
  3608     067A                     u1175:
  3609     067A  1C03               	skipc
  3610     067B  2E7D               	goto	u1171
  3611     067C  2E7E               	goto	u1170
  3612     067D                     u1171:
  3613     067D  2E7F               	goto	l3022
  3614     067E                     u1170:
  3615     067E  2DFA               	goto	l2990
  3616     067F                     l3022:
  3617                           
  3618                           ;ADXL345.c: 368:     offset_0g_X = -sum_X_avg;
  3619     067F  0021               	movlb	1	; select bank1
  3620     0680  0940               	comf	calibrate@sum_X_avg^(0+128),w
  3621     0681  0020               	movlb	0	; select bank0
  3622     0682  00BB               	movwf	??_calibrate
  3623     0683  0021               	movlb	1	; select bank1
  3624     0684  0941               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3625     0685  0020               	movlb	0	; select bank0
  3626     0686  00BC               	movwf	??_calibrate+1
  3627     0687  0ABB               	incf	??_calibrate,f
  3628     0688  1903               	skipnz
  3629     0689  0ABC               	incf	??_calibrate+1,f
  3630     068A  083B               	movf	??_calibrate,w
  3631     068B  0021               	movlb	1	; select bank1
  3632     068C  00B2               	movwf	calibrate@offset_0g_X^(0+128)
  3633     068D  0020               	movlb	0	; select bank0
  3634     068E  083C               	movf	??_calibrate+1,w
  3635     068F  0021               	movlb	1	; select bank1
  3636     0690  00B3               	movwf	(calibrate@offset_0g_X+1)^(0+128)
  3637                           
  3638                           ;ADXL345.c: 369:     offset_0g_Y = -sum_Y_avg;
  3639     0691  0942               	comf	calibrate@sum_Y_avg^(0+128),w
  3640     0692  0020               	movlb	0	; select bank0
  3641     0693  00BB               	movwf	??_calibrate
  3642     0694  0021               	movlb	1	; select bank1
  3643     0695  0943               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3644     0696  0020               	movlb	0	; select bank0
  3645     0697  00BC               	movwf	??_calibrate+1
  3646     0698  0ABB               	incf	??_calibrate,f
  3647     0699  1903               	skipnz
  3648     069A  0ABC               	incf	??_calibrate+1,f
  3649     069B  083B               	movf	??_calibrate,w
  3650     069C  0021               	movlb	1	; select bank1
  3651     069D  00B4               	movwf	calibrate@offset_0g_Y^(0+128)
  3652     069E  0020               	movlb	0	; select bank0
  3653     069F  083C               	movf	??_calibrate+1,w
  3654     06A0  0021               	movlb	1	; select bank1
  3655     06A1  00B5               	movwf	(calibrate@offset_0g_Y+1)^(0+128)
  3656                           
  3657                           ;ADXL345.c: 371:     sum_Z_avg = sum_Z >> 7;
  3658     06A2  083F               	movf	(calibrate@sum_Z+1)^(0+128),w
  3659     06A3  0020               	movlb	0	; select bank0
  3660     06A4  00BC               	movwf	??_calibrate+1
  3661     06A5  0021               	movlb	1	; select bank1
  3662     06A6  083E               	movf	calibrate@sum_Z^(0+128),w
  3663     06A7  0020               	movlb	0	; select bank0
  3664     06A8  00BB               	movwf	??_calibrate
  3665     06A9  3007               	movlw	7
  3666     06AA  00BD               	movwf	??_calibrate+2
  3667     06AB                     u1185:
  3668     06AB  0D3C               	rlf	??_calibrate+1,w
  3669     06AC  0CBC               	rrf	??_calibrate+1,f
  3670     06AD  0CBB               	rrf	??_calibrate,f
  3671     06AE  0BBD               	decfsz	??_calibrate+2,f
  3672     06AF  2EAB               	goto	u1185
  3673     06B0  083B               	movf	??_calibrate,w
  3674     06B1  0021               	movlb	1	; select bank1
  3675     06B2  00DE               	movwf	calibrate@sum_Z_avg^(0+128)
  3676     06B3  0020               	movlb	0	; select bank0
  3677     06B4  083C               	movf	??_calibrate+1,w
  3678     06B5  0021               	movlb	1	; select bank1
  3679     06B6  00DF               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3680     06B7                     l3024:
  3681                           
  3682                           ;ADXL345.c: 372:     sum_Z = 0;
  3683     06B7  01BE               	clrf	calibrate@sum_Z^(0+128)
  3684     06B8  01BF               	clrf	(calibrate@sum_Z+1)^(0+128)
  3685                           
  3686                           ;ADXL345.c: 375:     while(PORTAbits.RA1) {
  3687     06B9  2ED2               	goto	l3030
  3688     06BA                     l649:	
  3689                           ;ADXL345.c: 376:         do { LATAbits.LATA5 = 1; } while(0);
  3690                           
  3691     06BA  0022               	movlb	2	; select bank2
  3692     06BB  168C               	bsf	12,5	;volatile
  3693     06BC                     l3026:
  3694                           
  3695                           ;ADXL345.c: 377:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3696     06BC  3082               	movlw	130
  3697     06BD  0020               	movlb	0	; select bank0
  3698     06BE  00BB               	movwf	??_calibrate
  3699     06BF  30DD               	movlw	221
  3700     06C0                     u1527:
  3701     06C0  0B89               	decfsz	9,f
  3702     06C1  2EC0               	goto	u1527
  3703     06C2  0BBB               	decfsz	??_calibrate,f
  3704     06C3  2EC0               	goto	u1527
  3705     06C4  3200               	nop2
  3706     06C5  0064               	clrwdt	;# 
  3707     06C6                     l3028:
  3708     06C6  0022               	movlb	2	; select bank2
  3709     06C7  128C               	bcf	12,5	;volatile
  3710     06C8                     l652:
  3711                           
  3712                           ;ADXL345.c: 380:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3713     06C8  3082               	movlw	130
  3714     06C9  0020               	movlb	0	; select bank0
  3715     06CA  00BB               	movwf	??_calibrate
  3716     06CB  30DD               	movlw	221
  3717     06CC                     u1537:
  3718     06CC  0B89               	decfsz	9,f
  3719     06CD  2ECC               	goto	u1537
  3720     06CE  0BBB               	decfsz	??_calibrate,f
  3721     06CF  2ECC               	goto	u1537
  3722     06D0  3200               	nop2
  3723     06D1  0064               	clrwdt	;# 
  3724     06D2                     l3030:
  3725                           
  3726                           ;ADXL345.c: 375:     while(PORTAbits.RA1) {
  3727     06D2  0020               	movlb	0	; select bank0
  3728     06D3  188C               	btfsc	12,1	;volatile
  3729     06D4  2ED6               	goto	u1191
  3730     06D5  2ED7               	goto	u1190
  3731     06D6                     u1191:
  3732     06D6  2EBA               	goto	l649
  3733     06D7                     u1190:
  3734     06D7                     l653:
  3735     06D7  0064               	clrwdt	;# 
  3736     06D8                     l3032:
  3737                           
  3738                           ;ADXL345.c: 385:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3739     06D8  3008               	movlw	8
  3740     06D9  0020               	movlb	0	; select bank0
  3741     06DA  00BC               	movwf	??_calibrate+1
  3742     06DB  309D               	movlw	157
  3743     06DC  00BB               	movwf	??_calibrate
  3744     06DD  3005               	movlw	5
  3745     06DE                     u1547:
  3746     06DE  0B89               	decfsz	9,f
  3747     06DF  2EDE               	goto	u1547
  3748     06E0  0BBB               	decfsz	??_calibrate,f
  3749     06E1  2EDE               	goto	u1547
  3750     06E2  0BBC               	decfsz	??_calibrate+1,f
  3751     06E3  2EDE               	goto	u1547
  3752     06E4  3200               	nop2
  3753     06E5  0064               	clrwdt	;# 
  3754     06E6                     l3034:
  3755                           
  3756                           ;ADXL345.c: 388:     for(int i = 0; i < 128; i++) {
  3757     06E6  0021               	movlb	1	; select bank1
  3758     06E7  01BA               	clrf	calibrate@i_1010^(0+128)
  3759     06E8  01BB               	clrf	(calibrate@i_1010+1)^(0+128)
  3760     06E9                     l3036:
  3761     06E9  083B               	movf	(calibrate@i_1010+1)^(0+128),w
  3762     06EA  3A80               	xorlw	128
  3763     06EB  0020               	movlb	0	; select bank0
  3764     06EC  00BB               	movwf	??_calibrate
  3765     06ED  3080               	movlw	128
  3766     06EE  023B               	subwf	??_calibrate,w
  3767     06EF  1D03               	skipz
  3768     06F0  2EF4               	goto	u1205
  3769     06F1  3080               	movlw	128
  3770     06F2  0021               	movlb	1	; select bank1
  3771     06F3  023A               	subwf	calibrate@i_1010^(0+128),w
  3772     06F4                     u1205:
  3773     06F4  1C03               	skipc
  3774     06F5  2EF7               	goto	u1201
  3775     06F6  2EF8               	goto	u1200
  3776     06F7                     u1201:
  3777     06F7  2EF9               	goto	l656
  3778     06F8                     u1200:
  3779     06F8  2F25               	goto	l3056
  3780     06F9                     l656:	
  3781                           ;ADXL345.c: 390:         do { LATCbits.LATC4 = 0; } while(0);
  3782                           
  3783     06F9  0022               	movlb	2	; select bank2
  3784     06FA  120E               	bcf	14,4	;volatile
  3785     06FB                     l657:
  3786                           
  3787                           ;ADXL345.c: 391:         uint8_t addr_val = 0x32 | 0x80;
  3788     06FB  30B2               	movlw	178
  3789     06FC  0021               	movlb	1	; select bank1
  3790     06FD  00BD               	movwf	calibrate@addr_val_1011^(0+128)
  3791     06FE                     l3040:
  3792                           
  3793                           ;ADXL345.c: 392:         addr_val = addr_val | 0x40;
  3794     06FE  083D               	movf	calibrate@addr_val_1011^(0+128),w
  3795     06FF  3840               	iorlw	64
  3796     0700  00BD               	movwf	calibrate@addr_val_1011^(0+128)
  3797     0701                     l3042:
  3798                           
  3799                           ;ADXL345.c: 393:         SPI1_ByteWrite(addr_val);
  3800     0701  083D               	movf	calibrate@addr_val_1011^(0+128),w
  3801     0702  00F0               	movwf	SPI1_ByteWrite@byteData
  3802     0703  318E  2639  3185   	fcall	_SPI1_ByteWrite
  3803     0706                     l3044:
  3804                           
  3805                           ;ADXL345.c: 394:         SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  3806     0706  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3807     0707  00F0               	movwf	SPI1_BufferRead@bufferData
  3808     0708  300C               	movlw	12
  3809     0709  00F1               	movwf	SPI1_BufferRead@bufferSize
  3810     070A  3000               	movlw	0
  3811     070B  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3812     070C  318F  2766  3185   	fcall	_SPI1_BufferRead
  3813     070F                     l3046:
  3814     070F  0022               	movlb	2	; select bank2
  3815     0710  160E               	bsf	14,4	;volatile
  3816     0711                     l3048:
  3817                           
  3818                           ;ADXL345.c: 397:         sum_Z += acc_data[5];
  3819     0711  0021               	movlb	1	; select bank1
  3820     0712  082A               	movf	(calibrate@acc_data^(0+128)+10),w
  3821     0713  07BE               	addwf	calibrate@sum_Z^(0+128),f
  3822     0714  082B               	movf	((calibrate@acc_data+1)^(0+128)+10),w
  3823     0715  3DBF               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3824     0716                     l3050:
  3825                           
  3826                           ;ADXL345.c: 399:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3827     0716  3007               	movlw	7
  3828     0717  0020               	movlb	0	; select bank0
  3829     0718  00BB               	movwf	??_calibrate
  3830     0719  307D               	movlw	125
  3831     071A                     u1557:
  3832     071A  0B89               	decfsz	9,f
  3833     071B  2F1A               	goto	u1557
  3834     071C  0BBB               	decfsz	??_calibrate,f
  3835     071D  2F1A               	goto	u1557
  3836     071E  0064               	clrwdt	;# 
  3837     071F                     l3052:
  3838                           
  3839                           ;ADXL345.c: 401:     }
  3840     071F  3001               	movlw	1
  3841     0720  0021               	movlb	1	; select bank1
  3842     0721  07BA               	addwf	calibrate@i_1010^(0+128),f
  3843     0722  3000               	movlw	0
  3844     0723  3DBB               	addwfc	(calibrate@i_1010+1)^(0+128),f
  3845     0724  2EE9               	goto	l3036
  3846     0725                     l3056:
  3847                           
  3848                           ;ADXL345.c: 403:     int16_t Z_n1g = sum_Z >> 7;
  3849     0725  0021               	movlb	1	; select bank1
  3850     0726  083F               	movf	(calibrate@sum_Z+1)^(0+128),w
  3851     0727  0020               	movlb	0	; select bank0
  3852     0728  00BC               	movwf	??_calibrate+1
  3853     0729  0021               	movlb	1	; select bank1
  3854     072A  083E               	movf	calibrate@sum_Z^(0+128),w
  3855     072B  0020               	movlb	0	; select bank0
  3856     072C  00BB               	movwf	??_calibrate
  3857     072D  3007               	movlw	7
  3858     072E  00BD               	movwf	??_calibrate+2
  3859     072F                     u1215:
  3860     072F  0D3C               	rlf	??_calibrate+1,w
  3861     0730  0CBC               	rrf	??_calibrate+1,f
  3862     0731  0CBB               	rrf	??_calibrate,f
  3863     0732  0BBD               	decfsz	??_calibrate+2,f
  3864     0733  2F2F               	goto	u1215
  3865     0734  083B               	movf	??_calibrate,w
  3866     0735  0021               	movlb	1	; select bank1
  3867     0736  00AC               	movwf	calibrate@Z_n1g^(0+128)
  3868     0737  0020               	movlb	0	; select bank0
  3869     0738  083C               	movf	??_calibrate+1,w
  3870     0739  0021               	movlb	1	; select bank1
  3871     073A  00AD               	movwf	(calibrate@Z_n1g+1)^(0+128)
  3872                           
  3873                           ;ADXL345.c: 404:     sum_Z_avg = (Z_n1g + sum_Z_avg) >> 1;
  3874     073B  085E               	movf	calibrate@sum_Z_avg^(0+128),w
  3875     073C  072C               	addwf	calibrate@Z_n1g^(0+128),w
  3876     073D  0020               	movlb	0	; select bank0
  3877     073E  00BB               	movwf	??_calibrate
  3878     073F  0021               	movlb	1	; select bank1
  3879     0740  085F               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3880     0741  3D2D               	addwfc	(calibrate@Z_n1g+1)^(0+128),w
  3881     0742  0020               	movlb	0	; select bank0
  3882     0743  00BC               	movwf	??_calibrate+1
  3883     0744  0D3C               	rlf	??_calibrate+1,w
  3884     0745  0C3C               	rrf	??_calibrate+1,w
  3885     0746  0021               	movlb	1	; select bank1
  3886     0747  00DF               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3887     0748  0020               	movlb	0	; select bank0
  3888     0749  0C3B               	rrf	??_calibrate,w
  3889     074A  0021               	movlb	1	; select bank1
  3890     074B  00DE               	movwf	calibrate@sum_Z_avg^(0+128)
  3891     074C                     l3058:
  3892                           
  3893                           ;ADXL345.c: 408:     if (sum_Z_avg & 0x80) {
  3894     074C  1FDE               	btfss	calibrate@sum_Z_avg^(0+128),7
  3895     074D  2F4F               	goto	u1221
  3896     074E  2F50               	goto	u1220
  3897     074F                     u1221:
  3898     074F  2F68               	goto	l3066
  3899     0750                     u1220:
  3900     0750                     l3060:
  3901                           
  3902                           ;ADXL345.c: 409:         if (~(sum_Z_avg) + 1 >= 0x20) return 0;
  3903     0750  095E               	comf	calibrate@sum_Z_avg^(0+128),w
  3904     0751  0020               	movlb	0	; select bank0
  3905     0752  00BB               	movwf	??_calibrate
  3906     0753  0021               	movlb	1	; select bank1
  3907     0754  095F               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3908     0755  0020               	movlb	0	; select bank0
  3909     0756  00BC               	movwf	??_calibrate+1
  3910     0757  0ABB               	incf	??_calibrate,f
  3911     0758  1903               	skipnz
  3912     0759  0ABC               	incf	??_calibrate+1,f
  3913     075A  083C               	movf	??_calibrate+1,w
  3914     075B  3A80               	xorlw	128
  3915     075C  00BD               	movwf	??_calibrate+2
  3916     075D  3080               	movlw	128
  3917     075E  023D               	subwf	??_calibrate+2,w
  3918     075F  1D03               	skipz
  3919     0760  2F63               	goto	u1235
  3920     0761  3020               	movlw	32
  3921     0762  023B               	subwf	??_calibrate,w
  3922     0763                     u1235:
  3923     0763  1C03               	skipc
  3924     0764  2F66               	goto	u1231
  3925     0765  2F67               	goto	u1230
  3926     0766                     u1231:
  3927     0766  2F78               	goto	l3072
  3928     0767                     u1230:
  3929     0767  2DFA               	goto	l2990
  3930     0768                     l3066:
  3931                           
  3932                           ;ADXL345.c: 411:         if (sum_Z_avg >= 0x20) return 0;
  3933     0768  085F               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3934     0769  3A80               	xorlw	128
  3935     076A  0020               	movlb	0	; select bank0
  3936     076B  00BB               	movwf	??_calibrate
  3937     076C  3080               	movlw	128
  3938     076D  023B               	subwf	??_calibrate,w
  3939     076E  1D03               	skipz
  3940     076F  2F73               	goto	u1245
  3941     0770  3020               	movlw	32
  3942     0771  0021               	movlb	1	; select bank1
  3943     0772  025E               	subwf	calibrate@sum_Z_avg^(0+128),w
  3944     0773                     u1245:
  3945     0773  1C03               	skipc
  3946     0774  2F76               	goto	u1241
  3947     0775  2F77               	goto	u1240
  3948     0776                     u1241:
  3949     0776  2F78               	goto	l3072
  3950     0777                     u1240:
  3951     0777  2DFA               	goto	l2990
  3952     0778                     l3072:
  3953                           
  3954                           ;ADXL345.c: 414:     offset_0g_Z = -sum_Z_avg;
  3955     0778  0021               	movlb	1	; select bank1
  3956     0779  095E               	comf	calibrate@sum_Z_avg^(0+128),w
  3957     077A  0020               	movlb	0	; select bank0
  3958     077B  00BB               	movwf	??_calibrate
  3959     077C  0021               	movlb	1	; select bank1
  3960     077D  095F               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3961     077E  0020               	movlb	0	; select bank0
  3962     077F  00BC               	movwf	??_calibrate+1
  3963     0780  0ABB               	incf	??_calibrate,f
  3964     0781  1903               	skipnz
  3965     0782  0ABC               	incf	??_calibrate+1,f
  3966     0783  083B               	movf	??_calibrate,w
  3967     0784  0021               	movlb	1	; select bank1
  3968     0785  00B6               	movwf	calibrate@offset_0g_Z^(0+128)
  3969     0786  0020               	movlb	0	; select bank0
  3970     0787  083C               	movf	??_calibrate+1,w
  3971     0788  0021               	movlb	1	; select bank1
  3972     0789  00B7               	movwf	(calibrate@offset_0g_Z+1)^(0+128)
  3973     078A                     l3074:
  3974                           
  3975                           ;ADXL345.c: 416:     saveOffsets((uint8_t)offset_0g_X, (uint8_t)offset_0g_Y, (uint8_t)of
      +                          fset_0g_Z);
  3976     078A  0834               	movf	calibrate@offset_0g_Y^(0+128),w
  3977     078B  00FA               	movwf	saveOffsets@y_axis
  3978     078C  0836               	movf	calibrate@offset_0g_Z^(0+128),w
  3979     078D  00FB               	movwf	saveOffsets@z_axis
  3980     078E  0832               	movf	calibrate@offset_0g_X^(0+128),w
  3981     078F  3180  2029  3185   	fcall	_saveOffsets
  3982     0792                     l3076:
  3983                           
  3984                           ;ADXL345.c: 419:     EEPROM_Write(0x02, (uint8_t)offset_0g_X);
  3985     0792  3002               	movlw	2
  3986     0793  00F0               	movwf	EEPROM_Write@address
  3987     0794  3000               	movlw	0
  3988     0795  00F1               	movwf	EEPROM_Write@address+1
  3989     0796  0021               	movlb	1	; select bank1
  3990     0797  0832               	movf	calibrate@offset_0g_X^(0+128),w
  3991     0798  00F2               	movwf	EEPROM_Write@data
  3992     0799  318F  2709  3185   	fcall	_EEPROM_Write
  3993     079C                     l3078:
  3994                           
  3995                           ;ADXL345.c: 420:     EEPROM_Write(0x04, (uint8_t)offset_0g_Y);
  3996     079C  3004               	movlw	4
  3997     079D  00F0               	movwf	EEPROM_Write@address
  3998     079E  3000               	movlw	0
  3999     079F  00F1               	movwf	EEPROM_Write@address+1
  4000     07A0  0021               	movlb	1	; select bank1
  4001     07A1  0834               	movf	calibrate@offset_0g_Y^(0+128),w
  4002     07A2  00F2               	movwf	EEPROM_Write@data
  4003     07A3  318F  2709  3185   	fcall	_EEPROM_Write
  4004     07A6                     l3080:
  4005                           
  4006                           ;ADXL345.c: 421:     EEPROM_Write(0x06, (uint8_t)offset_0g_Z);
  4007     07A6  3006               	movlw	6
  4008     07A7  00F0               	movwf	EEPROM_Write@address
  4009     07A8  3000               	movlw	0
  4010     07A9  00F1               	movwf	EEPROM_Write@address+1
  4011     07AA  0021               	movlb	1	; select bank1
  4012     07AB  0836               	movf	calibrate@offset_0g_Z^(0+128),w
  4013     07AC  00F2               	movwf	EEPROM_Write@data
  4014     07AD  318F  2709  3185   	fcall	_EEPROM_Write
  4015     07B0                     l3082:
  4016                           
  4017                           ;ADXL345.c: 423:     EEPROM_Write(0x10, 0x57);
  4018     07B0  3010               	movlw	16
  4019     07B1  00F0               	movwf	EEPROM_Write@address
  4020     07B2  3000               	movlw	0
  4021     07B3  00F1               	movwf	EEPROM_Write@address+1
  4022     07B4  3057               	movlw	87
  4023     07B5  00F2               	movwf	EEPROM_Write@data
  4024     07B6  318F  2709  3185   	fcall	_EEPROM_Write
  4025     07B9                     l3084:
  4026                           
  4027                           ;ADXL345.c: 425:     msg.registerAddr = 0x31;
  4028     07B9  3031               	movlw	49
  4029     07BA  0021               	movlb	1	; select bank1
  4030     07BB  00C4               	movwf	calibrate@msg^(0+128)
  4031     07BC                     l3086:
  4032                           
  4033                           ;ADXL345.c: 426:     msg.data[0] = 0x0B;
  4034     07BC  300B               	movlw	11
  4035     07BD  00C5               	movwf	(calibrate@msg^(0+128)+1)
  4036     07BE                     l3088:
  4037     07BE  0022               	movlb	2	; select bank2
  4038     07BF  120E               	bcf	14,4	;volatile
  4039     07C0                     l3090:
  4040                           
  4041                           ;ADXL345.c: 428:     SPI1_BufferWrite(&msg, 2);
  4042     07C0  30C4               	movlw	low calibrate@msg
  4043     07C1  00F0               	movwf	SPI1_BufferWrite@bufferData
  4044     07C2  3000               	movlw	high calibrate@msg
  4045     07C3  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4046     07C4  3002               	movlw	2
  4047     07C5  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4048     07C6  3000               	movlw	0
  4049     07C7  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4050     07C8  318F  2746  3185   	fcall	_SPI1_BufferWrite
  4051     07CB                     l3092:
  4052     07CB  0022               	movlb	2	; select bank2
  4053     07CC  160E               	bsf	14,4	;volatile
  4054     07CD                     l3094:
  4055                           
  4056                           ;ADXL345.c: 431:     SPI1_Close();
  4057     07CD  318E  2633  3185   	fcall	_SPI1_Close
  4058     07D0                     l3096:
  4059                           
  4060                           ;ADXL345.c: 432:     return 1;
  4061     07D0  3001               	movlw	1
  4062     07D1                     l638:
  4063     07D1  0008               	return
  4064     07D2                     __end_of_calibrate:
  4065                           
  4066                           	psect	text2
  4067     0029                     __ptext2:	
  4068 ;; *************** function _saveOffsets *****************
  4069 ;; Defined at:
  4070 ;;		line 73 in file "ADXL345.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  x_axis          1    wreg     unsigned char 
  4073 ;;  y_axis          1   10[COMMON] unsigned char 
  4074 ;;  z_axis          1   11[COMMON] unsigned char 
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;  x_axis          1    0[BANK0 ] unsigned char 
  4077 ;;  msg            26    1[BANK0 ] struct Message
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4088 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4090 ;;      Totals:         2      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;Total ram usage:       29 bytes
  4092 ;; Hardware stack levels used: 1
  4093 ;; Hardware stack levels required when called: 2
  4094 ;; This function calls:
  4095 ;;		_SPI1_BufferWrite
  4096 ;;		_SPI1_Close
  4097 ;;		_SPI1_Open
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;;		_calibrate
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104     0029                     _saveOffsets:	
  4105                           ;psect for function _saveOffsets
  4106                           
  4107                           
  4108                           ;incstack = 0
  4109                           ; Regs used in _saveOffsets: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4110                           ;saveOffsets@x_axis stored from wreg
  4111     0029  0020               	movlb	0	; select bank0
  4112     002A  00A0               	movwf	saveOffsets@x_axis
  4113     002B                     l2586:
  4114                           
  4115                           ;ADXL345.c: 74:     while (!SPI1_Open(ADXL345)) {
  4116     002B  282F               	goto	l2590
  4117     002C                     l2588:
  4118                           
  4119                           ;ADXL345.c: 75:         SPI1_Close();
  4120     002C  318E  2633  3180   	fcall	_SPI1_Close
  4121     002F                     l2590:
  4122                           
  4123                           ;ADXL345.c: 74:     while (!SPI1_Open(ADXL345)) {
  4124     002F  01F6               	clrf	SPI1_Open@spiConfigIndex
  4125     0030  3180  20DC  3180   	fcall	_SPI1_Open
  4126     0033  3A00               	xorlw	0
  4127     0034  1903               	skipnz
  4128     0035  2837               	goto	u931
  4129     0036  2838               	goto	u930
  4130     0037                     u931:
  4131     0037  282C               	goto	l2588
  4132     0038                     u930:
  4133     0038                     l493:
  4134                           
  4135                           ;ADXL345.c: 78:     struct Message msg;;ADXL345.c: 79:     msg.registerAddr = 0x1E;
  4136     0038  301E               	movlw	30
  4137     0039  0020               	movlb	0	; select bank0
  4138     003A  00A1               	movwf	saveOffsets@msg
  4139     003B                     l2592:
  4140                           
  4141                           ;ADXL345.c: 80:     msg.data[0] = x_axis;
  4142     003B  0820               	movf	saveOffsets@x_axis,w
  4143     003C  00A2               	movwf	saveOffsets@msg+1
  4144     003D                     l2594:
  4145     003D  0022               	movlb	2	; select bank2
  4146     003E  120E               	bcf	14,4	;volatile
  4147     003F                     l2596:
  4148                           
  4149                           ;ADXL345.c: 82:     SPI1_BufferWrite(&msg, 2);
  4150     003F  3021               	movlw	low saveOffsets@msg
  4151     0040  00F0               	movwf	SPI1_BufferWrite@bufferData
  4152     0041  3000               	movlw	high saveOffsets@msg
  4153     0042  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4154     0043  3002               	movlw	2
  4155     0044  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4156     0045  3000               	movlw	0
  4157     0046  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4158     0047  318F  2746  3180   	fcall	_SPI1_BufferWrite
  4159     004A                     l2598:
  4160     004A  0022               	movlb	2	; select bank2
  4161     004B  160E               	bsf	14,4	;volatile
  4162     004C                     l2600:
  4163                           
  4164                           ;ADXL345.c: 85:     msg.registerAddr = 0x1F;
  4165     004C  301F               	movlw	31
  4166     004D  0020               	movlb	0	; select bank0
  4167     004E  00A1               	movwf	saveOffsets@msg
  4168     004F                     l2602:
  4169                           
  4170                           ;ADXL345.c: 86:     msg.data[0] = y_axis;
  4171     004F  087A               	movf	saveOffsets@y_axis,w
  4172     0050  00A2               	movwf	saveOffsets@msg+1
  4173     0051                     l2604:
  4174     0051  0022               	movlb	2	; select bank2
  4175     0052  120E               	bcf	14,4	;volatile
  4176     0053                     l499:
  4177                           
  4178                           ;ADXL345.c: 88:     SPI1_BufferWrite(&msg, 2);
  4179     0053  3021               	movlw	low saveOffsets@msg
  4180     0054  00F0               	movwf	SPI1_BufferWrite@bufferData
  4181     0055  3000               	movlw	high saveOffsets@msg
  4182     0056  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4183     0057  3002               	movlw	2
  4184     0058  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4185     0059  3000               	movlw	0
  4186     005A  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4187     005B  318F  2746  3180   	fcall	_SPI1_BufferWrite
  4188     005E                     l2606:
  4189     005E  0022               	movlb	2	; select bank2
  4190     005F  160E               	bsf	14,4	;volatile
  4191     0060                     l2608:
  4192                           
  4193                           ;ADXL345.c: 91:     msg.registerAddr = 0x20;
  4194     0060  3020               	movlw	32
  4195     0061  0020               	movlb	0	; select bank0
  4196     0062  00A1               	movwf	saveOffsets@msg
  4197     0063                     l2610:
  4198                           
  4199                           ;ADXL345.c: 92:     msg.data[0] = z_axis;
  4200     0063  087B               	movf	saveOffsets@z_axis,w
  4201     0064  00A2               	movwf	saveOffsets@msg+1
  4202     0065                     l2612:
  4203     0065  0022               	movlb	2	; select bank2
  4204     0066  120E               	bcf	14,4	;volatile
  4205     0067                     l2614:
  4206                           
  4207                           ;ADXL345.c: 94:     SPI1_BufferWrite(&msg, 2);
  4208     0067  3021               	movlw	low saveOffsets@msg
  4209     0068  00F0               	movwf	SPI1_BufferWrite@bufferData
  4210     0069  3000               	movlw	high saveOffsets@msg
  4211     006A  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4212     006B  3002               	movlw	2
  4213     006C  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4214     006D  3000               	movlw	0
  4215     006E  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4216     006F  318F  2746  3180   	fcall	_SPI1_BufferWrite
  4217     0072                     l2616:
  4218     0072  0022               	movlb	2	; select bank2
  4219     0073  160E               	bsf	14,4	;volatile
  4220     0074                     l2618:
  4221                           
  4222                           ;ADXL345.c: 97:     SPI1_Close();
  4223     0074  318E  2633  3180   	fcall	_SPI1_Close
  4224     0077                     l506:
  4225     0077  0008               	return
  4226     0078                     __end_of_saveOffsets:
  4227                           
  4228                           	psect	text3
  4229     0F09                     __ptext3:	
  4230 ;; *************** function _EEPROM_Write *****************
  4231 ;; Defined at:
  4232 ;;		line 242 in file "mcc_generated_files/nvm/src/nvm.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  address         2    0[COMMON] unsigned short 
  4235 ;;  data            1    2[COMMON] unsigned char 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  globalInterr    1    3[COMMON] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        4 bytes
  4252 ;; Hardware stack levels used: 1
  4253 ;; This function calls:
  4254 ;;		Nothing
  4255 ;; This function is called by:
  4256 ;;		_calibrate
  4257 ;;		_EEPROM_ByteWrite
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261     0F09                     _EEPROM_Write:	
  4262                           ;psect for function _EEPROM_Write
  4263                           
  4264     0F09                     l2504:	
  4265                           ;incstack = 0
  4266                           ; Regs used in _EEPROM_Write: [wreg+status,2+status,0]
  4267                           
  4268                           
  4269                           ;mcc_generated_files/nvm/src/nvm.c: 242: void EEPROM_Write(eeprom_address_t address, eep
      +                          rom_data_t data);mcc_generated_files/nvm/src/nvm.c: 243: {;mcc_generated_files/nvm/src/n
      +                          vm.c: 245:     uint8_t globalInterruptBitValue = INTCONbits.GIE;
  4270     0F09  0D0B               	rlf	11,w	;volatile
  4271     0F0A  0D0B               	rlf	11,w	;volatile
  4272     0F0B  3901               	andlw	1
  4273     0F0C  00F3               	movwf	EEPROM_Write@globalInterruptBitValue
  4274     0F0D                     l2506:
  4275                           
  4276                           ;mcc_generated_files/nvm/src/nvm.c: 248:     EECON1bits.CFGS = 0;
  4277     0F0D  0023               	movlb	3	; select bank3
  4278     0F0E  1315               	bcf	21,6	;volsfr
  4279     0F0F                     l2508:
  4280                           
  4281                           ;mcc_generated_files/nvm/src/nvm.c: 249:     EECON1bits.EEPGD = 0;
  4282     0F0F  1395               	bcf	21,7	;volsfr
  4283     0F10                     l2510:
  4284                           
  4285                           ;mcc_generated_files/nvm/src/nvm.c: 252:     EECON1bits.WREN = 1;
  4286     0F10  1515               	bsf	21,2	;volsfr
  4287     0F11                     l2512:
  4288                           
  4289                           ;mcc_generated_files/nvm/src/nvm.c: 255:     EEADRH = (uint8_t) (address >> 8);
  4290     0F11  0871               	movf	EEPROM_Write@address+1,w
  4291     0F12  0092               	movwf	18	;volatile
  4292     0F13                     l2514:
  4293                           
  4294                           ;mcc_generated_files/nvm/src/nvm.c: 256:     EEADRL = (uint8_t) address;
  4295     0F13  0870               	movf	EEPROM_Write@address,w
  4296     0F14  0091               	movwf	17	;volatile
  4297     0F15                     l2516:
  4298                           
  4299                           ;mcc_generated_files/nvm/src/nvm.c: 259:     EEDATL = data;
  4300     0F15  0872               	movf	EEPROM_Write@data,w
  4301     0F16  0093               	movwf	19	;volatile
  4302     0F17                     l2518:
  4303                           
  4304                           ;mcc_generated_files/nvm/src/nvm.c: 262:     INTCONbits.GIE = 0;
  4305     0F17  138B               	bcf	11,7	;volatile
  4306     0F18                     l2520:
  4307                           
  4308                           ;mcc_generated_files/nvm/src/nvm.c: 265:     EECON2 = unlockKeyLow;
  4309     0F18  087D               	movf	_unlockKeyLow,w	;volatile
  4310     0F19  0096               	movwf	22	;volsfr
  4311     0F1A                     l2522:
  4312                           
  4313                           ;mcc_generated_files/nvm/src/nvm.c: 266:     EECON2 = unlockKeyHigh;
  4314     0F1A  087C               	movf	_unlockKeyHigh,w	;volatile
  4315     0F1B  0096               	movwf	22	;volsfr
  4316     0F1C                     l2524:
  4317                           
  4318                           ;mcc_generated_files/nvm/src/nvm.c: 267:     EECON1bits.WR = 1;
  4319     0F1C  1495               	bsf	21,1	;volsfr
  4320     0F1D                     l2526:
  4321                           
  4322                           ;mcc_generated_files/nvm/src/nvm.c: 268:     __nop();
  4323     0F1D  0000               	nop
  4324     0F1E                     l2528:
  4325                           
  4326                           ;mcc_generated_files/nvm/src/nvm.c: 269:     __nop();
  4327     0F1E  0000               	nop
  4328     0F1F                     l2530:
  4329                           
  4330                           ;mcc_generated_files/nvm/src/nvm.c: 272:     INTCONbits.GIE = globalInterruptBitValue;
  4331     0F1F  0C73               	rrf	EEPROM_Write@globalInterruptBitValue,w
  4332     0F20  1C03               	skipc
  4333     0F21  138B               	bcf	11,7	;volatile
  4334     0F22  1803               	skipnc
  4335     0F23  178B               	bsf	11,7	;volatile
  4336     0F24                     l2532:
  4337                           
  4338                           ;mcc_generated_files/nvm/src/nvm.c: 275:     EECON1bits.WREN = 0;
  4339     0F24  0023               	movlb	3	; select bank3
  4340     0F25  1115               	bcf	21,2	;volsfr
  4341     0F26                     l106:
  4342     0F26  0008               	return
  4343     0F27                     __end_of_EEPROM_Write:
  4344                           
  4345                           	psect	text4
  4346     0EAB                     __ptext4:	
  4347 ;; *************** function _SYSTEM_Initialize *****************
  4348 ;; Defined at:
  4349 ;;		line 39 in file "mcc_generated_files/system/src/system.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      void 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0, pclath, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;Total ram usage:        0 bytes
  4368 ;; Hardware stack levels used: 1
  4369 ;; Hardware stack levels required when called: 2
  4370 ;; This function calls:
  4371 ;;		_CLOCK_Initialize
  4372 ;;		_INTERRUPT_Initialize
  4373 ;;		_NVM_Initialize
  4374 ;;		_PIN_MANAGER_Initialize
  4375 ;;		_SPI1_Initialize
  4376 ;;		_WDT_Initialize
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382     0EAB                     _SYSTEM_Initialize:	
  4383                           ;psect for function _SYSTEM_Initialize
  4384                           
  4385     0EAB                     l2874:	
  4386                           ;incstack = 0
  4387                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4388                           
  4389                           
  4390                           ;mcc_generated_files/system/src/system.c: 41:     CLOCK_Initialize();
  4391     0EAB  318E  2651  318E   	fcall	_CLOCK_Initialize
  4392     0EAE                     l2876:
  4393                           
  4394                           ;mcc_generated_files/system/src/system.c: 42:     PIN_MANAGER_Initialize();
  4395     0EAE  3180  2004  318E   	fcall	_PIN_MANAGER_Initialize
  4396     0EB1                     l2878:
  4397                           
  4398                           ;mcc_generated_files/system/src/system.c: 43:     NVM_Initialize();
  4399     0EB1  318E  263D  318E   	fcall	_NVM_Initialize
  4400     0EB4                     l2880:
  4401                           
  4402                           ;mcc_generated_files/system/src/system.c: 44:     SPI1_Initialize();
  4403     0EB4  318E  2662  318E   	fcall	_SPI1_Initialize
  4404     0EB7                     l2882:
  4405                           
  4406                           ;mcc_generated_files/system/src/system.c: 45:     WDT_Initialize();
  4407     0EB7  318E  2641  318E   	fcall	_WDT_Initialize
  4408                           
  4409                           ;mcc_generated_files/system/src/system.c: 46:     INTERRUPT_Initialize();
  4410     0EBA  318E  266C  318E   	fcall	_INTERRUPT_Initialize
  4411     0EBD                     l334:
  4412     0EBD  0008               	return
  4413     0EBE                     __end_of_SYSTEM_Initialize:
  4414                           
  4415                           	psect	text5
  4416     0E41                     __ptext5:	
  4417 ;; *************** function _WDT_Initialize *****************
  4418 ;; Defined at:
  4419 ;;		line 36 in file "mcc_generated_files/system/src/watchdog.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		None
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;Total ram usage:        0 bytes
  4438 ;; Hardware stack levels used: 1
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_SYSTEM_Initialize
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446     0E41                     _WDT_Initialize:	
  4447                           ;psect for function _WDT_Initialize
  4448                           
  4449     0E41                     l2584:	
  4450                           ;incstack = 0
  4451                           ; Regs used in _WDT_Initialize: []
  4452                           
  4453                           
  4454                           ;mcc_generated_files/system/src/watchdog.c: 39:     WDTCON = 0x19;
  4455     0E41  3019               	movlw	25
  4456     0E42  0021               	movlb	1	; select bank1
  4457     0E43  0097               	movwf	23	;volatile
  4458     0E44                     l339:
  4459     0E44  0008               	return
  4460     0E45                     __end_of_WDT_Initialize:
  4461                           
  4462                           	psect	text6
  4463     0E62                     __ptext6:	
  4464 ;; *************** function _SPI1_Initialize *****************
  4465 ;; Defined at:
  4466 ;;		line 61 in file "mcc_generated_files/spi/src/mssp.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		status,2
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;Total ram usage:        0 bytes
  4485 ;; Hardware stack levels used: 1
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_SYSTEM_Initialize
  4490 ;;		_main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494     0E62                     _SPI1_Initialize:	
  4495                           ;psect for function _SPI1_Initialize
  4496                           
  4497     0E62                     l2536:	
  4498                           ;incstack = 0
  4499                           ; Regs used in _SPI1_Initialize: [status,2]
  4500                           
  4501                           
  4502                           ;mcc_generated_files/spi/src/mssp.c: 64:     PIE1bits.SSP1IE = 0;
  4503     0E62  0021               	movlb	1	; select bank1
  4504     0E63  1191               	bcf	17,3	;volatile
  4505                           
  4506                           ;mcc_generated_files/spi/src/mssp.c: 65:     PIR1bits.SSP1IF = 0;
  4507     0E64  0020               	movlb	0	; select bank0
  4508     0E65  1191               	bcf	17,3	;volatile
  4509     0E66                     l2538:
  4510                           
  4511                           ;mcc_generated_files/spi/src/mssp.c: 67:     SSP1STAT = 0x00;
  4512     0E66  0024               	movlb	4	; select bank4
  4513     0E67  0194               	clrf	20	;volatile
  4514                           
  4515                           ;mcc_generated_files/spi/src/mssp.c: 68:     SSP1CON1 = 0x00;
  4516     0E68  0195               	clrf	21	;volatile
  4517                           
  4518                           ;mcc_generated_files/spi/src/mssp.c: 69:     SSP1CON3 = 0x00;
  4519     0E69  0197               	clrf	23	;volatile
  4520                           
  4521                           ;mcc_generated_files/spi/src/mssp.c: 70:     SSP1ADD = 0x00;
  4522     0E6A  0192               	clrf	18	;volatile
  4523     0E6B                     l153:
  4524     0E6B  0008               	return
  4525     0E6C                     __end_of_SPI1_Initialize:
  4526                           
  4527                           	psect	text7
  4528     0004                     __ptext7:	
  4529 ;; *************** function _PIN_MANAGER_Initialize *****************
  4530 ;; Defined at:
  4531 ;;		line 40 in file "mcc_generated_files/system/src/pins.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, pclath, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used: 1
  4551 ;; Hardware stack levels required when called: 1
  4552 ;; This function calls:
  4553 ;;		_SW1_SetInterruptHandler
  4554 ;; This function is called by:
  4555 ;;		_SYSTEM_Initialize
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559     0004                     _PIN_MANAGER_Initialize:	
  4560                           ;psect for function _PIN_MANAGER_Initialize
  4561                           
  4562     0004                     l2556:	
  4563                           ;incstack = 0
  4564                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4565                           
  4566                           
  4567                           ;mcc_generated_files/system/src/pins.c: 45:     LATA = 0x0;
  4568     0004  0022               	movlb	2	; select bank2
  4569     0005  018C               	clrf	12	;volatile
  4570     0006                     l2558:
  4571                           
  4572                           ;mcc_generated_files/system/src/pins.c: 46:     LATC = 0x18;
  4573     0006  3018               	movlw	24
  4574     0007  008E               	movwf	14	;volatile
  4575     0008                     l2560:
  4576                           
  4577                           ;mcc_generated_files/system/src/pins.c: 51:     TRISA = 0xF;
  4578     0008  300F               	movlw	15
  4579     0009  0021               	movlb	1	; select bank1
  4580     000A  008C               	movwf	12	;volatile
  4581     000B                     l2562:
  4582                           
  4583                           ;mcc_generated_files/system/src/pins.c: 52:     TRISC = 0x2;
  4584     000B  3002               	movlw	2
  4585     000C  008E               	movwf	14	;volatile
  4586                           
  4587                           ;mcc_generated_files/system/src/pins.c: 57:     ANSELA = 0x0;
  4588     000D  0023               	movlb	3	; select bank3
  4589     000E  018C               	clrf	12	;volatile
  4590                           
  4591                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELC = 0x0;
  4592     000F  018E               	clrf	14	;volatile
  4593     0010                     l2564:
  4594                           
  4595                           ;mcc_generated_files/system/src/pins.c: 63:     WPUA = 0xA;
  4596     0010  300A               	movlw	10
  4597     0011  0024               	movlb	4	; select bank4
  4598     0012  008C               	movwf	12	;volatile
  4599                           
  4600                           ;mcc_generated_files/system/src/pins.c: 64:     WPUC = 0x0;
  4601     0013  018E               	clrf	14	;volatile
  4602     0014                     l2566:
  4603                           
  4604                           ;mcc_generated_files/system/src/pins.c: 65:     OPTION_REGbits.nWPUEN = 0x0;
  4605     0014  0021               	movlb	1	; select bank1
  4606     0015  1395               	bcf	21,7	;volatile
  4607                           
  4608                           ;mcc_generated_files/system/src/pins.c: 77:     INLVLA = 0x0;
  4609     0016  0027               	movlb	7	; select bank7
  4610     0017  018C               	clrf	12	;volatile
  4611                           
  4612                           ;mcc_generated_files/system/src/pins.c: 78:     INLVLC = 0x0;
  4613     0018  018E               	clrf	14	;volatile
  4614                           
  4615                           ;mcc_generated_files/system/src/pins.c: 87:     APFCON0 = 0x0;
  4616     0019  0022               	movlb	2	; select bank2
  4617     001A  019D               	clrf	29	;volatile
  4618                           
  4619                           ;mcc_generated_files/system/src/pins.c: 92:     IOCAP = 0x0;
  4620     001B  0027               	movlb	7	; select bank7
  4621     001C  0191               	clrf	17	;volatile
  4622     001D                     l2568:
  4623                           
  4624                           ;mcc_generated_files/system/src/pins.c: 93:     IOCAN = 0x2;
  4625     001D  3002               	movlw	2
  4626     001E  0092               	movwf	18	;volatile
  4627                           
  4628                           ;mcc_generated_files/system/src/pins.c: 94:     IOCAF = 0x0;
  4629     001F  0193               	clrf	19	;volatile
  4630     0020                     l2570:
  4631                           
  4632                           ;mcc_generated_files/system/src/pins.c: 96:     SW1_SetInterruptHandler(SW1_DefaultInter
      +                          ruptHandler);
  4633     0020  30EF               	movlw	low _SW1_DefaultInterruptHandler
  4634     0021  00F0               	movwf	SW1_SetInterruptHandler@InterruptHandler
  4635     0022  300E               	movlw	high _SW1_DefaultInterruptHandler
  4636     0023  00F1               	movwf	SW1_SetInterruptHandler@InterruptHandler+1
  4637     0024  318E  264B  3180   	fcall	_SW1_SetInterruptHandler
  4638     0027                     l2572:
  4639                           
  4640                           ;mcc_generated_files/system/src/pins.c: 99:     INTCONbits.IOCIE = 1;
  4641     0027  158B               	bsf	11,3	;volatile
  4642     0028                     l293:
  4643     0028  0008               	return
  4644     0029                     __end_of_PIN_MANAGER_Initialize:
  4645                           
  4646                           	psect	text8
  4647     0E4B                     __ptext8:	
  4648 ;; *************** function _SW1_SetInterruptHandler *****************
  4649 ;; Defined at:
  4650 ;;		line 129 in file "mcc_generated_files/system/src/pins.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4653 ;;		 -> SW1_DefaultInterruptHandler(1), 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4665 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used: 1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_PIN_MANAGER_Initialize
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678     0E4B                     _SW1_SetInterruptHandler:	
  4679                           ;psect for function _SW1_SetInterruptHandler
  4680                           
  4681     0E4B                     l2474:	
  4682                           ;incstack = 0
  4683                           ; Regs used in _SW1_SetInterruptHandler: [wreg]
  4684                           
  4685                           
  4686                           ;mcc_generated_files/system/src/pins.c: 130:     SW1_InterruptHandler = InterruptHandler
      +                          ;
  4687     0E4B  0871               	movf	SW1_SetInterruptHandler@InterruptHandler+1,w
  4688     0E4C  0020               	movlb	0	; select bank0
  4689     0E4D  00E2               	movwf	_SW1_InterruptHandler+1
  4690     0E4E  0870               	movf	SW1_SetInterruptHandler@InterruptHandler,w
  4691     0E4F  00E1               	movwf	_SW1_InterruptHandler
  4692     0E50                     l304:
  4693     0E50  0008               	return
  4694     0E51                     __end_of_SW1_SetInterruptHandler:
  4695                           
  4696                           	psect	text9
  4697     0E3D                     __ptext9:	
  4698 ;; *************** function _NVM_Initialize *****************
  4699 ;; Defined at:
  4700 ;;		line 42 in file "mcc_generated_files/nvm/src/nvm.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		status,2, status,0, pclath, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;Total ram usage:        0 bytes
  4719 ;; Hardware stack levels used: 1
  4720 ;; Hardware stack levels required when called: 1
  4721 ;; This function calls:
  4722 ;;		_NVM_StatusClear
  4723 ;; This function is called by:
  4724 ;;		_SYSTEM_Initialize
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728     0E3D                     _NVM_Initialize:	
  4729                           ;psect for function _NVM_Initialize
  4730                           
  4731     0E3D                     l2534:	
  4732                           ;incstack = 0
  4733                           ; Regs used in _NVM_Initialize: [status,2+status,0+pclath+cstack]
  4734                           
  4735                           
  4736                           ;mcc_generated_files/nvm/src/nvm.c: 44:     NVM_StatusClear();
  4737     0E3D  318E  2636  318E   	fcall	_NVM_StatusClear
  4738     0E40                     l58:
  4739     0E40  0008               	return
  4740     0E41                     __end_of_NVM_Initialize:
  4741                           
  4742                           	psect	text10
  4743     0E36                     __ptext10:	
  4744 ;; *************** function _NVM_StatusClear *****************
  4745 ;; Defined at:
  4746 ;;		line 64 in file "mcc_generated_files/nvm/src/nvm.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		None
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;Total ram usage:        0 bytes
  4765 ;; Hardware stack levels used: 1
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_NVM_Initialize
  4770 ;;		_EEPROM_ByteWrite
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774     0E36                     _NVM_StatusClear:	
  4775                           ;psect for function _NVM_StatusClear
  4776                           
  4777     0E36                     l2420:	
  4778                           ;incstack = 0
  4779                           ; Regs used in _NVM_StatusClear: []
  4780                           
  4781                           
  4782                           ;mcc_generated_files/nvm/src/nvm.c: 66:     EECON1bits.WRERR = 0;
  4783     0E36  0023               	movlb	3	; select bank3
  4784     0E37  1195               	bcf	21,3	;volsfr
  4785     0E38                     l71:
  4786     0E38  0008               	return
  4787     0E39                     __end_of_NVM_StatusClear:
  4788                           
  4789                           	psect	text11
  4790     0E6C                     __ptext11:	
  4791 ;; *************** function _INTERRUPT_Initialize *****************
  4792 ;; Defined at:
  4793 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used: 1
  4813 ;; Hardware stack levels required when called: 1
  4814 ;; This function calls:
  4815 ;;		_INT_SetInterruptHandler
  4816 ;; This function is called by:
  4817 ;;		_SYSTEM_Initialize
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821     0E6C                     _INTERRUPT_Initialize:	
  4822                           ;psect for function _INTERRUPT_Initialize
  4823                           
  4824     0E6C                     l2552:	
  4825                           ;incstack = 0
  4826                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4827                           
  4828                           
  4829                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  4830     0E6C  108B               	bcf	11,1	;volatile
  4831                           
  4832                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  4833     0E6D  0021               	movlb	1	; select bank1
  4834     0E6E  1715               	bsf	21,6	;volatile
  4835     0E6F                     l2554:
  4836                           
  4837                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  4838     0E6F  3000               	movlw	0
  4839     0E70  00F0               	movwf	INT_SetInterruptHandler@InterruptHandler
  4840     0E71  3000               	movlw	0
  4841     0E72  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  4842     0E73  318E  2645  318E   	fcall	_INT_SetInterruptHandler
  4843     0E76                     l229:
  4844     0E76  0008               	return
  4845     0E77                     __end_of_INTERRUPT_Initialize:
  4846                           
  4847                           	psect	text12
  4848     0E45                     __ptext12:	
  4849 ;; *************** function _INT_SetInterruptHandler *****************
  4850 ;; Defined at:
  4851 ;;		line 71 in file "mcc_generated_files/system/src/interrupt.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4854 ;;		 -> INT_DefaultInterruptHandler(1), 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;Total ram usage:        2 bytes
  4871 ;; Hardware stack levels used: 1
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_INTERRUPT_Initialize
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879     0E45                     _INT_SetInterruptHandler:	
  4880                           ;psect for function _INT_SetInterruptHandler
  4881                           
  4882     0E45                     l2472:	
  4883                           ;incstack = 0
  4884                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  4885                           
  4886                           
  4887                           ;mcc_generated_files/system/src/interrupt.c: 72:     INT_InterruptHandler = InterruptHan
      +                          dler;
  4888     0E45  0871               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  4889     0E46  0020               	movlb	0	; select bank0
  4890     0E47  00E4               	movwf	_INT_InterruptHandler+1
  4891     0E48  0870               	movf	INT_SetInterruptHandler@InterruptHandler,w
  4892     0E49  00E3               	movwf	_INT_InterruptHandler
  4893     0E4A                     l239:
  4894     0E4A  0008               	return
  4895     0E4B                     __end_of_INT_SetInterruptHandler:
  4896                           
  4897                           	psect	text13
  4898     0E51                     __ptext13:	
  4899 ;; *************** function _CLOCK_Initialize *****************
  4900 ;; Defined at:
  4901 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		status,2
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; This function calls:
  4922 ;;		Nothing
  4923 ;; This function is called by:
  4924 ;;		_SYSTEM_Initialize
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928     0E51                     _CLOCK_Initialize:	
  4929                           ;psect for function _CLOCK_Initialize
  4930                           
  4931     0E51                     l2580:	
  4932                           ;incstack = 0
  4933                           ; Regs used in _CLOCK_Initialize: [status,2]
  4934                           
  4935                           
  4936                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (13 << 0x3)
  4937     0E51  306A               	movlw	106
  4938     0E52  0021               	movlb	1	; select bank1
  4939     0E53  0099               	movwf	25	;volatile
  4940     0E54                     l2582:
  4941                           
  4942                           ;mcc_generated_files/system/src/clock.c: 44:     BORCON = (0 << 0x7);
  4943     0E54  0022               	movlb	2	; select bank2
  4944     0E55  0196               	clrf	22	;volatile
  4945                           
  4946                           ;mcc_generated_files/system/src/clock.c: 45:     OSCTUNE = (0 << 0x0);
  4947     0E56  0021               	movlb	1	; select bank1
  4948     0E57  0198               	clrf	24	;volatile
  4949     0E58                     l319:
  4950     0E58  0008               	return
  4951     0E59                     __end_of_CLOCK_Initialize:
  4952                           
  4953                           	psect	text14
  4954     0E59                     __ptext14:	
  4955 ;; *************** function _PIN_MANAGER_IOC *****************
  4956 ;; Defined at:
  4957 ;;		line 102 in file "mcc_generated_files/system/src/pins.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;Total ram usage:        0 bytes
  4976 ;; Hardware stack levels used: 1
  4977 ;; Hardware stack levels required when called: 2
  4978 ;; This function calls:
  4979 ;;		_SW1_ISR
  4980 ;; This function is called by:
  4981 ;;		_main
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985     0E59                     _PIN_MANAGER_IOC:	
  4986                           ;psect for function _PIN_MANAGER_IOC
  4987                           
  4988     0E59                     l2870:	
  4989                           ;incstack = 0
  4990                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  4991                           
  4992                           
  4993                           ;mcc_generated_files/system/src/pins.c: 105:     if(IOCAFbits.IOCAF1 == 1)
  4994     0E59  0027               	movlb	7	; select bank7
  4995     0E5A  1C93               	btfss	19,1	;volatile
  4996     0E5B  2E5D               	goto	u1011
  4997     0E5C  2E5E               	goto	u1010
  4998     0E5D                     u1011:
  4999     0E5D  2E61               	goto	l297
  5000     0E5E                     u1010:
  5001     0E5E                     l2872:
  5002                           
  5003                           ;mcc_generated_files/system/src/pins.c: 106:     {;mcc_generated_files/system/src/pins.c
      +                          : 107:         SW1_ISR();
  5004     0E5E  318E  269C  318E   	fcall	_SW1_ISR
  5005     0E61                     l297:
  5006     0E61  0008               	return
  5007     0E62                     __end_of_PIN_MANAGER_IOC:
  5008                           
  5009                           	psect	text15
  5010     0E9C                     __ptext15:	
  5011 ;; *************** function _SW1_ISR *****************
  5012 ;; Defined at:
  5013 ;;		line 114 in file "mcc_generated_files/system/src/pins.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used: 1
  5033 ;; Hardware stack levels required when called: 1
  5034 ;; This function calls:
  5035 ;;		NULL
  5036 ;;		_SW1_DefaultInterruptHandler
  5037 ;; This function is called by:
  5038 ;;		_PIN_MANAGER_IOC
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042     0E9C                     _SW1_ISR:	
  5043                           ;psect for function _SW1_ISR
  5044                           
  5045     0E9C                     l2574:	
  5046                           ;incstack = 0
  5047                           ; Regs used in _SW1_ISR: [wreg+status,2+status,0+pclath+cstack]
  5048                           
  5049                           
  5050                           ;mcc_generated_files/system/src/pins.c: 119:     if(SW1_InterruptHandler)
  5051     0E9C  0020               	movlb	0	; select bank0
  5052     0E9D  0861               	movf	_SW1_InterruptHandler,w
  5053     0E9E  0462               	iorwf	_SW1_InterruptHandler+1,w
  5054     0E9F  1903               	btfsc	3,2
  5055     0EA0  2EA2               	goto	u921
  5056     0EA1  2EA3               	goto	u920
  5057     0EA2                     u921:
  5058     0EA2  2EA8               	goto	l2578
  5059     0EA3                     u920:
  5060     0EA3                     l2576:
  5061                           
  5062                           ;mcc_generated_files/system/src/pins.c: 120:     {;mcc_generated_files/system/src/pins.c
      +                          : 121:         SW1_InterruptHandler();
  5063     0EA3  0862               	movf	_SW1_InterruptHandler+1,w
  5064     0EA4  008A               	movwf	10
  5065     0EA5  0861               	movf	_SW1_InterruptHandler,w
  5066     0EA6  000A               	callw
  5067     0EA7  318E               	pagesel	$
  5068     0EA8                     l2578:
  5069                           
  5070                           ;mcc_generated_files/system/src/pins.c: 123:     IOCAFbits.IOCAF1 = 0;
  5071     0EA8  0027               	movlb	7	; select bank7
  5072     0EA9  1093               	bcf	19,1	;volatile
  5073     0EAA                     l301:
  5074     0EAA  0008               	return
  5075     0EAB                     __end_of_SW1_ISR:
  5076                           
  5077                           	psect	text16
  5078     0EEF                     __ptext16:	
  5079 ;; *************** function _SW1_DefaultInterruptHandler *****************
  5080 ;; Defined at:
  5081 ;;		line 136 in file "mcc_generated_files/system/src/pins.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, status,0
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;Total ram usage:        1 bytes
  5100 ;; Hardware stack levels used: 1
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_PIN_MANAGER_Initialize
  5105 ;;		_SW1_ISR
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109     0EEF                     _SW1_DefaultInterruptHandler:	
  5110                           ;psect for function _SW1_DefaultInterruptHandler
  5111                           
  5112     0EEF                     l2476:	
  5113                           ;incstack = 0
  5114                           ; Regs used in _SW1_DefaultInterruptHandler: [wreg+status,0]
  5115                           
  5116                           
  5117                           ;mcc_generated_files/system/src/pins.c: 139:     _delay((unsigned long)((60)*(4000000/40
      +                          00.0)));
  5118     0EEF  304E               	movlw	78
  5119     0EF0  00F0               	movwf	??_SW1_DefaultInterruptHandler
  5120     0EF1  30EB               	movlw	235
  5121     0EF2                     u1567:
  5122     0EF2  0B89               	decfsz	9,f
  5123     0EF3  2EF2               	goto	u1567
  5124     0EF4  0BF0               	decfsz	??_SW1_DefaultInterruptHandler,f
  5125     0EF5  2EF2               	goto	u1567
  5126     0EF6  0000               	nop
  5127     0EF7                     l2478:
  5128                           
  5129                           ;mcc_generated_files/system/src/pins.c: 140:     if (PORTAbits.RA1 == 0) {
  5130     0EF7  0020               	movlb	0	; select bank0
  5131     0EF8  188C               	btfsc	12,1	;volatile
  5132     0EF9  2EFB               	goto	u851
  5133     0EFA  2EFC               	goto	u850
  5134     0EFB                     u851:
  5135     0EFB  2F08               	goto	l310
  5136     0EFC                     u850:
  5137     0EFC                     l2480:
  5138     0EFC  1003               	clrc
  5139     0EFD  0022               	movlb	2	; select bank2
  5140     0EFE  1E0C               	btfss	12,4	;volatile
  5141     0EFF  1403               	setc
  5142     0F00  1803               	btfsc	3,0
  5143     0F01  2F03               	goto	u861
  5144     0F02  2F06               	goto	u860
  5145     0F03                     u861:
  5146     0F03  0022               	movlb	2	; select bank2
  5147     0F04  160C               	bsf	12,4	;volatile
  5148     0F05  2F08               	goto	u874
  5149     0F06                     u860:
  5150     0F06  0022               	movlb	2	; select bank2
  5151     0F07  120C               	bcf	12,4	;volatile
  5152     0F08                     u874:
  5153     0F08                     l310:
  5154     0F08  0008               	return
  5155     0F09                     __end_of_SW1_DefaultInterruptHandler:
  5156                           
  5157                           	psect	text17
  5158     0148                     __ptext17:	
  5159 ;; *************** function _MotionEventHandler *****************
  5160 ;; Defined at:
  5161 ;;		line 15 in file "fall.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  state           1   41[BANK0 ] PTR enum E2688
  5164 ;;		 -> main@current_state(1), 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5176 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5179 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;Total ram usage:        3 bytes
  5181 ;; Hardware stack levels used: 1
  5182 ;; Hardware stack levels required when called: 3
  5183 ;; This function calls:
  5184 ;;		_ADXL345_ClearInterrupt
  5185 ;;		_orientation_Up
  5186 ;;		_setupForFreefall
  5187 ;;		_setupForImpact
  5188 ;;		_setupForInactivity
  5189 ;; This function is called by:
  5190 ;;		_main
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194     0148                     _MotionEventHandler:	
  5195                           ;psect for function _MotionEventHandler
  5196                           
  5197     0148                     l3100:	
  5198                           ;incstack = 0
  5199                           ; Regs used in _MotionEventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5200                           
  5201                           
  5202                           ;fall.c: 16:     timer_20ms++;
  5203     0148  3001               	movlw	1
  5204     0149  0020               	movlb	0	; select bank0
  5205     014A  07DE               	addwf	_timer_20ms,f
  5206     014B  3000               	movlw	0
  5207     014C  3DDF               	addwfc	_timer_20ms+1,f
  5208                           
  5209                           ;fall.c: 17:     orientation_check_timer_20ms++;
  5210     014D  3001               	movlw	1
  5211     014E  07DC               	addwf	_orientation_check_timer_20ms,f
  5212     014F  3000               	movlw	0
  5213     0150  3DDD               	addwfc	_orientation_check_timer_20ms+1,f
  5214                           
  5215                           ;fall.c: 19:     switch (*state) {
  5216     0151  29B9               	goto	l3164
  5217     0152                     l693:	
  5218                           ;fall.c: 20:         case WAITING_FOR_FREEFALL:
  5219                           
  5220                           
  5221                           ;fall.c: 22:             if (PORTAbits.RA2) {
  5222     0152  1D0C               	btfss	12,2	;volatile
  5223     0153  2955               	goto	u1251
  5224     0154  2956               	goto	u1250
  5225     0155                     u1251:
  5226     0155  29D5               	goto	l722
  5227     0156                     u1250:
  5228     0156                     l3102:
  5229                           
  5230                           ;fall.c: 23:                 setupForImpact();
  5231     0156  3182  226D  3181   	fcall	_setupForImpact
  5232     0159                     l3104:
  5233                           
  5234                           ;fall.c: 24:                 timer_20ms = 0;
  5235     0159  0020               	movlb	0	; select bank0
  5236     015A  01DE               	clrf	_timer_20ms
  5237     015B  01DF               	clrf	_timer_20ms+1
  5238     015C                     l3106:
  5239                           
  5240                           ;fall.c: 25:                 *state = WAITING_FOR_IMPACT;
  5241     015C  0849               	movf	MotionEventHandler@state,w
  5242     015D  0086               	movwf	6
  5243     015E  0187               	clrf	7
  5244     015F  3001               	movlw	1
  5245     0160  0081               	movwf	1
  5246     0161  29D5               	goto	l722
  5247     0162                     l696:	
  5248                           ;fall.c: 29:         case WAITING_FOR_IMPACT:
  5249                           
  5250                           
  5251                           ;fall.c: 31:             if (PORTAbits.RA2) {
  5252     0162  1D0C               	btfss	12,2	;volatile
  5253     0163  2965               	goto	u1261
  5254     0164  2966               	goto	u1260
  5255     0165                     u1261:
  5256     0165  2970               	goto	l3112
  5257     0166                     u1260:
  5258     0166                     l3108:
  5259                           
  5260                           ;fall.c: 32:                 setupForInactivity();
  5261     0166  3183  2304  3181   	fcall	_setupForInactivity
  5262     0169                     l3110:
  5263                           
  5264                           ;fall.c: 33:                 *state = WAITING_FOR_INACTIVITY;
  5265     0169  0020               	movlb	0	; select bank0
  5266     016A  0849               	movf	MotionEventHandler@state,w
  5267     016B  0086               	movwf	6
  5268     016C  0187               	clrf	7
  5269     016D  3002               	movlw	2
  5270     016E  0081               	movwf	1
  5271                           
  5272                           ;fall.c: 34:             }
  5273     016F  29D5               	goto	l722
  5274     0170                     l3112:
  5275     0170  3000               	movlw	0
  5276     0171  025F               	subwf	_timer_20ms+1,w
  5277     0172  3019               	movlw	25
  5278     0173  1903               	skipnz
  5279     0174  025E               	subwf	_timer_20ms,w
  5280     0175  1C03               	skipc
  5281     0176  2978               	goto	u1271
  5282     0177  2979               	goto	u1270
  5283     0178                     u1271:
  5284     0178  29D5               	goto	l722
  5285     0179                     u1270:
  5286     0179                     l3114:
  5287                           
  5288                           ;fall.c: 37:                 setupForFreefall();
  5289     0179  3181  21D6  3181   	fcall	_setupForFreefall
  5290     017C                     l3116:
  5291                           
  5292                           ;fall.c: 38:                 *state = WAITING_FOR_FREEFALL;
  5293     017C  0020               	movlb	0	; select bank0
  5294     017D  0849               	movf	MotionEventHandler@state,w
  5295     017E  0086               	movwf	6
  5296     017F  0187               	clrf	7
  5297     0180  0181               	clrf	1
  5298     0181  29D5               	goto	l722
  5299     0182                     l700:	
  5300                           ;fall.c: 42:         case WAITING_FOR_INACTIVITY:
  5301                           
  5302                           
  5303                           ;fall.c: 44:             if (PORTAbits.RA2) {
  5304     0182  1D0C               	btfss	12,2	;volatile
  5305     0183  2985               	goto	u1281
  5306     0184  2986               	goto	u1280
  5307     0185                     u1281:
  5308     0185  29A9               	goto	l3136
  5309     0186                     u1280:
  5310     0186                     l3118:
  5311                           
  5312                           ;fall.c: 45:                 if (!orientation_Up()) {
  5313     0186  3183  239B  3181   	fcall	_orientation_Up
  5314     0189  3A00               	xorlw	0
  5315     018A  1D03               	skipz
  5316     018B  298D               	goto	u1291
  5317     018C  298E               	goto	u1290
  5318     018D                     u1291:
  5319     018D  2979               	goto	l3114
  5320     018E                     u1290:
  5321     018E                     l703:	
  5322                           ;fall.c: 46:                     do { LATAbits.LATA5 = 1; } while(0);
  5323                           
  5324     018E  0022               	movlb	2	; select bank2
  5325     018F  168C               	bsf	12,5	;volatile
  5326     0190                     l3120:
  5327                           
  5328                           ;fall.c: 47:                     _delay((unsigned long)((100)*(4000000/4000.0)));
  5329     0190  3082               	movlw	130
  5330     0191  0020               	movlb	0	; select bank0
  5331     0192  00CA               	movwf	??_MotionEventHandler
  5332     0193  30DD               	movlw	221
  5333     0194                     u1577:
  5334     0194  0B89               	decfsz	9,f
  5335     0195  2994               	goto	u1577
  5336     0196  0BCA               	decfsz	??_MotionEventHandler,f
  5337     0197  2994               	goto	u1577
  5338     0198  3200               	nop2
  5339     0199                     l3122:
  5340     0199  0022               	movlb	2	; select bank2
  5341     019A  128C               	bcf	12,5	;volatile
  5342     019B                     l3124:
  5343                           
  5344                           ;fall.c: 49:                     orientation_check_timer_20ms = 0;
  5345     019B  0020               	movlb	0	; select bank0
  5346     019C  01DC               	clrf	_orientation_check_timer_20ms
  5347     019D  01DD               	clrf	_orientation_check_timer_20ms+1
  5348     019E                     l3126:
  5349                           
  5350                           ;fall.c: 50:                     good_orientation_count = 0;
  5351     019E  01E0               	clrf	_good_orientation_count
  5352     019F                     l3128:
  5353                           
  5354                           ;fall.c: 51:                     ADXL345_ClearInterrupt();
  5355     019F  318E  26D5  3181   	fcall	_ADXL345_ClearInterrupt
  5356     01A2                     l3130:
  5357                           
  5358                           ;fall.c: 52:                     *state = WAITING_FOR_TIMEOUT;
  5359     01A2  0020               	movlb	0	; select bank0
  5360     01A3  0849               	movf	MotionEventHandler@state,w
  5361     01A4  0086               	movwf	6
  5362     01A5  0187               	clrf	7
  5363     01A6  3003               	movlw	3
  5364     01A7  0081               	movwf	1
  5365                           
  5366                           ;fall.c: 53:                 } else {
  5367     01A8  29D5               	goto	l722
  5368     01A9                     l3136:
  5369     01A9  3000               	movlw	0
  5370     01AA  025F               	subwf	_timer_20ms+1,w
  5371     01AB  30E1               	movlw	225
  5372     01AC  1903               	skipnz
  5373     01AD  025E               	subwf	_timer_20ms,w
  5374     01AE  1C03               	skipc
  5375     01AF  29B1               	goto	u1301
  5376     01B0  29B2               	goto	u1300
  5377     01B1                     u1301:
  5378     01B1  29D5               	goto	l722
  5379     01B2                     u1300:
  5380     01B2  2979               	goto	l3114
  5381     01B3                     l3142:
  5382                           
  5383                           ;fall.c: 68:                 *state = FALL_DETECTED;
  5384     01B3  0849               	movf	MotionEventHandler@state,w
  5385     01B4  0086               	movwf	6
  5386     01B5  0187               	clrf	7
  5387     01B6  3004               	movlw	4
  5388     01B7  0081               	movwf	1
  5389                           
  5390                           ;fall.c: 69:             }
  5391     01B8  29D5               	goto	l722
  5392     01B9                     l3164:
  5393     01B9  0849               	movf	MotionEventHandler@state,w
  5394     01BA  0086               	movwf	6
  5395     01BB  0187               	clrf	7
  5396     01BC  0801               	movf	1,w
  5397     01BD  00CA               	movwf	??_MotionEventHandler
  5398     01BE  01CB               	clrf	??_MotionEventHandler+1
  5399                           
  5400                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5401                           ; Switch size 1, requested type "simple"
  5402                           ; Number of cases is 1, Range of values is 0 to 0
  5403                           ; switch strategies available:
  5404                           ; Name         Instructions Cycles
  5405                           ; simple_byte            4     3 (average)
  5406                           ; direct_byte            8     6 (fixed)
  5407                           ; jumptable            260     6 (fixed)
  5408                           ;	Chosen strategy is simple_byte
  5409     01BF  084B               	movf	??_MotionEventHandler+1,w
  5410     01C0  3A00               	xorlw	0	; case 0
  5411     01C1  1903               	skipnz
  5412     01C2  29C4               	goto	l3308
  5413     01C3  29D5               	goto	l722
  5414     01C4                     l3308:
  5415                           
  5416                           ; Switch size 1, requested type "simple"
  5417                           ; Number of cases is 5, Range of values is 0 to 4
  5418                           ; switch strategies available:
  5419                           ; Name         Instructions Cycles
  5420                           ; direct_byte           16     6 (fixed)
  5421                           ; simple_byte           16     9 (average)
  5422                           ; jumptable            260     6 (fixed)
  5423                           ;	Chosen strategy is simple_byte
  5424     01C4  084A               	movf	??_MotionEventHandler,w
  5425     01C5  3A00               	xorlw	0	; case 0
  5426     01C6  1903               	skipnz
  5427     01C7  2952               	goto	l693
  5428     01C8  3A01               	xorlw	1	; case 1
  5429     01C9  1903               	skipnz
  5430     01CA  2962               	goto	l696
  5431     01CB  3A03               	xorlw	3	; case 2
  5432     01CC  1903               	skipnz
  5433     01CD  2982               	goto	l700
  5434     01CE  3A01               	xorlw	1	; case 3
  5435     01CF  1903               	skipnz
  5436     01D0  29B3               	goto	l3142
  5437     01D1  3A07               	xorlw	7	; case 4
  5438     01D2  1903               	skipnz
  5439     01D3  29D5               	goto	l722
  5440     01D4  29D5               	goto	l722
  5441     01D5                     l722:
  5442     01D5  0008               	return
  5443     01D6                     __end_of_MotionEventHandler:
  5444                           
  5445                           	psect	text18
  5446     0304                     __ptext18:	
  5447 ;; *************** function _setupForInactivity *****************
  5448 ;; Defined at:
  5449 ;;		line 209 in file "ADXL345.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  msg            26    0[BANK0 ] struct Message
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;Total ram usage:       26 bytes
  5468 ;; Hardware stack levels used: 1
  5469 ;; Hardware stack levels required when called: 2
  5470 ;; This function calls:
  5471 ;;		_SPI1_BufferWrite
  5472 ;;		_SPI1_ByteExchange
  5473 ;;		_SPI1_Close
  5474 ;;		_SPI1_Open
  5475 ;;		_memcpy
  5476 ;;		_memset
  5477 ;; This function is called by:
  5478 ;;		_MotionEventHandler
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482     0304                     _setupForInactivity:	
  5483                           ;psect for function _setupForInactivity
  5484                           
  5485     0304                     l2740:	
  5486                           ;incstack = 0
  5487                           ; Regs used in _setupForInactivity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5488                           
  5489                           
  5490                           ;ADXL345.c: 210:     while (!SPI1_Open(ADXL345)) {
  5491     0304  2B08               	goto	l2744
  5492     0305                     l2742:
  5493                           
  5494                           ;ADXL345.c: 211:         SPI1_Close();
  5495     0305  318E  2633  3183   	fcall	_SPI1_Close
  5496     0308                     l2744:
  5497                           
  5498                           ;ADXL345.c: 210:     while (!SPI1_Open(ADXL345)) {
  5499     0308  01F6               	clrf	SPI1_Open@spiConfigIndex
  5500     0309  3180  20DC  3183   	fcall	_SPI1_Open
  5501     030C  3A00               	xorlw	0
  5502     030D  1903               	skipnz
  5503     030E  2B10               	goto	u971
  5504     030F  2B11               	goto	u970
  5505     0310                     u971:
  5506     0310  2B05               	goto	l2742
  5507     0311                     u970:
  5508     0311                     l574:	
  5509                           ;ADXL345.c: 215:     do { LATCbits.LATC4 = 0; } while(0);
  5510                           
  5511     0311  0022               	movlb	2	; select bank2
  5512     0312  120E               	bcf	14,4	;volatile
  5513     0313                     l2746:
  5514                           
  5515                           ;ADXL345.c: 216:     SPI1_ByteExchange(0x30);
  5516     0313  3030               	movlw	48
  5517     0314  00F0               	movwf	SPI1_ByteExchange@byteData
  5518     0315  318E  2677  3183   	fcall	_SPI1_ByteExchange
  5519     0318                     l2748:
  5520     0318  0022               	movlb	2	; select bank2
  5521     0319  160E               	bsf	14,4	;volatile
  5522     031A                     l2750:
  5523                           
  5524                           ;ADXL345.c: 225:     struct Message msg;;ADXL345.c: 226:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5525     031A  3064               	movlw	100
  5526     031B  0020               	movlb	0	; select bank0
  5527     031C  00A0               	movwf	setupForInactivity@msg
  5528     031D                     l2752:
  5529                           
  5530                           ;ADXL345.c: 227:     memset(msg.data, 0, sizeof(msg.data));
  5531     031D  3021               	movlw	low (setupForInactivity@msg+1)
  5532     031E  00F0               	movwf	memset@dest
  5533     031F  3000               	movlw	high (setupForInactivity@msg+1)
  5534     0320  00F1               	movwf	memset@dest+1
  5535     0321  3000               	movlw	0
  5536     0322  00F2               	movwf	memset@c
  5537     0323  00F3               	movwf	memset@c+1
  5538     0324  3019               	movlw	25
  5539     0325  00F4               	movwf	memset@n
  5540     0326  3000               	movlw	0
  5541     0327  00F5               	movwf	memset@n+1
  5542     0328  318E  26BE  3183   	fcall	_memset
  5543     032B                     l2754:
  5544                           
  5545                           ;ADXL345.c: 228:     memcpy(msg.data, no_motion_init, sizeof(no_motion_init));
  5546     032B  3021               	movlw	low (setupForInactivity@msg+1)
  5547     032C  00F0               	movwf	memcpy@d1
  5548     032D  3000               	movlw	high (setupForInactivity@msg+1)
  5549     032E  00F1               	movwf	memcpy@d1+1
  5550     032F  3045               	movlw	low (_no_motion_init| (0+32768))
  5551     0330  00F2               	movwf	memcpy@s1
  5552     0331  3090               	movlw	high (_no_motion_init| (0+32768))
  5553     0332  00F3               	movwf	memcpy@s1+1
  5554     0333  3004               	movlw	4
  5555     0334  00F4               	movwf	memcpy@n
  5556     0335  3000               	movlw	0
  5557     0336  00F5               	movwf	memcpy@n+1
  5558     0337  318F  2788  3183   	fcall	_memcpy
  5559     033A                     l2756:
  5560     033A  0022               	movlb	2	; select bank2
  5561     033B  120E               	bcf	14,4	;volatile
  5562     033C                     l2758:
  5563                           
  5564                           ;ADXL345.c: 230:     SPI1_BufferWrite(&msg, sizeof(no_motion_init) + 1);
  5565     033C  3020               	movlw	low setupForInactivity@msg
  5566     033D  00F0               	movwf	SPI1_BufferWrite@bufferData
  5567     033E  3000               	movlw	high setupForInactivity@msg
  5568     033F  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5569     0340  3005               	movlw	5
  5570     0341  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5571     0342  3000               	movlw	0
  5572     0343  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5573     0344  318F  2746  3183   	fcall	_SPI1_BufferWrite
  5574     0347                     l2760:
  5575     0347  0022               	movlb	2	; select bank2
  5576     0348  160E               	bsf	14,4	;volatile
  5577     0349                     l2762:
  5578                           
  5579                           ;ADXL345.c: 234:     msg.registerAddr = 0x2C;
  5580     0349  302C               	movlw	44
  5581     034A  0020               	movlb	0	; select bank0
  5582     034B  00A0               	movwf	setupForInactivity@msg
  5583     034C                     l2764:
  5584                           
  5585                           ;ADXL345.c: 235:     memset(msg.data, 0, sizeof(msg.data));
  5586     034C  3021               	movlw	low (setupForInactivity@msg+1)
  5587     034D  00F0               	movwf	memset@dest
  5588     034E  3000               	movlw	high (setupForInactivity@msg+1)
  5589     034F  00F1               	movwf	memset@dest+1
  5590     0350  3000               	movlw	0
  5591     0351  00F2               	movwf	memset@c
  5592     0352  00F3               	movwf	memset@c+1
  5593     0353  3019               	movlw	25
  5594     0354  00F4               	movwf	memset@n
  5595     0355  3000               	movlw	0
  5596     0356  00F5               	movwf	memset@n+1
  5597     0357  318E  26BE  3183   	fcall	_memset
  5598     035A                     l2766:
  5599                           
  5600                           ;ADXL345.c: 236:     msg.data[0] = 0x17;
  5601     035A  3017               	movlw	23
  5602     035B  0020               	movlb	0	; select bank0
  5603     035C  00A1               	movwf	setupForInactivity@msg+1
  5604     035D                     l2768:
  5605     035D  0022               	movlb	2	; select bank2
  5606     035E  120E               	bcf	14,4	;volatile
  5607     035F                     l2770:
  5608                           
  5609                           ;ADXL345.c: 238:     SPI1_BufferWrite(&msg, 2);
  5610     035F  3020               	movlw	low setupForInactivity@msg
  5611     0360  00F0               	movwf	SPI1_BufferWrite@bufferData
  5612     0361  3000               	movlw	high setupForInactivity@msg
  5613     0362  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5614     0363  3002               	movlw	2
  5615     0364  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5616     0365  3000               	movlw	0
  5617     0366  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5618     0367  318F  2746  3183   	fcall	_SPI1_BufferWrite
  5619     036A                     l2772:
  5620     036A  0022               	movlb	2	; select bank2
  5621     036B  160E               	bsf	14,4	;volatile
  5622     036C                     l2774:
  5623                           
  5624                           ;ADXL345.c: 242:     msg.registerAddr = 0x2E;
  5625     036C  302E               	movlw	46
  5626     036D  0020               	movlb	0	; select bank0
  5627     036E  00A0               	movwf	setupForInactivity@msg
  5628     036F                     l2776:
  5629                           
  5630                           ;ADXL345.c: 243:     memset(msg.data, 0, sizeof(msg.data));
  5631     036F  3021               	movlw	low (setupForInactivity@msg+1)
  5632     0370  00F0               	movwf	memset@dest
  5633     0371  3000               	movlw	high (setupForInactivity@msg+1)
  5634     0372  00F1               	movwf	memset@dest+1
  5635     0373  3000               	movlw	0
  5636     0374  00F2               	movwf	memset@c
  5637     0375  00F3               	movwf	memset@c+1
  5638     0376  3019               	movlw	25
  5639     0377  00F4               	movwf	memset@n
  5640     0378  3000               	movlw	0
  5641     0379  00F5               	movwf	memset@n+1
  5642     037A  318E  26BE  3183   	fcall	_memset
  5643     037D                     l2778:
  5644                           
  5645                           ;ADXL345.c: 244:     msg.data[0] = 0x08;
  5646     037D  3008               	movlw	8
  5647     037E  0020               	movlb	0	; select bank0
  5648     037F  00A1               	movwf	setupForInactivity@msg+1
  5649     0380                     l2780:
  5650     0380  0022               	movlb	2	; select bank2
  5651     0381  120E               	bcf	14,4	;volatile
  5652     0382                     l2782:
  5653                           
  5654                           ;ADXL345.c: 246:     SPI1_BufferWrite(&msg, 2);
  5655     0382  3020               	movlw	low setupForInactivity@msg
  5656     0383  00F0               	movwf	SPI1_BufferWrite@bufferData
  5657     0384  3000               	movlw	high setupForInactivity@msg
  5658     0385  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5659     0386  3002               	movlw	2
  5660     0387  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5661     0388  3000               	movlw	0
  5662     0389  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5663     038A  318F  2746  3183   	fcall	_SPI1_BufferWrite
  5664     038D                     l2784:
  5665     038D  0022               	movlb	2	; select bank2
  5666     038E  160E               	bsf	14,4	;volatile
  5667     038F                     l2786:
  5668     038F  120E               	bcf	14,4	;volatile
  5669     0390                     l2788:
  5670                           
  5671                           ;ADXL345.c: 251:     SPI1_ByteExchange(0x30);
  5672     0390  3030               	movlw	48
  5673     0391  00F0               	movwf	SPI1_ByteExchange@byteData
  5674     0392  318E  2677  3183   	fcall	_SPI1_ByteExchange
  5675     0395                     l2790:
  5676     0395  0022               	movlb	2	; select bank2
  5677     0396  160E               	bsf	14,4	;volatile
  5678     0397                     l2792:
  5679                           
  5680                           ;ADXL345.c: 254:     SPI1_Close();
  5681     0397  318E  2633  3183   	fcall	_SPI1_Close
  5682     039A                     l594:
  5683     039A  0008               	return
  5684     039B                     __end_of_setupForInactivity:
  5685                           
  5686                           	psect	text19
  5687     026D                     __ptext19:	
  5688 ;; *************** function _setupForImpact *****************
  5689 ;; Defined at:
  5690 ;;		line 161 in file "ADXL345.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  msg            26    0[BANK0 ] struct Message
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:       26 bytes
  5709 ;; Hardware stack levels used: 1
  5710 ;; Hardware stack levels required when called: 2
  5711 ;; This function calls:
  5712 ;;		_SPI1_BufferWrite
  5713 ;;		_SPI1_ByteExchange
  5714 ;;		_SPI1_Close
  5715 ;;		_SPI1_Open
  5716 ;;		_memcpy
  5717 ;;		_memset
  5718 ;; This function is called by:
  5719 ;;		_MotionEventHandler
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723     026D                     _setupForImpact:	
  5724                           ;psect for function _setupForImpact
  5725                           
  5726     026D                     l2686:	
  5727                           ;incstack = 0
  5728                           ; Regs used in _setupForImpact: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5729                           
  5730                           
  5731                           ;ADXL345.c: 162:     while (!SPI1_Open(ADXL345)) {
  5732     026D  2A71               	goto	l2690
  5733     026E                     l2688:
  5734                           
  5735                           ;ADXL345.c: 163:         SPI1_Close();
  5736     026E  318E  2633  3182   	fcall	_SPI1_Close
  5737     0271                     l2690:
  5738                           
  5739                           ;ADXL345.c: 162:     while (!SPI1_Open(ADXL345)) {
  5740     0271  01F6               	clrf	SPI1_Open@spiConfigIndex
  5741     0272  3180  20DC  3182   	fcall	_SPI1_Open
  5742     0275  3A00               	xorlw	0
  5743     0276  1903               	skipnz
  5744     0277  2A79               	goto	u961
  5745     0278  2A7A               	goto	u960
  5746     0279                     u961:
  5747     0279  2A6E               	goto	l2688
  5748     027A                     u960:
  5749     027A                     l548:	
  5750                           ;ADXL345.c: 167:     do { LATCbits.LATC4 = 0; } while(0);
  5751                           
  5752     027A  0022               	movlb	2	; select bank2
  5753     027B  120E               	bcf	14,4	;volatile
  5754     027C                     l2692:
  5755                           
  5756                           ;ADXL345.c: 168:     SPI1_ByteExchange(0x30);
  5757     027C  3030               	movlw	48
  5758     027D  00F0               	movwf	SPI1_ByteExchange@byteData
  5759     027E  318E  2677  3182   	fcall	_SPI1_ByteExchange
  5760     0281                     l2694:
  5761     0281  0022               	movlb	2	; select bank2
  5762     0282  160E               	bsf	14,4	;volatile
  5763     0283                     l2696:
  5764                           
  5765                           ;ADXL345.c: 177:     struct Message msg;;ADXL345.c: 178:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5766     0283  3064               	movlw	100
  5767     0284  0020               	movlb	0	; select bank0
  5768     0285  00A0               	movwf	setupForImpact@msg
  5769     0286                     l2698:
  5770                           
  5771                           ;ADXL345.c: 179:     memset(msg.data, 0, sizeof(msg.data));
  5772     0286  3021               	movlw	low (setupForImpact@msg+1)
  5773     0287  00F0               	movwf	memset@dest
  5774     0288  3000               	movlw	high (setupForImpact@msg+1)
  5775     0289  00F1               	movwf	memset@dest+1
  5776     028A  3000               	movlw	0
  5777     028B  00F2               	movwf	memset@c
  5778     028C  00F3               	movwf	memset@c+1
  5779     028D  3019               	movlw	25
  5780     028E  00F4               	movwf	memset@n
  5781     028F  3000               	movlw	0
  5782     0290  00F5               	movwf	memset@n+1
  5783     0291  318E  26BE  3182   	fcall	_memset
  5784     0294                     l2700:
  5785                           
  5786                           ;ADXL345.c: 180:     memcpy(msg.data, impact_init, sizeof(impact_init));
  5787     0294  3021               	movlw	low (setupForImpact@msg+1)
  5788     0295  00F0               	movwf	memcpy@d1
  5789     0296  3000               	movlw	high (setupForImpact@msg+1)
  5790     0297  00F1               	movwf	memcpy@d1+1
  5791     0298  3049               	movlw	low (_impact_init| (0+32768))
  5792     0299  00F2               	movwf	memcpy@s1
  5793     029A  3090               	movlw	high (_impact_init| (0+32768))
  5794     029B  00F3               	movwf	memcpy@s1+1
  5795     029C  3004               	movlw	4
  5796     029D  00F4               	movwf	memcpy@n
  5797     029E  3000               	movlw	0
  5798     029F  00F5               	movwf	memcpy@n+1
  5799     02A0  318F  2788  3182   	fcall	_memcpy
  5800     02A3                     l2702:
  5801     02A3  0022               	movlb	2	; select bank2
  5802     02A4  120E               	bcf	14,4	;volatile
  5803     02A5                     l2704:
  5804                           
  5805                           ;ADXL345.c: 182:     SPI1_BufferWrite(&msg, sizeof(impact_init) + 1);
  5806     02A5  3020               	movlw	low setupForImpact@msg
  5807     02A6  00F0               	movwf	SPI1_BufferWrite@bufferData
  5808     02A7  3000               	movlw	high setupForImpact@msg
  5809     02A8  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5810     02A9  3005               	movlw	5
  5811     02AA  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5812     02AB  3000               	movlw	0
  5813     02AC  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5814     02AD  318F  2746  3182   	fcall	_SPI1_BufferWrite
  5815     02B0                     l2706:
  5816     02B0  0022               	movlb	2	; select bank2
  5817     02B1  160E               	bsf	14,4	;volatile
  5818     02B2                     l2708:
  5819                           
  5820                           ;ADXL345.c: 186:     msg.registerAddr = 0x2C;
  5821     02B2  302C               	movlw	44
  5822     02B3  0020               	movlb	0	; select bank0
  5823     02B4  00A0               	movwf	setupForImpact@msg
  5824     02B5                     l2710:
  5825                           
  5826                           ;ADXL345.c: 187:     memset(msg.data, 0, sizeof(msg.data));
  5827     02B5  3021               	movlw	low (setupForImpact@msg+1)
  5828     02B6  00F0               	movwf	memset@dest
  5829     02B7  3000               	movlw	high (setupForImpact@msg+1)
  5830     02B8  00F1               	movwf	memset@dest+1
  5831     02B9  3000               	movlw	0
  5832     02BA  00F2               	movwf	memset@c
  5833     02BB  00F3               	movwf	memset@c+1
  5834     02BC  3019               	movlw	25
  5835     02BD  00F4               	movwf	memset@n
  5836     02BE  3000               	movlw	0
  5837     02BF  00F5               	movwf	memset@n+1
  5838     02C0  318E  26BE  3182   	fcall	_memset
  5839     02C3                     l2712:
  5840                           
  5841                           ;ADXL345.c: 188:     msg.data[0] = 0x1A;
  5842     02C3  301A               	movlw	26
  5843     02C4  0020               	movlb	0	; select bank0
  5844     02C5  00A1               	movwf	setupForImpact@msg+1
  5845     02C6                     l2714:
  5846     02C6  0022               	movlb	2	; select bank2
  5847     02C7  120E               	bcf	14,4	;volatile
  5848     02C8                     l2716:
  5849                           
  5850                           ;ADXL345.c: 190:     SPI1_BufferWrite(&msg, 2);
  5851     02C8  3020               	movlw	low setupForImpact@msg
  5852     02C9  00F0               	movwf	SPI1_BufferWrite@bufferData
  5853     02CA  3000               	movlw	high setupForImpact@msg
  5854     02CB  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5855     02CC  3002               	movlw	2
  5856     02CD  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5857     02CE  3000               	movlw	0
  5858     02CF  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5859     02D0  318F  2746  3182   	fcall	_SPI1_BufferWrite
  5860     02D3                     l2718:
  5861     02D3  0022               	movlb	2	; select bank2
  5862     02D4  160E               	bsf	14,4	;volatile
  5863     02D5                     l2720:
  5864                           
  5865                           ;ADXL345.c: 194:     msg.registerAddr = 0x2E;
  5866     02D5  302E               	movlw	46
  5867     02D6  0020               	movlb	0	; select bank0
  5868     02D7  00A0               	movwf	setupForImpact@msg
  5869     02D8                     l2722:
  5870                           
  5871                           ;ADXL345.c: 195:     memset(msg.data, 0, sizeof(msg.data));
  5872     02D8  3021               	movlw	low (setupForImpact@msg+1)
  5873     02D9  00F0               	movwf	memset@dest
  5874     02DA  3000               	movlw	high (setupForImpact@msg+1)
  5875     02DB  00F1               	movwf	memset@dest+1
  5876     02DC  3000               	movlw	0
  5877     02DD  00F2               	movwf	memset@c
  5878     02DE  00F3               	movwf	memset@c+1
  5879     02DF  3019               	movlw	25
  5880     02E0  00F4               	movwf	memset@n
  5881     02E1  3000               	movlw	0
  5882     02E2  00F5               	movwf	memset@n+1
  5883     02E3  318E  26BE  3182   	fcall	_memset
  5884     02E6                     l2724:
  5885                           
  5886                           ;ADXL345.c: 196:     msg.data[0] = 0x04;
  5887     02E6  3004               	movlw	4
  5888     02E7  0020               	movlb	0	; select bank0
  5889     02E8  00A1               	movwf	setupForImpact@msg+1
  5890     02E9                     l2726:
  5891     02E9  0022               	movlb	2	; select bank2
  5892     02EA  120E               	bcf	14,4	;volatile
  5893     02EB                     l2728:
  5894                           
  5895                           ;ADXL345.c: 198:     SPI1_BufferWrite(&msg, 2);
  5896     02EB  3020               	movlw	low setupForImpact@msg
  5897     02EC  00F0               	movwf	SPI1_BufferWrite@bufferData
  5898     02ED  3000               	movlw	high setupForImpact@msg
  5899     02EE  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5900     02EF  3002               	movlw	2
  5901     02F0  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5902     02F1  3000               	movlw	0
  5903     02F2  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5904     02F3  318F  2746  3182   	fcall	_SPI1_BufferWrite
  5905     02F6                     l2730:
  5906     02F6  0022               	movlb	2	; select bank2
  5907     02F7  160E               	bsf	14,4	;volatile
  5908     02F8                     l2732:
  5909     02F8  120E               	bcf	14,4	;volatile
  5910     02F9                     l2734:
  5911                           
  5912                           ;ADXL345.c: 203:     SPI1_ByteExchange(0x30);
  5913     02F9  3030               	movlw	48
  5914     02FA  00F0               	movwf	SPI1_ByteExchange@byteData
  5915     02FB  318E  2677  3182   	fcall	_SPI1_ByteExchange
  5916     02FE                     l2736:
  5917     02FE  0022               	movlb	2	; select bank2
  5918     02FF  160E               	bsf	14,4	;volatile
  5919     0300                     l2738:
  5920                           
  5921                           ;ADXL345.c: 206:     SPI1_Close();
  5922     0300  318E  2633  3182   	fcall	_SPI1_Close
  5923     0303                     l568:
  5924     0303  0008               	return
  5925     0304                     __end_of_setupForImpact:
  5926                           
  5927                           	psect	text20
  5928     01D6                     __ptext20:	
  5929 ;; *************** function _setupForFreefall *****************
  5930 ;; Defined at:
  5931 ;;		line 113 in file "ADXL345.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  msg            26    0[BANK0 ] struct Message
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;Total ram usage:       26 bytes
  5950 ;; Hardware stack levels used: 1
  5951 ;; Hardware stack levels required when called: 2
  5952 ;; This function calls:
  5953 ;;		_SPI1_BufferWrite
  5954 ;;		_SPI1_ByteExchange
  5955 ;;		_SPI1_Close
  5956 ;;		_SPI1_Open
  5957 ;;		_memcpy
  5958 ;;		_memset
  5959 ;; This function is called by:
  5960 ;;		_MotionEventHandler
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964     01D6                     _setupForFreefall:	
  5965                           ;psect for function _setupForFreefall
  5966                           
  5967     01D6                     l2632:	
  5968                           ;incstack = 0
  5969                           ; Regs used in _setupForFreefall: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5970                           
  5971                           
  5972                           ;ADXL345.c: 114:     while (!SPI1_Open(ADXL345)) {
  5973     01D6  29DA               	goto	l2636
  5974     01D7                     l2634:
  5975                           
  5976                           ;ADXL345.c: 115:         SPI1_Close();
  5977     01D7  318E  2633  3181   	fcall	_SPI1_Close
  5978     01DA                     l2636:
  5979                           
  5980                           ;ADXL345.c: 114:     while (!SPI1_Open(ADXL345)) {
  5981     01DA  01F6               	clrf	SPI1_Open@spiConfigIndex
  5982     01DB  3180  20DC  3181   	fcall	_SPI1_Open
  5983     01DE  3A00               	xorlw	0
  5984     01DF  1903               	skipnz
  5985     01E0  29E2               	goto	u951
  5986     01E1  29E3               	goto	u950
  5987     01E2                     u951:
  5988     01E2  29D7               	goto	l2634
  5989     01E3                     u950:
  5990     01E3                     l522:	
  5991                           ;ADXL345.c: 119:     do { LATCbits.LATC4 = 0; } while(0);
  5992                           
  5993     01E3  0022               	movlb	2	; select bank2
  5994     01E4  120E               	bcf	14,4	;volatile
  5995     01E5                     l2638:
  5996                           
  5997                           ;ADXL345.c: 120:     SPI1_ByteExchange(0x30);
  5998     01E5  3030               	movlw	48
  5999     01E6  00F0               	movwf	SPI1_ByteExchange@byteData
  6000     01E7  318E  2677  3181   	fcall	_SPI1_ByteExchange
  6001     01EA                     l2640:
  6002     01EA  0022               	movlb	2	; select bank2
  6003     01EB  160E               	bsf	14,4	;volatile
  6004     01EC                     l2642:
  6005                           
  6006                           ;ADXL345.c: 129:     struct Message msg;;ADXL345.c: 130:     msg.registerAddr = 0x24 | 0
      +                          x40;
  6007     01EC  3064               	movlw	100
  6008     01ED  0020               	movlb	0	; select bank0
  6009     01EE  00A0               	movwf	setupForFreefall@msg
  6010     01EF                     l2644:
  6011                           
  6012                           ;ADXL345.c: 131:     memset(msg.data, 0, sizeof(msg.data));
  6013     01EF  3021               	movlw	low (setupForFreefall@msg+1)
  6014     01F0  00F0               	movwf	memset@dest
  6015     01F1  3000               	movlw	high (setupForFreefall@msg+1)
  6016     01F2  00F1               	movwf	memset@dest+1
  6017     01F3  3000               	movlw	0
  6018     01F4  00F2               	movwf	memset@c
  6019     01F5  00F3               	movwf	memset@c+1
  6020     01F6  3019               	movlw	25
  6021     01F7  00F4               	movwf	memset@n
  6022     01F8  3000               	movlw	0
  6023     01F9  00F5               	movwf	memset@n+1
  6024     01FA  318E  26BE  3181   	fcall	_memset
  6025     01FD                     l2646:
  6026                           
  6027                           ;ADXL345.c: 132:     memcpy(msg.data, fall_init, sizeof(fall_init));
  6028     01FD  3021               	movlw	low (setupForFreefall@msg+1)
  6029     01FE  00F0               	movwf	memcpy@d1
  6030     01FF  3000               	movlw	high (setupForFreefall@msg+1)
  6031     0200  00F1               	movwf	memcpy@d1+1
  6032     0201  304D               	movlw	low (_fall_init| (0+32768))
  6033     0202  00F2               	movwf	memcpy@s1
  6034     0203  3090               	movlw	high (_fall_init| (0+32768))
  6035     0204  00F3               	movwf	memcpy@s1+1
  6036     0205  3004               	movlw	4
  6037     0206  00F4               	movwf	memcpy@n
  6038     0207  3000               	movlw	0
  6039     0208  00F5               	movwf	memcpy@n+1
  6040     0209  318F  2788  3181   	fcall	_memcpy
  6041     020C                     l2648:
  6042     020C  0022               	movlb	2	; select bank2
  6043     020D  120E               	bcf	14,4	;volatile
  6044     020E                     l2650:
  6045                           
  6046                           ;ADXL345.c: 134:     SPI1_BufferWrite(&msg, sizeof(fall_init) + 1);
  6047     020E  3020               	movlw	low setupForFreefall@msg
  6048     020F  00F0               	movwf	SPI1_BufferWrite@bufferData
  6049     0210  3000               	movlw	high setupForFreefall@msg
  6050     0211  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6051     0212  3005               	movlw	5
  6052     0213  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6053     0214  3000               	movlw	0
  6054     0215  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6055     0216  318F  2746  3181   	fcall	_SPI1_BufferWrite
  6056     0219                     l2652:
  6057     0219  0022               	movlb	2	; select bank2
  6058     021A  160E               	bsf	14,4	;volatile
  6059     021B                     l2654:
  6060                           
  6061                           ;ADXL345.c: 138:     msg.registerAddr = 0x2C;
  6062     021B  302C               	movlw	44
  6063     021C  0020               	movlb	0	; select bank0
  6064     021D  00A0               	movwf	setupForFreefall@msg
  6065     021E                     l2656:
  6066                           
  6067                           ;ADXL345.c: 139:     memset(msg.data, 0, sizeof(msg.data));
  6068     021E  3021               	movlw	low (setupForFreefall@msg+1)
  6069     021F  00F0               	movwf	memset@dest
  6070     0220  3000               	movlw	high (setupForFreefall@msg+1)
  6071     0221  00F1               	movwf	memset@dest+1
  6072     0222  3000               	movlw	0
  6073     0223  00F2               	movwf	memset@c
  6074     0224  00F3               	movwf	memset@c+1
  6075     0225  3019               	movlw	25
  6076     0226  00F4               	movwf	memset@n
  6077     0227  3000               	movlw	0
  6078     0228  00F5               	movwf	memset@n+1
  6079     0229  318E  26BE  3181   	fcall	_memset
  6080     022C                     l2658:
  6081                           
  6082                           ;ADXL345.c: 140:     msg.data[0] = 0x17;
  6083     022C  3017               	movlw	23
  6084     022D  0020               	movlb	0	; select bank0
  6085     022E  00A1               	movwf	setupForFreefall@msg+1
  6086     022F                     l2660:
  6087     022F  0022               	movlb	2	; select bank2
  6088     0230  120E               	bcf	14,4	;volatile
  6089     0231                     l2662:
  6090                           
  6091                           ;ADXL345.c: 142:     SPI1_BufferWrite(&msg, 2);
  6092     0231  3020               	movlw	low setupForFreefall@msg
  6093     0232  00F0               	movwf	SPI1_BufferWrite@bufferData
  6094     0233  3000               	movlw	high setupForFreefall@msg
  6095     0234  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6096     0235  3002               	movlw	2
  6097     0236  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6098     0237  3000               	movlw	0
  6099     0238  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6100     0239  318F  2746  3181   	fcall	_SPI1_BufferWrite
  6101     023C                     l2664:
  6102     023C  0022               	movlb	2	; select bank2
  6103     023D  160E               	bsf	14,4	;volatile
  6104     023E                     l2666:
  6105                           
  6106                           ;ADXL345.c: 146:     msg.registerAddr = 0x2E;
  6107     023E  302E               	movlw	46
  6108     023F  0020               	movlb	0	; select bank0
  6109     0240  00A0               	movwf	setupForFreefall@msg
  6110     0241                     l2668:
  6111                           
  6112                           ;ADXL345.c: 147:     memset(msg.data, 0, sizeof(msg.data));
  6113     0241  3021               	movlw	low (setupForFreefall@msg+1)
  6114     0242  00F0               	movwf	memset@dest
  6115     0243  3000               	movlw	high (setupForFreefall@msg+1)
  6116     0244  00F1               	movwf	memset@dest+1
  6117     0245  3000               	movlw	0
  6118     0246  00F2               	movwf	memset@c
  6119     0247  00F3               	movwf	memset@c+1
  6120     0248  3019               	movlw	25
  6121     0249  00F4               	movwf	memset@n
  6122     024A  3000               	movlw	0
  6123     024B  00F5               	movwf	memset@n+1
  6124     024C  318E  26BE  3181   	fcall	_memset
  6125     024F                     l2670:
  6126                           
  6127                           ;ADXL345.c: 148:     msg.data[0] = 0x10;
  6128     024F  3010               	movlw	16
  6129     0250  0020               	movlb	0	; select bank0
  6130     0251  00A1               	movwf	setupForFreefall@msg+1
  6131     0252                     l2672:
  6132     0252  0022               	movlb	2	; select bank2
  6133     0253  120E               	bcf	14,4	;volatile
  6134     0254                     l2674:
  6135                           
  6136                           ;ADXL345.c: 150:     SPI1_BufferWrite(&msg, 2);
  6137     0254  3020               	movlw	low setupForFreefall@msg
  6138     0255  00F0               	movwf	SPI1_BufferWrite@bufferData
  6139     0256  3000               	movlw	high setupForFreefall@msg
  6140     0257  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6141     0258  3002               	movlw	2
  6142     0259  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6143     025A  3000               	movlw	0
  6144     025B  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6145     025C  318F  2746  3181   	fcall	_SPI1_BufferWrite
  6146     025F                     l2676:
  6147     025F  0022               	movlb	2	; select bank2
  6148     0260  160E               	bsf	14,4	;volatile
  6149     0261                     l2678:
  6150     0261  120E               	bcf	14,4	;volatile
  6151     0262                     l2680:
  6152                           
  6153                           ;ADXL345.c: 155:     SPI1_ByteExchange(0x30);
  6154     0262  3030               	movlw	48
  6155     0263  00F0               	movwf	SPI1_ByteExchange@byteData
  6156     0264  318E  2677  3181   	fcall	_SPI1_ByteExchange
  6157     0267                     l2682:
  6158     0267  0022               	movlb	2	; select bank2
  6159     0268  160E               	bsf	14,4	;volatile
  6160     0269                     l2684:
  6161                           
  6162                           ;ADXL345.c: 158:     SPI1_Close();
  6163     0269  318E  2633  3181   	fcall	_SPI1_Close
  6164     026C                     l542:
  6165     026C  0008               	return
  6166     026D                     __end_of_setupForFreefall:
  6167                           
  6168                           	psect	text21
  6169     039B                     __ptext21:	
  6170 ;; *************** function _orientation_Up *****************
  6171 ;; Defined at:
  6172 ;;		line 257 in file "ADXL345.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  msg            26    8[BANK0 ] struct Message
  6177 ;;  acc_data        6    0[BANK0 ] char [6]
  6178 ;;  g_deltaZ        2   39[BANK0 ] short 
  6179 ;;  g_deltaY        2   37[BANK0 ] short 
  6180 ;;  g_deltaX        2   35[BANK0 ] short 
  6181 ;;  g_magnitude     2    6[BANK0 ] int 
  6182 ;;  addr_val        1   34[BANK0 ] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      _Bool 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Locals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Totals:         2      41       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;Total ram usage:       43 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; Hardware stack levels required when called: 2
  6199 ;; This function calls:
  6200 ;;		_SPI1_BufferRead
  6201 ;;		_SPI1_BufferWrite
  6202 ;;		_SPI1_ByteWrite
  6203 ;;		_SPI1_Close
  6204 ;;		_SPI1_Open
  6205 ;;		___wmul
  6206 ;; This function is called by:
  6207 ;;		_MotionEventHandler
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211     039B                     _orientation_Up:	
  6212                           ;psect for function _orientation_Up
  6213                           
  6214     039B                     l2794:	
  6215                           ;incstack = 0
  6216                           ; Regs used in _orientation_Up: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6217                           
  6218                           
  6219                           ;ADXL345.c: 258:     while (!SPI1_Open(ADXL345)) {
  6220     039B  2B9F               	goto	l2798
  6221     039C                     l2796:
  6222                           
  6223                           ;ADXL345.c: 259:         SPI1_Close();
  6224     039C  318E  2633  3183   	fcall	_SPI1_Close
  6225     039F                     l2798:
  6226                           
  6227                           ;ADXL345.c: 258:     while (!SPI1_Open(ADXL345)) {
  6228     039F  01F6               	clrf	SPI1_Open@spiConfigIndex
  6229     03A0  3180  20DC  3183   	fcall	_SPI1_Open
  6230     03A3  3A00               	xorlw	0
  6231     03A4  1903               	skipnz
  6232     03A5  2BA7               	goto	u981
  6233     03A6  2BA8               	goto	u980
  6234     03A7                     u981:
  6235     03A7  2B9C               	goto	l2796
  6236     03A8                     u980:
  6237     03A8                     l2800:
  6238                           
  6239                           ;ADXL345.c: 261:     int8_t acc_data[6] = {0};
  6240     03A8  3020               	movlw	low orientation_Up@acc_data
  6241     03A9  0086               	movwf	6
  6242     03AA  3000               	movlw	high orientation_Up@acc_data
  6243     03AB  0087               	movwf	7
  6244     03AC  3006               	movlw	6
  6245     03AD  00FA               	movwf	??_orientation_Up
  6246     03AE  3000               	movlw	0
  6247     03AF                     u990:
  6248     03AF  001E               	movwi fsr1++
  6249     03B0  0BFA               	decfsz	??_orientation_Up,f
  6250     03B1  2BAF               	goto	u990
  6251     03B2                     l2802:
  6252                           
  6253                           ;ADXL345.c: 262:     int16_t g_deltaX, g_deltaY, g_deltaZ;;ADXL345.c: 264:     struct Me
      +                          ssage msg;;ADXL345.c: 265:     msg.registerAddr = 0x31;
  6254     03B2  3031               	movlw	49
  6255     03B3  0020               	movlb	0	; select bank0
  6256     03B4  00A8               	movwf	orientation_Up@msg
  6257     03B5                     l2804:
  6258                           
  6259                           ;ADXL345.c: 266:     msg.data[0] = 0x0C;
  6260     03B5  300C               	movlw	12
  6261     03B6  00A9               	movwf	orientation_Up@msg+1
  6262     03B7                     l2806:
  6263     03B7  0022               	movlb	2	; select bank2
  6264     03B8  120E               	bcf	14,4	;volatile
  6265     03B9                     l2808:
  6266                           
  6267                           ;ADXL345.c: 268:     SPI1_BufferWrite(&msg, 2);
  6268     03B9  3028               	movlw	low orientation_Up@msg
  6269     03BA  00F0               	movwf	SPI1_BufferWrite@bufferData
  6270     03BB  3000               	movlw	high orientation_Up@msg
  6271     03BC  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6272     03BD  3002               	movlw	2
  6273     03BE  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6274     03BF  3000               	movlw	0
  6275     03C0  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6276     03C1  318F  2746  3183   	fcall	_SPI1_BufferWrite
  6277     03C4                     l2810:
  6278     03C4  0022               	movlb	2	; select bank2
  6279     03C5  160E               	bsf	14,4	;volatile
  6280     03C6                     l2812:
  6281                           
  6282                           ;ADXL345.c: 271:     _delay((unsigned long)((10)*(4000000/4000.0)));
  6283     03C6  300D               	movlw	13
  6284     03C7  00FA               	movwf	??_orientation_Up
  6285     03C8  30FC               	movlw	252
  6286     03C9                     u1587:
  6287     03C9  0B89               	decfsz	9,f
  6288     03CA  2BC9               	goto	u1587
  6289     03CB  0BFA               	decfsz	??_orientation_Up,f
  6290     03CC  2BC9               	goto	u1587
  6291     03CD                     l2814:
  6292     03CD  0022               	movlb	2	; select bank2
  6293     03CE  120E               	bcf	14,4	;volatile
  6294     03CF                     l2816:
  6295                           
  6296                           ;ADXL345.c: 275:     uint8_t addr_val = 0x32 | 0x80;
  6297     03CF  30B2               	movlw	178
  6298     03D0  0020               	movlb	0	; select bank0
  6299     03D1  00C2               	movwf	orientation_Up@addr_val
  6300     03D2                     l2818:
  6301                           
  6302                           ;ADXL345.c: 276:     addr_val = addr_val | 0x40;
  6303     03D2  0842               	movf	orientation_Up@addr_val,w
  6304     03D3  3840               	iorlw	64
  6305     03D4  00C2               	movwf	orientation_Up@addr_val
  6306     03D5                     l2820:
  6307                           
  6308                           ;ADXL345.c: 277:     SPI1_ByteWrite(addr_val);
  6309     03D5  0842               	movf	orientation_Up@addr_val,w
  6310     03D6  00F0               	movwf	SPI1_ByteWrite@byteData
  6311     03D7  318E  2639  3183   	fcall	_SPI1_ByteWrite
  6312     03DA                     l2822:
  6313                           
  6314                           ;ADXL345.c: 278:     SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  6315     03DA  3020               	movlw	(low (orientation_Up@acc_data| 0))& (0+255)
  6316     03DB  00F0               	movwf	SPI1_BufferRead@bufferData
  6317     03DC  3006               	movlw	6
  6318     03DD  00F1               	movwf	SPI1_BufferRead@bufferSize
  6319     03DE  3000               	movlw	0
  6320     03DF  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  6321     03E0  318F  2766  3183   	fcall	_SPI1_BufferRead
  6322     03E3                     l2824:
  6323     03E3  0022               	movlb	2	; select bank2
  6324     03E4  160E               	bsf	14,4	;volatile
  6325     03E5                     l2826:
  6326                           
  6327                           ;ADXL345.c: 280:     SPI1_Close();
  6328     03E5  318E  2633  3183   	fcall	_SPI1_Close
  6329     03E8                     l2828:
  6330                           
  6331                           ;ADXL345.c: 283:     g_deltaX = (int8_t)acc_data[1] - 0x40;
  6332     03E8  0020               	movlb	0	; select bank0
  6333     03E9  0821               	movf	orientation_Up@acc_data+1,w
  6334     03EA  00FA               	movwf	??_orientation_Up
  6335     03EB  01FB               	clrf	??_orientation_Up+1
  6336     03EC  1BFA               	btfsc	??_orientation_Up,7
  6337     03ED  03FB               	decf	??_orientation_Up+1,f
  6338     03EE  087A               	movf	??_orientation_Up,w
  6339     03EF  3EC0               	addlw	192
  6340     03F0  00C3               	movwf	orientation_Up@g_deltaX
  6341     03F1  30FF               	movlw	255
  6342     03F2  3D7B               	addwfc	??_orientation_Up+1,w
  6343     03F3  00C4               	movwf	orientation_Up@g_deltaX+1
  6344     03F4                     l2830:
  6345                           
  6346                           ;ADXL345.c: 284:     g_deltaY = (int8_t)acc_data[3];
  6347     03F4  0823               	movf	orientation_Up@acc_data+3,w
  6348     03F5  00C5               	movwf	orientation_Up@g_deltaY
  6349     03F6  01C6               	clrf	orientation_Up@g_deltaY+1
  6350     03F7  1BC5               	btfsc	orientation_Up@g_deltaY,7
  6351     03F8  03C6               	decf	orientation_Up@g_deltaY+1,f
  6352     03F9                     l2832:
  6353                           
  6354                           ;ADXL345.c: 285:     g_deltaZ = (int8_t)acc_data[5];
  6355     03F9  0825               	movf	orientation_Up@acc_data+5,w
  6356     03FA  00C7               	movwf	orientation_Up@g_deltaZ
  6357     03FB  01C8               	clrf	orientation_Up@g_deltaZ+1
  6358     03FC  1BC7               	btfsc	orientation_Up@g_deltaZ,7
  6359     03FD  03C8               	decf	orientation_Up@g_deltaZ+1,f
  6360     03FE                     l2834:
  6361                           
  6362                           ;ADXL345.c: 288:     g_deltaX *= g_deltaX;
  6363     03FE  0844               	movf	orientation_Up@g_deltaX+1,w
  6364     03FF  00F1               	movwf	___wmul@multiplier+1
  6365     0400  0843               	movf	orientation_Up@g_deltaX,w
  6366     0401  00F0               	movwf	___wmul@multiplier
  6367     0402  0844               	movf	orientation_Up@g_deltaX+1,w
  6368     0403  00F3               	movwf	___wmul@multiplicand+1
  6369     0404  0843               	movf	orientation_Up@g_deltaX,w
  6370     0405  00F2               	movwf	___wmul@multiplicand
  6371     0406  318F  2727  3183   	fcall	___wmul
  6372     0409  0871               	movf	?___wmul+1,w
  6373     040A  0020               	movlb	0	; select bank0
  6374     040B  00C4               	movwf	orientation_Up@g_deltaX+1
  6375     040C  0870               	movf	?___wmul,w
  6376     040D  00C3               	movwf	orientation_Up@g_deltaX
  6377     040E                     l2836:
  6378                           
  6379                           ;ADXL345.c: 289:     g_deltaY *= g_deltaY;
  6380     040E  0846               	movf	orientation_Up@g_deltaY+1,w
  6381     040F  00F1               	movwf	___wmul@multiplier+1
  6382     0410  0845               	movf	orientation_Up@g_deltaY,w
  6383     0411  00F0               	movwf	___wmul@multiplier
  6384     0412  0846               	movf	orientation_Up@g_deltaY+1,w
  6385     0413  00F3               	movwf	___wmul@multiplicand+1
  6386     0414  0845               	movf	orientation_Up@g_deltaY,w
  6387     0415  00F2               	movwf	___wmul@multiplicand
  6388     0416  318F  2727  3183   	fcall	___wmul
  6389     0419  0871               	movf	?___wmul+1,w
  6390     041A  0020               	movlb	0	; select bank0
  6391     041B  00C6               	movwf	orientation_Up@g_deltaY+1
  6392     041C  0870               	movf	?___wmul,w
  6393     041D  00C5               	movwf	orientation_Up@g_deltaY
  6394     041E                     l2838:
  6395                           
  6396                           ;ADXL345.c: 290:     g_deltaZ *= g_deltaZ;
  6397     041E  0848               	movf	orientation_Up@g_deltaZ+1,w
  6398     041F  00F1               	movwf	___wmul@multiplier+1
  6399     0420  0847               	movf	orientation_Up@g_deltaZ,w
  6400     0421  00F0               	movwf	___wmul@multiplier
  6401     0422  0848               	movf	orientation_Up@g_deltaZ+1,w
  6402     0423  00F3               	movwf	___wmul@multiplicand+1
  6403     0424  0847               	movf	orientation_Up@g_deltaZ,w
  6404     0425  00F2               	movwf	___wmul@multiplicand
  6405     0426  318F  2727  3183   	fcall	___wmul
  6406     0429  0871               	movf	?___wmul+1,w
  6407     042A  0020               	movlb	0	; select bank0
  6408     042B  00C8               	movwf	orientation_Up@g_deltaZ+1
  6409     042C  0870               	movf	?___wmul,w
  6410     042D  00C7               	movwf	orientation_Up@g_deltaZ
  6411     042E                     l2840:
  6412                           
  6413                           ;ADXL345.c: 291:     int g_magnitude = g_deltaX + g_deltaY + g_deltaZ;
  6414     042E  0845               	movf	orientation_Up@g_deltaY,w
  6415     042F  0743               	addwf	orientation_Up@g_deltaX,w
  6416     0430  00FA               	movwf	??_orientation_Up
  6417     0431  0846               	movf	orientation_Up@g_deltaY+1,w
  6418     0432  3D44               	addwfc	orientation_Up@g_deltaX+1,w
  6419     0433  00FB               	movwf	??_orientation_Up+1
  6420     0434  0847               	movf	orientation_Up@g_deltaZ,w
  6421     0435  077A               	addwf	??_orientation_Up,w
  6422     0436  00A6               	movwf	orientation_Up@g_magnitude
  6423     0437  0848               	movf	orientation_Up@g_deltaZ+1,w
  6424     0438  3D7B               	addwfc	??_orientation_Up+1,w
  6425     0439  00A7               	movwf	orientation_Up@g_magnitude+1
  6426     043A                     l2842:
  6427                           
  6428                           ;ADXL345.c: 292:     if (g_magnitude < acceleration_squared_threshold) {
  6429     043A  3004               	movlw	4
  6430     043B  0227               	subwf	orientation_Up@g_magnitude+1,w
  6431     043C  30B0               	movlw	176
  6432     043D  1903               	skipnz
  6433     043E  0226               	subwf	orientation_Up@g_magnitude,w
  6434     043F  1803               	skipnc
  6435     0440  2C42               	goto	u1001
  6436     0441  2C43               	goto	u1000
  6437     0442                     u1001:
  6438     0442  2C45               	goto	l2850
  6439     0443                     u1000:
  6440     0443                     l2844:
  6441                           
  6442                           ;ADXL345.c: 293:         return 1;
  6443     0443  3001               	movlw	1
  6444     0444  2C46               	goto	l611
  6445     0445                     l2850:
  6446                           
  6447                           ;ADXL345.c: 295:         return 0;
  6448     0445  3000               	movlw	0
  6449     0446                     l611:
  6450     0446  0008               	return
  6451     0447                     __end_of_orientation_Up:
  6452                           
  6453                           	psect	text22
  6454     0E39                     __ptext22:	
  6455 ;; *************** function _SPI1_ByteWrite *****************
  6456 ;; Defined at:
  6457 ;;		line 172 in file "mcc_generated_files/spi/src/mssp.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  byteData        1    0[COMMON] unsigned char 
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6471 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;Total ram usage:        1 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_orientation_Up
  6481 ;;		_calibrate
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485     0E39                     _SPI1_ByteWrite:	
  6486                           ;psect for function _SPI1_ByteWrite
  6487                           
  6488     0E39                     l2470:	
  6489                           ;incstack = 0
  6490                           ; Regs used in _SPI1_ByteWrite: [wreg]
  6491                           
  6492                           
  6493                           ;mcc_generated_files/spi/src/mssp.c: 172: void SPI1_ByteWrite(uint8_t byteData);mcc_gene
      +                          rated_files/spi/src/mssp.c: 173: {;mcc_generated_files/spi/src/mssp.c: 174:     SSP1BUF 
      +                          = byteData;
  6494     0E39  0870               	movf	SPI1_ByteWrite@byteData,w
  6495     0E3A  0024               	movlb	4	; select bank4
  6496     0E3B  0091               	movwf	17	;volatile
  6497     0E3C                     l200:
  6498     0E3C  0008               	return
  6499     0E3D                     __end_of_SPI1_ByteWrite:
  6500                           
  6501                           	psect	text23
  6502     0F66                     __ptext23:	
  6503 ;; *************** function _SPI1_BufferRead *****************
  6504 ;; Defined at:
  6505 ;;		line 143 in file "mcc_generated_files/spi/src/mssp.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  bufferData      1    0[COMMON] PTR void 
  6508 ;;		 -> calibrate@acc_data(12), orientation_Up@acc_data(6), 
  6509 ;;  bufferSize      2    1[COMMON] unsigned int 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  bufferInputS    2    3[COMMON] unsigned int 
  6512 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  6513 ;;		 -> calibrate@acc_data(12), orientation_Up@acc_data(6), 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6523 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;Total ram usage:        6 bytes
  6528 ;; Hardware stack levels used: 1
  6529 ;; This function calls:
  6530 ;;		Nothing
  6531 ;; This function is called by:
  6532 ;;		_orientation_Up
  6533 ;;		_calibrate
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537     0F66                     _SPI1_BufferRead:	
  6538                           ;psect for function _SPI1_BufferRead
  6539                           
  6540     0F66                     l2452:	
  6541                           ;incstack = 0
  6542                           ; Regs used in _SPI1_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  6543                           
  6544                           
  6545                           ;mcc_generated_files/spi/src/mssp.c: 143: void SPI1_BufferRead(void *bufferData, size_t 
      +                          bufferSize);mcc_generated_files/spi/src/mssp.c: 144: {;mcc_generated_files/spi/src/mssp.
      +                          c: 145:     uint8_t *bufferInput = bufferData;
  6546     0F66  0870               	movf	SPI1_BufferRead@bufferData,w
  6547     0F67  00F5               	movwf	SPI1_BufferRead@bufferInput
  6548                           
  6549                           ;mcc_generated_files/spi/src/mssp.c: 146:     size_t bufferInputSize = bufferSize;
  6550     0F68  0872               	movf	SPI1_BufferRead@bufferSize+1,w
  6551     0F69  00F4               	movwf	SPI1_BufferRead@bufferInputSize+1
  6552     0F6A  0871               	movf	SPI1_BufferRead@bufferSize,w
  6553     0F6B  00F3               	movwf	SPI1_BufferRead@bufferInputSize
  6554                           
  6555                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6556     0F6C  2F81               	goto	l2462
  6557     0F6D                     l2454:
  6558                           
  6559                           ;mcc_generated_files/spi/src/mssp.c: 148:     {;mcc_generated_files/spi/src/mssp.c: 149:
      +                                   SSP1BUF = 0x00;
  6560     0F6D  0024               	movlb	4	; select bank4
  6561     0F6E  0191               	clrf	17	;volatile
  6562     0F6F                     l187:	
  6563                           ;mcc_generated_files/spi/src/mssp.c: 151:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          153:         }
  6564                           
  6565                           
  6566                           ;mcc_generated_files/spi/src/mssp.c: 150:         while (!PIR1bits.SSP1IF)
  6567     0F6F  0020               	movlb	0	; select bank0
  6568     0F70  1D91               	btfss	17,3	;volatile
  6569     0F71  2F73               	goto	u821
  6570     0F72  2F74               	goto	u820
  6571     0F73                     u821:
  6572     0F73  2F6F               	goto	l187
  6573     0F74                     u820:
  6574     0F74                     l189:
  6575                           
  6576                           ;mcc_generated_files/spi/src/mssp.c: 154:         PIR1bits.SSP1IF = 0;
  6577     0F74  1191               	bcf	17,3	;volatile
  6578     0F75                     l2456:
  6579                           
  6580                           ;mcc_generated_files/spi/src/mssp.c: 155:         *bufferInput = SSP1BUF;
  6581     0F75  0875               	movf	SPI1_BufferRead@bufferInput,w
  6582     0F76  0086               	movwf	6
  6583     0F77  0187               	clrf	7
  6584     0F78  0024               	movlb	4	; select bank4
  6585     0F79  0811               	movf	17,w	;volatile
  6586     0F7A  0081               	movwf	1
  6587     0F7B                     l2458:
  6588                           
  6589                           ;mcc_generated_files/spi/src/mssp.c: 156:         bufferInput++;
  6590     0F7B  3001               	movlw	1
  6591     0F7C  07F5               	addwf	SPI1_BufferRead@bufferInput,f
  6592     0F7D                     l2460:
  6593                           
  6594                           ;mcc_generated_files/spi/src/mssp.c: 157:         bufferInputSize--;
  6595     0F7D  3001               	movlw	1
  6596     0F7E  02F3               	subwf	SPI1_BufferRead@bufferInputSize,f
  6597     0F7F  3000               	movlw	0
  6598     0F80  3BF4               	subwfb	SPI1_BufferRead@bufferInputSize+1,f
  6599     0F81                     l2462:
  6600                           
  6601                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6602     0F81  0873               	movf	SPI1_BufferRead@bufferInputSize,w
  6603     0F82  0474               	iorwf	SPI1_BufferRead@bufferInputSize+1,w
  6604     0F83  1D03               	btfss	3,2
  6605     0F84  2F86               	goto	u831
  6606     0F85  2F87               	goto	u830
  6607     0F86                     u831:
  6608     0F86  2F6D               	goto	l2454
  6609     0F87                     u830:
  6610     0F87                     l191:
  6611     0F87  0008               	return
  6612     0F88                     __end_of_SPI1_BufferRead:
  6613                           
  6614                           	psect	text24
  6615     0ED5                     __ptext24:	
  6616 ;; *************** function _ADXL345_ClearInterrupt *****************
  6617 ;; Defined at:
  6618 ;;		line 100 in file "ADXL345.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used: 1
  6638 ;; Hardware stack levels required when called: 2
  6639 ;; This function calls:
  6640 ;;		_SPI1_ByteExchange
  6641 ;;		_SPI1_Close
  6642 ;;		_SPI1_Open
  6643 ;; This function is called by:
  6644 ;;		_MotionEventHandler
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648     0ED5                     _ADXL345_ClearInterrupt:	
  6649                           ;psect for function _ADXL345_ClearInterrupt
  6650                           
  6651     0ED5                     l2620:	
  6652                           ;incstack = 0
  6653                           ; Regs used in _ADXL345_ClearInterrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6654                           
  6655                           
  6656                           ;ADXL345.c: 101:     while (!SPI1_Open(ADXL345)) {
  6657     0ED5  2ED9               	goto	l2624
  6658     0ED6                     l2622:
  6659                           
  6660                           ;ADXL345.c: 102:         SPI1_Close();
  6661     0ED6  318E  2633  318E   	fcall	_SPI1_Close
  6662     0ED9                     l2624:
  6663                           
  6664                           ;ADXL345.c: 101:     while (!SPI1_Open(ADXL345)) {
  6665     0ED9  01F6               	clrf	SPI1_Open@spiConfigIndex
  6666     0EDA  3180  20DC  318E   	fcall	_SPI1_Open
  6667     0EDD  3A00               	xorlw	0
  6668     0EDE  1903               	skipnz
  6669     0EDF  2EE1               	goto	u941
  6670     0EE0  2EE2               	goto	u940
  6671     0EE1                     u941:
  6672     0EE1  2ED6               	goto	l2622
  6673     0EE2                     u940:
  6674     0EE2                     l512:	
  6675                           ;ADXL345.c: 106:     do { LATCbits.LATC4 = 0; } while(0);
  6676                           
  6677     0EE2  0022               	movlb	2	; select bank2
  6678     0EE3  120E               	bcf	14,4	;volatile
  6679     0EE4                     l2626:
  6680                           
  6681                           ;ADXL345.c: 107:     SPI1_ByteExchange(0x30);
  6682     0EE4  3030               	movlw	48
  6683     0EE5  00F0               	movwf	SPI1_ByteExchange@byteData
  6684     0EE6  318E  2677  318E   	fcall	_SPI1_ByteExchange
  6685     0EE9                     l2628:
  6686     0EE9  0022               	movlb	2	; select bank2
  6687     0EEA  160E               	bsf	14,4	;volatile
  6688     0EEB                     l2630:
  6689                           
  6690                           ;ADXL345.c: 110:     SPI1_Close();
  6691     0EEB  318E  2633  318E   	fcall	_SPI1_Close
  6692     0EEE                     l516:
  6693     0EEE  0008               	return
  6694     0EEF                     __end_of_ADXL345_ClearInterrupt:
  6695                           
  6696                           	psect	text25
  6697     0E77                     __ptext25:	
  6698 ;; *************** function _SPI1_ByteExchange *****************
  6699 ;; Defined at:
  6700 ;;		line 161 in file "mcc_generated_files/spi/src/mssp.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  byteData        1    0[COMMON] unsigned char 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      unsigned char 
  6707 ;; Registers used:
  6708 ;;		wreg
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6714 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;Total ram usage:        1 bytes
  6719 ;; Hardware stack levels used: 1
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_ADXL345_ClearInterrupt
  6724 ;;		_setupForFreefall
  6725 ;;		_setupForImpact
  6726 ;;		_setupForInactivity
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730     0E77                     _SPI1_ByteExchange:	
  6731                           ;psect for function _SPI1_ByteExchange
  6732                           
  6733     0E77                     l2464:	
  6734                           ;incstack = 0
  6735                           ; Regs used in _SPI1_ByteExchange: [wreg]
  6736                           
  6737                           
  6738                           ;mcc_generated_files/spi/src/mssp.c: 161: uint8_t SPI1_ByteExchange(uint8_t byteData);mc
      +                          c_generated_files/spi/src/mssp.c: 162: {;mcc_generated_files/spi/src/mssp.c: 163:     SS
      +                          P1BUF = byteData;
  6739     0E77  0870               	movf	SPI1_ByteExchange@byteData,w
  6740     0E78  0024               	movlb	4	; select bank4
  6741     0E79  0091               	movwf	17	;volatile
  6742     0E7A                     l194:	
  6743                           ;mcc_generated_files/spi/src/mssp.c: 165:     {;mcc_generated_files/spi/src/mssp.c: 167:
      +                               }
  6744                           
  6745                           
  6746                           ;mcc_generated_files/spi/src/mssp.c: 164:     while (!PIR1bits.SSP1IF)
  6747     0E7A  0020               	movlb	0	; select bank0
  6748     0E7B  1D91               	btfss	17,3	;volatile
  6749     0E7C  2E7E               	goto	u841
  6750     0E7D  2E7F               	goto	u840
  6751     0E7E                     u841:
  6752     0E7E  2E7A               	goto	l194
  6753     0E7F                     u840:
  6754     0E7F                     l196:
  6755                           
  6756                           ;mcc_generated_files/spi/src/mssp.c: 168:     PIR1bits.SSP1IF = 0;
  6757     0E7F  1191               	bcf	17,3	;volatile
  6758     0E80                     l2466:
  6759                           
  6760                           ;mcc_generated_files/spi/src/mssp.c: 169:     return SSP1BUF;;	Return value of _SPI1_Byt
      +                          eExchange is never used
  6761     0E80  0024               	movlb	4	; select bank4
  6762     0E81  0811               	movf	17,w	;volatile
  6763     0E82                     l197:
  6764     0E82  0008               	return
  6765     0E83                     __end_of_SPI1_ByteExchange:
  6766                           
  6767                           	psect	text26
  6768     0E8F                     __ptext26:	
  6769 ;; *************** function _EEPROM_Read *****************
  6770 ;; Defined at:
  6771 ;;		line 224 in file "mcc_generated_files/nvm/src/nvm.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  address         2    0[COMMON] unsigned short 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      unsigned char 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;Total ram usage:        2 bytes
  6790 ;; Hardware stack levels used: 1
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		_main
  6795 ;;		_EEPROM_ByteRead
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799     0E8F                     _EEPROM_Read:	
  6800                           ;psect for function _EEPROM_Read
  6801                           
  6802     0E8F                     l2854:	
  6803                           ;incstack = 0
  6804                           ; Regs used in _EEPROM_Read: [wreg+status,2]
  6805                           
  6806                           
  6807                           ;mcc_generated_files/nvm/src/nvm.c: 224: eeprom_data_t EEPROM_Read(eeprom_address_t addr
      +                          ess);mcc_generated_files/nvm/src/nvm.c: 225: {;mcc_generated_files/nvm/src/nvm.c: 227:  
      +                             EECON1bits.CFGS = 0;
  6808     0E8F  0023               	movlb	3	; select bank3
  6809     0E90  1315               	bcf	21,6	;volsfr
  6810                           
  6811                           ;mcc_generated_files/nvm/src/nvm.c: 228:     EECON1bits.EEPGD = 0;
  6812     0E91  1395               	bcf	21,7	;volsfr
  6813     0E92                     l2856:
  6814                           
  6815                           ;mcc_generated_files/nvm/src/nvm.c: 231:     EEADRH = (uint8_t) (address >> 8);
  6816     0E92  0871               	movf	EEPROM_Read@address+1,w
  6817     0E93  0092               	movwf	18	;volatile
  6818     0E94                     l2858:
  6819                           
  6820                           ;mcc_generated_files/nvm/src/nvm.c: 232:     EEADRL = (uint8_t) address;
  6821     0E94  0870               	movf	EEPROM_Read@address,w
  6822     0E95  0091               	movwf	17	;volatile
  6823     0E96                     l2860:
  6824                           
  6825                           ;mcc_generated_files/nvm/src/nvm.c: 235:     EECON1bits.RD = 1;
  6826     0E96  1415               	bsf	21,0	;volsfr
  6827     0E97                     l2862:
  6828                           
  6829                           ;mcc_generated_files/nvm/src/nvm.c: 236:     __nop();
  6830     0E97  0000               	nop
  6831     0E98                     l2864:
  6832                           
  6833                           ;mcc_generated_files/nvm/src/nvm.c: 237:     __nop();
  6834     0E98  0000               	nop
  6835     0E99                     l2866:
  6836                           
  6837                           ;mcc_generated_files/nvm/src/nvm.c: 239:     return EEDATL;
  6838     0E99  0023               	movlb	3	; select bank3
  6839     0E9A  0813               	movf	19,w	;volatile
  6840     0E9B                     l103:
  6841     0E9B  0008               	return
  6842     0E9C                     __end_of_EEPROM_Read:
  6843                           
  6844                           	psect	text27
  6845     0FD3                     __ptext27:	
  6846 ;; *************** function _ADXL345_validation *****************
  6847 ;; Defined at:
  6848 ;;		line 57 in file "ADXL345.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  temp            2   10[COMMON] unsigned char [2]
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      _Bool 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;Total ram usage:        2 bytes
  6867 ;; Hardware stack levels used: 1
  6868 ;; Hardware stack levels required when called: 2
  6869 ;; This function calls:
  6870 ;;		_SPI1_BufferExchange
  6871 ;;		_SPI1_Close
  6872 ;;		_SPI1_Open
  6873 ;; This function is called by:
  6874 ;;		_main
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878     0FD3                     _ADXL345_validation:	
  6879                           ;psect for function _ADXL345_validation
  6880                           
  6881     0FD3                     l2884:	
  6882                           ;incstack = 0
  6883                           ; Regs used in _ADXL345_validation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6884                           
  6885                           
  6886                           ;ADXL345.c: 58:     if (SPI1_Open(ADXL345)) {
  6887     0FD3  01F6               	clrf	SPI1_Open@spiConfigIndex
  6888     0FD4  3180  20DC  318F   	fcall	_SPI1_Open
  6889     0FD7  3A00               	xorlw	0
  6890     0FD8  1903               	skipnz
  6891     0FD9  2FDB               	goto	u1021
  6892     0FDA  2FDC               	goto	u1020
  6893     0FDB                     u1021:
  6894     0FDB  2FF9               	goto	l487
  6895     0FDC                     u1020:
  6896     0FDC                     l479:	
  6897                           ;ADXL345.c: 59:         do { LATCbits.LATC4 = 0; } while(0);
  6898                           
  6899     0FDC  0022               	movlb	2	; select bank2
  6900     0FDD  120E               	bcf	14,4	;volatile
  6901     0FDE                     l2886:
  6902                           
  6903                           ;ADXL345.c: 60:         uint8_t temp[2] = {0x00 | 0x80, 0x00};
  6904     0FDE  0020               	movlb	0	; select bank0
  6905     0FDF  0866               	movf	ADXL345_validation@F2696+1,w
  6906     0FE0  00FB               	movwf	ADXL345_validation@temp+1
  6907     0FE1  0865               	movf	ADXL345_validation@F2696,w
  6908     0FE2  00FA               	movwf	ADXL345_validation@temp
  6909     0FE3                     l2888:
  6910                           
  6911                           ;ADXL345.c: 61:         SPI1_BufferExchange(&temp, sizeof(temp));
  6912     0FE3  307A               	movlw	(low (ADXL345_validation@temp| 0))& (0+255)
  6913     0FE4  00F0               	movwf	SPI1_BufferExchange@bufferData
  6914     0FE5  3002               	movlw	2
  6915     0FE6  00F1               	movwf	SPI1_BufferExchange@bufferSize
  6916     0FE7  3000               	movlw	0
  6917     0FE8  00F2               	movwf	SPI1_BufferExchange@bufferSize+1
  6918     0FE9  318F  27AD  318F   	fcall	_SPI1_BufferExchange
  6919     0FEC                     l2890:
  6920                           
  6921                           ;ADXL345.c: 62:         if (temp[1] == 0xE5) {
  6922     0FEC  30E5               	movlw	229
  6923     0FED  067B               	xorwf	ADXL345_validation@temp+1,w
  6924     0FEE  1D03               	btfss	3,2
  6925     0FEF  2FF1               	goto	u1031
  6926     0FF0  2FF2               	goto	u1030
  6927     0FF1                     u1031:
  6928     0FF1  2FF9               	goto	l487
  6929     0FF2                     u1030:
  6930     0FF2                     l484:	
  6931                           ;ADXL345.c: 63:             do { LATCbits.LATC4 = 1; } while(0);
  6932                           
  6933     0FF2  0022               	movlb	2	; select bank2
  6934     0FF3  160E               	bsf	14,4	;volatile
  6935     0FF4                     l2892:
  6936                           
  6937                           ;ADXL345.c: 64:             SPI1_Close();
  6938     0FF4  318E  2633  318F   	fcall	_SPI1_Close
  6939     0FF7                     l2894:
  6940                           
  6941                           ;ADXL345.c: 65:             return 1;
  6942     0FF7  3001               	movlw	1
  6943     0FF8  2FFF               	goto	l486
  6944     0FF9                     l487:	
  6945                           ;ADXL345.c: 68:     do { LATCbits.LATC4 = 1; } while(0);
  6946                           
  6947     0FF9  0022               	movlb	2	; select bank2
  6948     0FFA  160E               	bsf	14,4	;volatile
  6949     0FFB                     l2898:
  6950                           
  6951                           ;ADXL345.c: 69:     SPI1_Close();
  6952     0FFB  318E  2633  318F   	fcall	_SPI1_Close
  6953     0FFE                     l2900:
  6954                           
  6955                           ;ADXL345.c: 70:     return 0;
  6956     0FFE  3000               	movlw	0
  6957     0FFF                     l486:
  6958     0FFF  0008               	return
  6959     1000                     __end_of_ADXL345_validation:
  6960                           
  6961                           	psect	text28
  6962     0FAD                     __ptext28:	
  6963 ;; *************** function _SPI1_BufferExchange *****************
  6964 ;; Defined at:
  6965 ;;		line 108 in file "mcc_generated_files/spi/src/mssp.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  bufferData      1    0[COMMON] PTR void 
  6968 ;;		 -> ADXL345_validation@temp(2), 
  6969 ;;  bufferSize      2    1[COMMON] unsigned int 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  bufferInputS    2    3[COMMON] unsigned int 
  6972 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  6973 ;;		 -> ADXL345_validation@temp(2), 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  1    wreg      void 
  6976 ;; Registers used:
  6977 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6983 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;Total ram usage:        6 bytes
  6988 ;; Hardware stack levels used: 1
  6989 ;; This function calls:
  6990 ;;		Nothing
  6991 ;; This function is called by:
  6992 ;;		_ADXL345_validation
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996     0FAD                     _SPI1_BufferExchange:	
  6997                           ;psect for function _SPI1_BufferExchange
  6998                           
  6999     0FAD                     l2540:	
  7000                           ;incstack = 0
  7001                           ; Regs used in _SPI1_BufferExchange: [wreg+fsr1l+fsr1h+status,2+status,0]
  7002                           
  7003                           
  7004                           ;mcc_generated_files/spi/src/mssp.c: 108: void SPI1_BufferExchange(void *bufferData, siz
      +                          e_t bufferSize);mcc_generated_files/spi/src/mssp.c: 109: {;mcc_generated_files/spi/src/m
      +                          ssp.c: 110:     uint8_t *bufferInput = bufferData;
  7005     0FAD  0870               	movf	SPI1_BufferExchange@bufferData,w
  7006     0FAE  00F5               	movwf	SPI1_BufferExchange@bufferInput
  7007                           
  7008                           ;mcc_generated_files/spi/src/mssp.c: 111:     size_t bufferInputSize = bufferSize;
  7009     0FAF  0872               	movf	SPI1_BufferExchange@bufferSize+1,w
  7010     0FB0  00F4               	movwf	SPI1_BufferExchange@bufferInputSize+1
  7011     0FB1  0871               	movf	SPI1_BufferExchange@bufferSize,w
  7012     0FB2  00F3               	movwf	SPI1_BufferExchange@bufferInputSize
  7013                           
  7014                           ;mcc_generated_files/spi/src/mssp.c: 112:     while (0U != bufferInputSize)
  7015     0FB3  2FCC               	goto	l2550
  7016     0FB4                     l2542:
  7017                           
  7018                           ;mcc_generated_files/spi/src/mssp.c: 113:     {;mcc_generated_files/spi/src/mssp.c: 114:
      +                                   SSP1BUF = *bufferInput;
  7019     0FB4  0875               	movf	SPI1_BufferExchange@bufferInput,w
  7020     0FB5  0086               	movwf	6
  7021     0FB6  0187               	clrf	7
  7022     0FB7  0801               	movf	1,w
  7023     0FB8  0024               	movlb	4	; select bank4
  7024     0FB9  0091               	movwf	17	;volatile
  7025     0FBA                     l169:	
  7026                           ;mcc_generated_files/spi/src/mssp.c: 116:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          118:         }
  7027                           
  7028                           
  7029                           ;mcc_generated_files/spi/src/mssp.c: 115:         while (!PIR1bits.SSP1IF)
  7030     0FBA  0020               	movlb	0	; select bank0
  7031     0FBB  1D91               	btfss	17,3	;volatile
  7032     0FBC  2FBE               	goto	u901
  7033     0FBD  2FBF               	goto	u900
  7034     0FBE                     u901:
  7035     0FBE  2FBA               	goto	l169
  7036     0FBF                     u900:
  7037     0FBF                     l171:
  7038                           
  7039                           ;mcc_generated_files/spi/src/mssp.c: 119:         PIR1bits.SSP1IF = 0;
  7040     0FBF  1191               	bcf	17,3	;volatile
  7041     0FC0                     l2544:
  7042                           
  7043                           ;mcc_generated_files/spi/src/mssp.c: 120:         *bufferInput = SSP1BUF;
  7044     0FC0  0875               	movf	SPI1_BufferExchange@bufferInput,w
  7045     0FC1  0086               	movwf	6
  7046     0FC2  0187               	clrf	7
  7047     0FC3  0024               	movlb	4	; select bank4
  7048     0FC4  0811               	movf	17,w	;volatile
  7049     0FC5  0081               	movwf	1
  7050     0FC6                     l2546:
  7051                           
  7052                           ;mcc_generated_files/spi/src/mssp.c: 121:         bufferInput++;
  7053     0FC6  3001               	movlw	1
  7054     0FC7  07F5               	addwf	SPI1_BufferExchange@bufferInput,f
  7055     0FC8                     l2548:
  7056                           
  7057                           ;mcc_generated_files/spi/src/mssp.c: 122:         bufferInputSize--;
  7058     0FC8  3001               	movlw	1
  7059     0FC9  02F3               	subwf	SPI1_BufferExchange@bufferInputSize,f
  7060     0FCA  3000               	movlw	0
  7061     0FCB  3BF4               	subwfb	SPI1_BufferExchange@bufferInputSize+1,f
  7062     0FCC                     l2550:
  7063                           
  7064                           ;mcc_generated_files/spi/src/mssp.c: 112:     while (0U != bufferInputSize)
  7065     0FCC  0873               	movf	SPI1_BufferExchange@bufferInputSize,w
  7066     0FCD  0474               	iorwf	SPI1_BufferExchange@bufferInputSize+1,w
  7067     0FCE  1D03               	btfss	3,2
  7068     0FCF  2FD1               	goto	u911
  7069     0FD0  2FD2               	goto	u910
  7070     0FD1                     u911:
  7071     0FD1  2FB4               	goto	l2542
  7072     0FD2                     u910:
  7073     0FD2                     l173:
  7074     0FD2  0008               	return
  7075     0FD3                     __end_of_SPI1_BufferExchange:
  7076                           
  7077                           	psect	text29
  7078     0078                     __ptext29:	
  7079 ;; *************** function _ADXL345_init *****************
  7080 ;; Defined at:
  7081 ;;		line 33 in file "ADXL345.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  msg            26    0[BANK0 ] struct Message
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      _Bool 
  7088 ;; Registers used:
  7089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;Total ram usage:       26 bytes
  7100 ;; Hardware stack levels used: 1
  7101 ;; Hardware stack levels required when called: 2
  7102 ;; This function calls:
  7103 ;;		_SPI1_BufferWrite
  7104 ;;		_SPI1_Close
  7105 ;;		_SPI1_Open
  7106 ;;		_memcpy
  7107 ;;		_memset
  7108 ;; This function is called by:
  7109 ;;		_main
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113     0078                     _ADXL345_init:	
  7114                           ;psect for function _ADXL345_init
  7115                           
  7116     0078                     l2904:	
  7117                           ;incstack = 0
  7118                           ; Regs used in _ADXL345_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7119                           
  7120                           
  7121                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  7122     0078  287C               	goto	l2908
  7123     0079                     l2906:
  7124                           
  7125                           ;ADXL345.c: 35:         SPI1_Close();
  7126     0079  318E  2633  3180   	fcall	_SPI1_Close
  7127     007C                     l2908:
  7128                           
  7129                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  7130     007C  01F6               	clrf	SPI1_Open@spiConfigIndex
  7131     007D  3180  20DC  3180   	fcall	_SPI1_Open
  7132     0080  3A00               	xorlw	0
  7133     0081  1903               	skipnz
  7134     0082  2884               	goto	u1041
  7135     0083  2885               	goto	u1040
  7136     0084                     u1041:
  7137     0084  2879               	goto	l2906
  7138     0085                     u1040:
  7139     0085                     l466:
  7140                           
  7141                           ;ADXL345.c: 38:     struct Message msg;;ADXL345.c: 39:     msg.registerAddr = 0x24 | 0x4
      +                          0;
  7142     0085  3064               	movlw	100
  7143     0086  0020               	movlb	0	; select bank0
  7144     0087  00A0               	movwf	ADXL345_init@msg
  7145     0088                     l2910:
  7146                           
  7147                           ;ADXL345.c: 40:     memset(msg.data, 0, sizeof(msg.data));
  7148     0088  3021               	movlw	low (ADXL345_init@msg+1)
  7149     0089  00F0               	movwf	memset@dest
  7150     008A  3000               	movlw	high (ADXL345_init@msg+1)
  7151     008B  00F1               	movwf	memset@dest+1
  7152     008C  3000               	movlw	0
  7153     008D  00F2               	movwf	memset@c
  7154     008E  00F3               	movwf	memset@c+1
  7155     008F  3019               	movlw	25
  7156     0090  00F4               	movwf	memset@n
  7157     0091  3000               	movlw	0
  7158     0092  00F5               	movwf	memset@n+1
  7159     0093  318E  26BE  3180   	fcall	_memset
  7160     0096                     l2912:
  7161                           
  7162                           ;ADXL345.c: 41:     memcpy(msg.data, ADXL345_init_settings, sizeof(ADXL345_init_settings
      +                          ));
  7163     0096  3021               	movlw	low (ADXL345_init@msg+1)
  7164     0097  00F0               	movwf	memcpy@d1
  7165     0098  3000               	movlw	high (ADXL345_init@msg+1)
  7166     0099  00F1               	movwf	memcpy@d1+1
  7167     009A  3039               	movlw	low (_ADXL345_init_settings| (0+32768))
  7168     009B  00F2               	movwf	memcpy@s1
  7169     009C  3090               	movlw	high (_ADXL345_init_settings| (0+32768))
  7170     009D  00F3               	movwf	memcpy@s1+1
  7171     009E  300C               	movlw	12
  7172     009F  00F4               	movwf	memcpy@n
  7173     00A0  3000               	movlw	0
  7174     00A1  00F5               	movwf	memcpy@n+1
  7175     00A2  318F  2788  3180   	fcall	_memcpy
  7176     00A5                     l2914:
  7177     00A5  0022               	movlb	2	; select bank2
  7178     00A6  120E               	bcf	14,4	;volatile
  7179     00A7                     l2916:
  7180                           
  7181                           ;ADXL345.c: 43:     SPI1_BufferWrite(&msg, sizeof(ADXL345_init_settings) + 1);
  7182     00A7  3020               	movlw	low ADXL345_init@msg
  7183     00A8  00F0               	movwf	SPI1_BufferWrite@bufferData
  7184     00A9  3000               	movlw	high ADXL345_init@msg
  7185     00AA  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  7186     00AB  300D               	movlw	13
  7187     00AC  00F2               	movwf	SPI1_BufferWrite@bufferSize
  7188     00AD  3000               	movlw	0
  7189     00AE  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  7190     00AF  318F  2746  3180   	fcall	_SPI1_BufferWrite
  7191     00B2                     l2918:
  7192     00B2  0022               	movlb	2	; select bank2
  7193     00B3  160E               	bsf	14,4	;volatile
  7194     00B4                     l2920:
  7195                           
  7196                           ;ADXL345.c: 46:     msg.registerAddr = 0x31;
  7197     00B4  3031               	movlw	49
  7198     00B5  0020               	movlb	0	; select bank0
  7199     00B6  00A0               	movwf	ADXL345_init@msg
  7200     00B7                     l2922:
  7201                           
  7202                           ;ADXL345.c: 47:     memset(msg.data, 0, sizeof(msg.data));
  7203     00B7  3021               	movlw	low (ADXL345_init@msg+1)
  7204     00B8  00F0               	movwf	memset@dest
  7205     00B9  3000               	movlw	high (ADXL345_init@msg+1)
  7206     00BA  00F1               	movwf	memset@dest+1
  7207     00BB  3000               	movlw	0
  7208     00BC  00F2               	movwf	memset@c
  7209     00BD  00F3               	movwf	memset@c+1
  7210     00BE  3019               	movlw	25
  7211     00BF  00F4               	movwf	memset@n
  7212     00C0  3000               	movlw	0
  7213     00C1  00F5               	movwf	memset@n+1
  7214     00C2  318E  26BE  3180   	fcall	_memset
  7215     00C5                     l2924:
  7216                           
  7217                           ;ADXL345.c: 48:     msg.data[0] = 0x0B;
  7218     00C5  300B               	movlw	11
  7219     00C6  0020               	movlb	0	; select bank0
  7220     00C7  00A1               	movwf	ADXL345_init@msg+1
  7221     00C8                     l2926:
  7222     00C8  0022               	movlb	2	; select bank2
  7223     00C9  120E               	bcf	14,4	;volatile
  7224     00CA                     l2928:
  7225                           
  7226                           ;ADXL345.c: 50:     SPI1_BufferWrite(&msg, 2);
  7227     00CA  3020               	movlw	low ADXL345_init@msg
  7228     00CB  00F0               	movwf	SPI1_BufferWrite@bufferData
  7229     00CC  3000               	movlw	high ADXL345_init@msg
  7230     00CD  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  7231     00CE  3002               	movlw	2
  7232     00CF  00F2               	movwf	SPI1_BufferWrite@bufferSize
  7233     00D0  3000               	movlw	0
  7234     00D1  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  7235     00D2  318F  2746  3180   	fcall	_SPI1_BufferWrite
  7236     00D5                     l2930:
  7237     00D5  0022               	movlb	2	; select bank2
  7238     00D6  160E               	bsf	14,4	;volatile
  7239     00D7                     l2932:
  7240                           
  7241                           ;ADXL345.c: 53:     SPI1_Close();
  7242     00D7  318E  2633  3180   	fcall	_SPI1_Close
  7243     00DA                     l2934:
  7244                           
  7245                           ;ADXL345.c: 54:     return 1;
  7246     00DA  3001               	movlw	1
  7247     00DB                     l475:
  7248     00DB  0008               	return
  7249     00DC                     __end_of_ADXL345_init:
  7250                           
  7251                           	psect	text30
  7252     0EBE                     __ptext30:	
  7253 ;; *************** function _memset *****************
  7254 ;; Defined at:
  7255 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memset.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;  dest            2    0[COMMON] PTR void 
  7258 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7259 ;;  c               2    2[COMMON] int 
  7260 ;;  n               2    4[COMMON] unsigned int 
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;  p               1    6[COMMON] PTR unsigned char 
  7263 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  2    0[COMMON] PTR void 
  7266 ;; Registers used:
  7267 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        7 bytes
  7278 ;; Hardware stack levels used: 1
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		_ADXL345_init
  7283 ;;		_setupForFreefall
  7284 ;;		_setupForImpact
  7285 ;;		_setupForInactivity
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289     0EBE                     _memset:	
  7290                           ;psect for function _memset
  7291                           
  7292     0EBE                     l2482:	
  7293                           ;incstack = 0
  7294                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7295                           
  7296     0EBE  0870               	movf	memset@dest,w
  7297     0EBF  00F6               	movwf	memset@p
  7298     0EC0  2EC8               	goto	l2488
  7299     0EC1                     l2484:
  7300     0EC1  0876               	movf	memset@p,w
  7301     0EC2  0086               	movwf	6
  7302     0EC3  0187               	clrf	7
  7303     0EC4  0872               	movf	memset@c,w
  7304     0EC5  0081               	movwf	1
  7305     0EC6                     l2486:
  7306     0EC6  3001               	movlw	1
  7307     0EC7  07F6               	addwf	memset@p,f
  7308     0EC8                     l2488:
  7309     0EC8  3001               	movlw	1
  7310     0EC9  02F4               	subwf	memset@n,f
  7311     0ECA  3000               	movlw	0
  7312     0ECB  3BF5               	subwfb	memset@n+1,f
  7313     0ECC  0A74               	incf	memset@n,w
  7314     0ECD  1D03               	skipz
  7315     0ECE  2ED3               	goto	u881
  7316     0ECF  0A75               	incf	memset@n+1,w
  7317     0ED0  1D03               	btfss	3,2
  7318     0ED1  2ED3               	goto	u881
  7319     0ED2  2ED4               	goto	u880
  7320     0ED3                     u881:
  7321     0ED3  2EC1               	goto	l2484
  7322     0ED4                     u880:
  7323     0ED4                     l1340:
  7324     0ED4  0008               	return
  7325     0ED5                     __end_of_memset:
  7326                           
  7327                           	psect	text31
  7328     0F88                     __ptext31:	
  7329 ;; *************** function _memcpy *****************
  7330 ;; Defined at:
  7331 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memcpy.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;  d1              2    0[COMMON] PTR void 
  7334 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7335 ;;  s1              2    2[COMMON] PTR const void 
  7336 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7337 ;;  n               2    4[COMMON] unsigned int 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  s               2    6[COMMON] PTR const unsigned char 
  7340 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7341 ;;  d               1    9[COMMON] PTR unsigned char 
  7342 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7343 ;;  tmp             1    8[COMMON] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  2    0[COMMON] PTR void 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:       10 bytes
  7358 ;; Hardware stack levels used: 1
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_ADXL345_init
  7363 ;;		_setupForFreefall
  7364 ;;		_setupForImpact
  7365 ;;		_setupForInactivity
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369     0F88                     _memcpy:	
  7370                           ;psect for function _memcpy
  7371                           
  7372     0F88                     l2490:	
  7373                           ;incstack = 0
  7374                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7375                           
  7376     0F88  0873               	movf	memcpy@s1+1,w
  7377     0F89  00F7               	movwf	memcpy@s+1
  7378     0F8A  0872               	movf	memcpy@s1,w
  7379     0F8B  00F6               	movwf	memcpy@s
  7380     0F8C                     l2492:
  7381     0F8C  0870               	movf	memcpy@d1,w
  7382     0F8D  00F9               	movwf	memcpy@d
  7383     0F8E  2FA0               	goto	l2502
  7384     0F8F                     l2494:
  7385     0F8F  0876               	movf	memcpy@s,w
  7386     0F90  0084               	movwf	4
  7387     0F91  0877               	movf	memcpy@s+1,w
  7388     0F92  0085               	movwf	5
  7389     0F93  0800               	movf	0,w	;code access
  7390     0F94  00F8               	movwf	memcpy@tmp
  7391     0F95                     l2496:
  7392     0F95  3001               	movlw	1
  7393     0F96  07F6               	addwf	memcpy@s,f
  7394     0F97  3000               	movlw	0
  7395     0F98  3DF7               	addwfc	memcpy@s+1,f
  7396     0F99                     l2498:
  7397     0F99  0879               	movf	memcpy@d,w
  7398     0F9A  0086               	movwf	6
  7399     0F9B  0187               	clrf	7
  7400     0F9C  0878               	movf	memcpy@tmp,w
  7401     0F9D  0081               	movwf	1
  7402     0F9E                     l2500:
  7403     0F9E  3001               	movlw	1
  7404     0F9F  07F9               	addwf	memcpy@d,f
  7405     0FA0                     l2502:
  7406     0FA0  3001               	movlw	1
  7407     0FA1  02F4               	subwf	memcpy@n,f
  7408     0FA2  3000               	movlw	0
  7409     0FA3  3BF5               	subwfb	memcpy@n+1,f
  7410     0FA4  0A74               	incf	memcpy@n,w
  7411     0FA5  1D03               	skipz
  7412     0FA6  2FAB               	goto	u891
  7413     0FA7  0A75               	incf	memcpy@n+1,w
  7414     0FA8  1D03               	btfss	3,2
  7415     0FA9  2FAB               	goto	u891
  7416     0FAA  2FAC               	goto	u890
  7417     0FAB                     u891:
  7418     0FAB  2F8F               	goto	l2494
  7419     0FAC                     u890:
  7420     0FAC                     l1334:
  7421     0FAC  0008               	return
  7422     0FAD                     __end_of_memcpy:
  7423                           
  7424                           	psect	text32
  7425     00DC                     __ptext32:	
  7426 ;; *************** function _SPI1_Open *****************
  7427 ;; Defined at:
  7428 ;;		line 82 in file "mcc_generated_files/spi/src/mssp.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  spiConfigInd    1    6[COMMON] unsigned char 
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;  returnValue     1    9[COMMON] _Bool 
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      _Bool 
  7435 ;; Registers used:
  7436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7442 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;Total ram usage:        4 bytes
  7447 ;; Hardware stack levels used: 1
  7448 ;; Hardware stack levels required when called: 1
  7449 ;; This function calls:
  7450 ;;		___wmul
  7451 ;; This function is called by:
  7452 ;;		_ADXL345_init
  7453 ;;		_ADXL345_validation
  7454 ;;		_saveOffsets
  7455 ;;		_ADXL345_ClearInterrupt
  7456 ;;		_setupForFreefall
  7457 ;;		_setupForImpact
  7458 ;;		_setupForInactivity
  7459 ;;		_orientation_Up
  7460 ;;		_calibrate
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464     00DC                     _SPI1_Open:	
  7465                           ;psect for function _SPI1_Open
  7466                           
  7467     00DC                     l2422:	
  7468                           ;incstack = 0
  7469                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7470                           
  7471     00DC                     l2424:
  7472                           
  7473                           ;mcc_generated_files/spi/src/mssp.c: 85:     if (SSP1CON1bits.SSPEN == 0)
  7474     00DC  0024               	movlb	4	; select bank4
  7475     00DD  1A95               	btfsc	21,5	;volatile
  7476     00DE  28E0               	goto	u791
  7477     00DF  28E1               	goto	u790
  7478     00E0                     u791:
  7479     00E0  2945               	goto	l2432
  7480     00E1                     u790:
  7481     00E1                     l2426:
  7482                           
  7483                           ;mcc_generated_files/spi/src/mssp.c: 86:     {;mcc_generated_files/spi/src/mssp.c: 87:  
      +                                 SSP1STAT = spi1_configuration[spiConfigIndex].stat;
  7484     00E1  0876               	movf	SPI1_Open@spiConfigIndex,w
  7485     00E2  00F7               	movwf	??_SPI1_Open
  7486     00E3  01F8               	clrf	??_SPI1_Open+1
  7487     00E4  0877               	movf	??_SPI1_Open,w
  7488     00E5  00F0               	movwf	___wmul@multiplier
  7489     00E6  0878               	movf	??_SPI1_Open+1,w
  7490     00E7  00F1               	movwf	___wmul@multiplier+1
  7491     00E8  3005               	movlw	5
  7492     00E9  00F2               	movwf	___wmul@multiplicand
  7493     00EA  3000               	movlw	0
  7494     00EB  00F3               	movwf	___wmul@multiplicand+1
  7495     00EC  318F  2727  3180   	fcall	___wmul
  7496     00EF  301C               	movlw	low _spi1_configuration
  7497     00F0  0770               	addwf	?___wmul,w
  7498     00F1  0084               	movwf	4
  7499     00F2  3010               	movlw	high _spi1_configuration
  7500     00F3  3D71               	addwfc	?___wmul+1,w
  7501     00F4  3880               	iorlw	128
  7502     00F5  0085               	movwf	5
  7503     00F6  0800               	movf	0,w	;code access
  7504     00F7  0024               	movlb	4	; select bank4
  7505     00F8  0094               	movwf	20	;volatile
  7506                           
  7507                           ;mcc_generated_files/spi/src/mssp.c: 88:         SSP1CON1 = spi1_configuration[spiConfig
      +                          Index].con1;
  7508     00F9  0876               	movf	SPI1_Open@spiConfigIndex,w
  7509     00FA  00F7               	movwf	??_SPI1_Open
  7510     00FB  01F8               	clrf	??_SPI1_Open+1
  7511     00FC  0877               	movf	??_SPI1_Open,w
  7512     00FD  00F0               	movwf	___wmul@multiplier
  7513     00FE  0878               	movf	??_SPI1_Open+1,w
  7514     00FF  00F1               	movwf	___wmul@multiplier+1
  7515     0100  3005               	movlw	5
  7516     0101  00F2               	movwf	___wmul@multiplicand
  7517     0102  3000               	movlw	0
  7518     0103  00F3               	movwf	___wmul@multiplicand+1
  7519     0104  318F  2727  3180   	fcall	___wmul
  7520     0107  301D               	movlw	low (_spi1_configuration+1)
  7521     0108  0770               	addwf	?___wmul,w
  7522     0109  0084               	movwf	4
  7523     010A  3010               	movlw	high (_spi1_configuration+1)
  7524     010B  3D71               	addwfc	?___wmul+1,w
  7525     010C  3880               	iorlw	128
  7526     010D  0085               	movwf	5
  7527     010E  0800               	movf	0,w	;code access
  7528     010F  0024               	movlb	4	; select bank4
  7529     0110  0095               	movwf	21	;volatile
  7530                           
  7531                           ;mcc_generated_files/spi/src/mssp.c: 89:         SSP1CON3 = spi1_configuration[spiConfig
      +                          Index].con3;
  7532     0111  0876               	movf	SPI1_Open@spiConfigIndex,w
  7533     0112  00F7               	movwf	??_SPI1_Open
  7534     0113  01F8               	clrf	??_SPI1_Open+1
  7535     0114  0877               	movf	??_SPI1_Open,w
  7536     0115  00F0               	movwf	___wmul@multiplier
  7537     0116  0878               	movf	??_SPI1_Open+1,w
  7538     0117  00F1               	movwf	___wmul@multiplier+1
  7539     0118  3005               	movlw	5
  7540     0119  00F2               	movwf	___wmul@multiplicand
  7541     011A  3000               	movlw	0
  7542     011B  00F3               	movwf	___wmul@multiplicand+1
  7543     011C  318F  2727  3180   	fcall	___wmul
  7544     011F  301E               	movlw	low (_spi1_configuration+2)
  7545     0120  0770               	addwf	?___wmul,w
  7546     0121  0084               	movwf	4
  7547     0122  3010               	movlw	high (_spi1_configuration+2)
  7548     0123  3D71               	addwfc	?___wmul+1,w
  7549     0124  3880               	iorlw	128
  7550     0125  0085               	movwf	5
  7551     0126  0800               	movf	0,w	;code access
  7552     0127  0024               	movlb	4	; select bank4
  7553     0128  0097               	movwf	23	;volatile
  7554                           
  7555                           ;mcc_generated_files/spi/src/mssp.c: 90:         SSP1ADD = spi1_configuration[spiConfigI
      +                          ndex].baud;
  7556     0129  0876               	movf	SPI1_Open@spiConfigIndex,w
  7557     012A  00F7               	movwf	??_SPI1_Open
  7558     012B  01F8               	clrf	??_SPI1_Open+1
  7559     012C  0877               	movf	??_SPI1_Open,w
  7560     012D  00F0               	movwf	___wmul@multiplier
  7561     012E  0878               	movf	??_SPI1_Open+1,w
  7562     012F  00F1               	movwf	___wmul@multiplier+1
  7563     0130  3005               	movlw	5
  7564     0131  00F2               	movwf	___wmul@multiplicand
  7565     0132  3000               	movlw	0
  7566     0133  00F3               	movwf	___wmul@multiplicand+1
  7567     0134  318F  2727  3180   	fcall	___wmul
  7568     0137  301F               	movlw	low (_spi1_configuration+3)
  7569     0138  0770               	addwf	?___wmul,w
  7570     0139  0084               	movwf	4
  7571     013A  3010               	movlw	high (_spi1_configuration+3)
  7572     013B  3D71               	addwfc	?___wmul+1,w
  7573     013C  3880               	iorlw	128
  7574     013D  0085               	movwf	5
  7575     013E  0800               	movf	0,w	;code access
  7576     013F  0024               	movlb	4	; select bank4
  7577     0140  0092               	movwf	18	;volatile
  7578     0141                     l2428:
  7579                           
  7580                           ;mcc_generated_files/spi/src/mssp.c: 92:         SSP1CON1bits.SSPEN = 1;
  7581     0141  1695               	bsf	21,5	;volatile
  7582     0142                     l2430:
  7583                           
  7584                           ;mcc_generated_files/spi/src/mssp.c: 94:         returnValue = 1;
  7585     0142  3001               	movlw	1
  7586     0143  00F9               	movwf	SPI1_Open@returnValue
  7587                           
  7588                           ;mcc_generated_files/spi/src/mssp.c: 95:     }
  7589     0144  2946               	goto	l2434
  7590     0145                     l2432:
  7591                           
  7592                           ;mcc_generated_files/spi/src/mssp.c: 97:     {;mcc_generated_files/spi/src/mssp.c: 98:  
      +                                 returnValue = 0;
  7593     0145  01F9               	clrf	SPI1_Open@returnValue
  7594     0146                     l2434:
  7595                           
  7596                           ;mcc_generated_files/spi/src/mssp.c: 100:     return returnValue;
  7597     0146  0879               	movf	SPI1_Open@returnValue,w
  7598     0147                     l161:
  7599     0147  0008               	return
  7600     0148                     __end_of_SPI1_Open:
  7601                           
  7602                           	psect	text33
  7603     0F27                     __ptext33:	
  7604 ;; *************** function ___wmul *****************
  7605 ;; Defined at:
  7606 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  multiplier      2    0[COMMON] unsigned int 
  7609 ;;  multiplicand    2    2[COMMON] unsigned int 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  product         2    4[COMMON] unsigned int 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  2    0[COMMON] unsigned int 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;Total ram usage:        6 bytes
  7626 ;; Hardware stack levels used: 1
  7627 ;; This function calls:
  7628 ;;		Nothing
  7629 ;; This function is called by:
  7630 ;;		_SPI1_Open
  7631 ;;		_orientation_Up
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635     0F27                     ___wmul:	
  7636                           ;psect for function ___wmul
  7637                           
  7638     0F27                     l2406:	
  7639                           ;incstack = 0
  7640                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7641                           
  7642     0F27  01F4               	clrf	___wmul@product
  7643     0F28  01F5               	clrf	___wmul@product+1
  7644     0F29                     l2408:
  7645     0F29  1C70               	btfss	___wmul@multiplier,0
  7646     0F2A  2F2C               	goto	u751
  7647     0F2B  2F2D               	goto	u750
  7648     0F2C                     u751:
  7649     0F2C  2F31               	goto	l872
  7650     0F2D                     u750:
  7651     0F2D                     l2410:
  7652     0F2D  0872               	movf	___wmul@multiplicand,w
  7653     0F2E  07F4               	addwf	___wmul@product,f
  7654     0F2F  0873               	movf	___wmul@multiplicand+1,w
  7655     0F30  3DF5               	addwfc	___wmul@product+1,f
  7656     0F31                     l872:
  7657     0F31  3001               	movlw	1
  7658     0F32                     u765:
  7659     0F32  35F2               	lslf	___wmul@multiplicand,f
  7660     0F33  0DF3               	rlf	___wmul@multiplicand+1,f
  7661     0F34  0B89               	decfsz	9,f
  7662     0F35  2F32               	goto	u765
  7663     0F36                     l2412:
  7664     0F36  3001               	movlw	1
  7665     0F37                     u775:
  7666     0F37  36F1               	lsrf	___wmul@multiplier+1,f
  7667     0F38  0CF0               	rrf	___wmul@multiplier,f
  7668     0F39  0B89               	decfsz	9,f
  7669     0F3A  2F37               	goto	u775
  7670     0F3B                     l2414:
  7671     0F3B  0870               	movf	___wmul@multiplier,w
  7672     0F3C  0471               	iorwf	___wmul@multiplier+1,w
  7673     0F3D  1D03               	btfss	3,2
  7674     0F3E  2F40               	goto	u781
  7675     0F3F  2F41               	goto	u780
  7676     0F40                     u781:
  7677     0F40  2F29               	goto	l2408
  7678     0F41                     u780:
  7679     0F41                     l2416:
  7680     0F41  0875               	movf	___wmul@product+1,w
  7681     0F42  00F1               	movwf	?___wmul+1
  7682     0F43  0874               	movf	___wmul@product,w
  7683     0F44  00F0               	movwf	?___wmul
  7684     0F45                     l874:
  7685     0F45  0008               	return
  7686     0F46                     __end_of___wmul:
  7687                           
  7688                           	psect	text34
  7689     0E33                     __ptext34:	
  7690 ;; *************** function _SPI1_Close *****************
  7691 ;; Defined at:
  7692 ;;		line 103 in file "mcc_generated_files/spi/src/mssp.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		None
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used: 1
  7712 ;; This function calls:
  7713 ;;		Nothing
  7714 ;; This function is called by:
  7715 ;;		_ADXL345_init
  7716 ;;		_ADXL345_validation
  7717 ;;		_saveOffsets
  7718 ;;		_ADXL345_ClearInterrupt
  7719 ;;		_setupForFreefall
  7720 ;;		_setupForImpact
  7721 ;;		_setupForInactivity
  7722 ;;		_orientation_Up
  7723 ;;		_calibrate
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727     0E33                     _SPI1_Close:	
  7728                           ;psect for function _SPI1_Close
  7729                           
  7730     0E33                     l2438:	
  7731                           ;incstack = 0
  7732                           ; Regs used in _SPI1_Close: []
  7733                           
  7734                           
  7735                           ;mcc_generated_files/spi/src/mssp.c: 105:     SSP1CON1bits.SSPEN = 0;
  7736     0E33  0024               	movlb	4	; select bank4
  7737     0E34  1295               	bcf	21,5	;volatile
  7738     0E35                     l164:
  7739     0E35  0008               	return
  7740     0E36                     __end_of_SPI1_Close:
  7741                           
  7742                           	psect	text35
  7743     0F46                     __ptext35:	
  7744 ;; *************** function _SPI1_BufferWrite *****************
  7745 ;; Defined at:
  7746 ;;		line 126 in file "mcc_generated_files/spi/src/mssp.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  bufferData      2    0[COMMON] PTR void 
  7749 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7750 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7751 ;;  bufferSize      2    2[COMMON] unsigned int 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  bufferInputS    2    4[COMMON] unsigned int 
  7754 ;;  bufferInput     1    6[COMMON] PTR unsigned char 
  7755 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7756 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      void 
  7759 ;; Registers used:
  7760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;Total ram usage:        7 bytes
  7771 ;; Hardware stack levels used: 1
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_ADXL345_init
  7776 ;;		_saveOffsets
  7777 ;;		_setupForFreefall
  7778 ;;		_setupForImpact
  7779 ;;		_setupForInactivity
  7780 ;;		_orientation_Up
  7781 ;;		_calibrate
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785     0F46                     _SPI1_BufferWrite:	
  7786                           ;psect for function _SPI1_BufferWrite
  7787                           
  7788     0F46                     l2440:	
  7789                           ;incstack = 0
  7790                           ; Regs used in _SPI1_BufferWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7791                           
  7792                           
  7793                           ;mcc_generated_files/spi/src/mssp.c: 126: void SPI1_BufferWrite(void *bufferData, size_t
      +                           bufferSize);mcc_generated_files/spi/src/mssp.c: 127: {;mcc_generated_files/spi/src/mssp
      +                          .c: 128:     uint8_t *bufferInput = bufferData;
  7794     0F46  0870               	movf	SPI1_BufferWrite@bufferData,w
  7795     0F47  00F6               	movwf	SPI1_BufferWrite@bufferInput
  7796     0F48                     l2442:
  7797                           
  7798                           ;mcc_generated_files/spi/src/mssp.c: 129:     size_t bufferInputSize = bufferSize;
  7799     0F48  0873               	movf	SPI1_BufferWrite@bufferSize+1,w
  7800     0F49  00F5               	movwf	SPI1_BufferWrite@bufferInputSize+1
  7801     0F4A  0872               	movf	SPI1_BufferWrite@bufferSize,w
  7802     0F4B  00F4               	movwf	SPI1_BufferWrite@bufferInputSize
  7803                           
  7804                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7805     0F4C  2F5F               	goto	l2450
  7806     0F4D                     l2444:
  7807                           
  7808                           ;mcc_generated_files/spi/src/mssp.c: 131:     {;mcc_generated_files/spi/src/mssp.c: 132:
      +                                   SSP1BUF = *bufferInput;
  7809     0F4D  0876               	movf	SPI1_BufferWrite@bufferInput,w
  7810     0F4E  0086               	movwf	6
  7811     0F4F  0187               	clrf	7
  7812     0F50  0801               	movf	1,w
  7813     0F51  0024               	movlb	4	; select bank4
  7814     0F52  0091               	movwf	17	;volatile
  7815     0F53                     l178:	
  7816                           ;mcc_generated_files/spi/src/mssp.c: 134:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          136:         }
  7817                           
  7818                           
  7819                           ;mcc_generated_files/spi/src/mssp.c: 133:         while (!PIR1bits.SSP1IF)
  7820     0F53  0020               	movlb	0	; select bank0
  7821     0F54  1D91               	btfss	17,3	;volatile
  7822     0F55  2F57               	goto	u801
  7823     0F56  2F58               	goto	u800
  7824     0F57                     u801:
  7825     0F57  2F53               	goto	l178
  7826     0F58                     u800:
  7827     0F58                     l180:
  7828                           
  7829                           ;mcc_generated_files/spi/src/mssp.c: 137:         PIR1bits.SSP1IF = 0;
  7830     0F58  1191               	bcf	17,3	;volatile
  7831     0F59                     l2446:
  7832                           
  7833                           ;mcc_generated_files/spi/src/mssp.c: 138:         bufferInput++;
  7834     0F59  3001               	movlw	1
  7835     0F5A  07F6               	addwf	SPI1_BufferWrite@bufferInput,f
  7836     0F5B                     l2448:
  7837                           
  7838                           ;mcc_generated_files/spi/src/mssp.c: 139:         bufferInputSize--;
  7839     0F5B  3001               	movlw	1
  7840     0F5C  02F4               	subwf	SPI1_BufferWrite@bufferInputSize,f
  7841     0F5D  3000               	movlw	0
  7842     0F5E  3BF5               	subwfb	SPI1_BufferWrite@bufferInputSize+1,f
  7843     0F5F                     l2450:
  7844                           
  7845                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7846     0F5F  0874               	movf	SPI1_BufferWrite@bufferInputSize,w
  7847     0F60  0475               	iorwf	SPI1_BufferWrite@bufferInputSize+1,w
  7848     0F61  1D03               	btfss	3,2
  7849     0F62  2F64               	goto	u811
  7850     0F63  2F65               	goto	u810
  7851     0F64                     u811:
  7852     0F64  2F4D               	goto	l2444
  7853     0F65                     u810:
  7854     0F65                     l182:
  7855     0F65  0008               	return
  7856     0F66                     __end_of_SPI1_BufferWrite:
  7857     0002                     ___latbits      equ	2
  7858     007E                     btemp           set	126	;btemp
  7859     007E                     wtemp0          set	126
  7860     22F0                     __pbssBIGRAM    equ	8944
  7861                           
  7862                           	psect	config
  7863                           
  7864                           ;Config register CONFIG1 @ 0x8007
  7865                           ;	Oscillator Selection
  7866                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7867                           ;	Watchdog Timer Enable
  7868                           ;	WDTE = SWDTEN, WDT controlled by the SWDTEN bit in the WDTCON register
  7869                           ;	Power-up Timer Enable
  7870                           ;	PWRTE = ON, PWRT enabled
  7871                           ;	MCLR Pin Function Select
  7872                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7873                           ;	Flash Program Memory Code Protection
  7874                           ;	CP = OFF, Program memory code protection is disabled
  7875                           ;	Data Memory Code Protection
  7876                           ;	CPD = OFF, Data memory code protection is disabled
  7877                           ;	Brown-out Reset Enable
  7878                           ;	BOREN = ON, Brown-out Reset enabled
  7879                           ;	Clock Out Enable
  7880                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7881                           ;	Internal/External Switchover
  7882                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7883                           ;	Fail-Safe Clock Monitor Enable
  7884                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7885     8007                     	org	32775
  7886     8007  3FCC               	dw	16332
  7887                           
  7888                           ;Config register CONFIG2 @ 0x8008
  7889                           ;	Flash Memory Self-Write Protection
  7890                           ;	WRT = OFF, Write protection off
  7891                           ;	PLL Enable
  7892                           ;	PLLEN = OFF, 4x PLL disabled
  7893                           ;	Stack Overflow/Underflow Reset Enable
  7894                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7895                           ;	Brown-out Reset Voltage Selection
  7896                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7897                           ;	In-Circuit Debugger Mode
  7898                           ;	DEBUG = 0x1, unprogrammed default
  7899                           ;	Low-Voltage Programming Enable
  7900                           ;	LVP = ON, Low-voltage programming enabled
  7901     8008                     	org	32776
  7902     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    83
    Data        2
    BSS         25
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     54      71
    BANK1            80     64      76
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    eeprom_interface$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    eeprom_interface$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    eeprom_interface$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    eeprom_interface$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@d1	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memcpy@s1	PTR const void  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memset@dest	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    MotionEventHandler@state	PTR enum E2688 size(1) Largest target is 1
		 -> main@current_state(BANK0[1]), 

    NULL$1	PTR unsigned char  size(2) Largest target is 0

    S275$4$0	PTR void  size(1) Largest target is 2
		 -> ADXL345_validation@temp(COMMON[2]), 

    S275$5$0	PTR void  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    S275$6$0	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    S275SPI_INTERFACE$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    S275SPI_INTERFACE$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    S275SPI_INTERFACE$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    S275SPI_INTERFACE$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    S275SPI_INTERFACE$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    S275SPI_INTERFACE$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    S275SPI_INTERFACE$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    S275SPI_INTERFACE$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    S275SPI_INTERFACE$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    S275SPI_INTERFACE$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    S275SPI_INTERFACE$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    S275SPI_INTERFACE$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    S275SPI_INTERFACE$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S275SPI_INTERFACE$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S29$4$1	PTR unsigned char  size(2) Largest target is 0

    S29$5$1	PTR unsigned char  size(2) Largest target is 0

    S29EEPROM_INTERFACE$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    S29EEPROM_INTERFACE$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    S29EEPROM_INTERFACE$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    S29EEPROM_INTERFACE$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    sp__memcpy	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    sp__memset	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferExchange@bufferData	PTR void  size(1) Largest target is 2
		 -> ADXL345_validation@temp(COMMON[2]), 

    SPI1_BufferExchange@bufferInput	PTR unsigned char  size(1) Largest target is 2
		 -> ADXL345_validation@temp(COMMON[2]), 

    SPI1_BufferRead@bufferData	PTR void  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferRead@bufferInput	PTR unsigned char  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferWrite@bufferData	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferWrite@bufferInput	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_Host$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    SPI1_Host$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    SPI1_Host$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    SPI1_Host$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    SPI1_Host$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    SPI1_Host$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    SPI1_Host$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    SPI1_Host$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    SPI1_Host$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    SPI1_Host$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    SPI1_Host$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    SPI1_Host$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    SPI1_Host$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SPI1_Host$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SW1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SW1_DefaultInterruptHandler(), NULL(), 

    SW1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SW1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_ADXL345_validation
    _main->_saveOffsets
    _calibrate->_saveOffsets
    _saveOffsets->_SPI1_Open
    _PIN_MANAGER_Initialize->_SW1_SetInterruptHandler
    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _SW1_ISR->_SW1_DefaultInterruptHandler
    _MotionEventHandler->_orientation_Up
    _setupForInactivity->_SPI1_Open
    _setupForInactivity->_memcpy
    _setupForImpact->_SPI1_Open
    _setupForImpact->_memcpy
    _setupForFreefall->_SPI1_Open
    _setupForFreefall->_memcpy
    _orientation_Up->_SPI1_Open
    _ADXL345_ClearInterrupt->_SPI1_Open
    _ADXL345_validation->_SPI1_Open
    _ADXL345_init->_SPI1_Open
    _ADXL345_init->_memcpy
    _SPI1_Open->___wmul

Critical Paths under _main in BANK0

    _main->_MotionEventHandler
    _calibrate->_saveOffsets
    _MotionEventHandler->_orientation_Up

Critical Paths under _main in BANK1

    _main->_calibrate

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    8279
                                             44 BANK0     10    10      0
                       _ADXL345_init
                 _ADXL345_validation
                        _EEPROM_Read
                 _MotionEventHandler
                    _PIN_MANAGER_IOC
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                          _calibrate
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           67    67      0    2133
                                             27 BANK0      3     3      0
                                              0 BANK1     64    64      0
                       _EEPROM_Write
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                     _SPI1_ByteWrite
                         _SPI1_Close
                          _SPI1_Open
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _saveOffsets                                         29    27      2     573
                                             10 COMMON     2     0      2
                                              0 BANK0     27    27      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         4     1      3      99
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      46
                   _CLOCK_Initialize
               _INTERRUPT_Initialize
                     _NVM_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      23
            _SW1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _SW1_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _NVM_Initialize                                       0     0      0       0
                    _NVM_StatusClear
 ---------------------------------------------------------------------------------
 (3) _NVM_StatusClear                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0      23
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_IOC                                      0     0      0       0
                            _SW1_ISR
 ---------------------------------------------------------------------------------
 (2) _SW1_ISR                                              0     0      0       0
                                NULL *
        _SW1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (3) _SW1_DefaultInterruptHandler                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotionEventHandler                                   3     2      1    4085
                                             41 BANK0      3     2      1
             _ADXL345_ClearInterrupt
                     _orientation_Up
                   _setupForFreefall
                     _setupForImpact
                 _setupForInactivity
 ---------------------------------------------------------------------------------
 (2) _setupForInactivity                                  26    26      0     877
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForImpact                                      26    26      0     877
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForFreefall                                    26    26      0     877
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _orientation_Up                                      43    43      0     998
                                             10 COMMON     2     2      0
                                              0 BANK0     41    41      0
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                     _SPI1_ByteWrite
                         _SPI1_Close
                          _SPI1_Open
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SPI1_ByteWrite                                       1     0      1      25
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferRead                                      6     3      3      98
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (2) _ADXL345_ClearInterrupt                               0     0      0     257
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (3) _SPI1_ByteExchange                                    1     0      1      29
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          2     0      2      46
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADXL345_validation                                   2     2      0     393
                                             10 COMMON     2     2      0
                _SPI1_BufferExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferExchange                                  6     3      3     116
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _ADXL345_init                                        26    26      0     779
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               7     1      6     129
                                              0 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6     155
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (2) _SPI1_Open                                            4     3      1     228
                                              6 COMMON     4     3      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     106
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SPI1_Close                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferWrite                                     7     3      4     126
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADXL345_init
     _SPI1_BufferWrite
     _SPI1_Close
     _SPI1_Open
       ___wmul
     _memcpy
     _memset
   _ADXL345_validation
     _SPI1_BufferExchange
     _SPI1_Close
     _SPI1_Open
   _EEPROM_Read
   _MotionEventHandler
     _ADXL345_ClearInterrupt
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
     _orientation_Up
       _SPI1_BufferRead
       _SPI1_BufferWrite
       _SPI1_ByteWrite
       _SPI1_Close
       _SPI1_Open
       ___wmul
     _setupForFreefall
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForImpact
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForInactivity
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
   _PIN_MANAGER_IOC
     _SW1_ISR
       NULL(Fake) *
       _SW1_DefaultInterruptHandler *
   _SPI1_Initialize
   _SYSTEM_Initialize
     _CLOCK_Initialize
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _NVM_Initialize
       _NVM_StatusClear
     _PIN_MANAGER_Initialize
       _SW1_SetInterruptHandler
     _SPI1_Initialize
     _WDT_Initialize
   _calibrate
     _EEPROM_Write
     _SPI1_BufferRead
     _SPI1_BufferWrite
     _SPI1_ByteWrite
     _SPI1_Close
     _SPI1_Open
     _saveOffsets
       _SPI1_BufferWrite
       _SPI1_Close
       _SPI1_Open
   _saveOffsets

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14     12      14    100.0%
BANK0               80     54      71     88.8%
BANK1               80     64      76     95.0%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               80      0       0      0.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               32      0       0      0.0%
BANK10               0      0       0      0.0%
BANK11               0      0       0      0.0%
BANK12               0      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     161      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Feb 05 17:14:23 2025

                      _SPI1_ByteExchange 0E77                                       l71 0E38  
                                     l58 0E40                       ?_SPI1_ByteExchange 0070  
                    ___wmul@multiplicand 0072                                      l103 0E9B  
                                    l200 0E3C                                      l106 0F26  
                                    l301 0EAA                                      l310 0F08  
                                    l304 0E50                                      l161 0147  
                                    l153 0E6B                                      l171 0FBF  
                                    l411 04D9                                      l180 0F58  
                                    l164 0E35                                      l420 0537  
                                    l404 04CA                                      l173 0FD2  
                                    l229 0E76                                      l182 0F65  
                                    l334 0EBD                                      l414 0549  
                                    l406 04CC                                      l191 0F87  
                                    l319 0E58                                      l239 0E4A  
                                    l512 0EE2                                      l169 0FBA  
                                    l417 052A                                      l178 0F53  
                                    l194 0E7A                                      l522 01E3  
                                    l506 0077                                      l187 0F6F  
                                    l611 0446                                      l339 0E44  
                                    l196 0E7F                                      l516 0EEE  
                                    l700 0182                                      l620 0572  
                                    l197 0E82                                      l189 0F74  
                                    l293 0028                                      l542 026C  
                                    l630 059F                                      l703 018E  
                                    l383 0478                                      l384 0467  
                                    l297 0E61                                      l641 0652  
                                    l633 05B1                                      l393 04B2  
                                    l466 0085                                      l722 01D5  
                                    l634 05B3                                      l626 0582  
                                    l394 04A1                                      l475 00DB  
                                    l619 056D                                      l379 0455  
                                    l484 0FF2                                      l548 027A  
                                    l652 06C8                                      l493 0038  
                                    l653 06D7                                      l629 0590  
                                    l389 048F                                      l486 0FFF  
                                    l574 0311                                      l638 07D1  
                                    l398 04EC                                      l479 0FDC  
                                    l487 0FF9                                      l568 0303  
                                    l656 06F9                                      l657 06FB  
                                    l649 06BA                                      l594 039A  
                                    l499 0053                                      l693 0152  
                                    l872 0F31                                      l696 0162  
                                    l874 0F45                                      u800 0F58  
                                    u801 0F57                                      u810 0F65  
                                    u811 0F64                                      u900 0FBF  
                                    u820 0F74                                      u901 0FBE  
                                    u821 0F73                                      u750 0F2D  
                                    u910 0FD2                                      u830 0F87  
                                    u751 0F2C                                      u911 0FD1  
                                    u831 0F86                                      u840 0E7F  
                                    u920 0EA3                                      u841 0E7E  
                                    u921 0EA2                                      u850 0EFC  
                                    u930 0038                                      u851 0EFB  
                                    u931 0037                                      u780 0F41  
                                    u940 0EE2                                      u860 0F06  
                                    u781 0F40                                      u765 0F32  
                                    u941 0EE1                                      u861 0F03  
                                    u790 00E1                                      u950 01E3  
                                    u775 0F37                                      u791 00E0  
                                    u951 01E2                                      u880 0ED4  
                                    u960 027A                                      u881 0ED3  
                                    u961 0279                                      u890 0FAC  
                                    u970 0311                                      u874 0F08  
                                    u891 0FAB                                      u971 0310  
                                    u980 03A8                                      u981 03A7  
                                    u990 03AF                      ??_SPI1_ByteExchange 0071  
                      orientation_Up@msg 0028                                      wreg 0009  
                                   l3010 0657                                     l1340 0ED4  
                                   l3100 0148                                     l3004 0642  
                                   l1334 0FAC                                     l3110 0169  
                                   l3102 0156                                     l3030 06D2  
                                   l3022 067F                                     l3120 0190  
                                   l3112 0170                                     l3104 0159  
                                   l3040 06FE                                     l3032 06D8  
                                   l3024 06B7                                     l3016 066F  
                                   l2410 0F2D                                     l3130 01A2  
                                   l3122 0199                                     l3114 0179  
                                   l3106 015C                                     l3050 0716  
                                   l3042 0701                                     l3034 06E6  
                                   l3026 06BC                                     l3210 044D  
                                   l2412 0F36                                     l2500 0F9E  
                                   l3124 019B                                     l3116 017C  
                                   l3108 0166                                     l2420 0E36  
                                   l3060 0750                                     l3052 071F  
                                   l3044 0706                                     l3036 06E9  
                                   l3028 06C6                                     l3220 0487  
                                   l3212 0457                                     l2414 0F3B  
                                   l2406 0F27                                     l2430 0142  
                                   l2422 00DC                                     l2502 0FA0  
                                   l3142 01B3                                     l3126 019E  
                                   l3118 0186                                     l2510 0F10  
                                   l3046 070F                                     l3230 04B3  
                                   l3222 0491                                     l3214 0464  
                                   l3206 0447                                     l2440 0F46  
                                   l2416 0F41                                     l2408 0F29  
                                   l2432 0145                                     l2424 00DC  
                                   l3128 019F                                     l3136 01A9  
                                   l2520 0F18                                     l2512 0F11  
                                   l2504 0F09                                     l2600 004C  
                                   l3080 07A6                                     l3072 0778  
                                   l3048 0711                                     l3056 0725  
                                   l3224 049E                                     l3216 0469  
                                   l3208 044A                                     l2450 0F5F  
                                   l2442 0F48                                     l2434 0146  
                                   l2426 00E1                                     l2530 0F1F  
                                   l2522 0F1A                                     l2514 0F13  
                                   l2506 0F0D                                     l2610 0063  
                                   l2602 004F                                     l3090 07C0  
                                   l3082 07B0                                     l3074 078A  
                                   l3066 0768                                     l3058 074C  
                                   l3250 04F3                                     l3242 04CD  
                                   l3234 04BF                                     l3226 04A3  
                                   l3218 0476                                     l2444 0F4D  
                                   l2428 0141                                     l2540 0FAD  
                                   l2620 0ED5                                     l2460 0F7D  
                                   l2452 0F66                                     l2700 0294  
                                   l3308 01C4                                     l3164 01B9  
                                   l2532 0F24                                     l2524 0F1C  
                                   l2516 0F15                                     l2508 0F0F  
                                   l2612 0065                                     l2604 0051  
                                   l3092 07CB                                     l3084 07B9  
                                   l3076 0792                                     l3260 0502  
                                   l3252 04F4                                     l3244 04D6  
                                   l3236 04C7                                     l3228 04B0  
                                   l2446 0F59                                     l2438 0E33  
                                   l2542 0FB4                                     l2550 0FCC  
                                   l2630 0EEB                                     l2622 0ED6  
                                   l2454 0F6D                                     l2462 0F81  
                                   l2470 0E39                                     l2710 02B5  
                                   l2702 02A3                                     l2534 0E3D  
                                   l2526 0F1D                                     l2518 0F17  
                                   l2614 0067                                     l2606 005E  
                                   l3094 07CD                                     l3086 07BC  
                                   l3078 079C                                     l3262 0507  
                                   l3254 04F7                                     l3270 0515  
                                   l3246 04D8                                     l2448 0F5B  
                                   l2544 0FC0                                     l2464 0E77  
                                   l2624 0ED9                                     l2456 0F75  
                                   l2800 03A8                                     l2640 01EA  
                                   l2632 01D6                                     l2720 02D5  
                                   l2712 02C3                                     l2704 02A5  
                                   l2480 0EFC                                     l2472 0E45  
                                   l2552 0E6C                                     l2560 0008  
                                   l2536 0E62                                     l2528 0F1E  
                                   l2616 0072                                     l2608 0060  
                                   l3096 07D0                                     l3088 07BE  
                                   l3272 0517                                     l3264 0509  
                                   l3256 04FC                                     l3248 04F1  
                                   l2490 0F88                                     l2482 0EBE  
                                   l2546 0FC6                                     l2466 0E80  
                                   l2626 0EE4                                     l2458 0F7B  
                                   l2810 03C4                                     l2802 03B2  
                                   l2650 020E                                     l2642 01EC  
                                   l2634 01D7                                     l2730 02F6  
                                   l2722 02D8                                     l2714 02C6  
                                   l2706 02B0                                     l2554 0E6F  
                                   l2474 0E4B                                     l2570 0020  
                                   l2562 000B                                     l2538 0E66  
                                   l2618 0074                                     l3274 051A  
                                   l3266 050A                                     l3258 04FE  
                                   l2492 0F8C                                     l2484 0EC1  
                                   l2548 0FC8                                     l2900 0FFE  
                                   l2628 0EE9                                     l2820 03D5  
                                   l2812 03C6                                     l2804 03B5  
                                   l2660 022F                                     l2652 0219  
                                   l2644 01EF                                     l2636 01DA  
                                   l2732 02F8                                     l2724 02E6  
                                   l2716 02C8                                     l2708 02B2  
                                   l2740 0304                                     l2476 0EEF  
                                   l2580 0E51                                     l2572 0027  
                                   l2564 0010                                     l2556 0004  
                                   l3284 052C                                     l3276 0520  
                                   l3268 050D                                     l2494 0F8F  
                                   l2486 0EC6                                     l2910 0088  
                                   l2830 03F4                                     l2822 03DA  
                                   l2814 03CD                                     l2806 03B7  
                                   l2670 024F                                     l2662 0231  
                                   l2654 021B                                     l2646 01FD  
                                   l2638 01E5                                     l2734 02F9  
                                   l2726 02E9                                     l2718 02D3  
                                   l2750 031A                                     l2742 0305  
                                   l2478 0EF7                                     l2574 0E9C  
                                   l2582 0E54                                     l2566 0014  
                                   l2558 0006                                     l2590 002F  
                                   l3286 0535                                     l3278 0527  
                                   l2496 0F95                                     l2488 0EC8  
                                   l2920 00B4                                     l2912 0096  
                                   l2904 0078                                     l2840 042E  
                                   l2832 03F9                                     l2824 03E3  
                                   l2816 03CF                                     l2808 03B9  
                                   l2680 0262                                     l2672 0252  
                                   l2664 023C                                     l2656 021E  
                                   l2648 020C                                     l2736 02FE  
                                   l2728 02EB                                     l2760 0347  
                                   l2752 031D                                     l2744 0308  
                                   l2576 0EA3                                     l2568 001D  
                                   l2584 0E41                                     l2592 003B  
                                   l2498 0F99                                     l2930 00D5  
                                   l2922 00B7                                     l2914 00A5  
                                   l2906 0079                                     l2850 0445  
                                   l2842 043A                                     l2834 03FE  
                                   l2826 03E5                                     l2818 03D2  
                                   l2682 0267                                     l2674 0254  
                                   l2666 023E                                     l2658 022C  
                                   l2738 0300                                     l2690 0271  
                                   l2770 035F                                     l2762 0349  
                                   l2754 032B                                     l2746 0313  
                                   l2578 0EA8                                     l2594 003D  
                                   l2586 002B                                     l2932 00D7  
                                   l2924 00C5                                     l2916 00A7  
                                   l2908 007C                                     l2860 0E96  
                                   l2844 0443                                     l2836 040E  
                                   l2828 03E8                                     l2684 0269  
                                   l2676 025F                                     l2668 0241  
                                   l2692 027C                                     l2780 0380  
                                   l2772 036A                                     l2764 034C  
                                   l2756 033A                                     l2748 0318  
                                   l2596 003F                                     l2588 002C  
                                   l2940 0559                                     l2934 00DA  
                                   l2926 00C8                                     l2918 00B2  
                                   l2862 0E97                                     l2854 0E8F  
                                   l2838 041E                                     l2678 0261  
                                   l2694 0281                                     l2686 026D  
                                   l2790 0395                                     l2782 0382  
                                   l2774 036C                                     l2766 035A  
                                   l2758 033C                                     l2870 0E59  
                                   l2598 004A                                     l2950 0574  
                                   l2942 055C                                     l2928 00CA  
                                   l2864 0E98                                     l2856 0E92  
                                   l2696 0283                                     l2688 026E  
                                   l2792 0397                                     l2784 038D  
                                   l2776 036F                                     l2768 035D  
                                   l2872 0E5E                                     l2880 0EB4  
                                   l2960 05A0                                     l2952 057F  
                                   l2944 055E                                     l2890 0FEC  
                                   l2866 0E99                                     l2858 0E94  
                                   l2794 039B                                     l2698 0286  
                                   l2786 038F                                     l2778 037D  
                                   l2882 0EB7                                     l2874 0EAB  
                                   l2970 05B9                                     l2962 05AE  
                                   l2954 0584                                     l2946 0561  
                                   l2938 054E                                     l2892 0FF4  
                                   l2884 0FD3                                     l2796 039C  
                                   l2788 0390                                     l2876 0EAE  
                                   l2980 05D2                                     l2972 05BE  
                                   l2956 058E                                     l2948 0564  
                                   l2894 0FF7                                     l2886 0FDE  
                                   l2798 039F                                     l2878 0EB1  
                                   l2990 05FA                                     l2982 05D6  
                                   l2974 05C7                                     l2958 059A  
                                   l2888 0FE3                                     l2984 05DF  
                                   l2976 05C9                                     l2968 05B6  
                                   l2898 0FFB                                     l2994 05FC  
                                   l2986 05E4                                     l2978 05CE  
                                   l2996 0626                                     l2988 05F3  
                                   l2998 062A                                     u1000 0443  
                                   u1001 0442                                     u1010 0E5E  
                                   u1011 0E5D                                     u1020 0FDC  
                                   u1021 0FDB                                     u1030 0FF2  
                                   u1031 0FF1                                     u1040 0085  
                                   u1200 06F8                                     u1120 062A  
                                   u1041 0084                                     u1201 06F7  
                                   u1121 0629                                     u1105 0605  
                                   u1130 0641                                     u1050 0556  
                                   u1131 0640                                     u1115 061A  
                                   u1300 01B2                                     u1220 0750  
                                   u1140 0651                                     u1060 056D  
                                   u1301 01B1                                     u1221 074F  
                                   u1205 06F4                                     u1141 0650  
                                   u1061 056C                                     u1230 0767  
                                   u1150 0657                                     u1070 059F  
                                   u1231 0766                                     u1215 072F  
                                   u1151 0656                                     u1135 063D  
                                   u1071 059E                                     u1240 0777  
                                   u1160 066E                                     u1080 05F3  
                                   u1400 0549                                     u1241 0776  
                                   u1161 066D                                     u1145 064D  
                                   u1081 05F2                                     u1401 0548  
                                   u1250 0156                                     u1170 067E  
                                   u1090 05FA                                     u1251 0155  
                                   u1235 0763                                     u1171 067D  
                                   u1091 05F9                                     u1260 0166  
                                   u1340 0455                                     u1261 0165  
                                   u1245 0773                                     u1165 066A  
                                   u1085 05EF                                     u1405 0545  
                                   u1341 0454                                     _LATA 010C  
                                   u1270 0179                                     u1190 06D7  
                                   u1350 048F                                     u1271 0178  
                                   u1191 06D6                                     u1175 067A  
                                   u1351 048E                                     _LATC 010E  
                                   u1280 0186                                     u1360 04BF  
                                   u1281 0185                                     u1185 06AB  
                                   u1361 04BE                                     u1417 045D  
                                   u1290 018E                                     u1370 04C7  
                                   u1291 018D                                     u1507 05A6  
                                   u1371 04C6                                     u1427 046F  
                                   u1380 04EB                                     u1517 05DA  
                                   u1381 04EA                                     u1437 047F  
                                   u1390 0527                                     u1527 06C0  
                                   u1391 0526                                     u1447 0497  
                                   u1537 06CC                                     u1385 04E7  
                                   u1457 04A9                                     u1547 06DE  
                                   u1467 04D1                                     u1557 071A  
                                   u1477 0530                                     u1567 0EF2  
                                   u1487 0588                                     u1577 0194  
                                   u1497 0594                                     u1587 03C9  
                                   _LWLO 0CAD                                     _WPUA 020C  
                                   _WPUC 020E                        main@current_state 0055  
                        __end_of_SW1_ISR 0EAB                  __end_of_NVM_StatusClear 0E39  
                                   _main 0447                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006                                     btemp 007E  
                           _unlockKeyLow 007D              _INT_DefaultInterruptHandler 0000  
                                   start 0002                __end_of_SPI1_ByteExchange 0E83  
        __end_of_INT_SetInterruptHandler 0E4B                     __end_of_EEPROM_Write 0F27  
                         _no_motion_init 1045                              ?_SPI1_Close 0070  
                                  ?_main 0070                                    _EEADR 0191  
                                  _IOCAF 0393                                    _IOCAN 0392  
                                  _IOCAP 0391                                    _TRISA 008C  
                                  _TRISC 008E                      orientation_Up@F2712 0056  
                           _ADXL345_init 0078                  __end_of_PIN_MANAGER_IOC 0E62  
                         _WDT_Initialize 0E41                                    main@i 0051  
                _SW1_SetInterruptHandler 0E4B                            _unlockKeyHigh 007C  
                                  pclath 000A          SPI1_BufferWrite@bufferInputSize 0074  
                                  status 0003                                    wtemp0 007E  
                       ??_setupForImpact 007A                       _ADXL345_validation 0FD3  
                       EEPROM_Write@data 0072                          __initialization 07D2  
                           __end_of_main 054E                   calibrate@addr_val_1011 00BD  
                    ?_ADXL345_validation 0070                   __end_of_no_motion_init 1049  
         SPI1_BufferRead@bufferInputSize 0073       SPI1_BufferExchange@bufferInputSize 0073  
                                 ??_main 004C                             ?_saveOffsets 007A  
                 __end_of_WDT_Initialize 0E45                                ??_SW1_ISR 0071  
                   ??_ADXL345_validation 007A                                   _EEADRH 0192  
                                 _EEADRL 0191                                   _EEDATA 0193  
                                 _EEDATH 0194                                   _EEDATL 0193  
                                 _EECON1 0195                                   _EECON2 0196  
               __end_of_SPI1_BufferWrite 0F66                                   _ANSELA 018C  
                                 _ANSELC 018E                                   _BORCON 0116  
                                 _INLVLA 038C                                   _INLVLC 038E  
                                 _OSCCON 0099                                   _WDTCON 0097  
                       ?_NVM_StatusClear 0070                         _eeprom_interface 102B  
                      __end_of_SPI1_Host 101C                        __end_of_SPI1_Open 0148  
                                 ___wmul 0F27                 __end_of_setupForFreefall 026D  
                                 _memcpy 0F88                                   _memset 0EBE  
                      ?_CLOCK_Initialize 0070                        ??_SPI1_BufferRead 0073  
               ??_ADXL345_ClearInterrupt 007A                       ??_CLOCK_Initialize 0070  
                 ADXL345_validation@temp 007A                          ?_WDT_Initialize 0070  
              ??_SW1_SetInterruptHandler 0072                        setupForImpact@msg 0020  
SW1_SetInterruptHandler@InterruptHandler 0070  INT_SetInterruptHandler@InterruptHandler 0070  
                       ?_PIN_MANAGER_IOC 0070                           _SPI1_IsRxReady 0000  
                         _SPI1_IsTxReady 0000                         ??_NVM_Initialize 0070  
                      _SYSTEM_Initialize 0EAB                  __end_of__initialization 07FD  
                         _SPI1_ByteWrite 0E39                       ?_SYSTEM_Initialize 0070  
          __end_of_ADXL345_init_settings 1045                           __pcstackCOMMON 0070  
                         calibrate@F2724 00E0                             __pidataBANK0 0E31  
                    ??_SYSTEM_Initialize 0072                        ??_SPI1_Initialize 0070  
                         calibrate@Z_n1g 00AC                       _spi1_configuration 101C  
                         _OPTION_REGbits 0095                           calibrate@sum_X 00AE  
                         calibrate@sum_Y 00B0                           calibrate@sum_Z 00BE  
                             _dataBuffer 22F0                __end_of_SYSTEM_Initialize 0EBE  
                      calibrate@acc_data 00A0                        saveOffsets@x_axis 0020  
                           _EEPROM_Write 0F09                        saveOffsets@y_axis 007A  
                             __pbssBANK0 0056                               __pbssBANK1 00E0  
                      saveOffsets@z_axis 007B                   __end_of_SPI1_ByteWrite 0E3D  
             __end_of_MotionEventHandler 01D6                        calibrate@addr_val 00BC  
            SPI1_BufferWrite@bufferInput 0076                               __pmaintext 0447  
                                ?___wmul 0070                SPI1_BufferRead@bufferData 0070  
              SPI1_BufferRead@bufferSize 0071                                  ?_memcpy 0070  
                                ?_memset 0070                                  _APFCON0 011D  
                           ??_SPI1_Close 0070                                  _OSCTUNE 0098  
                                _SSP1ADD 0212                                  _SSP1BUF 0211  
                                _SW1_ISR 0E9C                        __end_of_calibrate 07D2  
                        ?_SPI1_ByteWrite 0070                        __end_of_fall_init 1051  
                MotionEventHandler@state 0049                               calibrate@i 00B8  
                     __end_of_SPI1_Close 0E36            SPI1_BufferExchange@bufferData 0070  
          SPI1_BufferExchange@bufferSize 0071           SPI1_BufferExchange@bufferInput 0075  
                                __ptext1 054E                                  __ptext2 0029  
                                __ptext3 0F09                                  __ptext4 0EAB  
                                __ptext5 0E41                                  __ptext6 0E62  
                                __ptext7 0004                                  __ptext8 0E4B  
                                __ptext9 0E3D                 __end_of_eeprom_interface 1039  
               ??_PIN_MANAGER_Initialize 0072                                _IOCAFbits 0393  
                _INT_SetInterruptHandler 0E45                  ADXL345_validation@F2696 0065  
                                clrloop0 0E84                     end_of_initialization 07FD  
                      ?_SPI1_BufferWrite 0070             ?_SW1_DefaultInterruptHandler 0070  
                                memcpy@d 0079                                  memcpy@n 0074  
                                memcpy@s 0076                            ??_EEPROM_Read 0072  
                                memset@c 0072                                  memset@n 0074  
                                memset@p 0076                       ??_SPI1_BufferWrite 0074  
                        _EEPROM_ByteRead 0000                   _ADXL345_ClearInterrupt 0ED5  
                        _SPI1_BufferRead 0F66                               _timer_20ms 005E  
                              _SPI1_Host 1000                        ?_setupForFreefall 0070  
                              _SPI1_Open 00DC                         ??_WDT_Initialize 0070  
                     ??_setupForFreefall 007A                                _PORTAbits 000C  
                    _SPI1_BufferExchange 0FAD                     ?_SPI1_BufferExchange 0070  
          ??_SW1_DefaultInterruptHandler 0070                          _SPI1_Initialize 0E62  
                    __end_of_EEPROM_Read 0E9C             __end_of_INTERRUPT_Initialize 0E77  
                             ?_SPI1_Open 0076                           __end_of___wmul 0F46  
                         __end_of_memcpy 0FAD                           __end_of_memset 0ED5  
              ??_INT_SetInterruptHandler 0072                      start_initialization 07D2  
                        calibrate@i_1010 00BA                             calibrate@msg 00C4  
                  ??_SPI1_BufferExchange 0073                  __end_of_SPI1_BufferRead 0F88  
                  setupForInactivity@msg 0020                          ADXL345_init@msg 0020  
                  _ADXL345_init_settings 1039                                 ??___wmul 0074  
                     _MotionEventHandler 0148                           _orientation_Up 039B  
             __end_of_setupForInactivity 039B                              __pdataBANK0 0065  
                               ??_memcpy 0076                                 ??_memset 0076  
                             memset@dest 0070                 ?_SW1_SetInterruptHandler 0070  
                    ?_MotionEventHandler 0049                            _SPI1_ByteRead 0000  
                            __pbssBIGRAM 22F0                            ?_ADXL345_init 0070  
                            __pbssCOMMON 007C                                ___latbits 0002  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
                       ??_SPI1_ByteWrite 0071                                 ?_SW1_ISR 0070  
                __end_of_SPI1_Initialize 0E6C                                _calibrate 054E  
                            _EEPROM_Read 0E8F                     ??_MotionEventHandler 004A  
                              __pnvBANK0 0061               SPI1_BufferWrite@bufferData 0070  
                 _PIN_MANAGER_Initialize 0004               SPI1_BufferWrite@bufferSize 0072  
                 __end_of_orientation_Up 0447                     SPI1_Open@returnValue 0079  
                              _fall_init 104D                              ??_SPI1_Open 0077  
                          ??_saveOffsets 007C               SPI1_BufferRead@bufferInput 0075  
                         ??_ADXL345_init 007A                        ??_NVM_StatusClear 0070  
                    __end_of_impact_init 104D                     _INTERRUPT_Initialize 0E6C  
                ?_ADXL345_ClearInterrupt 0070                         _CLOCK_Initialize 0E51  
                             ?_calibrate 0070                           ___wmul@product 0074  
                       ?_SPI1_BufferRead 0070                                 _LATAbits 010C  
                               _LATCbits 010E                                clear_ram0 0E83  
                               _PIE1bits 0091                                 _PIR1bits 0011  
                        ?_orientation_Up 0070                     _SW1_InterruptHandler 0061  
                               _SSP1CON1 0215                                 _SSP1CON3 0217  
        __end_of_SW1_SetInterruptHandler 0E51                       calibrate@sum_X_avg 00C0  
                     calibrate@sum_Y_avg 00C2                       calibrate@sum_Z_avg 00DE  
                               _SSP1STAT 0214                        ??_PIN_MANAGER_IOC 0071  
                         _setupForImpact 026D                        _SPI1_Deinitialize 0000  
                              main@i_875 0053                        ___wmul@multiplier 0070  
                              main@X_val 004E                                main@Y_val 004F  
                              main@Z_val 0050                      __end_of_saveOffsets 0078  
                       ?_SPI1_Initialize 0070           __end_of_ADXL345_ClearInterrupt 0EEF  
                  ?_INTERRUPT_Initialize 0070                           saveOffsets@msg 0021  
                             _EECON1bits 0195                     calibrate@offset_0g_X 00B2  
                   calibrate@offset_0g_Y 00B4                     calibrate@offset_0g_Z 00B6  
                              memcpy@tmp 0078                   __end_of_setupForImpact 0304  
                            _impact_init 1049               __end_of_ADXL345_validation 1000  
                               __ptext10 0E36                                 __ptext11 0E6C  
                               __ptext20 01D6                                 __ptext12 0E45  
                               __ptext21 039B                                 __ptext13 0E51  
                               __ptext30 0EBE                                 __ptext22 0E39  
                               __ptext14 0E59                                 __ptext31 0F88  
                               __ptext23 0F66                                 __ptext15 0E9C  
                               __ptext32 00DC                                 __ptext24 0ED5  
                               __ptext16 0EEF                                 __ptext33 0F27  
                               __ptext25 0E77                                 __ptext17 0148  
                               __ptext34 0E33                                 __ptext26 0E8F  
                               __ptext18 0304                                 __ptext35 0F46  
                               __ptext27 0FD3                                 __ptext19 026D  
                               __ptext28 0FAD                                 __ptext29 0078  
                           _SSP1CON1bits 0215                            ?_EEPROM_Write 0070  
                 SPI1_ByteWrite@byteData 0070                              ??_calibrate 003B  
 __end_of_acceleration_squared_threshold 1053           _acceleration_squared_threshold 1051  
                    setupForFreefall@msg 0020                     __end_of_ADXL345_init 00DC  
                         _NVM_Initialize 0E3D                          ?_setupForImpact 0070  
                            _saveOffsets 0029                               _INTCONbits 000B  
                               memcpy@d1 0070                                 memcpy@s1 0072  
                   _INT_InterruptHandler 0063                   orientation_Up@acc_data 0020  
            __end_of_SPI1_BufferExchange 0FD3                       _setupForInactivity 0304  
                 ??_INTERRUPT_Initialize 0072                           ??_EEPROM_Write 0073  
                 orientation_Up@addr_val 0042      __end_of_SW1_DefaultInterruptHandler 0F09  
            _SW1_DefaultInterruptHandler 0EEF             _orientation_check_timer_20ms 005C  
                 orientation_Up@g_deltaX 0043                   orientation_Up@g_deltaY 0045  
                 orientation_Up@g_deltaZ 0047                         _EEPROM_ByteWrite 0000  
                    ?_setupForInactivity 0070                             ?_EEPROM_Read 0070  
                ?_PIN_MANAGER_Initialize 0070                SPI1_ByteExchange@byteData 0070  
                 _good_orientation_count 0060                   __end_of_NVM_Initialize 0E41  
              orientation_Up@g_magnitude 0026                       EEPROM_Read@address 0070  
                        _NVM_StatusClear 0E36                         _SPI1_BufferWrite 0F46  
               ?_INT_SetInterruptHandler 0070                 __end_of_CLOCK_Initialize 0E59  
                   ??_setupForInactivity 007A                            __pstringtext1 1000  
                          __pstringtext2 101C                            __pstringtext3 102B  
                          __pstringtext4 1051                            __pstringtext5 1039  
                          __pstringtext6 1045                            __pstringtext7 1049  
                          __pstringtext8 104D                               _SPI1_Close 0E33  
                       _setupForFreefall 01D6      EEPROM_Write@globalInterruptBitValue 0073  
         __end_of_PIN_MANAGER_Initialize 0029                         ??_orientation_Up 007A  
                        _PIN_MANAGER_IOC 0E59                               _NVM_IsBusy 0000  
                SPI1_Open@spiConfigIndex 0076                          ?_NVM_Initialize 0070  
                    EEPROM_Write@address 0070               __end_of_spi1_configuration 102B  
