

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Feb 06 16:40:55 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16LF1825
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,space=0,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,space=0,delta=2,noexec
    13                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    15                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	clrtext,global,class=CODE,space=0,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=2
    53                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=2
    54                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2,group=1
    56                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    59                           	dabs	1,0x620,48
    60                           	dabs	1,0x5A0,80
    61                           	dabs	1,0x520,80
    62                           	dabs	1,0x4C0,48
    63                           	dabs	1,0x22F0,0,_dataBuffer
    64                           	dabs	1,0x7E,2
    65     0000                     
    66                           ; Generated 07/09/2023 GMT
    67                           ; 
    68                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC16LF1825 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100     0008                     bsr             equ	8
   101     0005                     fsr0h           equ	5
   102     0004                     fsr0l           equ	4
   103     0007                     fsr1h           equ	7
   104     0006                     fsr1l           equ	6
   105     0000                     indf            equ	0
   106     0000                     indf0           equ	0
   107     0001                     indf1           equ	1
   108     000B                     intcon          equ	11
   109     0002                     pc              equ	2
   110     0002                     pcl             equ	2
   111     000A                     pclath          equ	10
   112     0003                     status          equ	3
   113     0009                     wreg            equ	9
   114     0000                     INDF0           equ	0	;# 
   115     0001                     INDF1           equ	1	;# 
   116     0002                     PCL             equ	2	;# 
   117     0003                     STATUS          equ	3	;# 
   118     0004                     FSR0L           equ	4	;# 
   119     0005                     FSR0H           equ	5	;# 
   120     0006                     FSR1L           equ	6	;# 
   121     0007                     FSR1H           equ	7	;# 
   122     0008                     BSR             equ	8	;# 
   123     0009                     WREG            equ	9	;# 
   124     000A                     PCLATH          equ	10	;# 
   125     000B                     INTCON          equ	11	;# 
   126     000C                     PORTA           equ	12	;# 
   127     000E                     PORTC           equ	14	;# 
   128     0011                     PIR1            equ	17	;# 
   129     0012                     PIR2            equ	18	;# 
   130     0013                     PIR3            equ	19	;# 
   131     0015                     TMR0            equ	21	;# 
   132     0016                     TMR1            equ	22	;# 
   133     0016                     TMR1L           equ	22	;# 
   134     0017                     TMR1H           equ	23	;# 
   135     0018                     T1CON           equ	24	;# 
   136     0019                     T1GCON          equ	25	;# 
   137     001A                     TMR2            equ	26	;# 
   138     001B                     PR2             equ	27	;# 
   139     001C                     T2CON           equ	28	;# 
   140     001E                     CPSCON0         equ	30	;# 
   141     001F                     CPSCON1         equ	31	;# 
   142     008C                     TRISA           equ	140	;# 
   143     008E                     TRISC           equ	142	;# 
   144     0091                     PIE1            equ	145	;# 
   145     0092                     PIE2            equ	146	;# 
   146     0093                     PIE3            equ	147	;# 
   147     0095                     OPTION_REG      equ	149	;# 
   148     0096                     PCON            equ	150	;# 
   149     0097                     WDTCON          equ	151	;# 
   150     0098                     OSCTUNE         equ	152	;# 
   151     0099                     OSCCON          equ	153	;# 
   152     009A                     OSCSTAT         equ	154	;# 
   153     009B                     ADRES           equ	155	;# 
   154     009B                     ADRESL          equ	155	;# 
   155     009C                     ADRESH          equ	156	;# 
   156     009D                     ADCON0          equ	157	;# 
   157     009E                     ADCON1          equ	158	;# 
   158     010C                     LATA            equ	268	;# 
   159     010E                     LATC            equ	270	;# 
   160     0111                     CM1CON0         equ	273	;# 
   161     0112                     CM1CON1         equ	274	;# 
   162     0113                     CM2CON0         equ	275	;# 
   163     0114                     CM2CON1         equ	276	;# 
   164     0115                     CMOUT           equ	277	;# 
   165     0116                     BORCON          equ	278	;# 
   166     0117                     FVRCON          equ	279	;# 
   167     0118                     DACCON0         equ	280	;# 
   168     0119                     DACCON1         equ	281	;# 
   169     011A                     SRCON0          equ	282	;# 
   170     011B                     SRCON1          equ	283	;# 
   171     011D                     APFCON0         equ	285	;# 
   172     011E                     APFCON1         equ	286	;# 
   173     018C                     ANSELA          equ	396	;# 
   174     018E                     ANSELC          equ	398	;# 
   175     0191                     EEADR           equ	401	;# 
   176     0191                     EEADRL          equ	401	;# 
   177     0192                     EEADRH          equ	402	;# 
   178     0193                     EEDAT           equ	403	;# 
   179     0193                     EEDATL          equ	403	;# 
   180     0193                     EEDATA          equ	403	;# 
   181     0194                     EEDATH          equ	404	;# 
   182     0195                     EECON1          equ	405	;# 
   183     0196                     EECON2          equ	406	;# 
   184     0199                     RCREG           equ	409	;# 
   185     019A                     TXREG           equ	410	;# 
   186     019B                     SPBRG           equ	411	;# 
   187     019B                     SPBRGL          equ	411	;# 
   188     019C                     SPBRGH          equ	412	;# 
   189     019D                     RCSTA           equ	413	;# 
   190     019E                     TXSTA           equ	414	;# 
   191     019F                     BAUDCON         equ	415	;# 
   192     020C                     WPUA            equ	524	;# 
   193     020E                     WPUC            equ	526	;# 
   194     0211                     SSP1BUF         equ	529	;# 
   195     0211                     SSPBUF          equ	529	;# 
   196     0212                     SSP1ADD         equ	530	;# 
   197     0212                     SSPADD          equ	530	;# 
   198     0213                     SSP1MSK         equ	531	;# 
   199     0213                     SSPMSK          equ	531	;# 
   200     0214                     SSP1STAT        equ	532	;# 
   201     0214                     SSPSTAT         equ	532	;# 
   202     0215                     SSP1CON1        equ	533	;# 
   203     0215                     SSPCON1         equ	533	;# 
   204     0215                     SSPCON          equ	533	;# 
   205     0216                     SSP1CON2        equ	534	;# 
   206     0216                     SSPCON2         equ	534	;# 
   207     0217                     SSP1CON3        equ	535	;# 
   208     0217                     SSPCON3         equ	535	;# 
   209     0291                     CCPR1           equ	657	;# 
   210     0291                     CCPR1L          equ	657	;# 
   211     0292                     CCPR1H          equ	658	;# 
   212     0293                     CCP1CON         equ	659	;# 
   213     0294                     PWM1CON         equ	660	;# 
   214     0295                     CCP1AS          equ	661	;# 
   215     0295                     ECCP1AS         equ	661	;# 
   216     0296                     PSTR1CON        equ	662	;# 
   217     0298                     CCPR2           equ	664	;# 
   218     0298                     CCPR2L          equ	664	;# 
   219     0299                     CCPR2H          equ	665	;# 
   220     029A                     CCP2CON         equ	666	;# 
   221     029B                     PWM2CON         equ	667	;# 
   222     029C                     CCP2AS          equ	668	;# 
   223     029D                     PSTR2CON        equ	669	;# 
   224     029E                     CCPTMRS         equ	670	;# 
   225     029E                     CCPTMRS0        equ	670	;# 
   226     0311                     CCPR3           equ	785	;# 
   227     0311                     CCPR3L          equ	785	;# 
   228     0312                     CCPR3H          equ	786	;# 
   229     0313                     CCP3CON         equ	787	;# 
   230     0318                     CCPR4           equ	792	;# 
   231     0318                     CCPR4L          equ	792	;# 
   232     0319                     CCPR4H          equ	793	;# 
   233     031A                     CCP4CON         equ	794	;# 
   234     038C                     INLVLA          equ	908	;# 
   235     038E                     INLVLC          equ	910	;# 
   236     0391                     IOCAP           equ	913	;# 
   237     0392                     IOCAN           equ	914	;# 
   238     0393                     IOCAF           equ	915	;# 
   239     039A                     CLKRCON         equ	922	;# 
   240     039C                     MDCON           equ	924	;# 
   241     039D                     MDSRC           equ	925	;# 
   242     039E                     MDCARL          equ	926	;# 
   243     039F                     MDCARH          equ	927	;# 
   244     0415                     TMR4            equ	1045	;# 
   245     0416                     PR4             equ	1046	;# 
   246     0417                     T4CON           equ	1047	;# 
   247     041C                     TMR6            equ	1052	;# 
   248     041D                     PR6             equ	1053	;# 
   249     041E                     T6CON           equ	1054	;# 
   250     0FE4                     STATUS_SHAD     equ	4068	;# 
   251     0FE5                     WREG_SHAD       equ	4069	;# 
   252     0FE6                     BSR_SHAD        equ	4070	;# 
   253     0FE7                     PCLATH_SHAD     equ	4071	;# 
   254     0FE8                     FSR0L_SHAD      equ	4072	;# 
   255     0FE9                     FSR0H_SHAD      equ	4073	;# 
   256     0FEA                     FSR1L_SHAD      equ	4074	;# 
   257     0FEB                     FSR1H_SHAD      equ	4075	;# 
   258     0FED                     STKPTR          equ	4077	;# 
   259     0FEE                     TOSL            equ	4078	;# 
   260     0FEF                     TOSH            equ	4079	;# 
   261     0000                     INDF0           equ	0	;# 
   262     0001                     INDF1           equ	1	;# 
   263     0002                     PCL             equ	2	;# 
   264     0003                     STATUS          equ	3	;# 
   265     0004                     FSR0L           equ	4	;# 
   266     0005                     FSR0H           equ	5	;# 
   267     0006                     FSR1L           equ	6	;# 
   268     0007                     FSR1H           equ	7	;# 
   269     0008                     BSR             equ	8	;# 
   270     0009                     WREG            equ	9	;# 
   271     000A                     PCLATH          equ	10	;# 
   272     000B                     INTCON          equ	11	;# 
   273     000C                     PORTA           equ	12	;# 
   274     000E                     PORTC           equ	14	;# 
   275     0011                     PIR1            equ	17	;# 
   276     0012                     PIR2            equ	18	;# 
   277     0013                     PIR3            equ	19	;# 
   278     0015                     TMR0            equ	21	;# 
   279     0016                     TMR1            equ	22	;# 
   280     0016                     TMR1L           equ	22	;# 
   281     0017                     TMR1H           equ	23	;# 
   282     0018                     T1CON           equ	24	;# 
   283     0019                     T1GCON          equ	25	;# 
   284     001A                     TMR2            equ	26	;# 
   285     001B                     PR2             equ	27	;# 
   286     001C                     T2CON           equ	28	;# 
   287     001E                     CPSCON0         equ	30	;# 
   288     001F                     CPSCON1         equ	31	;# 
   289     008C                     TRISA           equ	140	;# 
   290     008E                     TRISC           equ	142	;# 
   291     0091                     PIE1            equ	145	;# 
   292     0092                     PIE2            equ	146	;# 
   293     0093                     PIE3            equ	147	;# 
   294     0095                     OPTION_REG      equ	149	;# 
   295     0096                     PCON            equ	150	;# 
   296     0097                     WDTCON          equ	151	;# 
   297     0098                     OSCTUNE         equ	152	;# 
   298     0099                     OSCCON          equ	153	;# 
   299     009A                     OSCSTAT         equ	154	;# 
   300     009B                     ADRES           equ	155	;# 
   301     009B                     ADRESL          equ	155	;# 
   302     009C                     ADRESH          equ	156	;# 
   303     009D                     ADCON0          equ	157	;# 
   304     009E                     ADCON1          equ	158	;# 
   305     010C                     LATA            equ	268	;# 
   306     010E                     LATC            equ	270	;# 
   307     0111                     CM1CON0         equ	273	;# 
   308     0112                     CM1CON1         equ	274	;# 
   309     0113                     CM2CON0         equ	275	;# 
   310     0114                     CM2CON1         equ	276	;# 
   311     0115                     CMOUT           equ	277	;# 
   312     0116                     BORCON          equ	278	;# 
   313     0117                     FVRCON          equ	279	;# 
   314     0118                     DACCON0         equ	280	;# 
   315     0119                     DACCON1         equ	281	;# 
   316     011A                     SRCON0          equ	282	;# 
   317     011B                     SRCON1          equ	283	;# 
   318     011D                     APFCON0         equ	285	;# 
   319     011E                     APFCON1         equ	286	;# 
   320     018C                     ANSELA          equ	396	;# 
   321     018E                     ANSELC          equ	398	;# 
   322     0191                     EEADR           equ	401	;# 
   323     0191                     EEADRL          equ	401	;# 
   324     0192                     EEADRH          equ	402	;# 
   325     0193                     EEDAT           equ	403	;# 
   326     0193                     EEDATL          equ	403	;# 
   327     0193                     EEDATA          equ	403	;# 
   328     0194                     EEDATH          equ	404	;# 
   329     0195                     EECON1          equ	405	;# 
   330     0196                     EECON2          equ	406	;# 
   331     0199                     RCREG           equ	409	;# 
   332     019A                     TXREG           equ	410	;# 
   333     019B                     SPBRG           equ	411	;# 
   334     019B                     SPBRGL          equ	411	;# 
   335     019C                     SPBRGH          equ	412	;# 
   336     019D                     RCSTA           equ	413	;# 
   337     019E                     TXSTA           equ	414	;# 
   338     019F                     BAUDCON         equ	415	;# 
   339     020C                     WPUA            equ	524	;# 
   340     020E                     WPUC            equ	526	;# 
   341     0211                     SSP1BUF         equ	529	;# 
   342     0211                     SSPBUF          equ	529	;# 
   343     0212                     SSP1ADD         equ	530	;# 
   344     0212                     SSPADD          equ	530	;# 
   345     0213                     SSP1MSK         equ	531	;# 
   346     0213                     SSPMSK          equ	531	;# 
   347     0214                     SSP1STAT        equ	532	;# 
   348     0214                     SSPSTAT         equ	532	;# 
   349     0215                     SSP1CON1        equ	533	;# 
   350     0215                     SSPCON1         equ	533	;# 
   351     0215                     SSPCON          equ	533	;# 
   352     0216                     SSP1CON2        equ	534	;# 
   353     0216                     SSPCON2         equ	534	;# 
   354     0217                     SSP1CON3        equ	535	;# 
   355     0217                     SSPCON3         equ	535	;# 
   356     0291                     CCPR1           equ	657	;# 
   357     0291                     CCPR1L          equ	657	;# 
   358     0292                     CCPR1H          equ	658	;# 
   359     0293                     CCP1CON         equ	659	;# 
   360     0294                     PWM1CON         equ	660	;# 
   361     0295                     CCP1AS          equ	661	;# 
   362     0295                     ECCP1AS         equ	661	;# 
   363     0296                     PSTR1CON        equ	662	;# 
   364     0298                     CCPR2           equ	664	;# 
   365     0298                     CCPR2L          equ	664	;# 
   366     0299                     CCPR2H          equ	665	;# 
   367     029A                     CCP2CON         equ	666	;# 
   368     029B                     PWM2CON         equ	667	;# 
   369     029C                     CCP2AS          equ	668	;# 
   370     029D                     PSTR2CON        equ	669	;# 
   371     029E                     CCPTMRS         equ	670	;# 
   372     029E                     CCPTMRS0        equ	670	;# 
   373     0311                     CCPR3           equ	785	;# 
   374     0311                     CCPR3L          equ	785	;# 
   375     0312                     CCPR3H          equ	786	;# 
   376     0313                     CCP3CON         equ	787	;# 
   377     0318                     CCPR4           equ	792	;# 
   378     0318                     CCPR4L          equ	792	;# 
   379     0319                     CCPR4H          equ	793	;# 
   380     031A                     CCP4CON         equ	794	;# 
   381     038C                     INLVLA          equ	908	;# 
   382     038E                     INLVLC          equ	910	;# 
   383     0391                     IOCAP           equ	913	;# 
   384     0392                     IOCAN           equ	914	;# 
   385     0393                     IOCAF           equ	915	;# 
   386     039A                     CLKRCON         equ	922	;# 
   387     039C                     MDCON           equ	924	;# 
   388     039D                     MDSRC           equ	925	;# 
   389     039E                     MDCARL          equ	926	;# 
   390     039F                     MDCARH          equ	927	;# 
   391     0415                     TMR4            equ	1045	;# 
   392     0416                     PR4             equ	1046	;# 
   393     0417                     T4CON           equ	1047	;# 
   394     041C                     TMR6            equ	1052	;# 
   395     041D                     PR6             equ	1053	;# 
   396     041E                     T6CON           equ	1054	;# 
   397     0FE4                     STATUS_SHAD     equ	4068	;# 
   398     0FE5                     WREG_SHAD       equ	4069	;# 
   399     0FE6                     BSR_SHAD        equ	4070	;# 
   400     0FE7                     PCLATH_SHAD     equ	4071	;# 
   401     0FE8                     FSR0L_SHAD      equ	4072	;# 
   402     0FE9                     FSR0H_SHAD      equ	4073	;# 
   403     0FEA                     FSR1L_SHAD      equ	4074	;# 
   404     0FEB                     FSR1H_SHAD      equ	4075	;# 
   405     0FED                     STKPTR          equ	4077	;# 
   406     0FEE                     TOSL            equ	4078	;# 
   407     0FEF                     TOSH            equ	4079	;# 
   408     0000                     INDF0           equ	0	;# 
   409     0001                     INDF1           equ	1	;# 
   410     0002                     PCL             equ	2	;# 
   411     0003                     STATUS          equ	3	;# 
   412     0004                     FSR0L           equ	4	;# 
   413     0005                     FSR0H           equ	5	;# 
   414     0006                     FSR1L           equ	6	;# 
   415     0007                     FSR1H           equ	7	;# 
   416     0008                     BSR             equ	8	;# 
   417     0009                     WREG            equ	9	;# 
   418     000A                     PCLATH          equ	10	;# 
   419     000B                     INTCON          equ	11	;# 
   420     000C                     PORTA           equ	12	;# 
   421     000E                     PORTC           equ	14	;# 
   422     0011                     PIR1            equ	17	;# 
   423     0012                     PIR2            equ	18	;# 
   424     0013                     PIR3            equ	19	;# 
   425     0015                     TMR0            equ	21	;# 
   426     0016                     TMR1            equ	22	;# 
   427     0016                     TMR1L           equ	22	;# 
   428     0017                     TMR1H           equ	23	;# 
   429     0018                     T1CON           equ	24	;# 
   430     0019                     T1GCON          equ	25	;# 
   431     001A                     TMR2            equ	26	;# 
   432     001B                     PR2             equ	27	;# 
   433     001C                     T2CON           equ	28	;# 
   434     001E                     CPSCON0         equ	30	;# 
   435     001F                     CPSCON1         equ	31	;# 
   436     008C                     TRISA           equ	140	;# 
   437     008E                     TRISC           equ	142	;# 
   438     0091                     PIE1            equ	145	;# 
   439     0092                     PIE2            equ	146	;# 
   440     0093                     PIE3            equ	147	;# 
   441     0095                     OPTION_REG      equ	149	;# 
   442     0096                     PCON            equ	150	;# 
   443     0097                     WDTCON          equ	151	;# 
   444     0098                     OSCTUNE         equ	152	;# 
   445     0099                     OSCCON          equ	153	;# 
   446     009A                     OSCSTAT         equ	154	;# 
   447     009B                     ADRES           equ	155	;# 
   448     009B                     ADRESL          equ	155	;# 
   449     009C                     ADRESH          equ	156	;# 
   450     009D                     ADCON0          equ	157	;# 
   451     009E                     ADCON1          equ	158	;# 
   452     010C                     LATA            equ	268	;# 
   453     010E                     LATC            equ	270	;# 
   454     0111                     CM1CON0         equ	273	;# 
   455     0112                     CM1CON1         equ	274	;# 
   456     0113                     CM2CON0         equ	275	;# 
   457     0114                     CM2CON1         equ	276	;# 
   458     0115                     CMOUT           equ	277	;# 
   459     0116                     BORCON          equ	278	;# 
   460     0117                     FVRCON          equ	279	;# 
   461     0118                     DACCON0         equ	280	;# 
   462     0119                     DACCON1         equ	281	;# 
   463     011A                     SRCON0          equ	282	;# 
   464     011B                     SRCON1          equ	283	;# 
   465     011D                     APFCON0         equ	285	;# 
   466     011E                     APFCON1         equ	286	;# 
   467     018C                     ANSELA          equ	396	;# 
   468     018E                     ANSELC          equ	398	;# 
   469     0191                     EEADR           equ	401	;# 
   470     0191                     EEADRL          equ	401	;# 
   471     0192                     EEADRH          equ	402	;# 
   472     0193                     EEDAT           equ	403	;# 
   473     0193                     EEDATL          equ	403	;# 
   474     0193                     EEDATA          equ	403	;# 
   475     0194                     EEDATH          equ	404	;# 
   476     0195                     EECON1          equ	405	;# 
   477     0196                     EECON2          equ	406	;# 
   478     0199                     RCREG           equ	409	;# 
   479     019A                     TXREG           equ	410	;# 
   480     019B                     SPBRG           equ	411	;# 
   481     019B                     SPBRGL          equ	411	;# 
   482     019C                     SPBRGH          equ	412	;# 
   483     019D                     RCSTA           equ	413	;# 
   484     019E                     TXSTA           equ	414	;# 
   485     019F                     BAUDCON         equ	415	;# 
   486     020C                     WPUA            equ	524	;# 
   487     020E                     WPUC            equ	526	;# 
   488     0211                     SSP1BUF         equ	529	;# 
   489     0211                     SSPBUF          equ	529	;# 
   490     0212                     SSP1ADD         equ	530	;# 
   491     0212                     SSPADD          equ	530	;# 
   492     0213                     SSP1MSK         equ	531	;# 
   493     0213                     SSPMSK          equ	531	;# 
   494     0214                     SSP1STAT        equ	532	;# 
   495     0214                     SSPSTAT         equ	532	;# 
   496     0215                     SSP1CON1        equ	533	;# 
   497     0215                     SSPCON1         equ	533	;# 
   498     0215                     SSPCON          equ	533	;# 
   499     0216                     SSP1CON2        equ	534	;# 
   500     0216                     SSPCON2         equ	534	;# 
   501     0217                     SSP1CON3        equ	535	;# 
   502     0217                     SSPCON3         equ	535	;# 
   503     0291                     CCPR1           equ	657	;# 
   504     0291                     CCPR1L          equ	657	;# 
   505     0292                     CCPR1H          equ	658	;# 
   506     0293                     CCP1CON         equ	659	;# 
   507     0294                     PWM1CON         equ	660	;# 
   508     0295                     CCP1AS          equ	661	;# 
   509     0295                     ECCP1AS         equ	661	;# 
   510     0296                     PSTR1CON        equ	662	;# 
   511     0298                     CCPR2           equ	664	;# 
   512     0298                     CCPR2L          equ	664	;# 
   513     0299                     CCPR2H          equ	665	;# 
   514     029A                     CCP2CON         equ	666	;# 
   515     029B                     PWM2CON         equ	667	;# 
   516     029C                     CCP2AS          equ	668	;# 
   517     029D                     PSTR2CON        equ	669	;# 
   518     029E                     CCPTMRS         equ	670	;# 
   519     029E                     CCPTMRS0        equ	670	;# 
   520     0311                     CCPR3           equ	785	;# 
   521     0311                     CCPR3L          equ	785	;# 
   522     0312                     CCPR3H          equ	786	;# 
   523     0313                     CCP3CON         equ	787	;# 
   524     0318                     CCPR4           equ	792	;# 
   525     0318                     CCPR4L          equ	792	;# 
   526     0319                     CCPR4H          equ	793	;# 
   527     031A                     CCP4CON         equ	794	;# 
   528     038C                     INLVLA          equ	908	;# 
   529     038E                     INLVLC          equ	910	;# 
   530     0391                     IOCAP           equ	913	;# 
   531     0392                     IOCAN           equ	914	;# 
   532     0393                     IOCAF           equ	915	;# 
   533     039A                     CLKRCON         equ	922	;# 
   534     039C                     MDCON           equ	924	;# 
   535     039D                     MDSRC           equ	925	;# 
   536     039E                     MDCARL          equ	926	;# 
   537     039F                     MDCARH          equ	927	;# 
   538     0415                     TMR4            equ	1045	;# 
   539     0416                     PR4             equ	1046	;# 
   540     0417                     T4CON           equ	1047	;# 
   541     041C                     TMR6            equ	1052	;# 
   542     041D                     PR6             equ	1053	;# 
   543     041E                     T6CON           equ	1054	;# 
   544     0FE4                     STATUS_SHAD     equ	4068	;# 
   545     0FE5                     WREG_SHAD       equ	4069	;# 
   546     0FE6                     BSR_SHAD        equ	4070	;# 
   547     0FE7                     PCLATH_SHAD     equ	4071	;# 
   548     0FE8                     FSR0L_SHAD      equ	4072	;# 
   549     0FE9                     FSR0H_SHAD      equ	4073	;# 
   550     0FEA                     FSR1L_SHAD      equ	4074	;# 
   551     0FEB                     FSR1H_SHAD      equ	4075	;# 
   552     0FED                     STKPTR          equ	4077	;# 
   553     0FEE                     TOSL            equ	4078	;# 
   554     0FEF                     TOSH            equ	4079	;# 
   555     0000                     INDF0           equ	0	;# 
   556     0001                     INDF1           equ	1	;# 
   557     0002                     PCL             equ	2	;# 
   558     0003                     STATUS          equ	3	;# 
   559     0004                     FSR0L           equ	4	;# 
   560     0005                     FSR0H           equ	5	;# 
   561     0006                     FSR1L           equ	6	;# 
   562     0007                     FSR1H           equ	7	;# 
   563     0008                     BSR             equ	8	;# 
   564     0009                     WREG            equ	9	;# 
   565     000A                     PCLATH          equ	10	;# 
   566     000B                     INTCON          equ	11	;# 
   567     000C                     PORTA           equ	12	;# 
   568     000E                     PORTC           equ	14	;# 
   569     0011                     PIR1            equ	17	;# 
   570     0012                     PIR2            equ	18	;# 
   571     0013                     PIR3            equ	19	;# 
   572     0015                     TMR0            equ	21	;# 
   573     0016                     TMR1            equ	22	;# 
   574     0016                     TMR1L           equ	22	;# 
   575     0017                     TMR1H           equ	23	;# 
   576     0018                     T1CON           equ	24	;# 
   577     0019                     T1GCON          equ	25	;# 
   578     001A                     TMR2            equ	26	;# 
   579     001B                     PR2             equ	27	;# 
   580     001C                     T2CON           equ	28	;# 
   581     001E                     CPSCON0         equ	30	;# 
   582     001F                     CPSCON1         equ	31	;# 
   583     008C                     TRISA           equ	140	;# 
   584     008E                     TRISC           equ	142	;# 
   585     0091                     PIE1            equ	145	;# 
   586     0092                     PIE2            equ	146	;# 
   587     0093                     PIE3            equ	147	;# 
   588     0095                     OPTION_REG      equ	149	;# 
   589     0096                     PCON            equ	150	;# 
   590     0097                     WDTCON          equ	151	;# 
   591     0098                     OSCTUNE         equ	152	;# 
   592     0099                     OSCCON          equ	153	;# 
   593     009A                     OSCSTAT         equ	154	;# 
   594     009B                     ADRES           equ	155	;# 
   595     009B                     ADRESL          equ	155	;# 
   596     009C                     ADRESH          equ	156	;# 
   597     009D                     ADCON0          equ	157	;# 
   598     009E                     ADCON1          equ	158	;# 
   599     010C                     LATA            equ	268	;# 
   600     010E                     LATC            equ	270	;# 
   601     0111                     CM1CON0         equ	273	;# 
   602     0112                     CM1CON1         equ	274	;# 
   603     0113                     CM2CON0         equ	275	;# 
   604     0114                     CM2CON1         equ	276	;# 
   605     0115                     CMOUT           equ	277	;# 
   606     0116                     BORCON          equ	278	;# 
   607     0117                     FVRCON          equ	279	;# 
   608     0118                     DACCON0         equ	280	;# 
   609     0119                     DACCON1         equ	281	;# 
   610     011A                     SRCON0          equ	282	;# 
   611     011B                     SRCON1          equ	283	;# 
   612     011D                     APFCON0         equ	285	;# 
   613     011E                     APFCON1         equ	286	;# 
   614     018C                     ANSELA          equ	396	;# 
   615     018E                     ANSELC          equ	398	;# 
   616     0191                     EEADR           equ	401	;# 
   617     0191                     EEADRL          equ	401	;# 
   618     0192                     EEADRH          equ	402	;# 
   619     0193                     EEDAT           equ	403	;# 
   620     0193                     EEDATL          equ	403	;# 
   621     0193                     EEDATA          equ	403	;# 
   622     0194                     EEDATH          equ	404	;# 
   623     0195                     EECON1          equ	405	;# 
   624     0196                     EECON2          equ	406	;# 
   625     0199                     RCREG           equ	409	;# 
   626     019A                     TXREG           equ	410	;# 
   627     019B                     SPBRG           equ	411	;# 
   628     019B                     SPBRGL          equ	411	;# 
   629     019C                     SPBRGH          equ	412	;# 
   630     019D                     RCSTA           equ	413	;# 
   631     019E                     TXSTA           equ	414	;# 
   632     019F                     BAUDCON         equ	415	;# 
   633     020C                     WPUA            equ	524	;# 
   634     020E                     WPUC            equ	526	;# 
   635     0211                     SSP1BUF         equ	529	;# 
   636     0211                     SSPBUF          equ	529	;# 
   637     0212                     SSP1ADD         equ	530	;# 
   638     0212                     SSPADD          equ	530	;# 
   639     0213                     SSP1MSK         equ	531	;# 
   640     0213                     SSPMSK          equ	531	;# 
   641     0214                     SSP1STAT        equ	532	;# 
   642     0214                     SSPSTAT         equ	532	;# 
   643     0215                     SSP1CON1        equ	533	;# 
   644     0215                     SSPCON1         equ	533	;# 
   645     0215                     SSPCON          equ	533	;# 
   646     0216                     SSP1CON2        equ	534	;# 
   647     0216                     SSPCON2         equ	534	;# 
   648     0217                     SSP1CON3        equ	535	;# 
   649     0217                     SSPCON3         equ	535	;# 
   650     0291                     CCPR1           equ	657	;# 
   651     0291                     CCPR1L          equ	657	;# 
   652     0292                     CCPR1H          equ	658	;# 
   653     0293                     CCP1CON         equ	659	;# 
   654     0294                     PWM1CON         equ	660	;# 
   655     0295                     CCP1AS          equ	661	;# 
   656     0295                     ECCP1AS         equ	661	;# 
   657     0296                     PSTR1CON        equ	662	;# 
   658     0298                     CCPR2           equ	664	;# 
   659     0298                     CCPR2L          equ	664	;# 
   660     0299                     CCPR2H          equ	665	;# 
   661     029A                     CCP2CON         equ	666	;# 
   662     029B                     PWM2CON         equ	667	;# 
   663     029C                     CCP2AS          equ	668	;# 
   664     029D                     PSTR2CON        equ	669	;# 
   665     029E                     CCPTMRS         equ	670	;# 
   666     029E                     CCPTMRS0        equ	670	;# 
   667     0311                     CCPR3           equ	785	;# 
   668     0311                     CCPR3L          equ	785	;# 
   669     0312                     CCPR3H          equ	786	;# 
   670     0313                     CCP3CON         equ	787	;# 
   671     0318                     CCPR4           equ	792	;# 
   672     0318                     CCPR4L          equ	792	;# 
   673     0319                     CCPR4H          equ	793	;# 
   674     031A                     CCP4CON         equ	794	;# 
   675     038C                     INLVLA          equ	908	;# 
   676     038E                     INLVLC          equ	910	;# 
   677     0391                     IOCAP           equ	913	;# 
   678     0392                     IOCAN           equ	914	;# 
   679     0393                     IOCAF           equ	915	;# 
   680     039A                     CLKRCON         equ	922	;# 
   681     039C                     MDCON           equ	924	;# 
   682     039D                     MDSRC           equ	925	;# 
   683     039E                     MDCARL          equ	926	;# 
   684     039F                     MDCARH          equ	927	;# 
   685     0415                     TMR4            equ	1045	;# 
   686     0416                     PR4             equ	1046	;# 
   687     0417                     T4CON           equ	1047	;# 
   688     041C                     TMR6            equ	1052	;# 
   689     041D                     PR6             equ	1053	;# 
   690     041E                     T6CON           equ	1054	;# 
   691     0FE4                     STATUS_SHAD     equ	4068	;# 
   692     0FE5                     WREG_SHAD       equ	4069	;# 
   693     0FE6                     BSR_SHAD        equ	4070	;# 
   694     0FE7                     PCLATH_SHAD     equ	4071	;# 
   695     0FE8                     FSR0L_SHAD      equ	4072	;# 
   696     0FE9                     FSR0H_SHAD      equ	4073	;# 
   697     0FEA                     FSR1L_SHAD      equ	4074	;# 
   698     0FEB                     FSR1H_SHAD      equ	4075	;# 
   699     0FED                     STKPTR          equ	4077	;# 
   700     0FEE                     TOSL            equ	4078	;# 
   701     0FEF                     TOSH            equ	4079	;# 
   702     0000                     INDF0           equ	0	;# 
   703     0001                     INDF1           equ	1	;# 
   704     0002                     PCL             equ	2	;# 
   705     0003                     STATUS          equ	3	;# 
   706     0004                     FSR0L           equ	4	;# 
   707     0005                     FSR0H           equ	5	;# 
   708     0006                     FSR1L           equ	6	;# 
   709     0007                     FSR1H           equ	7	;# 
   710     0008                     BSR             equ	8	;# 
   711     0009                     WREG            equ	9	;# 
   712     000A                     PCLATH          equ	10	;# 
   713     000B                     INTCON          equ	11	;# 
   714     000C                     PORTA           equ	12	;# 
   715     000E                     PORTC           equ	14	;# 
   716     0011                     PIR1            equ	17	;# 
   717     0012                     PIR2            equ	18	;# 
   718     0013                     PIR3            equ	19	;# 
   719     0015                     TMR0            equ	21	;# 
   720     0016                     TMR1            equ	22	;# 
   721     0016                     TMR1L           equ	22	;# 
   722     0017                     TMR1H           equ	23	;# 
   723     0018                     T1CON           equ	24	;# 
   724     0019                     T1GCON          equ	25	;# 
   725     001A                     TMR2            equ	26	;# 
   726     001B                     PR2             equ	27	;# 
   727     001C                     T2CON           equ	28	;# 
   728     001E                     CPSCON0         equ	30	;# 
   729     001F                     CPSCON1         equ	31	;# 
   730     008C                     TRISA           equ	140	;# 
   731     008E                     TRISC           equ	142	;# 
   732     0091                     PIE1            equ	145	;# 
   733     0092                     PIE2            equ	146	;# 
   734     0093                     PIE3            equ	147	;# 
   735     0095                     OPTION_REG      equ	149	;# 
   736     0096                     PCON            equ	150	;# 
   737     0097                     WDTCON          equ	151	;# 
   738     0098                     OSCTUNE         equ	152	;# 
   739     0099                     OSCCON          equ	153	;# 
   740     009A                     OSCSTAT         equ	154	;# 
   741     009B                     ADRES           equ	155	;# 
   742     009B                     ADRESL          equ	155	;# 
   743     009C                     ADRESH          equ	156	;# 
   744     009D                     ADCON0          equ	157	;# 
   745     009E                     ADCON1          equ	158	;# 
   746     010C                     LATA            equ	268	;# 
   747     010E                     LATC            equ	270	;# 
   748     0111                     CM1CON0         equ	273	;# 
   749     0112                     CM1CON1         equ	274	;# 
   750     0113                     CM2CON0         equ	275	;# 
   751     0114                     CM2CON1         equ	276	;# 
   752     0115                     CMOUT           equ	277	;# 
   753     0116                     BORCON          equ	278	;# 
   754     0117                     FVRCON          equ	279	;# 
   755     0118                     DACCON0         equ	280	;# 
   756     0119                     DACCON1         equ	281	;# 
   757     011A                     SRCON0          equ	282	;# 
   758     011B                     SRCON1          equ	283	;# 
   759     011D                     APFCON0         equ	285	;# 
   760     011E                     APFCON1         equ	286	;# 
   761     018C                     ANSELA          equ	396	;# 
   762     018E                     ANSELC          equ	398	;# 
   763     0191                     EEADR           equ	401	;# 
   764     0191                     EEADRL          equ	401	;# 
   765     0192                     EEADRH          equ	402	;# 
   766     0193                     EEDAT           equ	403	;# 
   767     0193                     EEDATL          equ	403	;# 
   768     0193                     EEDATA          equ	403	;# 
   769     0194                     EEDATH          equ	404	;# 
   770     0195                     EECON1          equ	405	;# 
   771     0196                     EECON2          equ	406	;# 
   772     0199                     RCREG           equ	409	;# 
   773     019A                     TXREG           equ	410	;# 
   774     019B                     SPBRG           equ	411	;# 
   775     019B                     SPBRGL          equ	411	;# 
   776     019C                     SPBRGH          equ	412	;# 
   777     019D                     RCSTA           equ	413	;# 
   778     019E                     TXSTA           equ	414	;# 
   779     019F                     BAUDCON         equ	415	;# 
   780     020C                     WPUA            equ	524	;# 
   781     020E                     WPUC            equ	526	;# 
   782     0211                     SSP1BUF         equ	529	;# 
   783     0211                     SSPBUF          equ	529	;# 
   784     0212                     SSP1ADD         equ	530	;# 
   785     0212                     SSPADD          equ	530	;# 
   786     0213                     SSP1MSK         equ	531	;# 
   787     0213                     SSPMSK          equ	531	;# 
   788     0214                     SSP1STAT        equ	532	;# 
   789     0214                     SSPSTAT         equ	532	;# 
   790     0215                     SSP1CON1        equ	533	;# 
   791     0215                     SSPCON1         equ	533	;# 
   792     0215                     SSPCON          equ	533	;# 
   793     0216                     SSP1CON2        equ	534	;# 
   794     0216                     SSPCON2         equ	534	;# 
   795     0217                     SSP1CON3        equ	535	;# 
   796     0217                     SSPCON3         equ	535	;# 
   797     0291                     CCPR1           equ	657	;# 
   798     0291                     CCPR1L          equ	657	;# 
   799     0292                     CCPR1H          equ	658	;# 
   800     0293                     CCP1CON         equ	659	;# 
   801     0294                     PWM1CON         equ	660	;# 
   802     0295                     CCP1AS          equ	661	;# 
   803     0295                     ECCP1AS         equ	661	;# 
   804     0296                     PSTR1CON        equ	662	;# 
   805     0298                     CCPR2           equ	664	;# 
   806     0298                     CCPR2L          equ	664	;# 
   807     0299                     CCPR2H          equ	665	;# 
   808     029A                     CCP2CON         equ	666	;# 
   809     029B                     PWM2CON         equ	667	;# 
   810     029C                     CCP2AS          equ	668	;# 
   811     029D                     PSTR2CON        equ	669	;# 
   812     029E                     CCPTMRS         equ	670	;# 
   813     029E                     CCPTMRS0        equ	670	;# 
   814     0311                     CCPR3           equ	785	;# 
   815     0311                     CCPR3L          equ	785	;# 
   816     0312                     CCPR3H          equ	786	;# 
   817     0313                     CCP3CON         equ	787	;# 
   818     0318                     CCPR4           equ	792	;# 
   819     0318                     CCPR4L          equ	792	;# 
   820     0319                     CCPR4H          equ	793	;# 
   821     031A                     CCP4CON         equ	794	;# 
   822     038C                     INLVLA          equ	908	;# 
   823     038E                     INLVLC          equ	910	;# 
   824     0391                     IOCAP           equ	913	;# 
   825     0392                     IOCAN           equ	914	;# 
   826     0393                     IOCAF           equ	915	;# 
   827     039A                     CLKRCON         equ	922	;# 
   828     039C                     MDCON           equ	924	;# 
   829     039D                     MDSRC           equ	925	;# 
   830     039E                     MDCARL          equ	926	;# 
   831     039F                     MDCARH          equ	927	;# 
   832     0415                     TMR4            equ	1045	;# 
   833     0416                     PR4             equ	1046	;# 
   834     0417                     T4CON           equ	1047	;# 
   835     041C                     TMR6            equ	1052	;# 
   836     041D                     PR6             equ	1053	;# 
   837     041E                     T6CON           equ	1054	;# 
   838     0FE4                     STATUS_SHAD     equ	4068	;# 
   839     0FE5                     WREG_SHAD       equ	4069	;# 
   840     0FE6                     BSR_SHAD        equ	4070	;# 
   841     0FE7                     PCLATH_SHAD     equ	4071	;# 
   842     0FE8                     FSR0L_SHAD      equ	4072	;# 
   843     0FE9                     FSR0H_SHAD      equ	4073	;# 
   844     0FEA                     FSR1L_SHAD      equ	4074	;# 
   845     0FEB                     FSR1H_SHAD      equ	4075	;# 
   846     0FED                     STKPTR          equ	4077	;# 
   847     0FEE                     TOSL            equ	4078	;# 
   848     0FEF                     TOSH            equ	4079	;# 
   849     0000                     INDF0           equ	0	;# 
   850     0001                     INDF1           equ	1	;# 
   851     0002                     PCL             equ	2	;# 
   852     0003                     STATUS          equ	3	;# 
   853     0004                     FSR0L           equ	4	;# 
   854     0005                     FSR0H           equ	5	;# 
   855     0006                     FSR1L           equ	6	;# 
   856     0007                     FSR1H           equ	7	;# 
   857     0008                     BSR             equ	8	;# 
   858     0009                     WREG            equ	9	;# 
   859     000A                     PCLATH          equ	10	;# 
   860     000B                     INTCON          equ	11	;# 
   861     000C                     PORTA           equ	12	;# 
   862     000E                     PORTC           equ	14	;# 
   863     0011                     PIR1            equ	17	;# 
   864     0012                     PIR2            equ	18	;# 
   865     0013                     PIR3            equ	19	;# 
   866     0015                     TMR0            equ	21	;# 
   867     0016                     TMR1            equ	22	;# 
   868     0016                     TMR1L           equ	22	;# 
   869     0017                     TMR1H           equ	23	;# 
   870     0018                     T1CON           equ	24	;# 
   871     0019                     T1GCON          equ	25	;# 
   872     001A                     TMR2            equ	26	;# 
   873     001B                     PR2             equ	27	;# 
   874     001C                     T2CON           equ	28	;# 
   875     001E                     CPSCON0         equ	30	;# 
   876     001F                     CPSCON1         equ	31	;# 
   877     008C                     TRISA           equ	140	;# 
   878     008E                     TRISC           equ	142	;# 
   879     0091                     PIE1            equ	145	;# 
   880     0092                     PIE2            equ	146	;# 
   881     0093                     PIE3            equ	147	;# 
   882     0095                     OPTION_REG      equ	149	;# 
   883     0096                     PCON            equ	150	;# 
   884     0097                     WDTCON          equ	151	;# 
   885     0098                     OSCTUNE         equ	152	;# 
   886     0099                     OSCCON          equ	153	;# 
   887     009A                     OSCSTAT         equ	154	;# 
   888     009B                     ADRES           equ	155	;# 
   889     009B                     ADRESL          equ	155	;# 
   890     009C                     ADRESH          equ	156	;# 
   891     009D                     ADCON0          equ	157	;# 
   892     009E                     ADCON1          equ	158	;# 
   893     010C                     LATA            equ	268	;# 
   894     010E                     LATC            equ	270	;# 
   895     0111                     CM1CON0         equ	273	;# 
   896     0112                     CM1CON1         equ	274	;# 
   897     0113                     CM2CON0         equ	275	;# 
   898     0114                     CM2CON1         equ	276	;# 
   899     0115                     CMOUT           equ	277	;# 
   900     0116                     BORCON          equ	278	;# 
   901     0117                     FVRCON          equ	279	;# 
   902     0118                     DACCON0         equ	280	;# 
   903     0119                     DACCON1         equ	281	;# 
   904     011A                     SRCON0          equ	282	;# 
   905     011B                     SRCON1          equ	283	;# 
   906     011D                     APFCON0         equ	285	;# 
   907     011E                     APFCON1         equ	286	;# 
   908     018C                     ANSELA          equ	396	;# 
   909     018E                     ANSELC          equ	398	;# 
   910     0191                     EEADR           equ	401	;# 
   911     0191                     EEADRL          equ	401	;# 
   912     0192                     EEADRH          equ	402	;# 
   913     0193                     EEDAT           equ	403	;# 
   914     0193                     EEDATL          equ	403	;# 
   915     0193                     EEDATA          equ	403	;# 
   916     0194                     EEDATH          equ	404	;# 
   917     0195                     EECON1          equ	405	;# 
   918     0196                     EECON2          equ	406	;# 
   919     0199                     RCREG           equ	409	;# 
   920     019A                     TXREG           equ	410	;# 
   921     019B                     SPBRG           equ	411	;# 
   922     019B                     SPBRGL          equ	411	;# 
   923     019C                     SPBRGH          equ	412	;# 
   924     019D                     RCSTA           equ	413	;# 
   925     019E                     TXSTA           equ	414	;# 
   926     019F                     BAUDCON         equ	415	;# 
   927     020C                     WPUA            equ	524	;# 
   928     020E                     WPUC            equ	526	;# 
   929     0211                     SSP1BUF         equ	529	;# 
   930     0211                     SSPBUF          equ	529	;# 
   931     0212                     SSP1ADD         equ	530	;# 
   932     0212                     SSPADD          equ	530	;# 
   933     0213                     SSP1MSK         equ	531	;# 
   934     0213                     SSPMSK          equ	531	;# 
   935     0214                     SSP1STAT        equ	532	;# 
   936     0214                     SSPSTAT         equ	532	;# 
   937     0215                     SSP1CON1        equ	533	;# 
   938     0215                     SSPCON1         equ	533	;# 
   939     0215                     SSPCON          equ	533	;# 
   940     0216                     SSP1CON2        equ	534	;# 
   941     0216                     SSPCON2         equ	534	;# 
   942     0217                     SSP1CON3        equ	535	;# 
   943     0217                     SSPCON3         equ	535	;# 
   944     0291                     CCPR1           equ	657	;# 
   945     0291                     CCPR1L          equ	657	;# 
   946     0292                     CCPR1H          equ	658	;# 
   947     0293                     CCP1CON         equ	659	;# 
   948     0294                     PWM1CON         equ	660	;# 
   949     0295                     CCP1AS          equ	661	;# 
   950     0295                     ECCP1AS         equ	661	;# 
   951     0296                     PSTR1CON        equ	662	;# 
   952     0298                     CCPR2           equ	664	;# 
   953     0298                     CCPR2L          equ	664	;# 
   954     0299                     CCPR2H          equ	665	;# 
   955     029A                     CCP2CON         equ	666	;# 
   956     029B                     PWM2CON         equ	667	;# 
   957     029C                     CCP2AS          equ	668	;# 
   958     029D                     PSTR2CON        equ	669	;# 
   959     029E                     CCPTMRS         equ	670	;# 
   960     029E                     CCPTMRS0        equ	670	;# 
   961     0311                     CCPR3           equ	785	;# 
   962     0311                     CCPR3L          equ	785	;# 
   963     0312                     CCPR3H          equ	786	;# 
   964     0313                     CCP3CON         equ	787	;# 
   965     0318                     CCPR4           equ	792	;# 
   966     0318                     CCPR4L          equ	792	;# 
   967     0319                     CCPR4H          equ	793	;# 
   968     031A                     CCP4CON         equ	794	;# 
   969     038C                     INLVLA          equ	908	;# 
   970     038E                     INLVLC          equ	910	;# 
   971     0391                     IOCAP           equ	913	;# 
   972     0392                     IOCAN           equ	914	;# 
   973     0393                     IOCAF           equ	915	;# 
   974     039A                     CLKRCON         equ	922	;# 
   975     039C                     MDCON           equ	924	;# 
   976     039D                     MDSRC           equ	925	;# 
   977     039E                     MDCARL          equ	926	;# 
   978     039F                     MDCARH          equ	927	;# 
   979     0415                     TMR4            equ	1045	;# 
   980     0416                     PR4             equ	1046	;# 
   981     0417                     T4CON           equ	1047	;# 
   982     041C                     TMR6            equ	1052	;# 
   983     041D                     PR6             equ	1053	;# 
   984     041E                     T6CON           equ	1054	;# 
   985     0FE4                     STATUS_SHAD     equ	4068	;# 
   986     0FE5                     WREG_SHAD       equ	4069	;# 
   987     0FE6                     BSR_SHAD        equ	4070	;# 
   988     0FE7                     PCLATH_SHAD     equ	4071	;# 
   989     0FE8                     FSR0L_SHAD      equ	4072	;# 
   990     0FE9                     FSR0H_SHAD      equ	4073	;# 
   991     0FEA                     FSR1L_SHAD      equ	4074	;# 
   992     0FEB                     FSR1H_SHAD      equ	4075	;# 
   993     0FED                     STKPTR          equ	4077	;# 
   994     0FEE                     TOSL            equ	4078	;# 
   995     0FEF                     TOSH            equ	4079	;# 
   996     0000                     INDF0           equ	0	;# 
   997     0001                     INDF1           equ	1	;# 
   998     0002                     PCL             equ	2	;# 
   999     0003                     STATUS          equ	3	;# 
  1000     0004                     FSR0L           equ	4	;# 
  1001     0005                     FSR0H           equ	5	;# 
  1002     0006                     FSR1L           equ	6	;# 
  1003     0007                     FSR1H           equ	7	;# 
  1004     0008                     BSR             equ	8	;# 
  1005     0009                     WREG            equ	9	;# 
  1006     000A                     PCLATH          equ	10	;# 
  1007     000B                     INTCON          equ	11	;# 
  1008     000C                     PORTA           equ	12	;# 
  1009     000E                     PORTC           equ	14	;# 
  1010     0011                     PIR1            equ	17	;# 
  1011     0012                     PIR2            equ	18	;# 
  1012     0013                     PIR3            equ	19	;# 
  1013     0015                     TMR0            equ	21	;# 
  1014     0016                     TMR1            equ	22	;# 
  1015     0016                     TMR1L           equ	22	;# 
  1016     0017                     TMR1H           equ	23	;# 
  1017     0018                     T1CON           equ	24	;# 
  1018     0019                     T1GCON          equ	25	;# 
  1019     001A                     TMR2            equ	26	;# 
  1020     001B                     PR2             equ	27	;# 
  1021     001C                     T2CON           equ	28	;# 
  1022     001E                     CPSCON0         equ	30	;# 
  1023     001F                     CPSCON1         equ	31	;# 
  1024     008C                     TRISA           equ	140	;# 
  1025     008E                     TRISC           equ	142	;# 
  1026     0091                     PIE1            equ	145	;# 
  1027     0092                     PIE2            equ	146	;# 
  1028     0093                     PIE3            equ	147	;# 
  1029     0095                     OPTION_REG      equ	149	;# 
  1030     0096                     PCON            equ	150	;# 
  1031     0097                     WDTCON          equ	151	;# 
  1032     0098                     OSCTUNE         equ	152	;# 
  1033     0099                     OSCCON          equ	153	;# 
  1034     009A                     OSCSTAT         equ	154	;# 
  1035     009B                     ADRES           equ	155	;# 
  1036     009B                     ADRESL          equ	155	;# 
  1037     009C                     ADRESH          equ	156	;# 
  1038     009D                     ADCON0          equ	157	;# 
  1039     009E                     ADCON1          equ	158	;# 
  1040     010C                     LATA            equ	268	;# 
  1041     010E                     LATC            equ	270	;# 
  1042     0111                     CM1CON0         equ	273	;# 
  1043     0112                     CM1CON1         equ	274	;# 
  1044     0113                     CM2CON0         equ	275	;# 
  1045     0114                     CM2CON1         equ	276	;# 
  1046     0115                     CMOUT           equ	277	;# 
  1047     0116                     BORCON          equ	278	;# 
  1048     0117                     FVRCON          equ	279	;# 
  1049     0118                     DACCON0         equ	280	;# 
  1050     0119                     DACCON1         equ	281	;# 
  1051     011A                     SRCON0          equ	282	;# 
  1052     011B                     SRCON1          equ	283	;# 
  1053     011D                     APFCON0         equ	285	;# 
  1054     011E                     APFCON1         equ	286	;# 
  1055     018C                     ANSELA          equ	396	;# 
  1056     018E                     ANSELC          equ	398	;# 
  1057     0191                     EEADR           equ	401	;# 
  1058     0191                     EEADRL          equ	401	;# 
  1059     0192                     EEADRH          equ	402	;# 
  1060     0193                     EEDAT           equ	403	;# 
  1061     0193                     EEDATL          equ	403	;# 
  1062     0193                     EEDATA          equ	403	;# 
  1063     0194                     EEDATH          equ	404	;# 
  1064     0195                     EECON1          equ	405	;# 
  1065     0196                     EECON2          equ	406	;# 
  1066     0199                     RCREG           equ	409	;# 
  1067     019A                     TXREG           equ	410	;# 
  1068     019B                     SPBRG           equ	411	;# 
  1069     019B                     SPBRGL          equ	411	;# 
  1070     019C                     SPBRGH          equ	412	;# 
  1071     019D                     RCSTA           equ	413	;# 
  1072     019E                     TXSTA           equ	414	;# 
  1073     019F                     BAUDCON         equ	415	;# 
  1074     020C                     WPUA            equ	524	;# 
  1075     020E                     WPUC            equ	526	;# 
  1076     0211                     SSP1BUF         equ	529	;# 
  1077     0211                     SSPBUF          equ	529	;# 
  1078     0212                     SSP1ADD         equ	530	;# 
  1079     0212                     SSPADD          equ	530	;# 
  1080     0213                     SSP1MSK         equ	531	;# 
  1081     0213                     SSPMSK          equ	531	;# 
  1082     0214                     SSP1STAT        equ	532	;# 
  1083     0214                     SSPSTAT         equ	532	;# 
  1084     0215                     SSP1CON1        equ	533	;# 
  1085     0215                     SSPCON1         equ	533	;# 
  1086     0215                     SSPCON          equ	533	;# 
  1087     0216                     SSP1CON2        equ	534	;# 
  1088     0216                     SSPCON2         equ	534	;# 
  1089     0217                     SSP1CON3        equ	535	;# 
  1090     0217                     SSPCON3         equ	535	;# 
  1091     0291                     CCPR1           equ	657	;# 
  1092     0291                     CCPR1L          equ	657	;# 
  1093     0292                     CCPR1H          equ	658	;# 
  1094     0293                     CCP1CON         equ	659	;# 
  1095     0294                     PWM1CON         equ	660	;# 
  1096     0295                     CCP1AS          equ	661	;# 
  1097     0295                     ECCP1AS         equ	661	;# 
  1098     0296                     PSTR1CON        equ	662	;# 
  1099     0298                     CCPR2           equ	664	;# 
  1100     0298                     CCPR2L          equ	664	;# 
  1101     0299                     CCPR2H          equ	665	;# 
  1102     029A                     CCP2CON         equ	666	;# 
  1103     029B                     PWM2CON         equ	667	;# 
  1104     029C                     CCP2AS          equ	668	;# 
  1105     029D                     PSTR2CON        equ	669	;# 
  1106     029E                     CCPTMRS         equ	670	;# 
  1107     029E                     CCPTMRS0        equ	670	;# 
  1108     0311                     CCPR3           equ	785	;# 
  1109     0311                     CCPR3L          equ	785	;# 
  1110     0312                     CCPR3H          equ	786	;# 
  1111     0313                     CCP3CON         equ	787	;# 
  1112     0318                     CCPR4           equ	792	;# 
  1113     0318                     CCPR4L          equ	792	;# 
  1114     0319                     CCPR4H          equ	793	;# 
  1115     031A                     CCP4CON         equ	794	;# 
  1116     038C                     INLVLA          equ	908	;# 
  1117     038E                     INLVLC          equ	910	;# 
  1118     0391                     IOCAP           equ	913	;# 
  1119     0392                     IOCAN           equ	914	;# 
  1120     0393                     IOCAF           equ	915	;# 
  1121     039A                     CLKRCON         equ	922	;# 
  1122     039C                     MDCON           equ	924	;# 
  1123     039D                     MDSRC           equ	925	;# 
  1124     039E                     MDCARL          equ	926	;# 
  1125     039F                     MDCARH          equ	927	;# 
  1126     0415                     TMR4            equ	1045	;# 
  1127     0416                     PR4             equ	1046	;# 
  1128     0417                     T4CON           equ	1047	;# 
  1129     041C                     TMR6            equ	1052	;# 
  1130     041D                     PR6             equ	1053	;# 
  1131     041E                     T6CON           equ	1054	;# 
  1132     0FE4                     STATUS_SHAD     equ	4068	;# 
  1133     0FE5                     WREG_SHAD       equ	4069	;# 
  1134     0FE6                     BSR_SHAD        equ	4070	;# 
  1135     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1136     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1137     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1138     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1139     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1140     0FED                     STKPTR          equ	4077	;# 
  1141     0FEE                     TOSL            equ	4078	;# 
  1142     0FEF                     TOSH            equ	4079	;# 
  1143     0000                     INDF0           equ	0	;# 
  1144     0001                     INDF1           equ	1	;# 
  1145     0002                     PCL             equ	2	;# 
  1146     0003                     STATUS          equ	3	;# 
  1147     0004                     FSR0L           equ	4	;# 
  1148     0005                     FSR0H           equ	5	;# 
  1149     0006                     FSR1L           equ	6	;# 
  1150     0007                     FSR1H           equ	7	;# 
  1151     0008                     BSR             equ	8	;# 
  1152     0009                     WREG            equ	9	;# 
  1153     000A                     PCLATH          equ	10	;# 
  1154     000B                     INTCON          equ	11	;# 
  1155     000C                     PORTA           equ	12	;# 
  1156     000E                     PORTC           equ	14	;# 
  1157     0011                     PIR1            equ	17	;# 
  1158     0012                     PIR2            equ	18	;# 
  1159     0013                     PIR3            equ	19	;# 
  1160     0015                     TMR0            equ	21	;# 
  1161     0016                     TMR1            equ	22	;# 
  1162     0016                     TMR1L           equ	22	;# 
  1163     0017                     TMR1H           equ	23	;# 
  1164     0018                     T1CON           equ	24	;# 
  1165     0019                     T1GCON          equ	25	;# 
  1166     001A                     TMR2            equ	26	;# 
  1167     001B                     PR2             equ	27	;# 
  1168     001C                     T2CON           equ	28	;# 
  1169     001E                     CPSCON0         equ	30	;# 
  1170     001F                     CPSCON1         equ	31	;# 
  1171     008C                     TRISA           equ	140	;# 
  1172     008E                     TRISC           equ	142	;# 
  1173     0091                     PIE1            equ	145	;# 
  1174     0092                     PIE2            equ	146	;# 
  1175     0093                     PIE3            equ	147	;# 
  1176     0095                     OPTION_REG      equ	149	;# 
  1177     0096                     PCON            equ	150	;# 
  1178     0097                     WDTCON          equ	151	;# 
  1179     0098                     OSCTUNE         equ	152	;# 
  1180     0099                     OSCCON          equ	153	;# 
  1181     009A                     OSCSTAT         equ	154	;# 
  1182     009B                     ADRES           equ	155	;# 
  1183     009B                     ADRESL          equ	155	;# 
  1184     009C                     ADRESH          equ	156	;# 
  1185     009D                     ADCON0          equ	157	;# 
  1186     009E                     ADCON1          equ	158	;# 
  1187     010C                     LATA            equ	268	;# 
  1188     010E                     LATC            equ	270	;# 
  1189     0111                     CM1CON0         equ	273	;# 
  1190     0112                     CM1CON1         equ	274	;# 
  1191     0113                     CM2CON0         equ	275	;# 
  1192     0114                     CM2CON1         equ	276	;# 
  1193     0115                     CMOUT           equ	277	;# 
  1194     0116                     BORCON          equ	278	;# 
  1195     0117                     FVRCON          equ	279	;# 
  1196     0118                     DACCON0         equ	280	;# 
  1197     0119                     DACCON1         equ	281	;# 
  1198     011A                     SRCON0          equ	282	;# 
  1199     011B                     SRCON1          equ	283	;# 
  1200     011D                     APFCON0         equ	285	;# 
  1201     011E                     APFCON1         equ	286	;# 
  1202     018C                     ANSELA          equ	396	;# 
  1203     018E                     ANSELC          equ	398	;# 
  1204     0191                     EEADR           equ	401	;# 
  1205     0191                     EEADRL          equ	401	;# 
  1206     0192                     EEADRH          equ	402	;# 
  1207     0193                     EEDAT           equ	403	;# 
  1208     0193                     EEDATL          equ	403	;# 
  1209     0193                     EEDATA          equ	403	;# 
  1210     0194                     EEDATH          equ	404	;# 
  1211     0195                     EECON1          equ	405	;# 
  1212     0196                     EECON2          equ	406	;# 
  1213     0199                     RCREG           equ	409	;# 
  1214     019A                     TXREG           equ	410	;# 
  1215     019B                     SPBRG           equ	411	;# 
  1216     019B                     SPBRGL          equ	411	;# 
  1217     019C                     SPBRGH          equ	412	;# 
  1218     019D                     RCSTA           equ	413	;# 
  1219     019E                     TXSTA           equ	414	;# 
  1220     019F                     BAUDCON         equ	415	;# 
  1221     020C                     WPUA            equ	524	;# 
  1222     020E                     WPUC            equ	526	;# 
  1223     0211                     SSP1BUF         equ	529	;# 
  1224     0211                     SSPBUF          equ	529	;# 
  1225     0212                     SSP1ADD         equ	530	;# 
  1226     0212                     SSPADD          equ	530	;# 
  1227     0213                     SSP1MSK         equ	531	;# 
  1228     0213                     SSPMSK          equ	531	;# 
  1229     0214                     SSP1STAT        equ	532	;# 
  1230     0214                     SSPSTAT         equ	532	;# 
  1231     0215                     SSP1CON1        equ	533	;# 
  1232     0215                     SSPCON1         equ	533	;# 
  1233     0215                     SSPCON          equ	533	;# 
  1234     0216                     SSP1CON2        equ	534	;# 
  1235     0216                     SSPCON2         equ	534	;# 
  1236     0217                     SSP1CON3        equ	535	;# 
  1237     0217                     SSPCON3         equ	535	;# 
  1238     0291                     CCPR1           equ	657	;# 
  1239     0291                     CCPR1L          equ	657	;# 
  1240     0292                     CCPR1H          equ	658	;# 
  1241     0293                     CCP1CON         equ	659	;# 
  1242     0294                     PWM1CON         equ	660	;# 
  1243     0295                     CCP1AS          equ	661	;# 
  1244     0295                     ECCP1AS         equ	661	;# 
  1245     0296                     PSTR1CON        equ	662	;# 
  1246     0298                     CCPR2           equ	664	;# 
  1247     0298                     CCPR2L          equ	664	;# 
  1248     0299                     CCPR2H          equ	665	;# 
  1249     029A                     CCP2CON         equ	666	;# 
  1250     029B                     PWM2CON         equ	667	;# 
  1251     029C                     CCP2AS          equ	668	;# 
  1252     029D                     PSTR2CON        equ	669	;# 
  1253     029E                     CCPTMRS         equ	670	;# 
  1254     029E                     CCPTMRS0        equ	670	;# 
  1255     0311                     CCPR3           equ	785	;# 
  1256     0311                     CCPR3L          equ	785	;# 
  1257     0312                     CCPR3H          equ	786	;# 
  1258     0313                     CCP3CON         equ	787	;# 
  1259     0318                     CCPR4           equ	792	;# 
  1260     0318                     CCPR4L          equ	792	;# 
  1261     0319                     CCPR4H          equ	793	;# 
  1262     031A                     CCP4CON         equ	794	;# 
  1263     038C                     INLVLA          equ	908	;# 
  1264     038E                     INLVLC          equ	910	;# 
  1265     0391                     IOCAP           equ	913	;# 
  1266     0392                     IOCAN           equ	914	;# 
  1267     0393                     IOCAF           equ	915	;# 
  1268     039A                     CLKRCON         equ	922	;# 
  1269     039C                     MDCON           equ	924	;# 
  1270     039D                     MDSRC           equ	925	;# 
  1271     039E                     MDCARL          equ	926	;# 
  1272     039F                     MDCARH          equ	927	;# 
  1273     0415                     TMR4            equ	1045	;# 
  1274     0416                     PR4             equ	1046	;# 
  1275     0417                     T4CON           equ	1047	;# 
  1276     041C                     TMR6            equ	1052	;# 
  1277     041D                     PR6             equ	1053	;# 
  1278     041E                     T6CON           equ	1054	;# 
  1279     0FE4                     STATUS_SHAD     equ	4068	;# 
  1280     0FE5                     WREG_SHAD       equ	4069	;# 
  1281     0FE6                     BSR_SHAD        equ	4070	;# 
  1282     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1283     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1284     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1285     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1286     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1287     0FED                     STKPTR          equ	4077	;# 
  1288     0FEE                     TOSL            equ	4078	;# 
  1289     0FEF                     TOSH            equ	4079	;# 
  1290     0000                     INDF0           equ	0	;# 
  1291     0001                     INDF1           equ	1	;# 
  1292     0002                     PCL             equ	2	;# 
  1293     0003                     STATUS          equ	3	;# 
  1294     0004                     FSR0L           equ	4	;# 
  1295     0005                     FSR0H           equ	5	;# 
  1296     0006                     FSR1L           equ	6	;# 
  1297     0007                     FSR1H           equ	7	;# 
  1298     0008                     BSR             equ	8	;# 
  1299     0009                     WREG            equ	9	;# 
  1300     000A                     PCLATH          equ	10	;# 
  1301     000B                     INTCON          equ	11	;# 
  1302     000C                     PORTA           equ	12	;# 
  1303     000E                     PORTC           equ	14	;# 
  1304     0011                     PIR1            equ	17	;# 
  1305     0012                     PIR2            equ	18	;# 
  1306     0013                     PIR3            equ	19	;# 
  1307     0015                     TMR0            equ	21	;# 
  1308     0016                     TMR1            equ	22	;# 
  1309     0016                     TMR1L           equ	22	;# 
  1310     0017                     TMR1H           equ	23	;# 
  1311     0018                     T1CON           equ	24	;# 
  1312     0019                     T1GCON          equ	25	;# 
  1313     001A                     TMR2            equ	26	;# 
  1314     001B                     PR2             equ	27	;# 
  1315     001C                     T2CON           equ	28	;# 
  1316     001E                     CPSCON0         equ	30	;# 
  1317     001F                     CPSCON1         equ	31	;# 
  1318     008C                     TRISA           equ	140	;# 
  1319     008E                     TRISC           equ	142	;# 
  1320     0091                     PIE1            equ	145	;# 
  1321     0092                     PIE2            equ	146	;# 
  1322     0093                     PIE3            equ	147	;# 
  1323     0095                     OPTION_REG      equ	149	;# 
  1324     0096                     PCON            equ	150	;# 
  1325     0097                     WDTCON          equ	151	;# 
  1326     0098                     OSCTUNE         equ	152	;# 
  1327     0099                     OSCCON          equ	153	;# 
  1328     009A                     OSCSTAT         equ	154	;# 
  1329     009B                     ADRES           equ	155	;# 
  1330     009B                     ADRESL          equ	155	;# 
  1331     009C                     ADRESH          equ	156	;# 
  1332     009D                     ADCON0          equ	157	;# 
  1333     009E                     ADCON1          equ	158	;# 
  1334     010C                     LATA            equ	268	;# 
  1335     010E                     LATC            equ	270	;# 
  1336     0111                     CM1CON0         equ	273	;# 
  1337     0112                     CM1CON1         equ	274	;# 
  1338     0113                     CM2CON0         equ	275	;# 
  1339     0114                     CM2CON1         equ	276	;# 
  1340     0115                     CMOUT           equ	277	;# 
  1341     0116                     BORCON          equ	278	;# 
  1342     0117                     FVRCON          equ	279	;# 
  1343     0118                     DACCON0         equ	280	;# 
  1344     0119                     DACCON1         equ	281	;# 
  1345     011A                     SRCON0          equ	282	;# 
  1346     011B                     SRCON1          equ	283	;# 
  1347     011D                     APFCON0         equ	285	;# 
  1348     011E                     APFCON1         equ	286	;# 
  1349     018C                     ANSELA          equ	396	;# 
  1350     018E                     ANSELC          equ	398	;# 
  1351     0191                     EEADR           equ	401	;# 
  1352     0191                     EEADRL          equ	401	;# 
  1353     0192                     EEADRH          equ	402	;# 
  1354     0193                     EEDAT           equ	403	;# 
  1355     0193                     EEDATL          equ	403	;# 
  1356     0193                     EEDATA          equ	403	;# 
  1357     0194                     EEDATH          equ	404	;# 
  1358     0195                     EECON1          equ	405	;# 
  1359     0196                     EECON2          equ	406	;# 
  1360     0199                     RCREG           equ	409	;# 
  1361     019A                     TXREG           equ	410	;# 
  1362     019B                     SPBRG           equ	411	;# 
  1363     019B                     SPBRGL          equ	411	;# 
  1364     019C                     SPBRGH          equ	412	;# 
  1365     019D                     RCSTA           equ	413	;# 
  1366     019E                     TXSTA           equ	414	;# 
  1367     019F                     BAUDCON         equ	415	;# 
  1368     020C                     WPUA            equ	524	;# 
  1369     020E                     WPUC            equ	526	;# 
  1370     0211                     SSP1BUF         equ	529	;# 
  1371     0211                     SSPBUF          equ	529	;# 
  1372     0212                     SSP1ADD         equ	530	;# 
  1373     0212                     SSPADD          equ	530	;# 
  1374     0213                     SSP1MSK         equ	531	;# 
  1375     0213                     SSPMSK          equ	531	;# 
  1376     0214                     SSP1STAT        equ	532	;# 
  1377     0214                     SSPSTAT         equ	532	;# 
  1378     0215                     SSP1CON1        equ	533	;# 
  1379     0215                     SSPCON1         equ	533	;# 
  1380     0215                     SSPCON          equ	533	;# 
  1381     0216                     SSP1CON2        equ	534	;# 
  1382     0216                     SSPCON2         equ	534	;# 
  1383     0217                     SSP1CON3        equ	535	;# 
  1384     0217                     SSPCON3         equ	535	;# 
  1385     0291                     CCPR1           equ	657	;# 
  1386     0291                     CCPR1L          equ	657	;# 
  1387     0292                     CCPR1H          equ	658	;# 
  1388     0293                     CCP1CON         equ	659	;# 
  1389     0294                     PWM1CON         equ	660	;# 
  1390     0295                     CCP1AS          equ	661	;# 
  1391     0295                     ECCP1AS         equ	661	;# 
  1392     0296                     PSTR1CON        equ	662	;# 
  1393     0298                     CCPR2           equ	664	;# 
  1394     0298                     CCPR2L          equ	664	;# 
  1395     0299                     CCPR2H          equ	665	;# 
  1396     029A                     CCP2CON         equ	666	;# 
  1397     029B                     PWM2CON         equ	667	;# 
  1398     029C                     CCP2AS          equ	668	;# 
  1399     029D                     PSTR2CON        equ	669	;# 
  1400     029E                     CCPTMRS         equ	670	;# 
  1401     029E                     CCPTMRS0        equ	670	;# 
  1402     0311                     CCPR3           equ	785	;# 
  1403     0311                     CCPR3L          equ	785	;# 
  1404     0312                     CCPR3H          equ	786	;# 
  1405     0313                     CCP3CON         equ	787	;# 
  1406     0318                     CCPR4           equ	792	;# 
  1407     0318                     CCPR4L          equ	792	;# 
  1408     0319                     CCPR4H          equ	793	;# 
  1409     031A                     CCP4CON         equ	794	;# 
  1410     038C                     INLVLA          equ	908	;# 
  1411     038E                     INLVLC          equ	910	;# 
  1412     0391                     IOCAP           equ	913	;# 
  1413     0392                     IOCAN           equ	914	;# 
  1414     0393                     IOCAF           equ	915	;# 
  1415     039A                     CLKRCON         equ	922	;# 
  1416     039C                     MDCON           equ	924	;# 
  1417     039D                     MDSRC           equ	925	;# 
  1418     039E                     MDCARL          equ	926	;# 
  1419     039F                     MDCARH          equ	927	;# 
  1420     0415                     TMR4            equ	1045	;# 
  1421     0416                     PR4             equ	1046	;# 
  1422     0417                     T4CON           equ	1047	;# 
  1423     041C                     TMR6            equ	1052	;# 
  1424     041D                     PR6             equ	1053	;# 
  1425     041E                     T6CON           equ	1054	;# 
  1426     0FE4                     STATUS_SHAD     equ	4068	;# 
  1427     0FE5                     WREG_SHAD       equ	4069	;# 
  1428     0FE6                     BSR_SHAD        equ	4070	;# 
  1429     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1430     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1431     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1432     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1433     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1434     0FED                     STKPTR          equ	4077	;# 
  1435     0FEE                     TOSL            equ	4078	;# 
  1436     0FEF                     TOSH            equ	4079	;# 
  1437     0000                     INDF0           equ	0	;# 
  1438     0001                     INDF1           equ	1	;# 
  1439     0002                     PCL             equ	2	;# 
  1440     0003                     STATUS          equ	3	;# 
  1441     0004                     FSR0L           equ	4	;# 
  1442     0005                     FSR0H           equ	5	;# 
  1443     0006                     FSR1L           equ	6	;# 
  1444     0007                     FSR1H           equ	7	;# 
  1445     0008                     BSR             equ	8	;# 
  1446     0009                     WREG            equ	9	;# 
  1447     000A                     PCLATH          equ	10	;# 
  1448     000B                     INTCON          equ	11	;# 
  1449     000C                     PORTA           equ	12	;# 
  1450     000E                     PORTC           equ	14	;# 
  1451     0011                     PIR1            equ	17	;# 
  1452     0012                     PIR2            equ	18	;# 
  1453     0013                     PIR3            equ	19	;# 
  1454     0015                     TMR0            equ	21	;# 
  1455     0016                     TMR1            equ	22	;# 
  1456     0016                     TMR1L           equ	22	;# 
  1457     0017                     TMR1H           equ	23	;# 
  1458     0018                     T1CON           equ	24	;# 
  1459     0019                     T1GCON          equ	25	;# 
  1460     001A                     TMR2            equ	26	;# 
  1461     001B                     PR2             equ	27	;# 
  1462     001C                     T2CON           equ	28	;# 
  1463     001E                     CPSCON0         equ	30	;# 
  1464     001F                     CPSCON1         equ	31	;# 
  1465     008C                     TRISA           equ	140	;# 
  1466     008E                     TRISC           equ	142	;# 
  1467     0091                     PIE1            equ	145	;# 
  1468     0092                     PIE2            equ	146	;# 
  1469     0093                     PIE3            equ	147	;# 
  1470     0095                     OPTION_REG      equ	149	;# 
  1471     0096                     PCON            equ	150	;# 
  1472     0097                     WDTCON          equ	151	;# 
  1473     0098                     OSCTUNE         equ	152	;# 
  1474     0099                     OSCCON          equ	153	;# 
  1475     009A                     OSCSTAT         equ	154	;# 
  1476     009B                     ADRES           equ	155	;# 
  1477     009B                     ADRESL          equ	155	;# 
  1478     009C                     ADRESH          equ	156	;# 
  1479     009D                     ADCON0          equ	157	;# 
  1480     009E                     ADCON1          equ	158	;# 
  1481     010C                     LATA            equ	268	;# 
  1482     010E                     LATC            equ	270	;# 
  1483     0111                     CM1CON0         equ	273	;# 
  1484     0112                     CM1CON1         equ	274	;# 
  1485     0113                     CM2CON0         equ	275	;# 
  1486     0114                     CM2CON1         equ	276	;# 
  1487     0115                     CMOUT           equ	277	;# 
  1488     0116                     BORCON          equ	278	;# 
  1489     0117                     FVRCON          equ	279	;# 
  1490     0118                     DACCON0         equ	280	;# 
  1491     0119                     DACCON1         equ	281	;# 
  1492     011A                     SRCON0          equ	282	;# 
  1493     011B                     SRCON1          equ	283	;# 
  1494     011D                     APFCON0         equ	285	;# 
  1495     011E                     APFCON1         equ	286	;# 
  1496     018C                     ANSELA          equ	396	;# 
  1497     018E                     ANSELC          equ	398	;# 
  1498     0191                     EEADR           equ	401	;# 
  1499     0191                     EEADRL          equ	401	;# 
  1500     0192                     EEADRH          equ	402	;# 
  1501     0193                     EEDAT           equ	403	;# 
  1502     0193                     EEDATL          equ	403	;# 
  1503     0193                     EEDATA          equ	403	;# 
  1504     0194                     EEDATH          equ	404	;# 
  1505     0195                     EECON1          equ	405	;# 
  1506     0196                     EECON2          equ	406	;# 
  1507     0199                     RCREG           equ	409	;# 
  1508     019A                     TXREG           equ	410	;# 
  1509     019B                     SPBRG           equ	411	;# 
  1510     019B                     SPBRGL          equ	411	;# 
  1511     019C                     SPBRGH          equ	412	;# 
  1512     019D                     RCSTA           equ	413	;# 
  1513     019E                     TXSTA           equ	414	;# 
  1514     019F                     BAUDCON         equ	415	;# 
  1515     020C                     WPUA            equ	524	;# 
  1516     020E                     WPUC            equ	526	;# 
  1517     0211                     SSP1BUF         equ	529	;# 
  1518     0211                     SSPBUF          equ	529	;# 
  1519     0212                     SSP1ADD         equ	530	;# 
  1520     0212                     SSPADD          equ	530	;# 
  1521     0213                     SSP1MSK         equ	531	;# 
  1522     0213                     SSPMSK          equ	531	;# 
  1523     0214                     SSP1STAT        equ	532	;# 
  1524     0214                     SSPSTAT         equ	532	;# 
  1525     0215                     SSP1CON1        equ	533	;# 
  1526     0215                     SSPCON1         equ	533	;# 
  1527     0215                     SSPCON          equ	533	;# 
  1528     0216                     SSP1CON2        equ	534	;# 
  1529     0216                     SSPCON2         equ	534	;# 
  1530     0217                     SSP1CON3        equ	535	;# 
  1531     0217                     SSPCON3         equ	535	;# 
  1532     0291                     CCPR1           equ	657	;# 
  1533     0291                     CCPR1L          equ	657	;# 
  1534     0292                     CCPR1H          equ	658	;# 
  1535     0293                     CCP1CON         equ	659	;# 
  1536     0294                     PWM1CON         equ	660	;# 
  1537     0295                     CCP1AS          equ	661	;# 
  1538     0295                     ECCP1AS         equ	661	;# 
  1539     0296                     PSTR1CON        equ	662	;# 
  1540     0298                     CCPR2           equ	664	;# 
  1541     0298                     CCPR2L          equ	664	;# 
  1542     0299                     CCPR2H          equ	665	;# 
  1543     029A                     CCP2CON         equ	666	;# 
  1544     029B                     PWM2CON         equ	667	;# 
  1545     029C                     CCP2AS          equ	668	;# 
  1546     029D                     PSTR2CON        equ	669	;# 
  1547     029E                     CCPTMRS         equ	670	;# 
  1548     029E                     CCPTMRS0        equ	670	;# 
  1549     0311                     CCPR3           equ	785	;# 
  1550     0311                     CCPR3L          equ	785	;# 
  1551     0312                     CCPR3H          equ	786	;# 
  1552     0313                     CCP3CON         equ	787	;# 
  1553     0318                     CCPR4           equ	792	;# 
  1554     0318                     CCPR4L          equ	792	;# 
  1555     0319                     CCPR4H          equ	793	;# 
  1556     031A                     CCP4CON         equ	794	;# 
  1557     038C                     INLVLA          equ	908	;# 
  1558     038E                     INLVLC          equ	910	;# 
  1559     0391                     IOCAP           equ	913	;# 
  1560     0392                     IOCAN           equ	914	;# 
  1561     0393                     IOCAF           equ	915	;# 
  1562     039A                     CLKRCON         equ	922	;# 
  1563     039C                     MDCON           equ	924	;# 
  1564     039D                     MDSRC           equ	925	;# 
  1565     039E                     MDCARL          equ	926	;# 
  1566     039F                     MDCARH          equ	927	;# 
  1567     0415                     TMR4            equ	1045	;# 
  1568     0416                     PR4             equ	1046	;# 
  1569     0417                     T4CON           equ	1047	;# 
  1570     041C                     TMR6            equ	1052	;# 
  1571     041D                     PR6             equ	1053	;# 
  1572     041E                     T6CON           equ	1054	;# 
  1573     0FE4                     STATUS_SHAD     equ	4068	;# 
  1574     0FE5                     WREG_SHAD       equ	4069	;# 
  1575     0FE6                     BSR_SHAD        equ	4070	;# 
  1576     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1577     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1578     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1579     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1580     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1581     0FED                     STKPTR          equ	4077	;# 
  1582     0FEE                     TOSL            equ	4078	;# 
  1583     0FEF                     TOSH            equ	4079	;# 
  1584     0000                     INDF0           equ	0	;# 
  1585     0001                     INDF1           equ	1	;# 
  1586     0002                     PCL             equ	2	;# 
  1587     0003                     STATUS          equ	3	;# 
  1588     0004                     FSR0L           equ	4	;# 
  1589     0005                     FSR0H           equ	5	;# 
  1590     0006                     FSR1L           equ	6	;# 
  1591     0007                     FSR1H           equ	7	;# 
  1592     0008                     BSR             equ	8	;# 
  1593     0009                     WREG            equ	9	;# 
  1594     000A                     PCLATH          equ	10	;# 
  1595     000B                     INTCON          equ	11	;# 
  1596     000C                     PORTA           equ	12	;# 
  1597     000E                     PORTC           equ	14	;# 
  1598     0011                     PIR1            equ	17	;# 
  1599     0012                     PIR2            equ	18	;# 
  1600     0013                     PIR3            equ	19	;# 
  1601     0015                     TMR0            equ	21	;# 
  1602     0016                     TMR1            equ	22	;# 
  1603     0016                     TMR1L           equ	22	;# 
  1604     0017                     TMR1H           equ	23	;# 
  1605     0018                     T1CON           equ	24	;# 
  1606     0019                     T1GCON          equ	25	;# 
  1607     001A                     TMR2            equ	26	;# 
  1608     001B                     PR2             equ	27	;# 
  1609     001C                     T2CON           equ	28	;# 
  1610     001E                     CPSCON0         equ	30	;# 
  1611     001F                     CPSCON1         equ	31	;# 
  1612     008C                     TRISA           equ	140	;# 
  1613     008E                     TRISC           equ	142	;# 
  1614     0091                     PIE1            equ	145	;# 
  1615     0092                     PIE2            equ	146	;# 
  1616     0093                     PIE3            equ	147	;# 
  1617     0095                     OPTION_REG      equ	149	;# 
  1618     0096                     PCON            equ	150	;# 
  1619     0097                     WDTCON          equ	151	;# 
  1620     0098                     OSCTUNE         equ	152	;# 
  1621     0099                     OSCCON          equ	153	;# 
  1622     009A                     OSCSTAT         equ	154	;# 
  1623     009B                     ADRES           equ	155	;# 
  1624     009B                     ADRESL          equ	155	;# 
  1625     009C                     ADRESH          equ	156	;# 
  1626     009D                     ADCON0          equ	157	;# 
  1627     009E                     ADCON1          equ	158	;# 
  1628     010C                     LATA            equ	268	;# 
  1629     010E                     LATC            equ	270	;# 
  1630     0111                     CM1CON0         equ	273	;# 
  1631     0112                     CM1CON1         equ	274	;# 
  1632     0113                     CM2CON0         equ	275	;# 
  1633     0114                     CM2CON1         equ	276	;# 
  1634     0115                     CMOUT           equ	277	;# 
  1635     0116                     BORCON          equ	278	;# 
  1636     0117                     FVRCON          equ	279	;# 
  1637     0118                     DACCON0         equ	280	;# 
  1638     0119                     DACCON1         equ	281	;# 
  1639     011A                     SRCON0          equ	282	;# 
  1640     011B                     SRCON1          equ	283	;# 
  1641     011D                     APFCON0         equ	285	;# 
  1642     011E                     APFCON1         equ	286	;# 
  1643     018C                     ANSELA          equ	396	;# 
  1644     018E                     ANSELC          equ	398	;# 
  1645     0191                     EEADR           equ	401	;# 
  1646     0191                     EEADRL          equ	401	;# 
  1647     0192                     EEADRH          equ	402	;# 
  1648     0193                     EEDAT           equ	403	;# 
  1649     0193                     EEDATL          equ	403	;# 
  1650     0193                     EEDATA          equ	403	;# 
  1651     0194                     EEDATH          equ	404	;# 
  1652     0195                     EECON1          equ	405	;# 
  1653     0196                     EECON2          equ	406	;# 
  1654     0199                     RCREG           equ	409	;# 
  1655     019A                     TXREG           equ	410	;# 
  1656     019B                     SPBRG           equ	411	;# 
  1657     019B                     SPBRGL          equ	411	;# 
  1658     019C                     SPBRGH          equ	412	;# 
  1659     019D                     RCSTA           equ	413	;# 
  1660     019E                     TXSTA           equ	414	;# 
  1661     019F                     BAUDCON         equ	415	;# 
  1662     020C                     WPUA            equ	524	;# 
  1663     020E                     WPUC            equ	526	;# 
  1664     0211                     SSP1BUF         equ	529	;# 
  1665     0211                     SSPBUF          equ	529	;# 
  1666     0212                     SSP1ADD         equ	530	;# 
  1667     0212                     SSPADD          equ	530	;# 
  1668     0213                     SSP1MSK         equ	531	;# 
  1669     0213                     SSPMSK          equ	531	;# 
  1670     0214                     SSP1STAT        equ	532	;# 
  1671     0214                     SSPSTAT         equ	532	;# 
  1672     0215                     SSP1CON1        equ	533	;# 
  1673     0215                     SSPCON1         equ	533	;# 
  1674     0215                     SSPCON          equ	533	;# 
  1675     0216                     SSP1CON2        equ	534	;# 
  1676     0216                     SSPCON2         equ	534	;# 
  1677     0217                     SSP1CON3        equ	535	;# 
  1678     0217                     SSPCON3         equ	535	;# 
  1679     0291                     CCPR1           equ	657	;# 
  1680     0291                     CCPR1L          equ	657	;# 
  1681     0292                     CCPR1H          equ	658	;# 
  1682     0293                     CCP1CON         equ	659	;# 
  1683     0294                     PWM1CON         equ	660	;# 
  1684     0295                     CCP1AS          equ	661	;# 
  1685     0295                     ECCP1AS         equ	661	;# 
  1686     0296                     PSTR1CON        equ	662	;# 
  1687     0298                     CCPR2           equ	664	;# 
  1688     0298                     CCPR2L          equ	664	;# 
  1689     0299                     CCPR2H          equ	665	;# 
  1690     029A                     CCP2CON         equ	666	;# 
  1691     029B                     PWM2CON         equ	667	;# 
  1692     029C                     CCP2AS          equ	668	;# 
  1693     029D                     PSTR2CON        equ	669	;# 
  1694     029E                     CCPTMRS         equ	670	;# 
  1695     029E                     CCPTMRS0        equ	670	;# 
  1696     0311                     CCPR3           equ	785	;# 
  1697     0311                     CCPR3L          equ	785	;# 
  1698     0312                     CCPR3H          equ	786	;# 
  1699     0313                     CCP3CON         equ	787	;# 
  1700     0318                     CCPR4           equ	792	;# 
  1701     0318                     CCPR4L          equ	792	;# 
  1702     0319                     CCPR4H          equ	793	;# 
  1703     031A                     CCP4CON         equ	794	;# 
  1704     038C                     INLVLA          equ	908	;# 
  1705     038E                     INLVLC          equ	910	;# 
  1706     0391                     IOCAP           equ	913	;# 
  1707     0392                     IOCAN           equ	914	;# 
  1708     0393                     IOCAF           equ	915	;# 
  1709     039A                     CLKRCON         equ	922	;# 
  1710     039C                     MDCON           equ	924	;# 
  1711     039D                     MDSRC           equ	925	;# 
  1712     039E                     MDCARL          equ	926	;# 
  1713     039F                     MDCARH          equ	927	;# 
  1714     0415                     TMR4            equ	1045	;# 
  1715     0416                     PR4             equ	1046	;# 
  1716     0417                     T4CON           equ	1047	;# 
  1717     041C                     TMR6            equ	1052	;# 
  1718     041D                     PR6             equ	1053	;# 
  1719     041E                     T6CON           equ	1054	;# 
  1720     0FE4                     STATUS_SHAD     equ	4068	;# 
  1721     0FE5                     WREG_SHAD       equ	4069	;# 
  1722     0FE6                     BSR_SHAD        equ	4070	;# 
  1723     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1724     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1725     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1726     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1727     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1728     0FED                     STKPTR          equ	4077	;# 
  1729     0FEE                     TOSL            equ	4078	;# 
  1730     0FEF                     TOSH            equ	4079	;# 
  1731     0000                     INDF0           equ	0	;# 
  1732     0001                     INDF1           equ	1	;# 
  1733     0002                     PCL             equ	2	;# 
  1734     0003                     STATUS          equ	3	;# 
  1735     0004                     FSR0L           equ	4	;# 
  1736     0005                     FSR0H           equ	5	;# 
  1737     0006                     FSR1L           equ	6	;# 
  1738     0007                     FSR1H           equ	7	;# 
  1739     0008                     BSR             equ	8	;# 
  1740     0009                     WREG            equ	9	;# 
  1741     000A                     PCLATH          equ	10	;# 
  1742     000B                     INTCON          equ	11	;# 
  1743     000C                     PORTA           equ	12	;# 
  1744     000E                     PORTC           equ	14	;# 
  1745     0011                     PIR1            equ	17	;# 
  1746     0012                     PIR2            equ	18	;# 
  1747     0013                     PIR3            equ	19	;# 
  1748     0015                     TMR0            equ	21	;# 
  1749     0016                     TMR1            equ	22	;# 
  1750     0016                     TMR1L           equ	22	;# 
  1751     0017                     TMR1H           equ	23	;# 
  1752     0018                     T1CON           equ	24	;# 
  1753     0019                     T1GCON          equ	25	;# 
  1754     001A                     TMR2            equ	26	;# 
  1755     001B                     PR2             equ	27	;# 
  1756     001C                     T2CON           equ	28	;# 
  1757     001E                     CPSCON0         equ	30	;# 
  1758     001F                     CPSCON1         equ	31	;# 
  1759     008C                     TRISA           equ	140	;# 
  1760     008E                     TRISC           equ	142	;# 
  1761     0091                     PIE1            equ	145	;# 
  1762     0092                     PIE2            equ	146	;# 
  1763     0093                     PIE3            equ	147	;# 
  1764     0095                     OPTION_REG      equ	149	;# 
  1765     0096                     PCON            equ	150	;# 
  1766     0097                     WDTCON          equ	151	;# 
  1767     0098                     OSCTUNE         equ	152	;# 
  1768     0099                     OSCCON          equ	153	;# 
  1769     009A                     OSCSTAT         equ	154	;# 
  1770     009B                     ADRES           equ	155	;# 
  1771     009B                     ADRESL          equ	155	;# 
  1772     009C                     ADRESH          equ	156	;# 
  1773     009D                     ADCON0          equ	157	;# 
  1774     009E                     ADCON1          equ	158	;# 
  1775     010C                     LATA            equ	268	;# 
  1776     010E                     LATC            equ	270	;# 
  1777     0111                     CM1CON0         equ	273	;# 
  1778     0112                     CM1CON1         equ	274	;# 
  1779     0113                     CM2CON0         equ	275	;# 
  1780     0114                     CM2CON1         equ	276	;# 
  1781     0115                     CMOUT           equ	277	;# 
  1782     0116                     BORCON          equ	278	;# 
  1783     0117                     FVRCON          equ	279	;# 
  1784     0118                     DACCON0         equ	280	;# 
  1785     0119                     DACCON1         equ	281	;# 
  1786     011A                     SRCON0          equ	282	;# 
  1787     011B                     SRCON1          equ	283	;# 
  1788     011D                     APFCON0         equ	285	;# 
  1789     011E                     APFCON1         equ	286	;# 
  1790     018C                     ANSELA          equ	396	;# 
  1791     018E                     ANSELC          equ	398	;# 
  1792     0191                     EEADR           equ	401	;# 
  1793     0191                     EEADRL          equ	401	;# 
  1794     0192                     EEADRH          equ	402	;# 
  1795     0193                     EEDAT           equ	403	;# 
  1796     0193                     EEDATL          equ	403	;# 
  1797     0193                     EEDATA          equ	403	;# 
  1798     0194                     EEDATH          equ	404	;# 
  1799     0195                     EECON1          equ	405	;# 
  1800     0196                     EECON2          equ	406	;# 
  1801     0199                     RCREG           equ	409	;# 
  1802     019A                     TXREG           equ	410	;# 
  1803     019B                     SPBRG           equ	411	;# 
  1804     019B                     SPBRGL          equ	411	;# 
  1805     019C                     SPBRGH          equ	412	;# 
  1806     019D                     RCSTA           equ	413	;# 
  1807     019E                     TXSTA           equ	414	;# 
  1808     019F                     BAUDCON         equ	415	;# 
  1809     020C                     WPUA            equ	524	;# 
  1810     020E                     WPUC            equ	526	;# 
  1811     0211                     SSP1BUF         equ	529	;# 
  1812     0211                     SSPBUF          equ	529	;# 
  1813     0212                     SSP1ADD         equ	530	;# 
  1814     0212                     SSPADD          equ	530	;# 
  1815     0213                     SSP1MSK         equ	531	;# 
  1816     0213                     SSPMSK          equ	531	;# 
  1817     0214                     SSP1STAT        equ	532	;# 
  1818     0214                     SSPSTAT         equ	532	;# 
  1819     0215                     SSP1CON1        equ	533	;# 
  1820     0215                     SSPCON1         equ	533	;# 
  1821     0215                     SSPCON          equ	533	;# 
  1822     0216                     SSP1CON2        equ	534	;# 
  1823     0216                     SSPCON2         equ	534	;# 
  1824     0217                     SSP1CON3        equ	535	;# 
  1825     0217                     SSPCON3         equ	535	;# 
  1826     0291                     CCPR1           equ	657	;# 
  1827     0291                     CCPR1L          equ	657	;# 
  1828     0292                     CCPR1H          equ	658	;# 
  1829     0293                     CCP1CON         equ	659	;# 
  1830     0294                     PWM1CON         equ	660	;# 
  1831     0295                     CCP1AS          equ	661	;# 
  1832     0295                     ECCP1AS         equ	661	;# 
  1833     0296                     PSTR1CON        equ	662	;# 
  1834     0298                     CCPR2           equ	664	;# 
  1835     0298                     CCPR2L          equ	664	;# 
  1836     0299                     CCPR2H          equ	665	;# 
  1837     029A                     CCP2CON         equ	666	;# 
  1838     029B                     PWM2CON         equ	667	;# 
  1839     029C                     CCP2AS          equ	668	;# 
  1840     029D                     PSTR2CON        equ	669	;# 
  1841     029E                     CCPTMRS         equ	670	;# 
  1842     029E                     CCPTMRS0        equ	670	;# 
  1843     0311                     CCPR3           equ	785	;# 
  1844     0311                     CCPR3L          equ	785	;# 
  1845     0312                     CCPR3H          equ	786	;# 
  1846     0313                     CCP3CON         equ	787	;# 
  1847     0318                     CCPR4           equ	792	;# 
  1848     0318                     CCPR4L          equ	792	;# 
  1849     0319                     CCPR4H          equ	793	;# 
  1850     031A                     CCP4CON         equ	794	;# 
  1851     038C                     INLVLA          equ	908	;# 
  1852     038E                     INLVLC          equ	910	;# 
  1853     0391                     IOCAP           equ	913	;# 
  1854     0392                     IOCAN           equ	914	;# 
  1855     0393                     IOCAF           equ	915	;# 
  1856     039A                     CLKRCON         equ	922	;# 
  1857     039C                     MDCON           equ	924	;# 
  1858     039D                     MDSRC           equ	925	;# 
  1859     039E                     MDCARL          equ	926	;# 
  1860     039F                     MDCARH          equ	927	;# 
  1861     0415                     TMR4            equ	1045	;# 
  1862     0416                     PR4             equ	1046	;# 
  1863     0417                     T4CON           equ	1047	;# 
  1864     041C                     TMR6            equ	1052	;# 
  1865     041D                     PR6             equ	1053	;# 
  1866     041E                     T6CON           equ	1054	;# 
  1867     0FE4                     STATUS_SHAD     equ	4068	;# 
  1868     0FE5                     WREG_SHAD       equ	4069	;# 
  1869     0FE6                     BSR_SHAD        equ	4070	;# 
  1870     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1871     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1872     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1873     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1874     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1875     0FED                     STKPTR          equ	4077	;# 
  1876     0FEE                     TOSL            equ	4078	;# 
  1877     0FEF                     TOSH            equ	4079	;_dataBuffer
  1878                           
  1879 ;; Function _EEPROM_ByteWrite is unused but had its address taken
  1880     0000                     _EEPROM_ByteWrite equ	0
  1881                           
  1882 ;; Function _EEPROM_ByteRead is unused but had its address taken
  1883     0000                     _EEPROM_ByteRead equ	0
  1884                           
  1885 ;; Function _NVM_IsBusy is unused but had its address taken
  1886     0000                     _NVM_IsBusy     equ	0
  1887                           
  1888 ;; Function _SPI1_Deinitialize is unused but had its address taken
  1889     0000                     _SPI1_Deinitialize equ	0
  1890                           
  1891 ;; Function _SPI1_ByteWrite is unused but had its address taken
  1892     0000                     _SPI1_ByteWrite equ	0
  1893                           
  1894 ;; Function _SPI1_ByteRead is unused but had its address taken
  1895     0000                     _SPI1_ByteRead  equ	0
  1896                           
  1897 ;; Function _SPI1_IsRxReady is unused but had its address taken
  1898     0000                     _SPI1_IsRxReady equ	0
  1899                           
  1900 ;; Function _SPI1_IsTxReady is unused but had its address taken
  1901     0000                     _SPI1_IsTxReady equ	0
  1902                           
  1903 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  1904     0000                     _INT_DefaultInterruptHandler equ	0
  1905                           
  1906                           	psect	idataBANK0
  1907     0E14                     __pidataBANK0:
  1908                           
  1909                           ;initializer for ADXL345_validation@F2683
  1910     0E14  3480               	retlw	128
  1911     0E15  3400               	retlw	0
  1912                           
  1913                           	psect	stringtext1
  1914     1000                     __pstringtext1:
  1915     1000                     _SPI1_Host:
  1916     1000  344A               	retlw	low _SPI1_Initialize
  1917     1001  340E               	retlw	high _SPI1_Initialize
  1918     1002  3400               	retlw	0
  1919     1003  3400               	retlw	0
  1920     1004  34C4               	retlw	low _SPI1_Open
  1921     1005  3400               	retlw	high _SPI1_Open
  1922     1006  3416               	retlw	low _SPI1_Close
  1923     1007  340E               	retlw	high _SPI1_Close
  1924     1008  34AD               	retlw	low _SPI1_BufferExchange
  1925     1009  340F               	retlw	high _SPI1_BufferExchange
  1926     100A  3441               	retlw	low _SPI1_BufferRead
  1927     100B  340F               	retlw	high _SPI1_BufferRead
  1928     100C  3421               	retlw	low _SPI1_BufferWrite
  1929     100D  340F               	retlw	high _SPI1_BufferWrite
  1930     100E  345F               	retlw	low _SPI1_ByteExchange
  1931     100F  340E               	retlw	high _SPI1_ByteExchange
  1932     1010  3400               	retlw	0
  1933     1011  3400               	retlw	0
  1934     1012  3400               	retlw	0
  1935     1013  3400               	retlw	0
  1936     1014  3400               	retlw	0
  1937     1015  3400               	retlw	0
  1938     1016  3400               	retlw	0
  1939     1017  3400               	retlw	0
  1940     1018  3400               	retlw	0
  1941     1019  3400               	retlw	0
  1942     101A  3400               	retlw	0
  1943     101B  3400               	retlw	0
  1944     101C                     __end_of_SPI1_Host:
  1945                           
  1946                           	psect	stringtext2
  1947     101C                     __pstringtext2:
  1948     101C                     _spi1_configuration:
  1949     101C  3400               	retlw	0
  1950     101D  3410               	retlw	16
  1951     101E  3410               	retlw	16
  1952     101F  3401               	retlw	1
  1953     1020  3400               	retlw	0
  1954     1021  3440               	retlw	64
  1955     1022  3400               	retlw	0
  1956     1023  3410               	retlw	16
  1957     1024  3401               	retlw	1
  1958     1025  3400               	retlw	0
  1959     1026  3464               	retlw	100
  1960     1027  3400               	retlw	0
  1961     1028  3410               	retlw	16
  1962     1029  3401               	retlw	1
  1963     102A  3400               	retlw	0
  1964     102B                     __end_of_spi1_configuration:
  1965                           
  1966                           	psect	stringtext3
  1967     102B                     __pstringtext3:
  1968     102B                     _eeprom_interface:
  1969     102B  3400               	retlw	0
  1970     102C  3400               	retlw	0
  1971     102D  3400               	retlw	0
  1972     102E  3400               	retlw	0
  1973     102F  3400               	retlw	0
  1974     1030  3400               	retlw	0
  1975     1031  3400               	retlw	0
  1976     1032  3400               	retlw	0
  1977     1033  3400               	retlw	0
  1978     1034  3400               	retlw	0
  1979     1035  3400               	retlw	0
  1980     1036  3400               	retlw	0
  1981     1037  3400               	retlw	0
  1982     1038  3400               	retlw	0
  1983     1039                     __end_of_eeprom_interface:
  1984                           
  1985                           	psect	stringtext4
  1986     1051                     __pstringtext4:
  1987     1051                     _acceleration_squared_threshold:
  1988     1051  34B0               	retlw	176
  1989     1052  3404               	retlw	4
  1990     1053                     __end_of_acceleration_squared_threshold:
  1991                           
  1992                           	psect	stringtext5
  1993     1039                     __pstringtext5:
  1994     1039                     _ADXL345_init_settings:
  1995     1039  3418               	retlw	24
  1996     103A  3403               	retlw	3
  1997     103B  34FF               	retlw	255
  1998     103C  347F               	retlw	127
  1999     103D  3407               	retlw	7
  2000     103E  3418               	retlw	24
  2001     103F  3400               	retlw	0
  2002     1040  3400               	retlw	0
  2003     1041  3417               	retlw	23
  2004     1042  3408               	retlw	8
  2005     1043  3404               	retlw	4
  2006     1044  3400               	retlw	0
  2007     1045                     __end_of_ADXL345_init_settings:
  2008                           
  2009                           	psect	stringtext6
  2010     1045                     __pstringtext6:
  2011     1045                     _no_motion_init:
  2012     1045  3408               	retlw	8
  2013     1046  3403               	retlw	3
  2014     1047  3402               	retlw	2
  2015     1048  34FF               	retlw	255
  2016     1049                     __end_of_no_motion_init:
  2017                           
  2018                           	psect	stringtext7
  2019     1049                     __pstringtext7:
  2020     1049                     _impact_init:
  2021     1049  3430               	retlw	48
  2022     104A  3403               	retlw	3
  2023     104B  3401               	retlw	1
  2024     104C  347F               	retlw	127
  2025     104D                     __end_of_impact_init:
  2026                           
  2027                           	psect	stringtext8
  2028     104D                     __pstringtext8:
  2029     104D                     _fall_init:
  2030     104D  3418               	retlw	24
  2031     104E  3403               	retlw	3
  2032     104F  34FF               	retlw	255
  2033     1050  347F               	retlw	127
  2034     1051                     __end_of_fall_init:
  2035                           
  2036                           	psect	nvBANK0
  2037     0065                     __pnvBANK0:
  2038     0065                     _SW1_InterruptHandler:
  2039     0065                     	ds	2
  2040     0067                     _INT_InterruptHandler:
  2041     0067                     	ds	2
  2042     000C                     _PORTAbits      set	12
  2043     0011                     _PIR1bits       set	17
  2044     000B                     _INTCONbits     set	11
  2045     0097                     _WDTCON         set	151
  2046     0098                     _OSCTUNE        set	152
  2047     0099                     _OSCCON         set	153
  2048     008E                     _TRISC          set	142
  2049     008C                     _TRISA          set	140
  2050     0095                     _OPTION_REGbits set	149
  2051     0091                     _PIE1bits       set	145
  2052     010E                     _LATCbits       set	270
  2053     0116                     _BORCON         set	278
  2054     010C                     _LATAbits       set	268
  2055     011D                     _APFCON0        set	285
  2056     010E                     _LATC           set	270
  2057     010C                     _LATA           set	268
  2058     0191                     _EEADR          set	401
  2059     0193                     _EEDATA         set	403
  2060     0195                     _EECON1         set	405
  2061     018E                     _ANSELC         set	398
  2062     018C                     _ANSELA         set	396
  2063     0196                     _EECON2         set	406
  2064     0193                     _EEDATL         set	403
  2065     0191                     _EEADRL         set	401
  2066     0192                     _EEADRH         set	402
  2067     0195                     _EECON1bits     set	405
  2068     020E                     _WPUC           set	526
  2069     020C                     _WPUA           set	524
  2070     0211                     _SSP1BUF        set	529
  2071     0215                     _SSP1CON1bits   set	533
  2072     0212                     _SSP1ADD        set	530
  2073     0217                     _SSP1CON3       set	535
  2074     0215                     _SSP1CON1       set	533
  2075     0214                     _SSP1STAT       set	532
  2076     0393                     _IOCAFbits      set	915
  2077     0393                     _IOCAF          set	915
  2078     0392                     _IOCAN          set	914
  2079     0391                     _IOCAP          set	913
  2080     038E                     _INLVLC         set	910
  2081     038C                     _INLVLA         set	908
  2082                           
  2083                           	psect	cinit
  2084     07DD                     start_initialization:	
  2085                           ; #config settings
  2086                           
  2087     07DD                     __initialization:	;BIGRAM
  2088                           
  2089                           ; Initialize objects allocated to BANK0
  2090     07DD  318E  2614  3187   	fcall	__pidataBANK0	;fetch initializer
  2091     07E0  00E9               	movwf	__pdataBANK0& (0+127)
  2092     07E1  318E  2615  3187   	fcall	__pidataBANK0+1	;fetch initializer
  2093     07E4  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  2094                           
  2095                           ; Clear objects allocated to BIGRAM
  2096     07E5  30F0               	movlw	low (0+8944)
  2097     07E6  0084               	movwf	4
  2098     07E7  3022               	movlw	high (0+8944)
  2099     07E8  0085               	movwf	5
  2100     07E9  3000               	movlw	0
  2101     07EA  00FE               	movwf	btemp
  2102     07EB  3001               	movlw	1
  2103     07EC  00FF               	movwf	btemp+1
  2104     07ED  318E  266B  3187   	fcall	clear_ram0
  2105                           
  2106                           ; Clear objects allocated to COMMON
  2107     07F0  01FC               	clrf	__pbssCOMMON& (0+127)
  2108     07F1  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  2109                           
  2110                           ; Clear objects allocated to BANK0
  2111     07F2  3054               	movlw	low __pbssBANK0
  2112     07F3  0084               	movwf	4
  2113     07F4  3000               	movlw	high __pbssBANK0
  2114     07F5  0085               	movwf	5
  2115     07F6  3011               	movlw	17
  2116     07F7  00FE               	movwf	btemp
  2117     07F8  3000               	movlw	0
  2118     07F9  00FF               	movwf	btemp+1
  2119     07FA  318E  266B  3187   	fcall	clear_ram0
  2120     07FD                     end_of_initialization:	
  2121                           ;End of C runtime variable initialization code
  2122                           
  2123     07FD                     __end_of__initialization:
  2124     07FD  0020               	movlb	0
  2125     07FE  3184  2C2F         	ljmp	_main	;jump to C main() function
  2126                           
  2127                           	psect	bssCOMMON
  2128     007C                     __pbssCOMMON:
  2129     007C                     _unlockKeyHigh:
  2130     007C                     	ds	1
  2131     007D                     _unlockKeyLow:
  2132     007D                     	ds	1
  2133                           
  2134                           	psect	bssBANK0
  2135     0054                     __pbssBANK0:
  2136     0054                     calibrate@F2711:
  2137     0054                     	ds	6
  2138     005A                     orientation_Up@F2699:
  2139     005A                     	ds	6
  2140     0060                     _orientation_check_timer_20ms:
  2141     0060                     	ds	2
  2142     0062                     _timer_20ms:
  2143     0062                     	ds	2
  2144     0064                     _good_orientation_count:
  2145     0064                     	ds	1
  2146                           
  2147                           	psect	dataBANK0
  2148     0069                     __pdataBANK0:
  2149     0069                     ADXL345_validation@F2683:
  2150     0069                     	ds	2
  2151                           
  2152                           	psect	clrtext
  2153     0E6B                     clear_ram0:	
  2154                           ;	Called with FSR0 containing the base address, and
  2155                           ;	btemp/btemp+1 has the size to clear
  2156                           
  2157     0E6B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2158     0E6C                     clrloop0:
  2159     0E6C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2160     0E6D  3101               	addfsr 0,1
  2161     0E6E  3001               	movlw	1
  2162     0E6F  02FE               	subwf	btemp,f
  2163     0E70  3000               	movlw	0
  2164     0E71  3BFF               	subwfb	btemp+1,f
  2165     0E72  087F               	movf	btemp+1,w
  2166     0E73  047E               	iorwf	btemp,w
  2167     0E74  1D03               	skipz
  2168     0E75  2E6C               	goto	clrloop0	;have we reached the end yet?
  2169     0E76  3400               	retlw	0	;all done for this memory range, return
  2170                           
  2171                           	psect	cstackBANK1
  2172     00A0                     __pcstackBANK1:
  2173     00A0                     calibrate@acc_data:
  2174                           
  2175                           ; 6 bytes @ 0x0
  2176     00A0                     	ds	6
  2177     00A6                     calibrate@Z_n1g:
  2178                           
  2179                           ; 2 bytes @ 0x6
  2180     00A6                     	ds	2
  2181     00A8                     calibrate@sum_X:
  2182                           
  2183                           ; 2 bytes @ 0x8
  2184     00A8                     	ds	2
  2185     00AA                     calibrate@sum_Y:
  2186                           
  2187                           ; 2 bytes @ 0xA
  2188     00AA                     	ds	2
  2189     00AC                     calibrate@i:
  2190                           
  2191                           ; 2 bytes @ 0xC
  2192     00AC                     	ds	2
  2193     00AE                     calibrate@i_996:
  2194                           
  2195                           ; 2 bytes @ 0xE
  2196     00AE                     	ds	2
  2197     00B0                     calibrate@offset_0g_X:
  2198                           
  2199                           ; 1 bytes @ 0x10
  2200     00B0                     	ds	1
  2201     00B1                     calibrate@offset_0g_Y:
  2202                           
  2203                           ; 1 bytes @ 0x11
  2204     00B1                     	ds	1
  2205     00B2                     calibrate@offset_0g_Z:
  2206                           
  2207                           ; 1 bytes @ 0x12
  2208     00B2                     	ds	1
  2209     00B3                     calibrate@addr_val:
  2210                           
  2211                           ; 1 bytes @ 0x13
  2212     00B3                     	ds	1
  2213     00B4                     calibrate@addr_val_997:
  2214                           
  2215                           ; 1 bytes @ 0x14
  2216     00B4                     	ds	1
  2217     00B5                     calibrate@sum_Z:
  2218                           
  2219                           ; 2 bytes @ 0x15
  2220     00B5                     	ds	2
  2221     00B7                     calibrate@sum_X_avg:
  2222                           
  2223                           ; 2 bytes @ 0x17
  2224     00B7                     	ds	2
  2225     00B9                     calibrate@sum_Y_avg:
  2226                           
  2227                           ; 2 bytes @ 0x19
  2228     00B9                     	ds	2
  2229     00BB                     calibrate@msg:
  2230                           
  2231                           ; 26 bytes @ 0x1B
  2232     00BB                     	ds	26
  2233     00D5                     calibrate@sum_Z_avg:
  2234                           
  2235                           ; 2 bytes @ 0x35
  2236     00D5                     	ds	2
  2237                           
  2238                           	psect	cstackCOMMON
  2239     0070                     __pcstackCOMMON:
  2240     0070                     ?_EEPROM_Write:
  2241     0070                     ?_NVM_StatusGet:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244     0070                     ?_NVM_StatusClear:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247     0070                     ?_EEPROM_Read:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250     0070                     ?_SPI1_Initialize:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253     0070                     ?_SPI1_Close:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256     0070                     ?_SPI1_BufferExchange:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259     0070                     ?_SPI1_BufferRead:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262     0070                     ?_SPI1_BufferWrite:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265     0070                     ?_SPI1_ByteExchange:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268     0070                     ?_INT_SetInterruptHandler:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271     0070                     ?_SW1_SetInterruptHandler:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274     0070                     ?_SW1_DefaultInterruptHandler:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277     0070                     ?_SW1_ISR:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280     0070                     ?_WDT_Initialize:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283     0070                     ?_ADXL345_validation:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286     0070                     ?_ADXL345_init:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289     0070                     ?_calibrate:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292     0070                     ?_NVM_Initialize:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295     0070                     ?_INTERRUPT_Initialize:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298     0070                     ?_PIN_MANAGER_Initialize:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301     0070                     ?_PIN_MANAGER_IOC:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304     0070                     ?_CLOCK_Initialize:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307     0070                     ?_SYSTEM_Initialize:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310     0070                     ?_ADXL345_ClearInterrupt:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313     0070                     ?_setupForFreefall:	
  2314                           ; 1 bytes @ 0x0
  2315                           
  2316     0070                     ?_setupForImpact:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319     0070                     ?_setupForInactivity:	
  2320                           ; 1 bytes @ 0x0
  2321                           
  2322     0070                     ?_orientation_Up:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325     0070                     ?_memset:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328     0070                     ?_memcpy:	
  2329                           ; 2 bytes @ 0x0
  2330                           
  2331     0070                     ?_main:	
  2332                           ; 2 bytes @ 0x0
  2333                           
  2334     0070                     ?___wmul:	
  2335                           ; 2 bytes @ 0x0
  2336                           
  2337     0070                     SPI1_BufferExchange@bufferData:	
  2338                           ; 2 bytes @ 0x0
  2339                           
  2340     0070                     SPI1_BufferRead@bufferData:	
  2341                           ; 1 bytes @ 0x0
  2342                           
  2343     0070                     SPI1_ByteExchange@byteData:	
  2344                           ; 1 bytes @ 0x0
  2345                           
  2346     0070                     EEPROM_Read@address:	
  2347                           ; 1 bytes @ 0x0
  2348                           
  2349     0070                     EEPROM_Write@address:	
  2350                           ; 2 bytes @ 0x0
  2351                           
  2352     0070                     SPI1_BufferWrite@bufferData:	
  2353                           ; 2 bytes @ 0x0
  2354                           
  2355     0070                     INT_SetInterruptHandler@InterruptHandler:	
  2356                           ; 2 bytes @ 0x0
  2357                           
  2358     0070                     SW1_SetInterruptHandler@InterruptHandler:	
  2359                           ; 2 bytes @ 0x0
  2360                           
  2361     0070                     ___wmul@multiplier:	
  2362                           ; 2 bytes @ 0x0
  2363                           
  2364     0070                     memcpy@d1:	
  2365                           ; 2 bytes @ 0x0
  2366                           
  2367     0070                     memset@dest:	
  2368                           ; 2 bytes @ 0x0
  2369                           
  2370     0070                     ??_NVM_StatusGet:	
  2371                           ; 2 bytes @ 0x0
  2372                           
  2373     0070                     ??_NVM_StatusClear:	
  2374                           ; 1 bytes @ 0x0
  2375                           
  2376     0070                     ??_SPI1_Initialize:	
  2377                           ; 1 bytes @ 0x0
  2378                           
  2379     0070                     ??_SPI1_Close:	
  2380                           ; 1 bytes @ 0x0
  2381                           
  2382     0070                     ??_SW1_DefaultInterruptHandler:	
  2383                           ; 1 bytes @ 0x0
  2384                           
  2385     0070                     ??_WDT_Initialize:	
  2386                           ; 1 bytes @ 0x0
  2387                           
  2388     0070                     ??_NVM_Initialize:	
  2389                           ; 1 bytes @ 0x0
  2390                           
  2391     0070                     ??_CLOCK_Initialize:	
  2392                           ; 1 bytes @ 0x0
  2393                           
  2394                           
  2395                           ; 1 bytes @ 0x0
  2396     0070                     	ds	1
  2397     0071                     SPI1_BufferExchange@bufferSize:
  2398     0071                     SPI1_BufferRead@bufferSize:	
  2399                           ; 2 bytes @ 0x1
  2400                           
  2401     0071                     ??_SPI1_ByteExchange:	
  2402                           ; 2 bytes @ 0x1
  2403                           
  2404     0071                     ??_SW1_ISR:	
  2405                           ; 1 bytes @ 0x1
  2406                           
  2407     0071                     ??_PIN_MANAGER_IOC:	
  2408                           ; 1 bytes @ 0x1
  2409                           
  2410                           
  2411                           ; 1 bytes @ 0x1
  2412     0071                     	ds	1
  2413     0072                     EEPROM_Write@data:
  2414     0072                     SPI1_BufferWrite@bufferSize:	
  2415                           ; 1 bytes @ 0x2
  2416                           
  2417     0072                     ___wmul@multiplicand:	
  2418                           ; 2 bytes @ 0x2
  2419                           
  2420     0072                     memcpy@s1:	
  2421                           ; 2 bytes @ 0x2
  2422                           
  2423     0072                     memset@c:	
  2424                           ; 2 bytes @ 0x2
  2425                           
  2426     0072                     ??_EEPROM_Read:	
  2427                           ; 2 bytes @ 0x2
  2428                           
  2429     0072                     ??_INT_SetInterruptHandler:	
  2430                           ; 1 bytes @ 0x2
  2431                           
  2432     0072                     ??_SW1_SetInterruptHandler:	
  2433                           ; 1 bytes @ 0x2
  2434                           
  2435     0072                     ??_INTERRUPT_Initialize:	
  2436                           ; 1 bytes @ 0x2
  2437                           
  2438     0072                     ??_PIN_MANAGER_Initialize:	
  2439                           ; 1 bytes @ 0x2
  2440                           
  2441     0072                     ??_SYSTEM_Initialize:	
  2442                           ; 1 bytes @ 0x2
  2443                           
  2444                           
  2445                           ; 1 bytes @ 0x2
  2446     0072                     	ds	1
  2447     0073                     EEPROM_Write@globalInterruptBitValue:
  2448     0073                     SPI1_BufferExchange@bufferInputSize:	
  2449                           ; 1 bytes @ 0x3
  2450                           
  2451     0073                     SPI1_BufferRead@bufferInputSize:	
  2452                           ; 2 bytes @ 0x3
  2453                           
  2454     0073                     ??_EEPROM_Write:	
  2455                           ; 2 bytes @ 0x3
  2456                           
  2457     0073                     ??_SPI1_BufferExchange:	
  2458                           ; 1 bytes @ 0x3
  2459                           
  2460     0073                     ??_SPI1_BufferRead:	
  2461                           ; 1 bytes @ 0x3
  2462                           
  2463                           
  2464                           ; 1 bytes @ 0x3
  2465     0073                     	ds	1
  2466     0074                     SPI1_BufferWrite@bufferInputSize:
  2467     0074                     ___wmul@product:	
  2468                           ; 2 bytes @ 0x4
  2469                           
  2470     0074                     memcpy@n:	
  2471                           ; 2 bytes @ 0x4
  2472                           
  2473     0074                     memset@n:	
  2474                           ; 2 bytes @ 0x4
  2475                           
  2476     0074                     ??_SPI1_BufferWrite:	
  2477                           ; 2 bytes @ 0x4
  2478                           
  2479     0074                     ??___wmul:	
  2480                           ; 1 bytes @ 0x4
  2481                           
  2482                           
  2483                           ; 1 bytes @ 0x4
  2484     0074                     	ds	1
  2485     0075                     SPI1_BufferExchange@bufferInput:
  2486     0075                     SPI1_BufferRead@bufferInput:	
  2487                           ; 1 bytes @ 0x5
  2488                           
  2489                           
  2490                           ; 1 bytes @ 0x5
  2491     0075                     	ds	1
  2492     0076                     ?_SPI1_Open:
  2493     0076                     SPI1_Open@spiConfigIndex:	
  2494                           ; 1 bytes @ 0x6
  2495                           
  2496     0076                     SPI1_BufferWrite@bufferInput:	
  2497                           ; 1 bytes @ 0x6
  2498                           
  2499     0076                     memset@p:	
  2500                           ; 1 bytes @ 0x6
  2501                           
  2502     0076                     memcpy@s:	
  2503                           ; 1 bytes @ 0x6
  2504                           
  2505     0076                     ??_memset:	
  2506                           ; 2 bytes @ 0x6
  2507                           
  2508     0076                     ??_memcpy:	
  2509                           ; 1 bytes @ 0x6
  2510                           
  2511                           
  2512                           ; 1 bytes @ 0x6
  2513     0076                     	ds	1
  2514     0077                     ??_SPI1_Open:
  2515                           
  2516                           ; 1 bytes @ 0x7
  2517     0077                     	ds	1
  2518     0078                     memcpy@tmp:
  2519                           
  2520                           ; 1 bytes @ 0x8
  2521     0078                     	ds	1
  2522     0079                     SPI1_Open@returnValue:
  2523     0079                     memcpy@d:	
  2524                           ; 1 bytes @ 0x9
  2525                           
  2526                           
  2527                           ; 1 bytes @ 0x9
  2528     0079                     	ds	1
  2529     007A                     ?_saveOffsets:
  2530     007A                     saveOffsets@y_axis:	
  2531                           ; 1 bytes @ 0xA
  2532                           
  2533     007A                     ADXL345_validation@temp:	
  2534                           ; 1 bytes @ 0xA
  2535                           
  2536     007A                     ??_ADXL345_validation:	
  2537                           ; 2 bytes @ 0xA
  2538                           
  2539     007A                     ??_ADXL345_init:	
  2540                           ; 1 bytes @ 0xA
  2541                           
  2542     007A                     ??_ADXL345_ClearInterrupt:	
  2543                           ; 1 bytes @ 0xA
  2544                           
  2545     007A                     ??_setupForFreefall:	
  2546                           ; 1 bytes @ 0xA
  2547                           
  2548     007A                     ??_setupForImpact:	
  2549                           ; 1 bytes @ 0xA
  2550                           
  2551     007A                     ??_setupForInactivity:	
  2552                           ; 1 bytes @ 0xA
  2553                           
  2554     007A                     ??_orientation_Up:	
  2555                           ; 1 bytes @ 0xA
  2556                           
  2557                           
  2558                           ; 1 bytes @ 0xA
  2559     007A                     	ds	1
  2560     007B                     saveOffsets@z_axis:
  2561                           
  2562                           ; 1 bytes @ 0xB
  2563     007B                     	ds	1
  2564     007C                     ??_saveOffsets:
  2565                           
  2566                           	psect	cstackBANK0
  2567     0020                     __pcstackBANK0:	
  2568                           ; 1 bytes @ 0xC
  2569                           
  2570     0020                     saveOffsets@x_axis:
  2571     0020                     orientation_Up@acc_data:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574     0020                     ADXL345_init@msg:	
  2575                           ; 6 bytes @ 0x0
  2576                           
  2577     0020                     setupForFreefall@msg:	
  2578                           ; 26 bytes @ 0x0
  2579                           
  2580     0020                     setupForImpact@msg:	
  2581                           ; 26 bytes @ 0x0
  2582                           
  2583     0020                     setupForInactivity@msg:	
  2584                           ; 26 bytes @ 0x0
  2585                           
  2586                           
  2587                           ; 26 bytes @ 0x0
  2588     0020                     	ds	1
  2589     0021                     saveOffsets@msg:
  2590                           
  2591                           ; 26 bytes @ 0x1
  2592     0021                     	ds	5
  2593     0026                     orientation_Up@g_magnitude:
  2594                           
  2595                           ; 2 bytes @ 0x6
  2596     0026                     	ds	2
  2597     0028                     orientation_Up@msg:
  2598                           
  2599                           ; 26 bytes @ 0x8
  2600     0028                     	ds	19
  2601     003B                     ??_calibrate:
  2602                           
  2603                           ; 1 bytes @ 0x1B
  2604     003B                     	ds	7
  2605     0042                     orientation_Up@addr_val:
  2606                           
  2607                           ; 1 bytes @ 0x22
  2608     0042                     	ds	1
  2609     0043                     orientation_Up@g_deltaX:
  2610                           
  2611                           ; 2 bytes @ 0x23
  2612     0043                     	ds	2
  2613     0045                     orientation_Up@g_deltaY:
  2614                           
  2615                           ; 2 bytes @ 0x25
  2616     0045                     	ds	2
  2617     0047                     orientation_Up@g_deltaZ:
  2618                           
  2619                           ; 2 bytes @ 0x27
  2620     0047                     	ds	2
  2621     0049                     ?_MotionEventHandler:
  2622     0049                     MotionEventHandler@state:	
  2623                           ; 1 bytes @ 0x29
  2624                           
  2625                           
  2626                           ; 1 bytes @ 0x29
  2627     0049                     	ds	1
  2628     004A                     ??_MotionEventHandler:
  2629                           
  2630                           ; 1 bytes @ 0x2A
  2631     004A                     	ds	2
  2632     004C                     ??_main:
  2633                           
  2634                           ; 1 bytes @ 0x2C
  2635     004C                     	ds	2
  2636     004E                     main@X_val:
  2637                           
  2638                           ; 1 bytes @ 0x2E
  2639     004E                     	ds	1
  2640     004F                     main@Y_val:
  2641                           
  2642                           ; 1 bytes @ 0x2F
  2643     004F                     	ds	1
  2644     0050                     main@Z_val:
  2645                           
  2646                           ; 1 bytes @ 0x30
  2647     0050                     	ds	1
  2648     0051                     main@i:
  2649                           
  2650                           ; 2 bytes @ 0x31
  2651     0051                     	ds	2
  2652     0053                     main@current_state:
  2653                           
  2654                           ; 1 bytes @ 0x33
  2655     0053                     	ds	1
  2656                           
  2657                           	psect	maintext
  2658     042F                     __pmaintext:	
  2659 ;;
  2660 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2661 ;;
  2662 ;; *************** function _main *****************
  2663 ;; Defined at:
  2664 ;;		line 45 in file "main.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  i               2   49[BANK0 ] int 
  2669 ;;  Z_val           1   48[BANK0 ] unsigned char 
  2670 ;;  Y_val           1   47[BANK0 ] unsigned char 
  2671 ;;  X_val           1   46[BANK0 ] unsigned char 
  2672 ;;  current_stat    1   51[BANK0 ] enum E2675
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  2  354[None  ] int 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : B1F/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2683 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2684 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2685 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2686 ;;Total ram usage:        8 bytes
  2687 ;; Hardware stack levels required when called: 4
  2688 ;; This function calls:
  2689 ;;		_ADXL345_init
  2690 ;;		_ADXL345_validation
  2691 ;;		_EEPROM_Read
  2692 ;;		_EEPROM_Write
  2693 ;;		_MotionEventHandler
  2694 ;;		_NVM_StatusGet
  2695 ;;		_PIN_MANAGER_IOC
  2696 ;;		_SPI1_Initialize
  2697 ;;		_SYSTEM_Initialize
  2698 ;;		_calibrate
  2699 ;;		_saveOffsets
  2700 ;; This function is called by:
  2701 ;;		Startup code after reset
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705     042F                     _main:	
  2706                           ;psect for function _main
  2707                           
  2708     042F                     l3103:	
  2709                           ;incstack = 0
  2710                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2711                           
  2712                           
  2713                           ;main.c: 47:     SYSTEM_Initialize();
  2714     042F  318E  2686  3184   	fcall	_SYSTEM_Initialize
  2715     0432                     l3105:
  2716                           
  2717                           ;main.c: 48:     SPI1_Initialize();
  2718     0432  318E  264A  3184   	fcall	_SPI1_Initialize
  2719     0435                     l3107:
  2720                           
  2721                           ;main.c: 50:     if (NVM_StatusGet()) {
  2722     0435  318E  2638  3184   	fcall	_NVM_StatusGet
  2723     0438  3A00               	xorlw	0
  2724     0439  1903               	skipnz
  2725     043A  2C3C               	goto	u1351
  2726     043B  2C3D               	goto	u1350
  2727     043C                     u1351:
  2728     043C  2C4E               	goto	l3113
  2729     043D                     u1350:
  2730     043D                     l356:	
  2731                           ;main.c: 51:         do { LATAbits.LATA5 = 1; } while(0);
  2732                           
  2733     043D  0022               	movlb	2	; select bank2
  2734     043E  168C               	bsf	12,5	;volatile
  2735     043F                     l3109:
  2736                           
  2737                           ;main.c: 52:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2738     043F  3002               	movlw	2
  2739     0440  0020               	movlb	0	; select bank0
  2740     0441  00CD               	movwf	??_main+1
  2741     0442  3045               	movlw	69
  2742     0443  00CC               	movwf	??_main
  2743     0444  30A9               	movlw	169
  2744     0445                     u1427:
  2745     0445  0B89               	decfsz	9,f
  2746     0446  2C45               	goto	u1427
  2747     0447  0BCC               	decfsz	??_main,f
  2748     0448  2C45               	goto	u1427
  2749     0449  0BCD               	decfsz	??_main+1,f
  2750     044A  2C45               	goto	u1427
  2751     044B  3200               	nop2
  2752     044C                     l3111:
  2753     044C  0022               	movlb	2	; select bank2
  2754     044D  128C               	bcf	12,5	;volatile
  2755     044E                     l3113:
  2756                           
  2757                           ;main.c: 56:     EEPROM_Write(0x10, 0x57);
  2758     044E  3010               	movlw	16
  2759     044F  00F0               	movwf	EEPROM_Write@address
  2760     0450  3000               	movlw	0
  2761     0451  00F1               	movwf	EEPROM_Write@address+1
  2762     0452  3057               	movlw	87
  2763     0453  00F2               	movwf	EEPROM_Write@data
  2764     0454  318E  26E4  3184   	fcall	_EEPROM_Write
  2765     0457                     l3115:
  2766                           
  2767                           ;main.c: 58:     if (ADXL345_validation()) {
  2768     0457  318F  27D3  3184   	fcall	_ADXL345_validation
  2769     045A  3A00               	xorlw	0
  2770     045B  1903               	skipnz
  2771     045C  2C5E               	goto	u1361
  2772     045D  2C5F               	goto	u1360
  2773     045E                     u1361:
  2774     045E  2C71               	goto	l366
  2775     045F                     u1360:
  2776     045F                     l361:	
  2777                           ;main.c: 59:         do { LATAbits.LATA4 = 1; } while(0);
  2778                           
  2779     045F  0022               	movlb	2	; select bank2
  2780     0460  160C               	bsf	12,4	;volatile
  2781     0461                     l3117:
  2782                           
  2783                           ;main.c: 60:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2784     0461  3002               	movlw	2
  2785     0462  0020               	movlb	0	; select bank0
  2786     0463  00CD               	movwf	??_main+1
  2787     0464  3045               	movlw	69
  2788     0465  00CC               	movwf	??_main
  2789     0466  30A9               	movlw	169
  2790     0467                     u1437:
  2791     0467  0B89               	decfsz	9,f
  2792     0468  2C67               	goto	u1437
  2793     0469  0BCC               	decfsz	??_main,f
  2794     046A  2C67               	goto	u1437
  2795     046B  0BCD               	decfsz	??_main+1,f
  2796     046C  2C67               	goto	u1437
  2797     046D  3200               	nop2
  2798     046E                     l3119:
  2799     046E  0022               	movlb	2	; select bank2
  2800     046F  120C               	bcf	12,4	;volatile
  2801     0470  2C82               	goto	l365
  2802     0471                     l366:	
  2803                           ;main.c: 63:         do { LATAbits.LATA5 = 1; } while(0);
  2804                           
  2805     0471  0022               	movlb	2	; select bank2
  2806     0472  168C               	bsf	12,5	;volatile
  2807     0473                     l3121:
  2808                           
  2809                           ;main.c: 64:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2810     0473  3002               	movlw	2
  2811     0474  0020               	movlb	0	; select bank0
  2812     0475  00CD               	movwf	??_main+1
  2813     0476  3045               	movlw	69
  2814     0477  00CC               	movwf	??_main
  2815     0478  30A9               	movlw	169
  2816     0479                     u1447:
  2817     0479  0B89               	decfsz	9,f
  2818     047A  2C79               	goto	u1447
  2819     047B  0BCC               	decfsz	??_main,f
  2820     047C  2C79               	goto	u1447
  2821     047D  0BCD               	decfsz	??_main+1,f
  2822     047E  2C79               	goto	u1447
  2823     047F  3200               	nop2
  2824     0480                     l3123:
  2825     0480  0022               	movlb	2	; select bank2
  2826     0481  128C               	bcf	12,5	;volatile
  2827     0482                     l365:	
  2828                           ;main.c: 66:     }
  2829                           
  2830     0482  0064               	clrwdt	;# 
  2831                           
  2832                           ;main.c: 69:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2833     0483  3002               	movlw	2
  2834     0484  0020               	movlb	0	; select bank0
  2835     0485  00CD               	movwf	??_main+1
  2836     0486  3045               	movlw	69
  2837     0487  00CC               	movwf	??_main
  2838     0488  30A9               	movlw	169
  2839     0489                     u1457:
  2840     0489  0B89               	decfsz	9,f
  2841     048A  2C89               	goto	u1457
  2842     048B  0BCC               	decfsz	??_main,f
  2843     048C  2C89               	goto	u1457
  2844     048D  0BCD               	decfsz	??_main+1,f
  2845     048E  2C89               	goto	u1457
  2846     048F  3200               	nop2
  2847     0490  0064               	clrwdt	;# 
  2848     0491                     l3125:
  2849                           
  2850                           ;main.c: 72:     if (ADXL345_init()) {
  2851     0491  3180  2060  3184   	fcall	_ADXL345_init
  2852     0494  3A00               	xorlw	0
  2853     0495  1903               	skipnz
  2854     0496  2C98               	goto	u1371
  2855     0497  2C99               	goto	u1370
  2856     0498                     u1371:
  2857     0498  2CAB               	goto	l376
  2858     0499                     u1370:
  2859     0499                     l371:	
  2860                           ;main.c: 73:         do { LATAbits.LATA4 = 1; } while(0);
  2861                           
  2862     0499  0022               	movlb	2	; select bank2
  2863     049A  160C               	bsf	12,4	;volatile
  2864     049B                     l3127:
  2865                           
  2866                           ;main.c: 74:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2867     049B  3002               	movlw	2
  2868     049C  0020               	movlb	0	; select bank0
  2869     049D  00CD               	movwf	??_main+1
  2870     049E  3045               	movlw	69
  2871     049F  00CC               	movwf	??_main
  2872     04A0  30A9               	movlw	169
  2873     04A1                     u1467:
  2874     04A1  0B89               	decfsz	9,f
  2875     04A2  2CA1               	goto	u1467
  2876     04A3  0BCC               	decfsz	??_main,f
  2877     04A4  2CA1               	goto	u1467
  2878     04A5  0BCD               	decfsz	??_main+1,f
  2879     04A6  2CA1               	goto	u1467
  2880     04A7  3200               	nop2
  2881     04A8                     l3129:
  2882     04A8  0022               	movlb	2	; select bank2
  2883     04A9  120C               	bcf	12,4	;volatile
  2884     04AA  2CBC               	goto	l375
  2885     04AB                     l376:	
  2886                           ;main.c: 77:         do { LATAbits.LATA5 = 1; } while(0);
  2887                           
  2888     04AB  0022               	movlb	2	; select bank2
  2889     04AC  168C               	bsf	12,5	;volatile
  2890     04AD                     l3131:
  2891                           
  2892                           ;main.c: 78:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2893     04AD  3002               	movlw	2
  2894     04AE  0020               	movlb	0	; select bank0
  2895     04AF  00CD               	movwf	??_main+1
  2896     04B0  3045               	movlw	69
  2897     04B1  00CC               	movwf	??_main
  2898     04B2  30A9               	movlw	169
  2899     04B3                     u1477:
  2900     04B3  0B89               	decfsz	9,f
  2901     04B4  2CB3               	goto	u1477
  2902     04B5  0BCC               	decfsz	??_main,f
  2903     04B6  2CB3               	goto	u1477
  2904     04B7  0BCD               	decfsz	??_main+1,f
  2905     04B8  2CB3               	goto	u1477
  2906     04B9  3200               	nop2
  2907     04BA                     l3133:
  2908     04BA  0022               	movlb	2	; select bank2
  2909     04BB  128C               	bcf	12,5	;volatile
  2910     04BC                     l375:	
  2911                           ;main.c: 80:     }
  2912                           
  2913     04BC  0064               	clrwdt	;# 
  2914     04BD                     l3135:
  2915                           
  2916                           ;main.c: 83:     if (EEPROM_Read(0x10) == 0x57) {
  2917     04BD  3010               	movlw	16
  2918     04BE  00F0               	movwf	EEPROM_Read@address
  2919     04BF  3000               	movlw	0
  2920     04C0  00F1               	movwf	EEPROM_Read@address+1
  2921     04C1  3180  2004  3184   	fcall	_EEPROM_Read
  2922     04C4  3A57               	xorlw	87
  2923     04C5  1D03               	skipz
  2924     04C6  2CC8               	goto	u1381
  2925     04C7  2CC9               	goto	u1380
  2926     04C8                     u1381:
  2927     04C8  2D02               	goto	l3167
  2928     04C9                     u1380:
  2929     04C9                     l3137:
  2930                           
  2931                           ;main.c: 84:         uint8_t X_val = ( EEADR = 0x02, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2932     04C9  3000               	movlw	0
  2933     04CA  0023               	movlb	3	; select bank3
  2934     04CB  0092               	movwf	18	;volatile
  2935     04CC  3002               	movlw	2
  2936     04CD  0091               	movwf	17	;volatile
  2937     04CE                     l3139:
  2938     04CE  303F               	movlw	63
  2939     04CF  0595               	andwf	21,f	;volsfr
  2940     04D0                     l3141:
  2941     04D0  1415               	bsf	21,0	;volsfr
  2942     04D1                     l3143:
  2943     04D1  0813               	movf	19,w	;volatile
  2944     04D2  0020               	movlb	0	; select bank0
  2945     04D3  00CE               	movwf	main@X_val
  2946     04D4                     l3145:
  2947                           
  2948                           ;main.c: 85:         uint8_t Y_val = ( EEADR = 0x04, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2949     04D4  3000               	movlw	0
  2950     04D5  0023               	movlb	3	; select bank3
  2951     04D6  0092               	movwf	18	;volatile
  2952     04D7  3004               	movlw	4
  2953     04D8  0091               	movwf	17	;volatile
  2954     04D9                     l3147:
  2955     04D9  303F               	movlw	63
  2956     04DA  0595               	andwf	21,f	;volsfr
  2957     04DB                     l3149:
  2958     04DB  1415               	bsf	21,0	;volsfr
  2959     04DC  0813               	movf	19,w	;volatile
  2960     04DD  0020               	movlb	0	; select bank0
  2961     04DE  00CF               	movwf	main@Y_val
  2962     04DF                     l3151:
  2963                           
  2964                           ;main.c: 86:         uint8_t Z_val = ( EEADR = 0x06, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2965     04DF  3000               	movlw	0
  2966     04E0  0023               	movlb	3	; select bank3
  2967     04E1  0092               	movwf	18	;volatile
  2968     04E2  3006               	movlw	6
  2969     04E3  0091               	movwf	17	;volatile
  2970     04E4                     l3153:
  2971     04E4  303F               	movlw	63
  2972     04E5  0595               	andwf	21,f	;volsfr
  2973     04E6                     l3155:
  2974     04E6  1415               	bsf	21,0	;volsfr
  2975     04E7                     l3157:
  2976     04E7  0813               	movf	19,w	;volatile
  2977     04E8  0020               	movlb	0	; select bank0
  2978     04E9  00D0               	movwf	main@Z_val
  2979     04EA                     l3159:
  2980                           
  2981                           ;main.c: 87:         saveOffsets(X_val, Y_val, Z_val);
  2982     04EA  084F               	movf	main@Y_val,w
  2983     04EB  00FA               	movwf	saveOffsets@y_axis
  2984     04EC  0850               	movf	main@Z_val,w
  2985     04ED  00FB               	movwf	saveOffsets@z_axis
  2986     04EE  084E               	movf	main@X_val,w
  2987     04EF  3180  2011  3184   	fcall	_saveOffsets
  2988                           
  2989                           ;main.c: 88:     } else {
  2990     04F2  2D0A               	goto	l3169
  2991     04F3                     l384:	
  2992                           ;main.c: 90:             do { LATAbits.LATA4 = 1; } while(0);
  2993                           
  2994     04F3  0022               	movlb	2	; select bank2
  2995     04F4  160C               	bsf	12,4	;volatile
  2996     04F5                     l386:	
  2997                           ;main.c: 91:             do { LATAbits.LATA5 = 1; } while(0);
  2998                           
  2999     04F5  168C               	bsf	12,5	;volatile
  3000     04F6                     l3161:
  3001                           
  3002                           ;main.c: 92:             _delay((unsigned long)((100)*(4000000/4000.0)));
  3003     04F6  3082               	movlw	130
  3004     04F7  0020               	movlb	0	; select bank0
  3005     04F8  00CC               	movwf	??_main
  3006     04F9  30DD               	movlw	221
  3007     04FA                     u1487:
  3008     04FA  0B89               	decfsz	9,f
  3009     04FB  2CFA               	goto	u1487
  3010     04FC  0BCC               	decfsz	??_main,f
  3011     04FD  2CFA               	goto	u1487
  3012     04FE  3200               	nop2
  3013     04FF                     l3163:
  3014     04FF  0022               	movlb	2	; select bank2
  3015     0500  120C               	bcf	12,4	;volatile
  3016     0501                     l3165:
  3017     0501  128C               	bcf	12,5	;volatile
  3018     0502                     l3167:
  3019                           
  3020                           ;main.c: 89:         while(!calibrate()) {
  3021     0502  3185  2543  3184   	fcall	_calibrate
  3022     0505  3A00               	xorlw	0
  3023     0506  1903               	skipnz
  3024     0507  2D09               	goto	u1391
  3025     0508  2D0A               	goto	u1390
  3026     0509                     u1391:
  3027     0509  2CF3               	goto	l384
  3028     050A                     u1390:
  3029     050A                     l3169:
  3030                           
  3031                           ;main.c: 98:     State_t current_state = WAITING_FOR_FREEFALL;
  3032     050A  0020               	movlb	0	; select bank0
  3033     050B  01D3               	clrf	main@current_state
  3034     050C                     l3171:
  3035                           
  3036                           ;main.c: 101:     {;main.c: 102:         PIN_MANAGER_IOC();
  3037     050C  318E  2641  3184   	fcall	_PIN_MANAGER_IOC
  3038     050F                     l3173:
  3039                           
  3040                           ;main.c: 103:         MotionEventHandler(&current_state);
  3041     050F  3053               	movlw	(low (main@current_state| 0))& (0+255)
  3042     0510  0020               	movlb	0	; select bank0
  3043     0511  00C9               	movwf	MotionEventHandler@state
  3044     0512  3181  2130  3184   	fcall	_MotionEventHandler
  3045     0515                     l3175:
  3046                           
  3047                           ;main.c: 104:         if (current_state == FALL_DETECTED) {
  3048     0515  3004               	movlw	4
  3049     0516  0020               	movlb	0	; select bank0
  3050     0517  0653               	xorwf	main@current_state,w
  3051     0518  1D03               	btfss	3,2
  3052     0519  2D1B               	goto	u1401
  3053     051A  2D1C               	goto	u1400
  3054     051B                     u1401:
  3055     051B  2D3E               	goto	l394
  3056     051C                     u1400:
  3057     051C                     l3177:
  3058                           
  3059                           ;main.c: 105:             current_state = WAITING_FOR_FREEFALL;
  3060     051C  01D3               	clrf	main@current_state
  3061                           
  3062                           ;main.c: 106:             for (int i = 0; i < 3; i++) {
  3063     051D  01D1               	clrf	main@i
  3064     051E  01D2               	clrf	main@i+1
  3065     051F                     l397:	
  3066                           ;main.c: 107:                 do { LATAbits.LATA4 = 1; } while(0);
  3067                           
  3068     051F  0022               	movlb	2	; select bank2
  3069     0520  160C               	bsf	12,4	;volatile
  3070     0521                     l3183:
  3071                           
  3072                           ;main.c: 108:                 _delay((unsigned long)((100)*(4000000/4000.0)));
  3073     0521  3082               	movlw	130
  3074     0522  0020               	movlb	0	; select bank0
  3075     0523  00CC               	movwf	??_main
  3076     0524  30DD               	movlw	221
  3077     0525                     u1497:
  3078     0525  0B89               	decfsz	9,f
  3079     0526  2D25               	goto	u1497
  3080     0527  0BCC               	decfsz	??_main,f
  3081     0528  2D25               	goto	u1497
  3082     0529  3200               	nop2
  3083     052A                     l3185:
  3084     052A  0022               	movlb	2	; select bank2
  3085     052B  120C               	bcf	12,4	;volatile
  3086     052C                     l400:
  3087                           
  3088                           ;main.c: 110:             }
  3089     052C  3001               	movlw	1
  3090     052D  0020               	movlb	0	; select bank0
  3091     052E  07D1               	addwf	main@i,f
  3092     052F  3000               	movlw	0
  3093     0530  3DD2               	addwfc	main@i+1,f
  3094     0531  0852               	movf	main@i+1,w
  3095     0532  3A80               	xorlw	128
  3096     0533  00CC               	movwf	??_main
  3097     0534  3080               	movlw	128
  3098     0535  024C               	subwf	??_main,w
  3099     0536  1D03               	skipz
  3100     0537  2D3A               	goto	u1415
  3101     0538  3003               	movlw	3
  3102     0539  0251               	subwf	main@i,w
  3103     053A                     u1415:
  3104     053A  1C03               	skipc
  3105     053B  2D3D               	goto	u1411
  3106     053C  2D3E               	goto	u1410
  3107     053D                     u1411:
  3108     053D  2D1F               	goto	l397
  3109     053E                     u1410:
  3110     053E                     l394:	
  3111                           ;main.c: 111:         }
  3112                           
  3113     053E  0063               	sleep	;# 
  3114                           
  3115                           ;main.c: 113:         __nop();
  3116     053F  0000               	nop
  3117     0540  2D0C               	goto	l3171
  3118     0541  3180  2802         	ljmp	start
  3119     0543                     __end_of_main:
  3120                           
  3121                           	psect	text1
  3122     0543                     __ptext1:	
  3123 ;; *************** function _calibrate *****************
  3124 ;; Defined at:
  3125 ;;		line 299 in file "ADXL345.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  addr_val        1   20[BANK1 ] unsigned char 
  3130 ;;  addr_val        1   19[BANK1 ] unsigned char 
  3131 ;;  i               2   14[BANK1 ] int 
  3132 ;;  i               2   12[BANK1 ] int 
  3133 ;;  msg            26   27[BANK1 ] struct Message
  3134 ;;  acc_data        6    0[BANK1 ] char [6]
  3135 ;;  sum_Z_avg       2   53[BANK1 ] short 
  3136 ;;  sum_Y_avg       2   25[BANK1 ] short 
  3137 ;;  sum_X_avg       2   23[BANK1 ] short 
  3138 ;;  sum_Z           2   21[BANK1 ] short 
  3139 ;;  sum_Y           2   10[BANK1 ] short 
  3140 ;;  sum_X           2    8[BANK1 ] short 
  3141 ;;  Z_n1g           2    6[BANK1 ] short 
  3142 ;;  offset_0g_Z     1   18[BANK1 ] char 
  3143 ;;  offset_0g_Y     1   17[BANK1 ] char 
  3144 ;;  offset_0g_X     1   16[BANK1 ] char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      _Bool 
  3147 ;; Registers used:
  3148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3155 ;;      Locals:         0       0      55       0       0       0       0       0       0       0       0       0       
      +0       0
  3156 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3157 ;;      Totals:         0       3      55       0       0       0       0       0       0       0       0       0       
      +0       0
  3158 ;;Total ram usage:       58 bytes
  3159 ;; Hardware stack levels used: 1
  3160 ;; Hardware stack levels required when called: 3
  3161 ;; This function calls:
  3162 ;;		_EEPROM_Write
  3163 ;;		_SPI1_BufferRead
  3164 ;;		_SPI1_BufferWrite
  3165 ;;		_SPI1_ByteExchange
  3166 ;;		_SPI1_Close
  3167 ;;		_SPI1_Open
  3168 ;;		_saveOffsets
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174     0543                     _calibrate:	
  3175                           ;psect for function _calibrate
  3176                           
  3177     0543                     l2831:	
  3178                           ;incstack = 0
  3179                           ; Regs used in _calibrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3180                           
  3181                           
  3182                           ;ADXL345.c: 300:     int8_t offset_0g_X, offset_0g_Y, offset_0g_Z;;ADXL345.c: 301:     i
      +                          nt8_t acc_data[6] = {0};
  3183     0543  30A0               	movlw	low calibrate@acc_data
  3184     0544  0086               	movwf	6
  3185     0545  3000               	movlw	high calibrate@acc_data
  3186     0546  0087               	movwf	7
  3187     0547  3006               	movlw	6
  3188     0548  0020               	movlb	0	; select bank0
  3189     0549  00BB               	movwf	??_calibrate
  3190     054A  3000               	movlw	0
  3191     054B                     u1050:
  3192     054B  001E               	movwi fsr1++
  3193     054C  0BBB               	decfsz	??_calibrate,f
  3194     054D  2D4B               	goto	u1050
  3195     054E                     l2833:
  3196                           
  3197                           ;ADXL345.c: 302:     int16_t sum_X = 0, sum_Y = 0, sum_Z = 0;
  3198     054E  0021               	movlb	1	; select bank1
  3199     054F  01A8               	clrf	calibrate@sum_X^(0+128)
  3200     0550  01A9               	clrf	(calibrate@sum_X+1)^(0+128)
  3201     0551                     l2835:
  3202     0551  01AA               	clrf	calibrate@sum_Y^(0+128)
  3203     0552  01AB               	clrf	(calibrate@sum_Y+1)^(0+128)
  3204     0553                     l2837:
  3205     0553  01B5               	clrf	calibrate@sum_Z^(0+128)
  3206     0554  01B6               	clrf	(calibrate@sum_Z+1)^(0+128)
  3207                           
  3208                           ;ADXL345.c: 303:     int16_t sum_X_avg, sum_Y_avg, sum_Z_avg;;ADXL345.c: 305:     while 
      +                          (!SPI1_Open(ADXL345)) {
  3209     0555  2D59               	goto	l2841
  3210     0556                     l2839:
  3211                           
  3212                           ;ADXL345.c: 306:         SPI1_Close();
  3213     0556  318E  2616  3185   	fcall	_SPI1_Close
  3214     0559                     l2841:
  3215                           
  3216                           ;ADXL345.c: 305:     while (!SPI1_Open(ADXL345)) {
  3217     0559  01F6               	clrf	SPI1_Open@spiConfigIndex
  3218     055A  3180  20C4  3185   	fcall	_SPI1_Open
  3219     055D  3A00               	xorlw	0
  3220     055E  1903               	skipnz
  3221     055F  2D61               	goto	u1061
  3222     0560  2D62               	goto	u1060
  3223     0561                     u1061:
  3224     0561  2D56               	goto	l2839
  3225     0562                     u1060:
  3226     0562                     l597:
  3227                           
  3228                           ;ADXL345.c: 309:     struct Message msg;;ADXL345.c: 310:     msg.registerAddr = 0x31;
  3229     0562  3031               	movlw	49
  3230     0563  0021               	movlb	1	; select bank1
  3231     0564  00BB               	movwf	calibrate@msg^(0+128)
  3232                           
  3233                           ;ADXL345.c: 311:     msg.data[0] = 0x0C;
  3234     0565  300C               	movlw	12
  3235     0566  00BC               	movwf	(calibrate@msg^(0+128)+1)
  3236     0567                     l598:	
  3237                           ;ADXL345.c: 312:     do { LATCbits.LATC4 = 0; } while(0);
  3238                           
  3239     0567  0022               	movlb	2	; select bank2
  3240     0568  120E               	bcf	14,4	;volatile
  3241     0569                     l2843:
  3242                           
  3243                           ;ADXL345.c: 313:     SPI1_BufferWrite(&msg, 2);
  3244     0569  30BB               	movlw	low calibrate@msg
  3245     056A  00F0               	movwf	SPI1_BufferWrite@bufferData
  3246     056B  3000               	movlw	high calibrate@msg
  3247     056C  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  3248     056D  3002               	movlw	2
  3249     056E  00F2               	movwf	SPI1_BufferWrite@bufferSize
  3250     056F  3000               	movlw	0
  3251     0570  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  3252     0571  318F  2721  3185   	fcall	_SPI1_BufferWrite
  3253     0574                     l2845:
  3254     0574  0022               	movlb	2	; select bank2
  3255     0575  160E               	bsf	14,4	;volatile
  3256     0576                     l2847:
  3257                           
  3258                           ;ADXL345.c: 316:     SPI1_Close();
  3259     0576  318E  2616  3185   	fcall	_SPI1_Close
  3260     0579                     l2849:
  3261                           
  3262                           ;ADXL345.c: 317:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3263     0579  3007               	movlw	7
  3264     057A  0020               	movlb	0	; select bank0
  3265     057B  00BB               	movwf	??_calibrate
  3266     057C  307D               	movlw	125
  3267     057D                     u1507:
  3268     057D  0B89               	decfsz	9,f
  3269     057E  2D7D               	goto	u1507
  3270     057F  0BBB               	decfsz	??_calibrate,f
  3271     0580  2D7D               	goto	u1507
  3272     0581                     l2851:
  3273                           
  3274                           ;ADXL345.c: 318:     SPI1_Open(ADXL345);
  3275     0581  01F6               	clrf	SPI1_Open@spiConfigIndex
  3276     0582  3180  20C4  3185   	fcall	_SPI1_Open
  3277                           
  3278                           ;ADXL345.c: 321:     while(PORTAbits.RA1) {
  3279     0585  2D9E               	goto	l2857
  3280     0586                     l604:	
  3281                           ;ADXL345.c: 322:         do { LATAbits.LATA4 = 1; } while(0);
  3282                           
  3283     0586  0022               	movlb	2	; select bank2
  3284     0587  160C               	bsf	12,4	;volatile
  3285     0588                     l2853:
  3286                           
  3287                           ;ADXL345.c: 323:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3288     0588  3082               	movlw	130
  3289     0589  0020               	movlb	0	; select bank0
  3290     058A  00BB               	movwf	??_calibrate
  3291     058B  30DD               	movlw	221
  3292     058C                     u1517:
  3293     058C  0B89               	decfsz	9,f
  3294     058D  2D8C               	goto	u1517
  3295     058E  0BBB               	decfsz	??_calibrate,f
  3296     058F  2D8C               	goto	u1517
  3297     0590  3200               	nop2
  3298     0591  0064               	clrwdt	;# 
  3299     0592                     l2855:
  3300     0592  0022               	movlb	2	; select bank2
  3301     0593  120C               	bcf	12,4	;volatile
  3302     0594                     l607:
  3303                           
  3304                           ;ADXL345.c: 326:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3305     0594  3082               	movlw	130
  3306     0595  0020               	movlb	0	; select bank0
  3307     0596  00BB               	movwf	??_calibrate
  3308     0597  30DD               	movlw	221
  3309     0598                     u1527:
  3310     0598  0B89               	decfsz	9,f
  3311     0599  2D98               	goto	u1527
  3312     059A  0BBB               	decfsz	??_calibrate,f
  3313     059B  2D98               	goto	u1527
  3314     059C  3200               	nop2
  3315     059D  0064               	clrwdt	;# 
  3316     059E                     l2857:
  3317                           
  3318                           ;ADXL345.c: 321:     while(PORTAbits.RA1) {
  3319     059E  0020               	movlb	0	; select bank0
  3320     059F  188C               	btfsc	12,1	;volatile
  3321     05A0  2DA2               	goto	u1071
  3322     05A1  2DA3               	goto	u1070
  3323     05A2                     u1071:
  3324     05A2  2D86               	goto	l604
  3325     05A3                     u1070:
  3326     05A3                     l608:
  3327     05A3  0064               	clrwdt	;# 
  3328     05A4                     l2859:
  3329                           
  3330                           ;ADXL345.c: 331:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3331     05A4  3008               	movlw	8
  3332     05A5  0020               	movlb	0	; select bank0
  3333     05A6  00BC               	movwf	??_calibrate+1
  3334     05A7  309D               	movlw	157
  3335     05A8  00BB               	movwf	??_calibrate
  3336     05A9  3005               	movlw	5
  3337     05AA                     u1537:
  3338     05AA  0B89               	decfsz	9,f
  3339     05AB  2DAA               	goto	u1537
  3340     05AC  0BBB               	decfsz	??_calibrate,f
  3341     05AD  2DAA               	goto	u1537
  3342     05AE  0BBC               	decfsz	??_calibrate+1,f
  3343     05AF  2DAA               	goto	u1537
  3344     05B0  3200               	nop2
  3345     05B1  0064               	clrwdt	;# 
  3346     05B2                     l2861:
  3347                           
  3348                           ;ADXL345.c: 334:     for(int i = 0; i < 128; i++) {
  3349     05B2  0021               	movlb	1	; select bank1
  3350     05B3  01AC               	clrf	calibrate@i^(0+128)
  3351     05B4  01AD               	clrf	(calibrate@i+1)^(0+128)
  3352     05B5                     l611:	
  3353                           ;ADXL345.c: 336:         do { LATCbits.LATC4 = 0; } while(0);
  3354                           
  3355     05B5  0022               	movlb	2	; select bank2
  3356     05B6  120E               	bcf	14,4	;volatile
  3357     05B7                     l612:
  3358                           
  3359                           ;ADXL345.c: 337:         uint8_t addr_val = 0x32 | 0x80;
  3360     05B7  30B2               	movlw	178
  3361     05B8  0021               	movlb	1	; select bank1
  3362     05B9  00B3               	movwf	calibrate@addr_val^(0+128)
  3363     05BA                     l2867:
  3364                           
  3365                           ;ADXL345.c: 338:         addr_val = addr_val | 0x40;
  3366     05BA  0833               	movf	calibrate@addr_val^(0+128),w
  3367     05BB  3840               	iorlw	64
  3368     05BC  00B3               	movwf	calibrate@addr_val^(0+128)
  3369     05BD                     l2869:
  3370                           
  3371                           ;ADXL345.c: 339:         SPI1_ByteExchange(addr_val);
  3372     05BD  0833               	movf	calibrate@addr_val^(0+128),w
  3373     05BE  00F0               	movwf	SPI1_ByteExchange@byteData
  3374     05BF  318E  265F  3185   	fcall	_SPI1_ByteExchange
  3375     05C2                     l2871:
  3376                           
  3377                           ;ADXL345.c: 340:         SPI1_BufferRead(acc_data, sizeof(acc_data));
  3378     05C2  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3379     05C3  00F0               	movwf	SPI1_BufferRead@bufferData
  3380     05C4  3006               	movlw	6
  3381     05C5  00F1               	movwf	SPI1_BufferRead@bufferSize
  3382     05C6  3000               	movlw	0
  3383     05C7  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3384     05C8  318F  2741  3185   	fcall	_SPI1_BufferRead
  3385     05CB                     l2873:
  3386     05CB  0022               	movlb	2	; select bank2
  3387     05CC  160E               	bsf	14,4	;volatile
  3388     05CD                     l2875:
  3389                           
  3390                           ;ADXL345.c: 343:         sum_X += acc_data[1];
  3391     05CD  0021               	movlb	1	; select bank1
  3392     05CE  0821               	movf	(calibrate@acc_data^(0+128)+1),w
  3393     05CF  0020               	movlb	0	; select bank0
  3394     05D0  00BB               	movwf	??_calibrate
  3395     05D1  01BC               	clrf	??_calibrate+1
  3396     05D2  1BBB               	btfsc	??_calibrate,7
  3397     05D3  03BC               	decf	??_calibrate+1,f
  3398     05D4  083B               	movf	??_calibrate,w
  3399     05D5  0021               	movlb	1	; select bank1
  3400     05D6  07A8               	addwf	calibrate@sum_X^(0+128),f
  3401     05D7  0020               	movlb	0	; select bank0
  3402     05D8  083C               	movf	??_calibrate+1,w
  3403     05D9  0021               	movlb	1	; select bank1
  3404     05DA  3DA9               	addwfc	(calibrate@sum_X+1)^(0+128),f
  3405     05DB                     l2877:
  3406                           
  3407                           ;ADXL345.c: 344:         sum_Y += acc_data[3];
  3408     05DB  0823               	movf	(calibrate@acc_data^(0+128)+3),w
  3409     05DC  0020               	movlb	0	; select bank0
  3410     05DD  00BB               	movwf	??_calibrate
  3411     05DE  01BC               	clrf	??_calibrate+1
  3412     05DF  1BBB               	btfsc	??_calibrate,7
  3413     05E0  03BC               	decf	??_calibrate+1,f
  3414     05E1  083B               	movf	??_calibrate,w
  3415     05E2  0021               	movlb	1	; select bank1
  3416     05E3  07AA               	addwf	calibrate@sum_Y^(0+128),f
  3417     05E4  0020               	movlb	0	; select bank0
  3418     05E5  083C               	movf	??_calibrate+1,w
  3419     05E6  0021               	movlb	1	; select bank1
  3420     05E7  3DAB               	addwfc	(calibrate@sum_Y+1)^(0+128),f
  3421     05E8                     l2879:
  3422                           
  3423                           ;ADXL345.c: 345:         sum_Z += acc_data[5];
  3424     05E8  0825               	movf	(calibrate@acc_data^(0+128)+5),w
  3425     05E9  0020               	movlb	0	; select bank0
  3426     05EA  00BB               	movwf	??_calibrate
  3427     05EB  01BC               	clrf	??_calibrate+1
  3428     05EC  1BBB               	btfsc	??_calibrate,7
  3429     05ED  03BC               	decf	??_calibrate+1,f
  3430     05EE  083B               	movf	??_calibrate,w
  3431     05EF  0021               	movlb	1	; select bank1
  3432     05F0  07B5               	addwf	calibrate@sum_Z^(0+128),f
  3433     05F1  0020               	movlb	0	; select bank0
  3434     05F2  083C               	movf	??_calibrate+1,w
  3435     05F3  0021               	movlb	1	; select bank1
  3436     05F4  3DB6               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3437     05F5                     l2881:
  3438                           
  3439                           ;ADXL345.c: 361:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3440     05F5  3007               	movlw	7
  3441     05F6  0020               	movlb	0	; select bank0
  3442     05F7  00BB               	movwf	??_calibrate
  3443     05F8  307D               	movlw	125
  3444     05F9                     u1547:
  3445     05F9  0B89               	decfsz	9,f
  3446     05FA  2DF9               	goto	u1547
  3447     05FB  0BBB               	decfsz	??_calibrate,f
  3448     05FC  2DF9               	goto	u1547
  3449     05FD  0064               	clrwdt	;# 
  3450     05FE                     l2883:
  3451                           
  3452                           ;ADXL345.c: 363:     }
  3453     05FE  3001               	movlw	1
  3454     05FF  0021               	movlb	1	; select bank1
  3455     0600  07AC               	addwf	calibrate@i^(0+128),f
  3456     0601  3000               	movlw	0
  3457     0602  3DAD               	addwfc	(calibrate@i+1)^(0+128),f
  3458     0603                     l2885:
  3459     0603  082D               	movf	(calibrate@i+1)^(0+128),w
  3460     0604  3A80               	xorlw	128
  3461     0605  0020               	movlb	0	; select bank0
  3462     0606  00BB               	movwf	??_calibrate
  3463     0607  3080               	movlw	128
  3464     0608  023B               	subwf	??_calibrate,w
  3465     0609  1D03               	skipz
  3466     060A  2E0E               	goto	u1085
  3467     060B  3080               	movlw	128
  3468     060C  0021               	movlb	1	; select bank1
  3469     060D  022C               	subwf	calibrate@i^(0+128),w
  3470     060E                     u1085:
  3471     060E  1C03               	skipc
  3472     060F  2E11               	goto	u1081
  3473     0610  2E12               	goto	u1080
  3474     0611                     u1081:
  3475     0611  2DB5               	goto	l611
  3476     0612                     u1080:
  3477     0612                     l2887:
  3478                           
  3479                           ;ADXL345.c: 366:     if (sum_Z == 0) return 0;
  3480     0612  0021               	movlb	1	; select bank1
  3481     0613  0835               	movf	calibrate@sum_Z^(0+128),w
  3482     0614  0436               	iorwf	(calibrate@sum_Z+1)^(0+128),w
  3483     0615  1D03               	btfss	3,2
  3484     0616  2E18               	goto	u1091
  3485     0617  2E19               	goto	u1090
  3486     0618                     u1091:
  3487     0618  2E1B               	goto	l2893
  3488     0619                     u1090:
  3489     0619                     l2889:
  3490     0619  3000               	movlw	0
  3491     061A  2FDC               	goto	l616
  3492     061B                     l2893:
  3493                           
  3494                           ;ADXL345.c: 369:     sum_X_avg = sum_X >> 7;
  3495     061B  0829               	movf	(calibrate@sum_X+1)^(0+128),w
  3496     061C  0020               	movlb	0	; select bank0
  3497     061D  00BC               	movwf	??_calibrate+1
  3498     061E  0021               	movlb	1	; select bank1
  3499     061F  0828               	movf	calibrate@sum_X^(0+128),w
  3500     0620  0020               	movlb	0	; select bank0
  3501     0621  00BB               	movwf	??_calibrate
  3502     0622  3007               	movlw	7
  3503     0623  00BD               	movwf	??_calibrate+2
  3504     0624                     u1105:
  3505     0624  0D3C               	rlf	??_calibrate+1,w
  3506     0625  0CBC               	rrf	??_calibrate+1,f
  3507     0626  0CBB               	rrf	??_calibrate,f
  3508     0627  0BBD               	decfsz	??_calibrate+2,f
  3509     0628  2E24               	goto	u1105
  3510     0629  083B               	movf	??_calibrate,w
  3511     062A  0021               	movlb	1	; select bank1
  3512     062B  00B7               	movwf	calibrate@sum_X_avg^(0+128)
  3513     062C  0020               	movlb	0	; select bank0
  3514     062D  083C               	movf	??_calibrate+1,w
  3515     062E  0021               	movlb	1	; select bank1
  3516     062F  00B8               	movwf	(calibrate@sum_X_avg+1)^(0+128)
  3517                           
  3518                           ;ADXL345.c: 370:     sum_Y_avg = sum_Y >> 7;
  3519     0630  082B               	movf	(calibrate@sum_Y+1)^(0+128),w
  3520     0631  0020               	movlb	0	; select bank0
  3521     0632  00BC               	movwf	??_calibrate+1
  3522     0633  0021               	movlb	1	; select bank1
  3523     0634  082A               	movf	calibrate@sum_Y^(0+128),w
  3524     0635  0020               	movlb	0	; select bank0
  3525     0636  00BB               	movwf	??_calibrate
  3526     0637  3007               	movlw	7
  3527     0638  00BD               	movwf	??_calibrate+2
  3528     0639                     u1115:
  3529     0639  0D3C               	rlf	??_calibrate+1,w
  3530     063A  0CBC               	rrf	??_calibrate+1,f
  3531     063B  0CBB               	rrf	??_calibrate,f
  3532     063C  0BBD               	decfsz	??_calibrate+2,f
  3533     063D  2E39               	goto	u1115
  3534     063E  083B               	movf	??_calibrate,w
  3535     063F  0021               	movlb	1	; select bank1
  3536     0640  00B9               	movwf	calibrate@sum_Y_avg^(0+128)
  3537     0641  0020               	movlb	0	; select bank0
  3538     0642  083C               	movf	??_calibrate+1,w
  3539     0643  0021               	movlb	1	; select bank1
  3540     0644  00BA               	movwf	(calibrate@sum_Y_avg+1)^(0+128)
  3541     0645                     l2895:
  3542                           
  3543                           ;ADXL345.c: 374:     if (sum_X_avg & 0x80) {
  3544     0645  1FB7               	btfss	calibrate@sum_X_avg^(0+128),7
  3545     0646  2E48               	goto	u1121
  3546     0647  2E49               	goto	u1120
  3547     0648                     u1121:
  3548     0648  2E61               	goto	l2903
  3549     0649                     u1120:
  3550     0649                     l2897:
  3551                           
  3552                           ;ADXL345.c: 375:         if (~(sum_X_avg) + 1 >= 0x10) return 0;
  3553     0649  0937               	comf	calibrate@sum_X_avg^(0+128),w
  3554     064A  0020               	movlb	0	; select bank0
  3555     064B  00BB               	movwf	??_calibrate
  3556     064C  0021               	movlb	1	; select bank1
  3557     064D  0938               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3558     064E  0020               	movlb	0	; select bank0
  3559     064F  00BC               	movwf	??_calibrate+1
  3560     0650  0ABB               	incf	??_calibrate,f
  3561     0651  1903               	skipnz
  3562     0652  0ABC               	incf	??_calibrate+1,f
  3563     0653  083C               	movf	??_calibrate+1,w
  3564     0654  3A80               	xorlw	128
  3565     0655  00BD               	movwf	??_calibrate+2
  3566     0656  3080               	movlw	128
  3567     0657  023D               	subwf	??_calibrate+2,w
  3568     0658  1D03               	skipz
  3569     0659  2E5C               	goto	u1135
  3570     065A  3010               	movlw	16
  3571     065B  023B               	subwf	??_calibrate,w
  3572     065C                     u1135:
  3573     065C  1C03               	skipc
  3574     065D  2E5F               	goto	u1131
  3575     065E  2E60               	goto	u1130
  3576     065F                     u1131:
  3577     065F  2E71               	goto	l619
  3578     0660                     u1130:
  3579     0660  2E19               	goto	l2889
  3580     0661                     l2903:
  3581                           
  3582                           ;ADXL345.c: 377:         if (sum_X_avg >= 0x10) return 0;
  3583     0661  0838               	movf	(calibrate@sum_X_avg+1)^(0+128),w
  3584     0662  3A80               	xorlw	128
  3585     0663  0020               	movlb	0	; select bank0
  3586     0664  00BB               	movwf	??_calibrate
  3587     0665  3080               	movlw	128
  3588     0666  023B               	subwf	??_calibrate,w
  3589     0667  1D03               	skipz
  3590     0668  2E6C               	goto	u1145
  3591     0669  3010               	movlw	16
  3592     066A  0021               	movlb	1	; select bank1
  3593     066B  0237               	subwf	calibrate@sum_X_avg^(0+128),w
  3594     066C                     u1145:
  3595     066C  1C03               	skipc
  3596     066D  2E6F               	goto	u1141
  3597     066E  2E70               	goto	u1140
  3598     066F                     u1141:
  3599     066F  2E71               	goto	l619
  3600     0670                     u1140:
  3601     0670  2E19               	goto	l2889
  3602     0671                     l619:	
  3603                           ;ADXL345.c: 378:     }
  3604                           
  3605                           
  3606                           ;ADXL345.c: 380:     if (sum_Y_avg & 0x80) {
  3607     0671  0021               	movlb	1	; select bank1
  3608     0672  1FB9               	btfss	calibrate@sum_Y_avg^(0+128),7
  3609     0673  2E75               	goto	u1151
  3610     0674  2E76               	goto	u1150
  3611     0675                     u1151:
  3612     0675  2E8E               	goto	l2915
  3613     0676                     u1150:
  3614     0676                     l2909:
  3615                           
  3616                           ;ADXL345.c: 381:         if (~(sum_Y_avg) + 1 >= 0x10) return 0;
  3617     0676  0939               	comf	calibrate@sum_Y_avg^(0+128),w
  3618     0677  0020               	movlb	0	; select bank0
  3619     0678  00BB               	movwf	??_calibrate
  3620     0679  0021               	movlb	1	; select bank1
  3621     067A  093A               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3622     067B  0020               	movlb	0	; select bank0
  3623     067C  00BC               	movwf	??_calibrate+1
  3624     067D  0ABB               	incf	??_calibrate,f
  3625     067E  1903               	skipnz
  3626     067F  0ABC               	incf	??_calibrate+1,f
  3627     0680  083C               	movf	??_calibrate+1,w
  3628     0681  3A80               	xorlw	128
  3629     0682  00BD               	movwf	??_calibrate+2
  3630     0683  3080               	movlw	128
  3631     0684  023D               	subwf	??_calibrate+2,w
  3632     0685  1D03               	skipz
  3633     0686  2E89               	goto	u1165
  3634     0687  3010               	movlw	16
  3635     0688  023B               	subwf	??_calibrate,w
  3636     0689                     u1165:
  3637     0689  1C03               	skipc
  3638     068A  2E8C               	goto	u1161
  3639     068B  2E8D               	goto	u1160
  3640     068C                     u1161:
  3641     068C  2E9E               	goto	l2921
  3642     068D                     u1160:
  3643     068D  2E19               	goto	l2889
  3644     068E                     l2915:
  3645                           
  3646                           ;ADXL345.c: 383:         if (sum_Y_avg >= 0x10) return 0;
  3647     068E  083A               	movf	(calibrate@sum_Y_avg+1)^(0+128),w
  3648     068F  3A80               	xorlw	128
  3649     0690  0020               	movlb	0	; select bank0
  3650     0691  00BB               	movwf	??_calibrate
  3651     0692  3080               	movlw	128
  3652     0693  023B               	subwf	??_calibrate,w
  3653     0694  1D03               	skipz
  3654     0695  2E99               	goto	u1175
  3655     0696  3010               	movlw	16
  3656     0697  0021               	movlb	1	; select bank1
  3657     0698  0239               	subwf	calibrate@sum_Y_avg^(0+128),w
  3658     0699                     u1175:
  3659     0699  1C03               	skipc
  3660     069A  2E9C               	goto	u1171
  3661     069B  2E9D               	goto	u1170
  3662     069C                     u1171:
  3663     069C  2E9E               	goto	l2921
  3664     069D                     u1170:
  3665     069D  2E19               	goto	l2889
  3666     069E                     l2921:
  3667                           
  3668                           ;ADXL345.c: 386:     offset_0g_X = (int8_t)-sum_X_avg;
  3669     069E  0021               	movlb	1	; select bank1
  3670     069F  0337               	decf	calibrate@sum_X_avg^(0+128),w
  3671     06A0  3AFF               	xorlw	255
  3672     06A1  00B0               	movwf	calibrate@offset_0g_X^(0+128)
  3673                           
  3674                           ;ADXL345.c: 387:     offset_0g_Y = (int8_t)-sum_Y_avg;
  3675     06A2  0339               	decf	calibrate@sum_Y_avg^(0+128),w
  3676     06A3  3AFF               	xorlw	255
  3677     06A4  00B1               	movwf	calibrate@offset_0g_Y^(0+128)
  3678                           
  3679                           ;ADXL345.c: 389:     sum_Z_avg = sum_Z >> 7;
  3680     06A5  0836               	movf	(calibrate@sum_Z+1)^(0+128),w
  3681     06A6  0020               	movlb	0	; select bank0
  3682     06A7  00BC               	movwf	??_calibrate+1
  3683     06A8  0021               	movlb	1	; select bank1
  3684     06A9  0835               	movf	calibrate@sum_Z^(0+128),w
  3685     06AA  0020               	movlb	0	; select bank0
  3686     06AB  00BB               	movwf	??_calibrate
  3687     06AC  3007               	movlw	7
  3688     06AD  00BD               	movwf	??_calibrate+2
  3689     06AE                     u1185:
  3690     06AE  0D3C               	rlf	??_calibrate+1,w
  3691     06AF  0CBC               	rrf	??_calibrate+1,f
  3692     06B0  0CBB               	rrf	??_calibrate,f
  3693     06B1  0BBD               	decfsz	??_calibrate+2,f
  3694     06B2  2EAE               	goto	u1185
  3695     06B3  083B               	movf	??_calibrate,w
  3696     06B4  0021               	movlb	1	; select bank1
  3697     06B5  00D5               	movwf	calibrate@sum_Z_avg^(0+128)
  3698     06B6  0020               	movlb	0	; select bank0
  3699     06B7  083C               	movf	??_calibrate+1,w
  3700     06B8  0021               	movlb	1	; select bank1
  3701     06B9  00D6               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3702     06BA                     l2923:
  3703                           
  3704                           ;ADXL345.c: 390:     sum_Z = 0;
  3705     06BA  01B5               	clrf	calibrate@sum_Z^(0+128)
  3706     06BB  01B6               	clrf	(calibrate@sum_Z+1)^(0+128)
  3707                           
  3708                           ;ADXL345.c: 393:     while(PORTAbits.RA1) {
  3709     06BC  2ED5               	goto	l2929
  3710     06BD                     l627:	
  3711                           ;ADXL345.c: 394:         do { LATAbits.LATA5 = 1; } while(0);
  3712                           
  3713     06BD  0022               	movlb	2	; select bank2
  3714     06BE  168C               	bsf	12,5	;volatile
  3715     06BF                     l2925:
  3716                           
  3717                           ;ADXL345.c: 395:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3718     06BF  3082               	movlw	130
  3719     06C0  0020               	movlb	0	; select bank0
  3720     06C1  00BB               	movwf	??_calibrate
  3721     06C2  30DD               	movlw	221
  3722     06C3                     u1557:
  3723     06C3  0B89               	decfsz	9,f
  3724     06C4  2EC3               	goto	u1557
  3725     06C5  0BBB               	decfsz	??_calibrate,f
  3726     06C6  2EC3               	goto	u1557
  3727     06C7  3200               	nop2
  3728     06C8  0064               	clrwdt	;# 
  3729     06C9                     l2927:
  3730     06C9  0022               	movlb	2	; select bank2
  3731     06CA  128C               	bcf	12,5	;volatile
  3732     06CB                     l630:
  3733                           
  3734                           ;ADXL345.c: 398:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3735     06CB  3082               	movlw	130
  3736     06CC  0020               	movlb	0	; select bank0
  3737     06CD  00BB               	movwf	??_calibrate
  3738     06CE  30DD               	movlw	221
  3739     06CF                     u1567:
  3740     06CF  0B89               	decfsz	9,f
  3741     06D0  2ECF               	goto	u1567
  3742     06D1  0BBB               	decfsz	??_calibrate,f
  3743     06D2  2ECF               	goto	u1567
  3744     06D3  3200               	nop2
  3745     06D4  0064               	clrwdt	;# 
  3746     06D5                     l2929:
  3747                           
  3748                           ;ADXL345.c: 393:     while(PORTAbits.RA1) {
  3749     06D5  0020               	movlb	0	; select bank0
  3750     06D6  188C               	btfsc	12,1	;volatile
  3751     06D7  2ED9               	goto	u1191
  3752     06D8  2EDA               	goto	u1190
  3753     06D9                     u1191:
  3754     06D9  2EBD               	goto	l627
  3755     06DA                     u1190:
  3756     06DA                     l631:
  3757     06DA  0064               	clrwdt	;# 
  3758     06DB                     l2931:
  3759                           
  3760                           ;ADXL345.c: 403:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3761     06DB  3008               	movlw	8
  3762     06DC  0020               	movlb	0	; select bank0
  3763     06DD  00BC               	movwf	??_calibrate+1
  3764     06DE  309D               	movlw	157
  3765     06DF  00BB               	movwf	??_calibrate
  3766     06E0  3005               	movlw	5
  3767     06E1                     u1577:
  3768     06E1  0B89               	decfsz	9,f
  3769     06E2  2EE1               	goto	u1577
  3770     06E3  0BBB               	decfsz	??_calibrate,f
  3771     06E4  2EE1               	goto	u1577
  3772     06E5  0BBC               	decfsz	??_calibrate+1,f
  3773     06E6  2EE1               	goto	u1577
  3774     06E7  3200               	nop2
  3775     06E8  0064               	clrwdt	;# 
  3776     06E9                     l2933:
  3777                           
  3778                           ;ADXL345.c: 406:     for(int i = 0; i < 128; i++) {
  3779     06E9  0021               	movlb	1	; select bank1
  3780     06EA  01AE               	clrf	calibrate@i_996^(0+128)
  3781     06EB  01AF               	clrf	(calibrate@i_996+1)^(0+128)
  3782     06EC                     l2935:
  3783     06EC  082F               	movf	(calibrate@i_996+1)^(0+128),w
  3784     06ED  3A80               	xorlw	128
  3785     06EE  0020               	movlb	0	; select bank0
  3786     06EF  00BB               	movwf	??_calibrate
  3787     06F0  3080               	movlw	128
  3788     06F1  023B               	subwf	??_calibrate,w
  3789     06F2  1D03               	skipz
  3790     06F3  2EF7               	goto	u1205
  3791     06F4  3080               	movlw	128
  3792     06F5  0021               	movlb	1	; select bank1
  3793     06F6  022E               	subwf	calibrate@i_996^(0+128),w
  3794     06F7                     u1205:
  3795     06F7  1C03               	skipc
  3796     06F8  2EFA               	goto	u1201
  3797     06F9  2EFB               	goto	u1200
  3798     06FA                     u1201:
  3799     06FA  2EFC               	goto	l634
  3800     06FB                     u1200:
  3801     06FB  2F31               	goto	l2955
  3802     06FC                     l634:	
  3803                           ;ADXL345.c: 408:         do { LATCbits.LATC4 = 0; } while(0);
  3804                           
  3805     06FC  0022               	movlb	2	; select bank2
  3806     06FD  120E               	bcf	14,4	;volatile
  3807     06FE                     l635:
  3808                           
  3809                           ;ADXL345.c: 409:         uint8_t addr_val = 0x32 | 0x80;
  3810     06FE  30B2               	movlw	178
  3811     06FF  0021               	movlb	1	; select bank1
  3812     0700  00B4               	movwf	calibrate@addr_val_997^(0+128)
  3813     0701                     l2939:
  3814                           
  3815                           ;ADXL345.c: 410:         addr_val = addr_val | 0x40;
  3816     0701  0834               	movf	calibrate@addr_val_997^(0+128),w
  3817     0702  3840               	iorlw	64
  3818     0703  00B4               	movwf	calibrate@addr_val_997^(0+128)
  3819     0704                     l2941:
  3820                           
  3821                           ;ADXL345.c: 411:         SPI1_ByteExchange(addr_val);
  3822     0704  0834               	movf	calibrate@addr_val_997^(0+128),w
  3823     0705  00F0               	movwf	SPI1_ByteExchange@byteData
  3824     0706  318E  265F  3185   	fcall	_SPI1_ByteExchange
  3825     0709                     l2943:
  3826                           
  3827                           ;ADXL345.c: 412:         SPI1_BufferRead((uint8_t *)acc_data, 6);
  3828     0709  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3829     070A  00F0               	movwf	SPI1_BufferRead@bufferData
  3830     070B  3006               	movlw	6
  3831     070C  00F1               	movwf	SPI1_BufferRead@bufferSize
  3832     070D  3000               	movlw	0
  3833     070E  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3834     070F  318F  2741  3185   	fcall	_SPI1_BufferRead
  3835     0712                     l2945:
  3836     0712  0022               	movlb	2	; select bank2
  3837     0713  160E               	bsf	14,4	;volatile
  3838     0714                     l2947:
  3839                           
  3840                           ;ADXL345.c: 415:         sum_Z += acc_data[5];
  3841     0714  0021               	movlb	1	; select bank1
  3842     0715  0825               	movf	(calibrate@acc_data^(0+128)+5),w
  3843     0716  0020               	movlb	0	; select bank0
  3844     0717  00BB               	movwf	??_calibrate
  3845     0718  01BC               	clrf	??_calibrate+1
  3846     0719  1BBB               	btfsc	??_calibrate,7
  3847     071A  03BC               	decf	??_calibrate+1,f
  3848     071B  083B               	movf	??_calibrate,w
  3849     071C  0021               	movlb	1	; select bank1
  3850     071D  07B5               	addwf	calibrate@sum_Z^(0+128),f
  3851     071E  0020               	movlb	0	; select bank0
  3852     071F  083C               	movf	??_calibrate+1,w
  3853     0720  0021               	movlb	1	; select bank1
  3854     0721  3DB6               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3855     0722                     l2949:
  3856                           
  3857                           ;ADXL345.c: 417:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3858     0722  3007               	movlw	7
  3859     0723  0020               	movlb	0	; select bank0
  3860     0724  00BB               	movwf	??_calibrate
  3861     0725  307D               	movlw	125
  3862     0726                     u1587:
  3863     0726  0B89               	decfsz	9,f
  3864     0727  2F26               	goto	u1587
  3865     0728  0BBB               	decfsz	??_calibrate,f
  3866     0729  2F26               	goto	u1587
  3867     072A  0064               	clrwdt	;# 
  3868     072B                     l2951:
  3869                           
  3870                           ;ADXL345.c: 419:     }
  3871     072B  3001               	movlw	1
  3872     072C  0021               	movlb	1	; select bank1
  3873     072D  07AE               	addwf	calibrate@i_996^(0+128),f
  3874     072E  3000               	movlw	0
  3875     072F  3DAF               	addwfc	(calibrate@i_996+1)^(0+128),f
  3876     0730  2EEC               	goto	l2935
  3877     0731                     l2955:
  3878                           
  3879                           ;ADXL345.c: 421:     int16_t Z_n1g = sum_Z >> 7;
  3880     0731  0021               	movlb	1	; select bank1
  3881     0732  0836               	movf	(calibrate@sum_Z+1)^(0+128),w
  3882     0733  0020               	movlb	0	; select bank0
  3883     0734  00BC               	movwf	??_calibrate+1
  3884     0735  0021               	movlb	1	; select bank1
  3885     0736  0835               	movf	calibrate@sum_Z^(0+128),w
  3886     0737  0020               	movlb	0	; select bank0
  3887     0738  00BB               	movwf	??_calibrate
  3888     0739  3007               	movlw	7
  3889     073A  00BD               	movwf	??_calibrate+2
  3890     073B                     u1215:
  3891     073B  0D3C               	rlf	??_calibrate+1,w
  3892     073C  0CBC               	rrf	??_calibrate+1,f
  3893     073D  0CBB               	rrf	??_calibrate,f
  3894     073E  0BBD               	decfsz	??_calibrate+2,f
  3895     073F  2F3B               	goto	u1215
  3896     0740  083B               	movf	??_calibrate,w
  3897     0741  0021               	movlb	1	; select bank1
  3898     0742  00A6               	movwf	calibrate@Z_n1g^(0+128)
  3899     0743  0020               	movlb	0	; select bank0
  3900     0744  083C               	movf	??_calibrate+1,w
  3901     0745  0021               	movlb	1	; select bank1
  3902     0746  00A7               	movwf	(calibrate@Z_n1g+1)^(0+128)
  3903                           
  3904                           ;ADXL345.c: 422:     sum_Z_avg = (Z_n1g + sum_Z_avg) >> 1;
  3905     0747  0855               	movf	calibrate@sum_Z_avg^(0+128),w
  3906     0748  0726               	addwf	calibrate@Z_n1g^(0+128),w
  3907     0749  0020               	movlb	0	; select bank0
  3908     074A  00BB               	movwf	??_calibrate
  3909     074B  0021               	movlb	1	; select bank1
  3910     074C  0856               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3911     074D  3D27               	addwfc	(calibrate@Z_n1g+1)^(0+128),w
  3912     074E  0020               	movlb	0	; select bank0
  3913     074F  00BC               	movwf	??_calibrate+1
  3914     0750  0D3C               	rlf	??_calibrate+1,w
  3915     0751  0C3C               	rrf	??_calibrate+1,w
  3916     0752  0021               	movlb	1	; select bank1
  3917     0753  00D6               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3918     0754  0020               	movlb	0	; select bank0
  3919     0755  0C3B               	rrf	??_calibrate,w
  3920     0756  0021               	movlb	1	; select bank1
  3921     0757  00D5               	movwf	calibrate@sum_Z_avg^(0+128)
  3922     0758                     l2957:
  3923                           
  3924                           ;ADXL345.c: 426:     if (sum_Z_avg & 0x80) {
  3925     0758  1FD5               	btfss	calibrate@sum_Z_avg^(0+128),7
  3926     0759  2F5B               	goto	u1221
  3927     075A  2F5C               	goto	u1220
  3928     075B                     u1221:
  3929     075B  2F74               	goto	l2965
  3930     075C                     u1220:
  3931     075C                     l2959:
  3932                           
  3933                           ;ADXL345.c: 427:         if (~(sum_Z_avg) + 1 >= 0x20) return 0;
  3934     075C  0955               	comf	calibrate@sum_Z_avg^(0+128),w
  3935     075D  0020               	movlb	0	; select bank0
  3936     075E  00BB               	movwf	??_calibrate
  3937     075F  0021               	movlb	1	; select bank1
  3938     0760  0956               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3939     0761  0020               	movlb	0	; select bank0
  3940     0762  00BC               	movwf	??_calibrate+1
  3941     0763  0ABB               	incf	??_calibrate,f
  3942     0764  1903               	skipnz
  3943     0765  0ABC               	incf	??_calibrate+1,f
  3944     0766  083C               	movf	??_calibrate+1,w
  3945     0767  3A80               	xorlw	128
  3946     0768  00BD               	movwf	??_calibrate+2
  3947     0769  3080               	movlw	128
  3948     076A  023D               	subwf	??_calibrate+2,w
  3949     076B  1D03               	skipz
  3950     076C  2F6F               	goto	u1235
  3951     076D  3020               	movlw	32
  3952     076E  023B               	subwf	??_calibrate,w
  3953     076F                     u1235:
  3954     076F  1C03               	skipc
  3955     0770  2F72               	goto	u1231
  3956     0771  2F73               	goto	u1230
  3957     0772                     u1231:
  3958     0772  2F84               	goto	l2971
  3959     0773                     u1230:
  3960     0773  2E19               	goto	l2889
  3961     0774                     l2965:
  3962                           
  3963                           ;ADXL345.c: 429:         if (sum_Z_avg >= 0x20) return 0;
  3964     0774  0856               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3965     0775  3A80               	xorlw	128
  3966     0776  0020               	movlb	0	; select bank0
  3967     0777  00BB               	movwf	??_calibrate
  3968     0778  3080               	movlw	128
  3969     0779  023B               	subwf	??_calibrate,w
  3970     077A  1D03               	skipz
  3971     077B  2F7F               	goto	u1245
  3972     077C  3020               	movlw	32
  3973     077D  0021               	movlb	1	; select bank1
  3974     077E  0255               	subwf	calibrate@sum_Z_avg^(0+128),w
  3975     077F                     u1245:
  3976     077F  1C03               	skipc
  3977     0780  2F82               	goto	u1241
  3978     0781  2F83               	goto	u1240
  3979     0782                     u1241:
  3980     0782  2F84               	goto	l2971
  3981     0783                     u1240:
  3982     0783  2E19               	goto	l2889
  3983     0784                     l2971:
  3984                           
  3985                           ;ADXL345.c: 432:     offset_0g_Z = (int8_t)-sum_Z_avg;
  3986     0784  0021               	movlb	1	; select bank1
  3987     0785  0355               	decf	calibrate@sum_Z_avg^(0+128),w
  3988     0786  3AFF               	xorlw	255
  3989     0787  00B2               	movwf	calibrate@offset_0g_Z^(0+128)
  3990     0788                     l2973:
  3991                           
  3992                           ;ADXL345.c: 434:     saveOffsets((uint8_t)offset_0g_X, (uint8_t)offset_0g_Y, (uint8_t)of
      +                          fset_0g_Z);
  3993     0788  0831               	movf	calibrate@offset_0g_Y^(0+128),w
  3994     0789  00FA               	movwf	saveOffsets@y_axis
  3995     078A  0832               	movf	calibrate@offset_0g_Z^(0+128),w
  3996     078B  00FB               	movwf	saveOffsets@z_axis
  3997     078C  0830               	movf	calibrate@offset_0g_X^(0+128),w
  3998     078D  3180  2011  3185   	fcall	_saveOffsets
  3999     0790                     l2975:
  4000                           
  4001                           ;ADXL345.c: 437:     EEPROM_Write(0x02, (uint8_t)offset_0g_X);
  4002     0790  3002               	movlw	2
  4003     0791  00F0               	movwf	EEPROM_Write@address
  4004     0792  3000               	movlw	0
  4005     0793  00F1               	movwf	EEPROM_Write@address+1
  4006     0794  0021               	movlb	1	; select bank1
  4007     0795  0830               	movf	calibrate@offset_0g_X^(0+128),w
  4008     0796  00F2               	movwf	EEPROM_Write@data
  4009     0797  318E  26E4  3185   	fcall	_EEPROM_Write
  4010     079A                     l2977:
  4011                           
  4012                           ;ADXL345.c: 438:     EEPROM_Write(0x04, (uint8_t)offset_0g_Y);
  4013     079A  3004               	movlw	4
  4014     079B  00F0               	movwf	EEPROM_Write@address
  4015     079C  3000               	movlw	0
  4016     079D  00F1               	movwf	EEPROM_Write@address+1
  4017     079E  0021               	movlb	1	; select bank1
  4018     079F  0831               	movf	calibrate@offset_0g_Y^(0+128),w
  4019     07A0  00F2               	movwf	EEPROM_Write@data
  4020     07A1  318E  26E4  3185   	fcall	_EEPROM_Write
  4021     07A4                     l2979:
  4022                           
  4023                           ;ADXL345.c: 439:     EEPROM_Write(0x06, (uint8_t)offset_0g_Z);
  4024     07A4  3006               	movlw	6
  4025     07A5  00F0               	movwf	EEPROM_Write@address
  4026     07A6  3000               	movlw	0
  4027     07A7  00F1               	movwf	EEPROM_Write@address+1
  4028     07A8  0021               	movlb	1	; select bank1
  4029     07A9  0832               	movf	calibrate@offset_0g_Z^(0+128),w
  4030     07AA  00F2               	movwf	EEPROM_Write@data
  4031     07AB  318E  26E4  3185   	fcall	_EEPROM_Write
  4032     07AE                     l2981:
  4033                           
  4034                           ;ADXL345.c: 441:     EEPROM_Write(0x10, 0x57);
  4035     07AE  3010               	movlw	16
  4036     07AF  00F0               	movwf	EEPROM_Write@address
  4037     07B0  3000               	movlw	0
  4038     07B1  00F1               	movwf	EEPROM_Write@address+1
  4039     07B2  3057               	movlw	87
  4040     07B3  00F2               	movwf	EEPROM_Write@data
  4041     07B4  318E  26E4  3185   	fcall	_EEPROM_Write
  4042                           
  4043                           ;ADXL345.c: 443:     while (!SPI1_Open(ADXL345)) {
  4044     07B7  2FBB               	goto	l2985
  4045     07B8                     l2983:
  4046                           
  4047                           ;ADXL345.c: 444:         SPI1_Close();
  4048     07B8  318E  2616  3185   	fcall	_SPI1_Close
  4049     07BB                     l2985:
  4050                           
  4051                           ;ADXL345.c: 443:     while (!SPI1_Open(ADXL345)) {
  4052     07BB  01F6               	clrf	SPI1_Open@spiConfigIndex
  4053     07BC  3180  20C4  3185   	fcall	_SPI1_Open
  4054     07BF  3A00               	xorlw	0
  4055     07C0  1903               	skipnz
  4056     07C1  2FC3               	goto	u1251
  4057     07C2  2FC4               	goto	u1250
  4058     07C3                     u1251:
  4059     07C3  2FB8               	goto	l2983
  4060     07C4                     u1250:
  4061     07C4                     l644:
  4062                           
  4063                           ;ADXL345.c: 447:     msg.registerAddr = 0x31;
  4064     07C4  3031               	movlw	49
  4065     07C5  0021               	movlb	1	; select bank1
  4066     07C6  00BB               	movwf	calibrate@msg^(0+128)
  4067                           
  4068                           ;ADXL345.c: 448:     msg.data[0] = 0x0B;
  4069     07C7  300B               	movlw	11
  4070     07C8  00BC               	movwf	(calibrate@msg^(0+128)+1)
  4071     07C9                     l645:	
  4072                           ;ADXL345.c: 449:     do { LATCbits.LATC4 = 0; } while(0);
  4073                           
  4074     07C9  0022               	movlb	2	; select bank2
  4075     07CA  120E               	bcf	14,4	;volatile
  4076     07CB                     l2987:
  4077                           
  4078                           ;ADXL345.c: 450:     SPI1_BufferWrite(&msg, 2);
  4079     07CB  30BB               	movlw	low calibrate@msg
  4080     07CC  00F0               	movwf	SPI1_BufferWrite@bufferData
  4081     07CD  3000               	movlw	high calibrate@msg
  4082     07CE  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4083     07CF  3002               	movlw	2
  4084     07D0  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4085     07D1  3000               	movlw	0
  4086     07D2  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4087     07D3  318F  2721  3185   	fcall	_SPI1_BufferWrite
  4088     07D6                     l2989:
  4089     07D6  0022               	movlb	2	; select bank2
  4090     07D7  160E               	bsf	14,4	;volatile
  4091     07D8                     l2991:
  4092                           
  4093                           ;ADXL345.c: 453:     SPI1_Close();
  4094     07D8  318E  2616  3185   	fcall	_SPI1_Close
  4095     07DB                     l2993:
  4096                           
  4097                           ;ADXL345.c: 454:     return 1;
  4098     07DB  3001               	movlw	1
  4099     07DC                     l616:
  4100     07DC  0008               	return
  4101     07DD                     __end_of_calibrate:
  4102                           
  4103                           	psect	text2
  4104     0011                     __ptext2:	
  4105 ;; *************** function _saveOffsets *****************
  4106 ;; Defined at:
  4107 ;;		line 73 in file "ADXL345.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  x_axis          1    wreg     unsigned char 
  4110 ;;  y_axis          1   10[COMMON] unsigned char 
  4111 ;;  z_axis          1   11[COMMON] unsigned char 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  x_axis          1    0[BANK0 ] unsigned char 
  4114 ;;  msg            26    1[BANK0 ] struct Message
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4124 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Totals:         2      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;Total ram usage:       29 bytes
  4129 ;; Hardware stack levels used: 1
  4130 ;; Hardware stack levels required when called: 2
  4131 ;; This function calls:
  4132 ;;		_SPI1_BufferWrite
  4133 ;;		_SPI1_Close
  4134 ;;		_SPI1_Open
  4135 ;; This function is called by:
  4136 ;;		_main
  4137 ;;		_calibrate
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141     0011                     _saveOffsets:	
  4142                           ;psect for function _saveOffsets
  4143                           
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in _saveOffsets: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4147                           ;saveOffsets@x_axis stored from wreg
  4148     0011  0020               	movlb	0	; select bank0
  4149     0012  00A0               	movwf	saveOffsets@x_axis
  4150     0013                     l2467:
  4151                           
  4152                           ;ADXL345.c: 74:     while (!SPI1_Open(ADXL345)) {
  4153     0013  2817               	goto	l2471
  4154     0014                     l2469:
  4155                           
  4156                           ;ADXL345.c: 75:         SPI1_Close();
  4157     0014  318E  2616  3180   	fcall	_SPI1_Close
  4158     0017                     l2471:
  4159                           
  4160                           ;ADXL345.c: 74:     while (!SPI1_Open(ADXL345)) {
  4161     0017  01F6               	clrf	SPI1_Open@spiConfigIndex
  4162     0018  3180  20C4  3180   	fcall	_SPI1_Open
  4163     001B  3A00               	xorlw	0
  4164     001C  1903               	skipnz
  4165     001D  281F               	goto	u921
  4166     001E  2820               	goto	u920
  4167     001F                     u921:
  4168     001F  2814               	goto	l2469
  4169     0020                     u920:
  4170     0020                     l471:
  4171                           
  4172                           ;ADXL345.c: 78:     struct Message msg;;ADXL345.c: 79:     msg.registerAddr = 0x1E;
  4173     0020  301E               	movlw	30
  4174     0021  0020               	movlb	0	; select bank0
  4175     0022  00A1               	movwf	saveOffsets@msg
  4176     0023                     l2473:
  4177                           
  4178                           ;ADXL345.c: 80:     msg.data[0] = x_axis;
  4179     0023  0820               	movf	saveOffsets@x_axis,w
  4180     0024  00A2               	movwf	saveOffsets@msg+1
  4181     0025                     l2475:
  4182     0025  0022               	movlb	2	; select bank2
  4183     0026  120E               	bcf	14,4	;volatile
  4184     0027                     l2477:
  4185                           
  4186                           ;ADXL345.c: 82:     SPI1_BufferWrite(&msg, 2);
  4187     0027  3021               	movlw	low saveOffsets@msg
  4188     0028  00F0               	movwf	SPI1_BufferWrite@bufferData
  4189     0029  3000               	movlw	high saveOffsets@msg
  4190     002A  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4191     002B  3002               	movlw	2
  4192     002C  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4193     002D  3000               	movlw	0
  4194     002E  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4195     002F  318F  2721  3180   	fcall	_SPI1_BufferWrite
  4196     0032                     l2479:
  4197     0032  0022               	movlb	2	; select bank2
  4198     0033  160E               	bsf	14,4	;volatile
  4199     0034                     l2481:
  4200                           
  4201                           ;ADXL345.c: 85:     msg.registerAddr = 0x1F;
  4202     0034  301F               	movlw	31
  4203     0035  0020               	movlb	0	; select bank0
  4204     0036  00A1               	movwf	saveOffsets@msg
  4205     0037                     l2483:
  4206                           
  4207                           ;ADXL345.c: 86:     msg.data[0] = y_axis;
  4208     0037  087A               	movf	saveOffsets@y_axis,w
  4209     0038  00A2               	movwf	saveOffsets@msg+1
  4210     0039                     l2485:
  4211     0039  0022               	movlb	2	; select bank2
  4212     003A  120E               	bcf	14,4	;volatile
  4213     003B                     l477:
  4214                           
  4215                           ;ADXL345.c: 88:     SPI1_BufferWrite(&msg, 2);
  4216     003B  3021               	movlw	low saveOffsets@msg
  4217     003C  00F0               	movwf	SPI1_BufferWrite@bufferData
  4218     003D  3000               	movlw	high saveOffsets@msg
  4219     003E  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4220     003F  3002               	movlw	2
  4221     0040  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4222     0041  3000               	movlw	0
  4223     0042  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4224     0043  318F  2721  3180   	fcall	_SPI1_BufferWrite
  4225     0046                     l2487:
  4226     0046  0022               	movlb	2	; select bank2
  4227     0047  160E               	bsf	14,4	;volatile
  4228     0048                     l2489:
  4229                           
  4230                           ;ADXL345.c: 91:     msg.registerAddr = 0x20;
  4231     0048  3020               	movlw	32
  4232     0049  0020               	movlb	0	; select bank0
  4233     004A  00A1               	movwf	saveOffsets@msg
  4234     004B                     l2491:
  4235                           
  4236                           ;ADXL345.c: 92:     msg.data[0] = z_axis;
  4237     004B  087B               	movf	saveOffsets@z_axis,w
  4238     004C  00A2               	movwf	saveOffsets@msg+1
  4239     004D                     l2493:
  4240     004D  0022               	movlb	2	; select bank2
  4241     004E  120E               	bcf	14,4	;volatile
  4242     004F                     l2495:
  4243                           
  4244                           ;ADXL345.c: 94:     SPI1_BufferWrite(&msg, 2);
  4245     004F  3021               	movlw	low saveOffsets@msg
  4246     0050  00F0               	movwf	SPI1_BufferWrite@bufferData
  4247     0051  3000               	movlw	high saveOffsets@msg
  4248     0052  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4249     0053  3002               	movlw	2
  4250     0054  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4251     0055  3000               	movlw	0
  4252     0056  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4253     0057  318F  2721  3180   	fcall	_SPI1_BufferWrite
  4254     005A                     l2497:
  4255     005A  0022               	movlb	2	; select bank2
  4256     005B  160E               	bsf	14,4	;volatile
  4257     005C                     l2499:
  4258                           
  4259                           ;ADXL345.c: 97:     SPI1_Close();
  4260     005C  318E  2616  3180   	fcall	_SPI1_Close
  4261     005F                     l484:
  4262     005F  0008               	return
  4263     0060                     __end_of_saveOffsets:
  4264                           
  4265                           	psect	text3
  4266     0EE4                     __ptext3:	
  4267 ;; *************** function _EEPROM_Write *****************
  4268 ;; Defined at:
  4269 ;;		line 99 in file "mcc_generated_files/nvm/src/nvm.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  address         2    0[COMMON] unsigned short 
  4272 ;;  data            1    2[COMMON] unsigned char 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  globalInterr    1    3[COMMON] unsigned char 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  1    wreg      void 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4284 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;Total ram usage:        4 bytes
  4289 ;; Hardware stack levels used: 1
  4290 ;; This function calls:
  4291 ;;		Nothing
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;;		_calibrate
  4295 ;;		_EEPROM_ByteWrite
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299     0EE4                     _EEPROM_Write:	
  4300                           ;psect for function _EEPROM_Write
  4301                           
  4302     0EE4                     l2385:	
  4303                           ;incstack = 0
  4304                           ; Regs used in _EEPROM_Write: [wreg+status,2+status,0]
  4305                           
  4306                           
  4307                           ;mcc_generated_files/nvm/src/nvm.c: 99: void EEPROM_Write(eeprom_address_t address, eepr
      +                          om_data_t data);mcc_generated_files/nvm/src/nvm.c: 100: {;mcc_generated_files/nvm/src/nv
      +                          m.c: 102:     uint8_t globalInterruptBitValue = INTCONbits.GIE;
  4308     0EE4  0D0B               	rlf	11,w	;volatile
  4309     0EE5  0D0B               	rlf	11,w	;volatile
  4310     0EE6  3901               	andlw	1
  4311     0EE7  00F3               	movwf	EEPROM_Write@globalInterruptBitValue
  4312     0EE8                     l2387:
  4313                           
  4314                           ;mcc_generated_files/nvm/src/nvm.c: 105:     EECON1bits.CFGS = 0;
  4315     0EE8  0023               	movlb	3	; select bank3
  4316     0EE9  1315               	bcf	21,6	;volsfr
  4317     0EEA                     l2389:
  4318                           
  4319                           ;mcc_generated_files/nvm/src/nvm.c: 106:     EECON1bits.EEPGD = 0;
  4320     0EEA  1395               	bcf	21,7	;volsfr
  4321     0EEB                     l2391:
  4322                           
  4323                           ;mcc_generated_files/nvm/src/nvm.c: 109:     EECON1bits.WREN = 1;
  4324     0EEB  1515               	bsf	21,2	;volsfr
  4325     0EEC                     l2393:
  4326                           
  4327                           ;mcc_generated_files/nvm/src/nvm.c: 112:     EEADRH = (uint8_t) (address >> 8);
  4328     0EEC  0871               	movf	EEPROM_Write@address+1,w
  4329     0EED  0092               	movwf	18	;volatile
  4330     0EEE                     l2395:
  4331                           
  4332                           ;mcc_generated_files/nvm/src/nvm.c: 113:     EEADRL = (uint8_t) address;
  4333     0EEE  0870               	movf	EEPROM_Write@address,w
  4334     0EEF  0091               	movwf	17	;volatile
  4335     0EF0                     l2397:
  4336                           
  4337                           ;mcc_generated_files/nvm/src/nvm.c: 116:     EEDATL = data;
  4338     0EF0  0872               	movf	EEPROM_Write@data,w
  4339     0EF1  0093               	movwf	19	;volatile
  4340     0EF2                     l2399:
  4341                           
  4342                           ;mcc_generated_files/nvm/src/nvm.c: 119:     INTCONbits.GIE = 0;
  4343     0EF2  138B               	bcf	11,7	;volatile
  4344     0EF3                     l2401:
  4345                           
  4346                           ;mcc_generated_files/nvm/src/nvm.c: 122:     EECON2 = unlockKeyLow;
  4347     0EF3  087D               	movf	_unlockKeyLow,w	;volatile
  4348     0EF4  0096               	movwf	22	;volsfr
  4349     0EF5                     l2403:
  4350                           
  4351                           ;mcc_generated_files/nvm/src/nvm.c: 123:     EECON2 = unlockKeyHigh;
  4352     0EF5  087C               	movf	_unlockKeyHigh,w	;volatile
  4353     0EF6  0096               	movwf	22	;volsfr
  4354     0EF7                     l2405:
  4355                           
  4356                           ;mcc_generated_files/nvm/src/nvm.c: 124:     EECON1bits.WR = 1;
  4357     0EF7  1495               	bsf	21,1	;volsfr
  4358     0EF8                     l2407:
  4359                           
  4360                           ;mcc_generated_files/nvm/src/nvm.c: 125:     __nop();
  4361     0EF8  0000               	nop
  4362     0EF9                     l2409:
  4363                           
  4364                           ;mcc_generated_files/nvm/src/nvm.c: 126:     __nop();
  4365     0EF9  0000               	nop
  4366     0EFA                     l2411:
  4367                           
  4368                           ;mcc_generated_files/nvm/src/nvm.c: 129:     INTCONbits.GIE = globalInterruptBitValue;
  4369     0EFA  0C73               	rrf	EEPROM_Write@globalInterruptBitValue,w
  4370     0EFB  1C03               	skipc
  4371     0EFC  138B               	bcf	11,7	;volatile
  4372     0EFD  1803               	skipnc
  4373     0EFE  178B               	bsf	11,7	;volatile
  4374     0EFF                     l2413:
  4375                           
  4376                           ;mcc_generated_files/nvm/src/nvm.c: 132:     EECON1bits.WREN = 0;
  4377     0EFF  0023               	movlb	3	; select bank3
  4378     0F00  1115               	bcf	21,2	;volsfr
  4379     0F01                     l79:
  4380     0F01  0008               	return
  4381     0F02                     __end_of_EEPROM_Write:
  4382                           
  4383                           	psect	text4
  4384     0E86                     __ptext4:	
  4385 ;; *************** function _SYSTEM_Initialize *****************
  4386 ;; Defined at:
  4387 ;;		line 39 in file "mcc_generated_files/system/src/system.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0, pclath, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used: 1
  4407 ;; Hardware stack levels required when called: 2
  4408 ;; This function calls:
  4409 ;;		_CLOCK_Initialize
  4410 ;;		_INTERRUPT_Initialize
  4411 ;;		_NVM_Initialize
  4412 ;;		_PIN_MANAGER_Initialize
  4413 ;;		_SPI1_Initialize
  4414 ;;		_WDT_Initialize
  4415 ;; This function is called by:
  4416 ;;		_main
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420     0E86                     _SYSTEM_Initialize:	
  4421                           ;psect for function _SYSTEM_Initialize
  4422                           
  4423     0E86                     l2767:	
  4424                           ;incstack = 0
  4425                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4426                           
  4427                           
  4428                           ;mcc_generated_files/system/src/system.c: 41:     CLOCK_Initialize();
  4429     0E86  318E  2630  318E   	fcall	_CLOCK_Initialize
  4430     0E89                     l2769:
  4431                           
  4432                           ;mcc_generated_files/system/src/system.c: 42:     PIN_MANAGER_Initialize();
  4433     0E89  318F  2788  318E   	fcall	_PIN_MANAGER_Initialize
  4434     0E8C                     l2771:
  4435                           
  4436                           ;mcc_generated_files/system/src/system.c: 43:     NVM_Initialize();
  4437     0E8C  318E  261C  318E   	fcall	_NVM_Initialize
  4438     0E8F                     l2773:
  4439                           
  4440                           ;mcc_generated_files/system/src/system.c: 44:     SPI1_Initialize();
  4441     0E8F  318E  264A  318E   	fcall	_SPI1_Initialize
  4442     0E92                     l2775:
  4443                           
  4444                           ;mcc_generated_files/system/src/system.c: 45:     WDT_Initialize();
  4445     0E92  318E  2620  318E   	fcall	_WDT_Initialize
  4446                           
  4447                           ;mcc_generated_files/system/src/system.c: 46:     INTERRUPT_Initialize();
  4448     0E95  318E  2654  318E   	fcall	_INTERRUPT_Initialize
  4449     0E98                     l307:
  4450     0E98  0008               	return
  4451     0E99                     __end_of_SYSTEM_Initialize:
  4452                           
  4453                           	psect	text5
  4454     0E20                     __ptext5:	
  4455 ;; *************** function _WDT_Initialize *****************
  4456 ;; Defined at:
  4457 ;;		line 36 in file "mcc_generated_files/system/src/watchdog.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		None
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;Total ram usage:        0 bytes
  4476 ;; Hardware stack levels used: 1
  4477 ;; This function calls:
  4478 ;;		Nothing
  4479 ;; This function is called by:
  4480 ;;		_SYSTEM_Initialize
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484     0E20                     _WDT_Initialize:	
  4485                           ;psect for function _WDT_Initialize
  4486                           
  4487     0E20                     l2465:	
  4488                           ;incstack = 0
  4489                           ; Regs used in _WDT_Initialize: []
  4490                           
  4491                           
  4492                           ;mcc_generated_files/system/src/watchdog.c: 39:     WDTCON = 0x19;
  4493     0E20  3019               	movlw	25
  4494     0E21  0021               	movlb	1	; select bank1
  4495     0E22  0097               	movwf	23	;volatile
  4496     0E23                     l312:
  4497     0E23  0008               	return
  4498     0E24                     __end_of_WDT_Initialize:
  4499                           
  4500                           	psect	text6
  4501     0E4A                     __ptext6:	
  4502 ;; *************** function _SPI1_Initialize *****************
  4503 ;; Defined at:
  4504 ;;		line 61 in file "mcc_generated_files/spi/src/mssp.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		status,2
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used: 1
  4524 ;; This function calls:
  4525 ;;		Nothing
  4526 ;; This function is called by:
  4527 ;;		_SYSTEM_Initialize
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532     0E4A                     _SPI1_Initialize:	
  4533                           ;psect for function _SPI1_Initialize
  4534                           
  4535     0E4A                     l2417:	
  4536                           ;incstack = 0
  4537                           ; Regs used in _SPI1_Initialize: [status,2]
  4538                           
  4539                           
  4540                           ;mcc_generated_files/spi/src/mssp.c: 64:     PIE1bits.SSP1IE = 0;
  4541     0E4A  0021               	movlb	1	; select bank1
  4542     0E4B  1191               	bcf	17,3	;volatile
  4543                           
  4544                           ;mcc_generated_files/spi/src/mssp.c: 65:     PIR1bits.SSP1IF = 0;
  4545     0E4C  0020               	movlb	0	; select bank0
  4546     0E4D  1191               	bcf	17,3	;volatile
  4547     0E4E                     l2419:
  4548                           
  4549                           ;mcc_generated_files/spi/src/mssp.c: 67:     SSP1STAT = 0x00;
  4550     0E4E  0024               	movlb	4	; select bank4
  4551     0E4F  0194               	clrf	20	;volatile
  4552                           
  4553                           ;mcc_generated_files/spi/src/mssp.c: 68:     SSP1CON1 = 0x00;
  4554     0E50  0195               	clrf	21	;volatile
  4555                           
  4556                           ;mcc_generated_files/spi/src/mssp.c: 69:     SSP1CON3 = 0x00;
  4557     0E51  0197               	clrf	23	;volatile
  4558                           
  4559                           ;mcc_generated_files/spi/src/mssp.c: 70:     SSP1ADD = 0x00;
  4560     0E52  0192               	clrf	18	;volatile
  4561     0E53                     l126:
  4562     0E53  0008               	return
  4563     0E54                     __end_of_SPI1_Initialize:
  4564                           
  4565                           	psect	text7
  4566     0F88                     __ptext7:	
  4567 ;; *************** function _PIN_MANAGER_Initialize *****************
  4568 ;; Defined at:
  4569 ;;		line 40 in file "mcc_generated_files/system/src/pins.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2, status,0, pclath, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:        0 bytes
  4588 ;; Hardware stack levels used: 1
  4589 ;; Hardware stack levels required when called: 1
  4590 ;; This function calls:
  4591 ;;		_SW1_SetInterruptHandler
  4592 ;; This function is called by:
  4593 ;;		_SYSTEM_Initialize
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597     0F88                     _PIN_MANAGER_Initialize:	
  4598                           ;psect for function _PIN_MANAGER_Initialize
  4599                           
  4600     0F88                     l2437:	
  4601                           ;incstack = 0
  4602                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4603                           
  4604                           
  4605                           ;mcc_generated_files/system/src/pins.c: 45:     LATA = 0x0;
  4606     0F88  0022               	movlb	2	; select bank2
  4607     0F89  018C               	clrf	12	;volatile
  4608     0F8A                     l2439:
  4609                           
  4610                           ;mcc_generated_files/system/src/pins.c: 46:     LATC = 0x18;
  4611     0F8A  3018               	movlw	24
  4612     0F8B  008E               	movwf	14	;volatile
  4613     0F8C                     l2441:
  4614                           
  4615                           ;mcc_generated_files/system/src/pins.c: 51:     TRISA = 0xF;
  4616     0F8C  300F               	movlw	15
  4617     0F8D  0021               	movlb	1	; select bank1
  4618     0F8E  008C               	movwf	12	;volatile
  4619     0F8F                     l2443:
  4620                           
  4621                           ;mcc_generated_files/system/src/pins.c: 52:     TRISC = 0x2;
  4622     0F8F  3002               	movlw	2
  4623     0F90  008E               	movwf	14	;volatile
  4624                           
  4625                           ;mcc_generated_files/system/src/pins.c: 57:     ANSELA = 0x0;
  4626     0F91  0023               	movlb	3	; select bank3
  4627     0F92  018C               	clrf	12	;volatile
  4628                           
  4629                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELC = 0x0;
  4630     0F93  018E               	clrf	14	;volatile
  4631     0F94                     l2445:
  4632                           
  4633                           ;mcc_generated_files/system/src/pins.c: 63:     WPUA = 0xA;
  4634     0F94  300A               	movlw	10
  4635     0F95  0024               	movlb	4	; select bank4
  4636     0F96  008C               	movwf	12	;volatile
  4637                           
  4638                           ;mcc_generated_files/system/src/pins.c: 64:     WPUC = 0x0;
  4639     0F97  018E               	clrf	14	;volatile
  4640     0F98                     l2447:
  4641                           
  4642                           ;mcc_generated_files/system/src/pins.c: 65:     OPTION_REGbits.nWPUEN = 0x0;
  4643     0F98  0021               	movlb	1	; select bank1
  4644     0F99  1395               	bcf	21,7	;volatile
  4645                           
  4646                           ;mcc_generated_files/system/src/pins.c: 77:     INLVLA = 0x0;
  4647     0F9A  0027               	movlb	7	; select bank7
  4648     0F9B  018C               	clrf	12	;volatile
  4649                           
  4650                           ;mcc_generated_files/system/src/pins.c: 78:     INLVLC = 0x0;
  4651     0F9C  018E               	clrf	14	;volatile
  4652                           
  4653                           ;mcc_generated_files/system/src/pins.c: 87:     APFCON0 = 0x0;
  4654     0F9D  0022               	movlb	2	; select bank2
  4655     0F9E  019D               	clrf	29	;volatile
  4656                           
  4657                           ;mcc_generated_files/system/src/pins.c: 92:     IOCAP = 0x0;
  4658     0F9F  0027               	movlb	7	; select bank7
  4659     0FA0  0191               	clrf	17	;volatile
  4660     0FA1                     l2449:
  4661                           
  4662                           ;mcc_generated_files/system/src/pins.c: 93:     IOCAN = 0x2;
  4663     0FA1  3002               	movlw	2
  4664     0FA2  0092               	movwf	18	;volatile
  4665                           
  4666                           ;mcc_generated_files/system/src/pins.c: 94:     IOCAF = 0x0;
  4667     0FA3  0193               	clrf	19	;volatile
  4668     0FA4                     l2451:
  4669                           
  4670                           ;mcc_generated_files/system/src/pins.c: 96:     SW1_SetInterruptHandler(SW1_DefaultInter
      +                          ruptHandler);
  4671     0FA4  30CA               	movlw	low _SW1_DefaultInterruptHandler
  4672     0FA5  00F0               	movwf	SW1_SetInterruptHandler@InterruptHandler
  4673     0FA6  300E               	movlw	high _SW1_DefaultInterruptHandler
  4674     0FA7  00F1               	movwf	SW1_SetInterruptHandler@InterruptHandler+1
  4675     0FA8  318E  262A  318F   	fcall	_SW1_SetInterruptHandler
  4676     0FAB                     l2453:
  4677                           
  4678                           ;mcc_generated_files/system/src/pins.c: 99:     INTCONbits.IOCIE = 1;
  4679     0FAB  158B               	bsf	11,3	;volatile
  4680     0FAC                     l266:
  4681     0FAC  0008               	return
  4682     0FAD                     __end_of_PIN_MANAGER_Initialize:
  4683                           
  4684                           	psect	text8
  4685     0E2A                     __ptext8:	
  4686 ;; *************** function _SW1_SetInterruptHandler *****************
  4687 ;; Defined at:
  4688 ;;		line 129 in file "mcc_generated_files/system/src/pins.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4691 ;;		 -> SW1_DefaultInterruptHandler(1), 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;Total ram usage:        2 bytes
  4708 ;; Hardware stack levels used: 1
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_PIN_MANAGER_Initialize
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716     0E2A                     _SW1_SetInterruptHandler:	
  4717                           ;psect for function _SW1_SetInterruptHandler
  4718                           
  4719     0E2A                     l2355:	
  4720                           ;incstack = 0
  4721                           ; Regs used in _SW1_SetInterruptHandler: [wreg]
  4722                           
  4723                           
  4724                           ;mcc_generated_files/system/src/pins.c: 130:     SW1_InterruptHandler = InterruptHandler
      +                          ;
  4725     0E2A  0871               	movf	SW1_SetInterruptHandler@InterruptHandler+1,w
  4726     0E2B  0020               	movlb	0	; select bank0
  4727     0E2C  00E6               	movwf	_SW1_InterruptHandler+1
  4728     0E2D  0870               	movf	SW1_SetInterruptHandler@InterruptHandler,w
  4729     0E2E  00E5               	movwf	_SW1_InterruptHandler
  4730     0E2F                     l277:
  4731     0E2F  0008               	return
  4732     0E30                     __end_of_SW1_SetInterruptHandler:
  4733                           
  4734                           	psect	text9
  4735     0E1C                     __ptext9:	
  4736 ;; *************** function _NVM_Initialize *****************
  4737 ;; Defined at:
  4738 ;;		line 42 in file "mcc_generated_files/nvm/src/nvm.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		status,2, status,0, pclath, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used: 1
  4758 ;; Hardware stack levels required when called: 1
  4759 ;; This function calls:
  4760 ;;		_NVM_StatusClear
  4761 ;; This function is called by:
  4762 ;;		_SYSTEM_Initialize
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766     0E1C                     _NVM_Initialize:	
  4767                           ;psect for function _NVM_Initialize
  4768                           
  4769     0E1C                     l2415:	
  4770                           ;incstack = 0
  4771                           ; Regs used in _NVM_Initialize: [status,2+status,0+pclath+cstack]
  4772                           
  4773                           
  4774                           ;mcc_generated_files/nvm/src/nvm.c: 44:     NVM_StatusClear();
  4775     0E1C  318E  2619  318E   	fcall	_NVM_StatusClear
  4776     0E1F                     l54:
  4777     0E1F  0008               	return
  4778     0E20                     __end_of_NVM_Initialize:
  4779                           
  4780                           	psect	text10
  4781     0E19                     __ptext10:	
  4782 ;; *************** function _NVM_StatusClear *****************
  4783 ;; Defined at:
  4784 ;;		line 64 in file "mcc_generated_files/nvm/src/nvm.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		None
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;Total ram usage:        0 bytes
  4803 ;; Hardware stack levels used: 1
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_NVM_Initialize
  4808 ;;		_EEPROM_ByteWrite
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812     0E19                     _NVM_StatusClear:	
  4813                           ;psect for function _NVM_StatusClear
  4814                           
  4815     0E19                     l2303:	
  4816                           ;incstack = 0
  4817                           ; Regs used in _NVM_StatusClear: []
  4818                           
  4819                           
  4820                           ;mcc_generated_files/nvm/src/nvm.c: 66:     EECON1bits.WRERR = 0;
  4821     0E19  0023               	movlb	3	; select bank3
  4822     0E1A  1195               	bcf	21,3	;volsfr
  4823     0E1B                     l67:
  4824     0E1B  0008               	return
  4825     0E1C                     __end_of_NVM_StatusClear:
  4826                           
  4827                           	psect	text11
  4828     0E54                     __ptext11:	
  4829 ;; *************** function _INTERRUPT_Initialize *****************
  4830 ;; Defined at:
  4831 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0, pclath, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used: 1
  4851 ;; Hardware stack levels required when called: 1
  4852 ;; This function calls:
  4853 ;;		_INT_SetInterruptHandler
  4854 ;; This function is called by:
  4855 ;;		_SYSTEM_Initialize
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859     0E54                     _INTERRUPT_Initialize:	
  4860                           ;psect for function _INTERRUPT_Initialize
  4861                           
  4862     0E54                     l2433:	
  4863                           ;incstack = 0
  4864                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4865                           
  4866                           
  4867                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  4868     0E54  108B               	bcf	11,1	;volatile
  4869                           
  4870                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  4871     0E55  0021               	movlb	1	; select bank1
  4872     0E56  1715               	bsf	21,6	;volatile
  4873     0E57                     l2435:
  4874                           
  4875                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  4876     0E57  3000               	movlw	0
  4877     0E58  00F0               	movwf	INT_SetInterruptHandler@InterruptHandler
  4878     0E59  3000               	movlw	0
  4879     0E5A  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  4880     0E5B  318E  2624  318E   	fcall	_INT_SetInterruptHandler
  4881     0E5E                     l202:
  4882     0E5E  0008               	return
  4883     0E5F                     __end_of_INTERRUPT_Initialize:
  4884                           
  4885                           	psect	text12
  4886     0E24                     __ptext12:	
  4887 ;; *************** function _INT_SetInterruptHandler *****************
  4888 ;; Defined at:
  4889 ;;		line 71 in file "mcc_generated_files/system/src/interrupt.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4892 ;;		 -> INT_DefaultInterruptHandler(1), 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4904 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;Total ram usage:        2 bytes
  4909 ;; Hardware stack levels used: 1
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_INTERRUPT_Initialize
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917     0E24                     _INT_SetInterruptHandler:	
  4918                           ;psect for function _INT_SetInterruptHandler
  4919                           
  4920     0E24                     l2353:	
  4921                           ;incstack = 0
  4922                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  4923                           
  4924                           
  4925                           ;mcc_generated_files/system/src/interrupt.c: 72:     INT_InterruptHandler = InterruptHan
      +                          dler;
  4926     0E24  0871               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  4927     0E25  0020               	movlb	0	; select bank0
  4928     0E26  00E8               	movwf	_INT_InterruptHandler+1
  4929     0E27  0870               	movf	INT_SetInterruptHandler@InterruptHandler,w
  4930     0E28  00E7               	movwf	_INT_InterruptHandler
  4931     0E29                     l212:
  4932     0E29  0008               	return
  4933     0E2A                     __end_of_INT_SetInterruptHandler:
  4934                           
  4935                           	psect	text13
  4936     0E30                     __ptext13:	
  4937 ;; *************** function _CLOCK_Initialize *****************
  4938 ;; Defined at:
  4939 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		status,2
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used: 1
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_SYSTEM_Initialize
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966     0E30                     _CLOCK_Initialize:	
  4967                           ;psect for function _CLOCK_Initialize
  4968                           
  4969     0E30                     l2461:	
  4970                           ;incstack = 0
  4971                           ; Regs used in _CLOCK_Initialize: [status,2]
  4972                           
  4973                           
  4974                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (13 << 0x3)
  4975     0E30  306A               	movlw	106
  4976     0E31  0021               	movlb	1	; select bank1
  4977     0E32  0099               	movwf	25	;volatile
  4978     0E33                     l2463:
  4979                           
  4980                           ;mcc_generated_files/system/src/clock.c: 44:     BORCON = (0 << 0x7);
  4981     0E33  0022               	movlb	2	; select bank2
  4982     0E34  0196               	clrf	22	;volatile
  4983                           
  4984                           ;mcc_generated_files/system/src/clock.c: 45:     OSCTUNE = (0 << 0x0);
  4985     0E35  0021               	movlb	1	; select bank1
  4986     0E36  0198               	clrf	24	;volatile
  4987     0E37                     l292:
  4988     0E37  0008               	return
  4989     0E38                     __end_of_CLOCK_Initialize:
  4990                           
  4991                           	psect	text14
  4992     0E41                     __ptext14:	
  4993 ;; *************** function _PIN_MANAGER_IOC *****************
  4994 ;; Defined at:
  4995 ;;		line 102 in file "mcc_generated_files/system/src/pins.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used: 1
  5015 ;; Hardware stack levels required when called: 2
  5016 ;; This function calls:
  5017 ;;		_SW1_ISR
  5018 ;; This function is called by:
  5019 ;;		_main
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023     0E41                     _PIN_MANAGER_IOC:	
  5024                           ;psect for function _PIN_MANAGER_IOC
  5025                           
  5026     0E41                     l2763:	
  5027                           ;incstack = 0
  5028                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  5029                           
  5030                           
  5031                           ;mcc_generated_files/system/src/pins.c: 105:     if(IOCAFbits.IOCAF1 == 1)
  5032     0E41  0027               	movlb	7	; select bank7
  5033     0E42  1C93               	btfss	19,1	;volatile
  5034     0E43  2E45               	goto	u1011
  5035     0E44  2E46               	goto	u1010
  5036     0E45                     u1011:
  5037     0E45  2E49               	goto	l270
  5038     0E46                     u1010:
  5039     0E46                     l2765:
  5040                           
  5041                           ;mcc_generated_files/system/src/pins.c: 106:     {;mcc_generated_files/system/src/pins.c
      +                          : 107:         SW1_ISR();
  5042     0E46  318E  2677  318E   	fcall	_SW1_ISR
  5043     0E49                     l270:
  5044     0E49  0008               	return
  5045     0E4A                     __end_of_PIN_MANAGER_IOC:
  5046                           
  5047                           	psect	text15
  5048     0E77                     __ptext15:	
  5049 ;; *************** function _SW1_ISR *****************
  5050 ;; Defined at:
  5051 ;;		line 114 in file "mcc_generated_files/system/src/pins.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0, pclath, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        0 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; Hardware stack levels required when called: 1
  5072 ;; This function calls:
  5073 ;;		NULL
  5074 ;;		_SW1_DefaultInterruptHandler
  5075 ;; This function is called by:
  5076 ;;		_PIN_MANAGER_IOC
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080     0E77                     _SW1_ISR:	
  5081                           ;psect for function _SW1_ISR
  5082                           
  5083     0E77                     l2455:	
  5084                           ;incstack = 0
  5085                           ; Regs used in _SW1_ISR: [wreg+status,2+status,0+pclath+cstack]
  5086                           
  5087                           
  5088                           ;mcc_generated_files/system/src/pins.c: 119:     if(SW1_InterruptHandler)
  5089     0E77  0020               	movlb	0	; select bank0
  5090     0E78  0865               	movf	_SW1_InterruptHandler,w
  5091     0E79  0466               	iorwf	_SW1_InterruptHandler+1,w
  5092     0E7A  1903               	btfsc	3,2
  5093     0E7B  2E7D               	goto	u911
  5094     0E7C  2E7E               	goto	u910
  5095     0E7D                     u911:
  5096     0E7D  2E83               	goto	l2459
  5097     0E7E                     u910:
  5098     0E7E                     l2457:
  5099                           
  5100                           ;mcc_generated_files/system/src/pins.c: 120:     {;mcc_generated_files/system/src/pins.c
      +                          : 121:         SW1_InterruptHandler();
  5101     0E7E  0866               	movf	_SW1_InterruptHandler+1,w
  5102     0E7F  008A               	movwf	10
  5103     0E80  0865               	movf	_SW1_InterruptHandler,w
  5104     0E81  000A               	callw
  5105     0E82  318E               	pagesel	$
  5106     0E83                     l2459:
  5107                           
  5108                           ;mcc_generated_files/system/src/pins.c: 123:     IOCAFbits.IOCAF1 = 0;
  5109     0E83  0027               	movlb	7	; select bank7
  5110     0E84  1093               	bcf	19,1	;volatile
  5111     0E85                     l274:
  5112     0E85  0008               	return
  5113     0E86                     __end_of_SW1_ISR:
  5114                           
  5115                           	psect	text16
  5116     0ECA                     __ptext16:	
  5117 ;; *************** function _SW1_DefaultInterruptHandler *****************
  5118 ;; Defined at:
  5119 ;;		line 136 in file "mcc_generated_files/system/src/pins.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;		None
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, status,0
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;Total ram usage:        1 bytes
  5138 ;; Hardware stack levels used: 1
  5139 ;; This function calls:
  5140 ;;		Nothing
  5141 ;; This function is called by:
  5142 ;;		_PIN_MANAGER_Initialize
  5143 ;;		_SW1_ISR
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147     0ECA                     _SW1_DefaultInterruptHandler:	
  5148                           ;psect for function _SW1_DefaultInterruptHandler
  5149                           
  5150     0ECA                     l2357:	
  5151                           ;incstack = 0
  5152                           ; Regs used in _SW1_DefaultInterruptHandler: [wreg+status,0]
  5153                           
  5154                           
  5155                           ;mcc_generated_files/system/src/pins.c: 139:     _delay((unsigned long)((60)*(4000000/40
      +                          00.0)));
  5156     0ECA  304E               	movlw	78
  5157     0ECB  00F0               	movwf	??_SW1_DefaultInterruptHandler
  5158     0ECC  30EB               	movlw	235
  5159     0ECD                     u1597:
  5160     0ECD  0B89               	decfsz	9,f
  5161     0ECE  2ECD               	goto	u1597
  5162     0ECF  0BF0               	decfsz	??_SW1_DefaultInterruptHandler,f
  5163     0ED0  2ECD               	goto	u1597
  5164     0ED1  0000               	nop
  5165     0ED2                     l2359:
  5166                           
  5167                           ;mcc_generated_files/system/src/pins.c: 140:     if (PORTAbits.RA1 == 0) {
  5168     0ED2  0020               	movlb	0	; select bank0
  5169     0ED3  188C               	btfsc	12,1	;volatile
  5170     0ED4  2ED6               	goto	u841
  5171     0ED5  2ED7               	goto	u840
  5172     0ED6                     u841:
  5173     0ED6  2EE3               	goto	l283
  5174     0ED7                     u840:
  5175     0ED7                     l2361:
  5176     0ED7  1003               	clrc
  5177     0ED8  0022               	movlb	2	; select bank2
  5178     0ED9  1E0C               	btfss	12,4	;volatile
  5179     0EDA  1403               	setc
  5180     0EDB  1803               	btfsc	3,0
  5181     0EDC  2EDE               	goto	u851
  5182     0EDD  2EE1               	goto	u850
  5183     0EDE                     u851:
  5184     0EDE  0022               	movlb	2	; select bank2
  5185     0EDF  160C               	bsf	12,4	;volatile
  5186     0EE0  2EE3               	goto	u864
  5187     0EE1                     u850:
  5188     0EE1  0022               	movlb	2	; select bank2
  5189     0EE2  120C               	bcf	12,4	;volatile
  5190     0EE3                     u864:
  5191     0EE3                     l283:
  5192     0EE3  0008               	return
  5193     0EE4                     __end_of_SW1_DefaultInterruptHandler:
  5194                           
  5195                           	psect	text17
  5196     0E38                     __ptext17:	
  5197 ;; *************** function _NVM_StatusGet *****************
  5198 ;; Defined at:
  5199 ;;		line 52 in file "mcc_generated_files/nvm/src/nvm.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      enum E2421
  5206 ;; Registers used:
  5207 ;;		wreg
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used: 1
  5219 ;; This function calls:
  5220 ;;		Nothing
  5221 ;; This function is called by:
  5222 ;;		_main
  5223 ;;		_EEPROM_ByteWrite
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227     0E38                     _NVM_StatusGet:	
  5228                           ;psect for function _NVM_StatusGet
  5229                           
  5230     0E38                     l2735:	
  5231                           ;incstack = 0
  5232                           ; Regs used in _NVM_StatusGet: [wreg]
  5233                           
  5234                           
  5235                           ;mcc_generated_files/nvm/src/nvm.c: 54:     if (EECON1bits.WRERR == 1)
  5236     0E38  0023               	movlb	3	; select bank3
  5237     0E39  1D95               	btfss	21,3	;volsfr
  5238     0E3A  2E3C               	goto	u1001
  5239     0E3B  2E3D               	goto	u1000
  5240     0E3C                     u1001:
  5241     0E3C  2E3F               	goto	l2743
  5242     0E3D                     u1000:
  5243     0E3D                     l2737:
  5244                           
  5245                           ;mcc_generated_files/nvm/src/nvm.c: 55:     {;mcc_generated_files/nvm/src/nvm.c: 56:    
      +                               return NVM_ERROR;
  5246     0E3D  3001               	movlw	1
  5247     0E3E  2E40               	goto	l63
  5248     0E3F                     l2743:
  5249                           
  5250                           ;mcc_generated_files/nvm/src/nvm.c: 59:     {;mcc_generated_files/nvm/src/nvm.c: 60:    
      +                               return NVM_OK;
  5251     0E3F  3000               	movlw	0
  5252     0E40                     l63:
  5253     0E40  0008               	return
  5254     0E41                     __end_of_NVM_StatusGet:
  5255                           
  5256                           	psect	text18
  5257     0130                     __ptext18:	
  5258 ;; *************** function _MotionEventHandler *****************
  5259 ;; Defined at:
  5260 ;;		line 15 in file "fall.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  state           1   41[BANK0 ] PTR enum E2675
  5263 ;;		 -> main@current_state(1), 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5275 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;Total ram usage:        3 bytes
  5280 ;; Hardware stack levels used: 1
  5281 ;; Hardware stack levels required when called: 3
  5282 ;; This function calls:
  5283 ;;		_ADXL345_ClearInterrupt
  5284 ;;		_orientation_Up
  5285 ;;		_setupForFreefall
  5286 ;;		_setupForImpact
  5287 ;;		_setupForInactivity
  5288 ;; This function is called by:
  5289 ;;		_main
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293     0130                     _MotionEventHandler:	
  5294                           ;psect for function _MotionEventHandler
  5295                           
  5296     0130                     l2997:	
  5297                           ;incstack = 0
  5298                           ; Regs used in _MotionEventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5299                           
  5300                           
  5301                           ;fall.c: 16:     timer_20ms++;
  5302     0130  3001               	movlw	1
  5303     0131  0020               	movlb	0	; select bank0
  5304     0132  07E2               	addwf	_timer_20ms,f
  5305     0133  3000               	movlw	0
  5306     0134  3DE3               	addwfc	_timer_20ms+1,f
  5307                           
  5308                           ;fall.c: 17:     orientation_check_timer_20ms++;
  5309     0135  3001               	movlw	1
  5310     0136  07E0               	addwf	_orientation_check_timer_20ms,f
  5311     0137  3000               	movlw	0
  5312     0138  3DE1               	addwfc	_orientation_check_timer_20ms+1,f
  5313                           
  5314                           ;fall.c: 19:     switch (*state) {
  5315     0139  29A1               	goto	l3061
  5316     013A                     l674:	
  5317                           ;fall.c: 20:         case WAITING_FOR_FREEFALL:
  5318                           
  5319                           
  5320                           ;fall.c: 22:             if (PORTAbits.RA2) {
  5321     013A  1D0C               	btfss	12,2	;volatile
  5322     013B  293D               	goto	u1261
  5323     013C  293E               	goto	u1260
  5324     013D                     u1261:
  5325     013D  29BD               	goto	l703
  5326     013E                     u1260:
  5327     013E                     l2999:
  5328                           
  5329                           ;fall.c: 23:                 setupForImpact();
  5330     013E  3182  2255  3181   	fcall	_setupForImpact
  5331     0141                     l3001:
  5332                           
  5333                           ;fall.c: 24:                 timer_20ms = 0;
  5334     0141  0020               	movlb	0	; select bank0
  5335     0142  01E2               	clrf	_timer_20ms
  5336     0143  01E3               	clrf	_timer_20ms+1
  5337     0144                     l3003:
  5338                           
  5339                           ;fall.c: 25:                 *state = WAITING_FOR_IMPACT;
  5340     0144  0849               	movf	MotionEventHandler@state,w
  5341     0145  0086               	movwf	6
  5342     0146  0187               	clrf	7
  5343     0147  3001               	movlw	1
  5344     0148  0081               	movwf	1
  5345     0149  29BD               	goto	l703
  5346     014A                     l677:	
  5347                           ;fall.c: 29:         case WAITING_FOR_IMPACT:
  5348                           
  5349                           
  5350                           ;fall.c: 31:             if (PORTAbits.RA2) {
  5351     014A  1D0C               	btfss	12,2	;volatile
  5352     014B  294D               	goto	u1271
  5353     014C  294E               	goto	u1270
  5354     014D                     u1271:
  5355     014D  2958               	goto	l3009
  5356     014E                     u1270:
  5357     014E                     l3005:
  5358                           
  5359                           ;fall.c: 32:                 setupForInactivity();
  5360     014E  3182  22EC  3181   	fcall	_setupForInactivity
  5361     0151                     l3007:
  5362                           
  5363                           ;fall.c: 33:                 *state = WAITING_FOR_INACTIVITY;
  5364     0151  0020               	movlb	0	; select bank0
  5365     0152  0849               	movf	MotionEventHandler@state,w
  5366     0153  0086               	movwf	6
  5367     0154  0187               	clrf	7
  5368     0155  3002               	movlw	2
  5369     0156  0081               	movwf	1
  5370                           
  5371                           ;fall.c: 34:             }
  5372     0157  29BD               	goto	l703
  5373     0158                     l3009:
  5374     0158  3000               	movlw	0
  5375     0159  0263               	subwf	_timer_20ms+1,w
  5376     015A  3019               	movlw	25
  5377     015B  1903               	skipnz
  5378     015C  0262               	subwf	_timer_20ms,w
  5379     015D  1C03               	skipc
  5380     015E  2960               	goto	u1281
  5381     015F  2961               	goto	u1280
  5382     0160                     u1281:
  5383     0160  29BD               	goto	l703
  5384     0161                     u1280:
  5385     0161                     l3011:
  5386                           
  5387                           ;fall.c: 37:                 setupForFreefall();
  5388     0161  3181  21BE  3181   	fcall	_setupForFreefall
  5389     0164                     l3013:
  5390                           
  5391                           ;fall.c: 38:                 *state = WAITING_FOR_FREEFALL;
  5392     0164  0020               	movlb	0	; select bank0
  5393     0165  0849               	movf	MotionEventHandler@state,w
  5394     0166  0086               	movwf	6
  5395     0167  0187               	clrf	7
  5396     0168  0181               	clrf	1
  5397     0169  29BD               	goto	l703
  5398     016A                     l681:	
  5399                           ;fall.c: 42:         case WAITING_FOR_INACTIVITY:
  5400                           
  5401                           
  5402                           ;fall.c: 44:             if (PORTAbits.RA2) {
  5403     016A  1D0C               	btfss	12,2	;volatile
  5404     016B  296D               	goto	u1291
  5405     016C  296E               	goto	u1290
  5406     016D                     u1291:
  5407     016D  2991               	goto	l3033
  5408     016E                     u1290:
  5409     016E                     l3015:
  5410                           
  5411                           ;fall.c: 45:                 if (!orientation_Up()) {
  5412     016E  3183  2383  3181   	fcall	_orientation_Up
  5413     0171  3A00               	xorlw	0
  5414     0172  1D03               	skipz
  5415     0173  2975               	goto	u1301
  5416     0174  2976               	goto	u1300
  5417     0175                     u1301:
  5418     0175  2961               	goto	l3011
  5419     0176                     u1300:
  5420     0176                     l684:	
  5421                           ;fall.c: 46:                     do { LATAbits.LATA5 = 1; } while(0);
  5422                           
  5423     0176  0022               	movlb	2	; select bank2
  5424     0177  168C               	bsf	12,5	;volatile
  5425     0178                     l3017:
  5426                           
  5427                           ;fall.c: 47:                     _delay((unsigned long)((100)*(4000000/4000.0)));
  5428     0178  3082               	movlw	130
  5429     0179  0020               	movlb	0	; select bank0
  5430     017A  00CA               	movwf	??_MotionEventHandler
  5431     017B  30DD               	movlw	221
  5432     017C                     u1607:
  5433     017C  0B89               	decfsz	9,f
  5434     017D  297C               	goto	u1607
  5435     017E  0BCA               	decfsz	??_MotionEventHandler,f
  5436     017F  297C               	goto	u1607
  5437     0180  3200               	nop2
  5438     0181                     l3019:
  5439     0181  0022               	movlb	2	; select bank2
  5440     0182  128C               	bcf	12,5	;volatile
  5441     0183                     l3021:
  5442                           
  5443                           ;fall.c: 49:                     orientation_check_timer_20ms = 0;
  5444     0183  0020               	movlb	0	; select bank0
  5445     0184  01E0               	clrf	_orientation_check_timer_20ms
  5446     0185  01E1               	clrf	_orientation_check_timer_20ms+1
  5447     0186                     l3023:
  5448                           
  5449                           ;fall.c: 50:                     good_orientation_count = 0;
  5450     0186  01E4               	clrf	_good_orientation_count
  5451     0187                     l3025:
  5452                           
  5453                           ;fall.c: 51:                     ADXL345_ClearInterrupt();
  5454     0187  318E  26B0  3181   	fcall	_ADXL345_ClearInterrupt
  5455     018A                     l3027:
  5456                           
  5457                           ;fall.c: 52:                     *state = WAITING_FOR_TIMEOUT;
  5458     018A  0020               	movlb	0	; select bank0
  5459     018B  0849               	movf	MotionEventHandler@state,w
  5460     018C  0086               	movwf	6
  5461     018D  0187               	clrf	7
  5462     018E  3003               	movlw	3
  5463     018F  0081               	movwf	1
  5464                           
  5465                           ;fall.c: 53:                 } else {
  5466     0190  29BD               	goto	l703
  5467     0191                     l3033:
  5468     0191  3000               	movlw	0
  5469     0192  0263               	subwf	_timer_20ms+1,w
  5470     0193  30E1               	movlw	225
  5471     0194  1903               	skipnz
  5472     0195  0262               	subwf	_timer_20ms,w
  5473     0196  1C03               	skipc
  5474     0197  2999               	goto	u1311
  5475     0198  299A               	goto	u1310
  5476     0199                     u1311:
  5477     0199  29BD               	goto	l703
  5478     019A                     u1310:
  5479     019A  2961               	goto	l3011
  5480     019B                     l3039:
  5481                           
  5482                           ;fall.c: 68:                 *state = FALL_DETECTED;
  5483     019B  0849               	movf	MotionEventHandler@state,w
  5484     019C  0086               	movwf	6
  5485     019D  0187               	clrf	7
  5486     019E  3004               	movlw	4
  5487     019F  0081               	movwf	1
  5488                           
  5489                           ;fall.c: 69:             }
  5490     01A0  29BD               	goto	l703
  5491     01A1                     l3061:
  5492     01A1  0849               	movf	MotionEventHandler@state,w
  5493     01A2  0086               	movwf	6
  5494     01A3  0187               	clrf	7
  5495     01A4  0801               	movf	1,w
  5496     01A5  00CA               	movwf	??_MotionEventHandler
  5497     01A6  01CB               	clrf	??_MotionEventHandler+1
  5498                           
  5499                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5500                           ; Switch size 1, requested type "simple"
  5501                           ; Number of cases is 1, Range of values is 0 to 0
  5502                           ; switch strategies available:
  5503                           ; Name         Instructions Cycles
  5504                           ; simple_byte            4     3 (average)
  5505                           ; direct_byte            8     6 (fixed)
  5506                           ; jumptable            260     6 (fixed)
  5507                           ;	Chosen strategy is simple_byte
  5508     01A7  084B               	movf	??_MotionEventHandler+1,w
  5509     01A8  3A00               	xorlw	0	; case 0
  5510     01A9  1903               	skipnz
  5511     01AA  29AC               	goto	l3207
  5512     01AB  29BD               	goto	l703
  5513     01AC                     l3207:
  5514                           
  5515                           ; Switch size 1, requested type "simple"
  5516                           ; Number of cases is 5, Range of values is 0 to 4
  5517                           ; switch strategies available:
  5518                           ; Name         Instructions Cycles
  5519                           ; direct_byte           16     6 (fixed)
  5520                           ; simple_byte           16     9 (average)
  5521                           ; jumptable            260     6 (fixed)
  5522                           ;	Chosen strategy is simple_byte
  5523     01AC  084A               	movf	??_MotionEventHandler,w
  5524     01AD  3A00               	xorlw	0	; case 0
  5525     01AE  1903               	skipnz
  5526     01AF  293A               	goto	l674
  5527     01B0  3A01               	xorlw	1	; case 1
  5528     01B1  1903               	skipnz
  5529     01B2  294A               	goto	l677
  5530     01B3  3A03               	xorlw	3	; case 2
  5531     01B4  1903               	skipnz
  5532     01B5  296A               	goto	l681
  5533     01B6  3A01               	xorlw	1	; case 3
  5534     01B7  1903               	skipnz
  5535     01B8  299B               	goto	l3039
  5536     01B9  3A07               	xorlw	7	; case 4
  5537     01BA  1903               	skipnz
  5538     01BB  29BD               	goto	l703
  5539     01BC  29BD               	goto	l703
  5540     01BD                     l703:
  5541     01BD  0008               	return
  5542     01BE                     __end_of_MotionEventHandler:
  5543                           
  5544                           	psect	text19
  5545     02EC                     __ptext19:	
  5546 ;; *************** function _setupForInactivity *****************
  5547 ;; Defined at:
  5548 ;;		line 209 in file "ADXL345.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  msg            26    0[BANK0 ] struct Message
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;Total ram usage:       26 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 2
  5569 ;; This function calls:
  5570 ;;		_SPI1_BufferWrite
  5571 ;;		_SPI1_ByteExchange
  5572 ;;		_SPI1_Close
  5573 ;;		_SPI1_Open
  5574 ;;		_memcpy
  5575 ;;		_memset
  5576 ;; This function is called by:
  5577 ;;		_MotionEventHandler
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581     02EC                     _setupForInactivity:	
  5582                           ;psect for function _setupForInactivity
  5583                           
  5584     02EC                     l2621:	
  5585                           ;incstack = 0
  5586                           ; Regs used in _setupForInactivity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5587                           
  5588                           
  5589                           ;ADXL345.c: 210:     while (!SPI1_Open(ADXL345)) {
  5590     02EC  2AF0               	goto	l2625
  5591     02ED                     l2623:
  5592                           
  5593                           ;ADXL345.c: 211:         SPI1_Close();
  5594     02ED  318E  2616  3182   	fcall	_SPI1_Close
  5595     02F0                     l2625:
  5596                           
  5597                           ;ADXL345.c: 210:     while (!SPI1_Open(ADXL345)) {
  5598     02F0  01F6               	clrf	SPI1_Open@spiConfigIndex
  5599     02F1  3180  20C4  3182   	fcall	_SPI1_Open
  5600     02F4  3A00               	xorlw	0
  5601     02F5  1903               	skipnz
  5602     02F6  2AF8               	goto	u961
  5603     02F7  2AF9               	goto	u960
  5604     02F8                     u961:
  5605     02F8  2AED               	goto	l2623
  5606     02F9                     u960:
  5607     02F9                     l552:	
  5608                           ;ADXL345.c: 215:     do { LATCbits.LATC4 = 0; } while(0);
  5609                           
  5610     02F9  0022               	movlb	2	; select bank2
  5611     02FA  120E               	bcf	14,4	;volatile
  5612     02FB                     l2627:
  5613                           
  5614                           ;ADXL345.c: 216:     SPI1_ByteExchange(0x30);
  5615     02FB  3030               	movlw	48
  5616     02FC  00F0               	movwf	SPI1_ByteExchange@byteData
  5617     02FD  318E  265F  3182   	fcall	_SPI1_ByteExchange
  5618     0300                     l2629:
  5619     0300  0022               	movlb	2	; select bank2
  5620     0301  160E               	bsf	14,4	;volatile
  5621     0302                     l2631:
  5622                           
  5623                           ;ADXL345.c: 225:     struct Message msg;;ADXL345.c: 226:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5624     0302  3064               	movlw	100
  5625     0303  0020               	movlb	0	; select bank0
  5626     0304  00A0               	movwf	setupForInactivity@msg
  5627     0305                     l2633:
  5628                           
  5629                           ;ADXL345.c: 227:     memset(msg.data, 0, sizeof(msg.data));
  5630     0305  3021               	movlw	low (setupForInactivity@msg+1)
  5631     0306  00F0               	movwf	memset@dest
  5632     0307  3000               	movlw	high (setupForInactivity@msg+1)
  5633     0308  00F1               	movwf	memset@dest+1
  5634     0309  3000               	movlw	0
  5635     030A  00F2               	movwf	memset@c
  5636     030B  00F3               	movwf	memset@c+1
  5637     030C  3019               	movlw	25
  5638     030D  00F4               	movwf	memset@n
  5639     030E  3000               	movlw	0
  5640     030F  00F5               	movwf	memset@n+1
  5641     0310  318E  2699  3182   	fcall	_memset
  5642     0313                     l2635:
  5643                           
  5644                           ;ADXL345.c: 228:     memcpy(msg.data, no_motion_init, sizeof(no_motion_init));
  5645     0313  3021               	movlw	low (setupForInactivity@msg+1)
  5646     0314  00F0               	movwf	memcpy@d1
  5647     0315  3000               	movlw	high (setupForInactivity@msg+1)
  5648     0316  00F1               	movwf	memcpy@d1+1
  5649     0317  3045               	movlw	low (_no_motion_init| (0+32768))
  5650     0318  00F2               	movwf	memcpy@s1
  5651     0319  3090               	movlw	high (_no_motion_init| (0+32768))
  5652     031A  00F3               	movwf	memcpy@s1+1
  5653     031B  3004               	movlw	4
  5654     031C  00F4               	movwf	memcpy@n
  5655     031D  3000               	movlw	0
  5656     031E  00F5               	movwf	memcpy@n+1
  5657     031F  318F  2763  3182   	fcall	_memcpy
  5658     0322                     l2637:
  5659     0322  0022               	movlb	2	; select bank2
  5660     0323  120E               	bcf	14,4	;volatile
  5661     0324                     l2639:
  5662                           
  5663                           ;ADXL345.c: 230:     SPI1_BufferWrite(&msg, sizeof(no_motion_init) + 1);
  5664     0324  3020               	movlw	low setupForInactivity@msg
  5665     0325  00F0               	movwf	SPI1_BufferWrite@bufferData
  5666     0326  3000               	movlw	high setupForInactivity@msg
  5667     0327  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5668     0328  3005               	movlw	5
  5669     0329  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5670     032A  3000               	movlw	0
  5671     032B  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5672     032C  318F  2721  3182   	fcall	_SPI1_BufferWrite
  5673     032F                     l2641:
  5674     032F  0022               	movlb	2	; select bank2
  5675     0330  160E               	bsf	14,4	;volatile
  5676     0331                     l2643:
  5677                           
  5678                           ;ADXL345.c: 234:     msg.registerAddr = 0x2C;
  5679     0331  302C               	movlw	44
  5680     0332  0020               	movlb	0	; select bank0
  5681     0333  00A0               	movwf	setupForInactivity@msg
  5682     0334                     l2645:
  5683                           
  5684                           ;ADXL345.c: 235:     memset(msg.data, 0, sizeof(msg.data));
  5685     0334  3021               	movlw	low (setupForInactivity@msg+1)
  5686     0335  00F0               	movwf	memset@dest
  5687     0336  3000               	movlw	high (setupForInactivity@msg+1)
  5688     0337  00F1               	movwf	memset@dest+1
  5689     0338  3000               	movlw	0
  5690     0339  00F2               	movwf	memset@c
  5691     033A  00F3               	movwf	memset@c+1
  5692     033B  3019               	movlw	25
  5693     033C  00F4               	movwf	memset@n
  5694     033D  3000               	movlw	0
  5695     033E  00F5               	movwf	memset@n+1
  5696     033F  318E  2699  3182   	fcall	_memset
  5697     0342                     l2647:
  5698                           
  5699                           ;ADXL345.c: 236:     msg.data[0] = 0x17;
  5700     0342  3017               	movlw	23
  5701     0343  0020               	movlb	0	; select bank0
  5702     0344  00A1               	movwf	setupForInactivity@msg+1
  5703     0345                     l2649:
  5704     0345  0022               	movlb	2	; select bank2
  5705     0346  120E               	bcf	14,4	;volatile
  5706     0347                     l2651:
  5707                           
  5708                           ;ADXL345.c: 238:     SPI1_BufferWrite(&msg, 2);
  5709     0347  3020               	movlw	low setupForInactivity@msg
  5710     0348  00F0               	movwf	SPI1_BufferWrite@bufferData
  5711     0349  3000               	movlw	high setupForInactivity@msg
  5712     034A  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5713     034B  3002               	movlw	2
  5714     034C  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5715     034D  3000               	movlw	0
  5716     034E  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5717     034F  318F  2721  3182   	fcall	_SPI1_BufferWrite
  5718     0352                     l2653:
  5719     0352  0022               	movlb	2	; select bank2
  5720     0353  160E               	bsf	14,4	;volatile
  5721     0354                     l2655:
  5722                           
  5723                           ;ADXL345.c: 242:     msg.registerAddr = 0x2E;
  5724     0354  302E               	movlw	46
  5725     0355  0020               	movlb	0	; select bank0
  5726     0356  00A0               	movwf	setupForInactivity@msg
  5727     0357                     l2657:
  5728                           
  5729                           ;ADXL345.c: 243:     memset(msg.data, 0, sizeof(msg.data));
  5730     0357  3021               	movlw	low (setupForInactivity@msg+1)
  5731     0358  00F0               	movwf	memset@dest
  5732     0359  3000               	movlw	high (setupForInactivity@msg+1)
  5733     035A  00F1               	movwf	memset@dest+1
  5734     035B  3000               	movlw	0
  5735     035C  00F2               	movwf	memset@c
  5736     035D  00F3               	movwf	memset@c+1
  5737     035E  3019               	movlw	25
  5738     035F  00F4               	movwf	memset@n
  5739     0360  3000               	movlw	0
  5740     0361  00F5               	movwf	memset@n+1
  5741     0362  318E  2699  3182   	fcall	_memset
  5742     0365                     l2659:
  5743                           
  5744                           ;ADXL345.c: 244:     msg.data[0] = 0x08;
  5745     0365  3008               	movlw	8
  5746     0366  0020               	movlb	0	; select bank0
  5747     0367  00A1               	movwf	setupForInactivity@msg+1
  5748     0368                     l2661:
  5749     0368  0022               	movlb	2	; select bank2
  5750     0369  120E               	bcf	14,4	;volatile
  5751     036A                     l2663:
  5752                           
  5753                           ;ADXL345.c: 246:     SPI1_BufferWrite(&msg, 2);
  5754     036A  3020               	movlw	low setupForInactivity@msg
  5755     036B  00F0               	movwf	SPI1_BufferWrite@bufferData
  5756     036C  3000               	movlw	high setupForInactivity@msg
  5757     036D  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5758     036E  3002               	movlw	2
  5759     036F  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5760     0370  3000               	movlw	0
  5761     0371  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5762     0372  318F  2721  3182   	fcall	_SPI1_BufferWrite
  5763     0375                     l2665:
  5764     0375  0022               	movlb	2	; select bank2
  5765     0376  160E               	bsf	14,4	;volatile
  5766     0377                     l2667:
  5767     0377  120E               	bcf	14,4	;volatile
  5768     0378                     l2669:
  5769                           
  5770                           ;ADXL345.c: 251:     SPI1_ByteExchange(0x30);
  5771     0378  3030               	movlw	48
  5772     0379  00F0               	movwf	SPI1_ByteExchange@byteData
  5773     037A  318E  265F  3182   	fcall	_SPI1_ByteExchange
  5774     037D                     l2671:
  5775     037D  0022               	movlb	2	; select bank2
  5776     037E  160E               	bsf	14,4	;volatile
  5777     037F                     l2673:
  5778                           
  5779                           ;ADXL345.c: 254:     SPI1_Close();
  5780     037F  318E  2616  3182   	fcall	_SPI1_Close
  5781     0382                     l572:
  5782     0382  0008               	return
  5783     0383                     __end_of_setupForInactivity:
  5784                           
  5785                           	psect	text20
  5786     0255                     __ptext20:	
  5787 ;; *************** function _setupForImpact *****************
  5788 ;; Defined at:
  5789 ;;		line 161 in file "ADXL345.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  msg            26    0[BANK0 ] struct Message
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;Total ram usage:       26 bytes
  5808 ;; Hardware stack levels used: 1
  5809 ;; Hardware stack levels required when called: 2
  5810 ;; This function calls:
  5811 ;;		_SPI1_BufferWrite
  5812 ;;		_SPI1_ByteExchange
  5813 ;;		_SPI1_Close
  5814 ;;		_SPI1_Open
  5815 ;;		_memcpy
  5816 ;;		_memset
  5817 ;; This function is called by:
  5818 ;;		_MotionEventHandler
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822     0255                     _setupForImpact:	
  5823                           ;psect for function _setupForImpact
  5824                           
  5825     0255                     l2567:	
  5826                           ;incstack = 0
  5827                           ; Regs used in _setupForImpact: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5828                           
  5829                           
  5830                           ;ADXL345.c: 162:     while (!SPI1_Open(ADXL345)) {
  5831     0255  2A59               	goto	l2571
  5832     0256                     l2569:
  5833                           
  5834                           ;ADXL345.c: 163:         SPI1_Close();
  5835     0256  318E  2616  3182   	fcall	_SPI1_Close
  5836     0259                     l2571:
  5837                           
  5838                           ;ADXL345.c: 162:     while (!SPI1_Open(ADXL345)) {
  5839     0259  01F6               	clrf	SPI1_Open@spiConfigIndex
  5840     025A  3180  20C4  3182   	fcall	_SPI1_Open
  5841     025D  3A00               	xorlw	0
  5842     025E  1903               	skipnz
  5843     025F  2A61               	goto	u951
  5844     0260  2A62               	goto	u950
  5845     0261                     u951:
  5846     0261  2A56               	goto	l2569
  5847     0262                     u950:
  5848     0262                     l526:	
  5849                           ;ADXL345.c: 167:     do { LATCbits.LATC4 = 0; } while(0);
  5850                           
  5851     0262  0022               	movlb	2	; select bank2
  5852     0263  120E               	bcf	14,4	;volatile
  5853     0264                     l2573:
  5854                           
  5855                           ;ADXL345.c: 168:     SPI1_ByteExchange(0x30);
  5856     0264  3030               	movlw	48
  5857     0265  00F0               	movwf	SPI1_ByteExchange@byteData
  5858     0266  318E  265F  3182   	fcall	_SPI1_ByteExchange
  5859     0269                     l2575:
  5860     0269  0022               	movlb	2	; select bank2
  5861     026A  160E               	bsf	14,4	;volatile
  5862     026B                     l2577:
  5863                           
  5864                           ;ADXL345.c: 177:     struct Message msg;;ADXL345.c: 178:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5865     026B  3064               	movlw	100
  5866     026C  0020               	movlb	0	; select bank0
  5867     026D  00A0               	movwf	setupForImpact@msg
  5868     026E                     l2579:
  5869                           
  5870                           ;ADXL345.c: 179:     memset(msg.data, 0, sizeof(msg.data));
  5871     026E  3021               	movlw	low (setupForImpact@msg+1)
  5872     026F  00F0               	movwf	memset@dest
  5873     0270  3000               	movlw	high (setupForImpact@msg+1)
  5874     0271  00F1               	movwf	memset@dest+1
  5875     0272  3000               	movlw	0
  5876     0273  00F2               	movwf	memset@c
  5877     0274  00F3               	movwf	memset@c+1
  5878     0275  3019               	movlw	25
  5879     0276  00F4               	movwf	memset@n
  5880     0277  3000               	movlw	0
  5881     0278  00F5               	movwf	memset@n+1
  5882     0279  318E  2699  3182   	fcall	_memset
  5883     027C                     l2581:
  5884                           
  5885                           ;ADXL345.c: 180:     memcpy(msg.data, impact_init, sizeof(impact_init));
  5886     027C  3021               	movlw	low (setupForImpact@msg+1)
  5887     027D  00F0               	movwf	memcpy@d1
  5888     027E  3000               	movlw	high (setupForImpact@msg+1)
  5889     027F  00F1               	movwf	memcpy@d1+1
  5890     0280  3049               	movlw	low (_impact_init| (0+32768))
  5891     0281  00F2               	movwf	memcpy@s1
  5892     0282  3090               	movlw	high (_impact_init| (0+32768))
  5893     0283  00F3               	movwf	memcpy@s1+1
  5894     0284  3004               	movlw	4
  5895     0285  00F4               	movwf	memcpy@n
  5896     0286  3000               	movlw	0
  5897     0287  00F5               	movwf	memcpy@n+1
  5898     0288  318F  2763  3182   	fcall	_memcpy
  5899     028B                     l2583:
  5900     028B  0022               	movlb	2	; select bank2
  5901     028C  120E               	bcf	14,4	;volatile
  5902     028D                     l2585:
  5903                           
  5904                           ;ADXL345.c: 182:     SPI1_BufferWrite(&msg, sizeof(impact_init) + 1);
  5905     028D  3020               	movlw	low setupForImpact@msg
  5906     028E  00F0               	movwf	SPI1_BufferWrite@bufferData
  5907     028F  3000               	movlw	high setupForImpact@msg
  5908     0290  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5909     0291  3005               	movlw	5
  5910     0292  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5911     0293  3000               	movlw	0
  5912     0294  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5913     0295  318F  2721  3182   	fcall	_SPI1_BufferWrite
  5914     0298                     l2587:
  5915     0298  0022               	movlb	2	; select bank2
  5916     0299  160E               	bsf	14,4	;volatile
  5917     029A                     l2589:
  5918                           
  5919                           ;ADXL345.c: 186:     msg.registerAddr = 0x2C;
  5920     029A  302C               	movlw	44
  5921     029B  0020               	movlb	0	; select bank0
  5922     029C  00A0               	movwf	setupForImpact@msg
  5923     029D                     l2591:
  5924                           
  5925                           ;ADXL345.c: 187:     memset(msg.data, 0, sizeof(msg.data));
  5926     029D  3021               	movlw	low (setupForImpact@msg+1)
  5927     029E  00F0               	movwf	memset@dest
  5928     029F  3000               	movlw	high (setupForImpact@msg+1)
  5929     02A0  00F1               	movwf	memset@dest+1
  5930     02A1  3000               	movlw	0
  5931     02A2  00F2               	movwf	memset@c
  5932     02A3  00F3               	movwf	memset@c+1
  5933     02A4  3019               	movlw	25
  5934     02A5  00F4               	movwf	memset@n
  5935     02A6  3000               	movlw	0
  5936     02A7  00F5               	movwf	memset@n+1
  5937     02A8  318E  2699  3182   	fcall	_memset
  5938     02AB                     l2593:
  5939                           
  5940                           ;ADXL345.c: 188:     msg.data[0] = 0x1A;
  5941     02AB  301A               	movlw	26
  5942     02AC  0020               	movlb	0	; select bank0
  5943     02AD  00A1               	movwf	setupForImpact@msg+1
  5944     02AE                     l2595:
  5945     02AE  0022               	movlb	2	; select bank2
  5946     02AF  120E               	bcf	14,4	;volatile
  5947     02B0                     l2597:
  5948                           
  5949                           ;ADXL345.c: 190:     SPI1_BufferWrite(&msg, 2);
  5950     02B0  3020               	movlw	low setupForImpact@msg
  5951     02B1  00F0               	movwf	SPI1_BufferWrite@bufferData
  5952     02B2  3000               	movlw	high setupForImpact@msg
  5953     02B3  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5954     02B4  3002               	movlw	2
  5955     02B5  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5956     02B6  3000               	movlw	0
  5957     02B7  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5958     02B8  318F  2721  3182   	fcall	_SPI1_BufferWrite
  5959     02BB                     l2599:
  5960     02BB  0022               	movlb	2	; select bank2
  5961     02BC  160E               	bsf	14,4	;volatile
  5962     02BD                     l2601:
  5963                           
  5964                           ;ADXL345.c: 194:     msg.registerAddr = 0x2E;
  5965     02BD  302E               	movlw	46
  5966     02BE  0020               	movlb	0	; select bank0
  5967     02BF  00A0               	movwf	setupForImpact@msg
  5968     02C0                     l2603:
  5969                           
  5970                           ;ADXL345.c: 195:     memset(msg.data, 0, sizeof(msg.data));
  5971     02C0  3021               	movlw	low (setupForImpact@msg+1)
  5972     02C1  00F0               	movwf	memset@dest
  5973     02C2  3000               	movlw	high (setupForImpact@msg+1)
  5974     02C3  00F1               	movwf	memset@dest+1
  5975     02C4  3000               	movlw	0
  5976     02C5  00F2               	movwf	memset@c
  5977     02C6  00F3               	movwf	memset@c+1
  5978     02C7  3019               	movlw	25
  5979     02C8  00F4               	movwf	memset@n
  5980     02C9  3000               	movlw	0
  5981     02CA  00F5               	movwf	memset@n+1
  5982     02CB  318E  2699  3182   	fcall	_memset
  5983     02CE                     l2605:
  5984                           
  5985                           ;ADXL345.c: 196:     msg.data[0] = 0x04;
  5986     02CE  3004               	movlw	4
  5987     02CF  0020               	movlb	0	; select bank0
  5988     02D0  00A1               	movwf	setupForImpact@msg+1
  5989     02D1                     l2607:
  5990     02D1  0022               	movlb	2	; select bank2
  5991     02D2  120E               	bcf	14,4	;volatile
  5992     02D3                     l2609:
  5993                           
  5994                           ;ADXL345.c: 198:     SPI1_BufferWrite(&msg, 2);
  5995     02D3  3020               	movlw	low setupForImpact@msg
  5996     02D4  00F0               	movwf	SPI1_BufferWrite@bufferData
  5997     02D5  3000               	movlw	high setupForImpact@msg
  5998     02D6  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5999     02D7  3002               	movlw	2
  6000     02D8  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6001     02D9  3000               	movlw	0
  6002     02DA  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6003     02DB  318F  2721  3182   	fcall	_SPI1_BufferWrite
  6004     02DE                     l2611:
  6005     02DE  0022               	movlb	2	; select bank2
  6006     02DF  160E               	bsf	14,4	;volatile
  6007     02E0                     l2613:
  6008     02E0  120E               	bcf	14,4	;volatile
  6009     02E1                     l2615:
  6010                           
  6011                           ;ADXL345.c: 203:     SPI1_ByteExchange(0x30);
  6012     02E1  3030               	movlw	48
  6013     02E2  00F0               	movwf	SPI1_ByteExchange@byteData
  6014     02E3  318E  265F  3182   	fcall	_SPI1_ByteExchange
  6015     02E6                     l2617:
  6016     02E6  0022               	movlb	2	; select bank2
  6017     02E7  160E               	bsf	14,4	;volatile
  6018     02E8                     l2619:
  6019                           
  6020                           ;ADXL345.c: 206:     SPI1_Close();
  6021     02E8  318E  2616  3182   	fcall	_SPI1_Close
  6022     02EB                     l546:
  6023     02EB  0008               	return
  6024     02EC                     __end_of_setupForImpact:
  6025                           
  6026                           	psect	text21
  6027     01BE                     __ptext21:	
  6028 ;; *************** function _setupForFreefall *****************
  6029 ;; Defined at:
  6030 ;;		line 113 in file "ADXL345.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;		None
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  msg            26    0[BANK0 ] struct Message
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      void 
  6037 ;; Registers used:
  6038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;Total ram usage:       26 bytes
  6049 ;; Hardware stack levels used: 1
  6050 ;; Hardware stack levels required when called: 2
  6051 ;; This function calls:
  6052 ;;		_SPI1_BufferWrite
  6053 ;;		_SPI1_ByteExchange
  6054 ;;		_SPI1_Close
  6055 ;;		_SPI1_Open
  6056 ;;		_memcpy
  6057 ;;		_memset
  6058 ;; This function is called by:
  6059 ;;		_MotionEventHandler
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063     01BE                     _setupForFreefall:	
  6064                           ;psect for function _setupForFreefall
  6065                           
  6066     01BE                     l2513:	
  6067                           ;incstack = 0
  6068                           ; Regs used in _setupForFreefall: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6069                           
  6070                           
  6071                           ;ADXL345.c: 114:     while (!SPI1_Open(ADXL345)) {
  6072     01BE  29C2               	goto	l2517
  6073     01BF                     l2515:
  6074                           
  6075                           ;ADXL345.c: 115:         SPI1_Close();
  6076     01BF  318E  2616  3181   	fcall	_SPI1_Close
  6077     01C2                     l2517:
  6078                           
  6079                           ;ADXL345.c: 114:     while (!SPI1_Open(ADXL345)) {
  6080     01C2  01F6               	clrf	SPI1_Open@spiConfigIndex
  6081     01C3  3180  20C4  3181   	fcall	_SPI1_Open
  6082     01C6  3A00               	xorlw	0
  6083     01C7  1903               	skipnz
  6084     01C8  29CA               	goto	u941
  6085     01C9  29CB               	goto	u940
  6086     01CA                     u941:
  6087     01CA  29BF               	goto	l2515
  6088     01CB                     u940:
  6089     01CB                     l500:	
  6090                           ;ADXL345.c: 119:     do { LATCbits.LATC4 = 0; } while(0);
  6091                           
  6092     01CB  0022               	movlb	2	; select bank2
  6093     01CC  120E               	bcf	14,4	;volatile
  6094     01CD                     l2519:
  6095                           
  6096                           ;ADXL345.c: 120:     SPI1_ByteExchange(0x30);
  6097     01CD  3030               	movlw	48
  6098     01CE  00F0               	movwf	SPI1_ByteExchange@byteData
  6099     01CF  318E  265F  3181   	fcall	_SPI1_ByteExchange
  6100     01D2                     l2521:
  6101     01D2  0022               	movlb	2	; select bank2
  6102     01D3  160E               	bsf	14,4	;volatile
  6103     01D4                     l2523:
  6104                           
  6105                           ;ADXL345.c: 129:     struct Message msg;;ADXL345.c: 130:     msg.registerAddr = 0x24 | 0
      +                          x40;
  6106     01D4  3064               	movlw	100
  6107     01D5  0020               	movlb	0	; select bank0
  6108     01D6  00A0               	movwf	setupForFreefall@msg
  6109     01D7                     l2525:
  6110                           
  6111                           ;ADXL345.c: 131:     memset(msg.data, 0, sizeof(msg.data));
  6112     01D7  3021               	movlw	low (setupForFreefall@msg+1)
  6113     01D8  00F0               	movwf	memset@dest
  6114     01D9  3000               	movlw	high (setupForFreefall@msg+1)
  6115     01DA  00F1               	movwf	memset@dest+1
  6116     01DB  3000               	movlw	0
  6117     01DC  00F2               	movwf	memset@c
  6118     01DD  00F3               	movwf	memset@c+1
  6119     01DE  3019               	movlw	25
  6120     01DF  00F4               	movwf	memset@n
  6121     01E0  3000               	movlw	0
  6122     01E1  00F5               	movwf	memset@n+1
  6123     01E2  318E  2699  3181   	fcall	_memset
  6124     01E5                     l2527:
  6125                           
  6126                           ;ADXL345.c: 132:     memcpy(msg.data, fall_init, sizeof(fall_init));
  6127     01E5  3021               	movlw	low (setupForFreefall@msg+1)
  6128     01E6  00F0               	movwf	memcpy@d1
  6129     01E7  3000               	movlw	high (setupForFreefall@msg+1)
  6130     01E8  00F1               	movwf	memcpy@d1+1
  6131     01E9  304D               	movlw	low (_fall_init| (0+32768))
  6132     01EA  00F2               	movwf	memcpy@s1
  6133     01EB  3090               	movlw	high (_fall_init| (0+32768))
  6134     01EC  00F3               	movwf	memcpy@s1+1
  6135     01ED  3004               	movlw	4
  6136     01EE  00F4               	movwf	memcpy@n
  6137     01EF  3000               	movlw	0
  6138     01F0  00F5               	movwf	memcpy@n+1
  6139     01F1  318F  2763  3181   	fcall	_memcpy
  6140     01F4                     l2529:
  6141     01F4  0022               	movlb	2	; select bank2
  6142     01F5  120E               	bcf	14,4	;volatile
  6143     01F6                     l2531:
  6144                           
  6145                           ;ADXL345.c: 134:     SPI1_BufferWrite(&msg, sizeof(fall_init) + 1);
  6146     01F6  3020               	movlw	low setupForFreefall@msg
  6147     01F7  00F0               	movwf	SPI1_BufferWrite@bufferData
  6148     01F8  3000               	movlw	high setupForFreefall@msg
  6149     01F9  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6150     01FA  3005               	movlw	5
  6151     01FB  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6152     01FC  3000               	movlw	0
  6153     01FD  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6154     01FE  318F  2721  3181   	fcall	_SPI1_BufferWrite
  6155     0201                     l2533:
  6156     0201  0022               	movlb	2	; select bank2
  6157     0202  160E               	bsf	14,4	;volatile
  6158     0203                     l2535:
  6159                           
  6160                           ;ADXL345.c: 138:     msg.registerAddr = 0x2C;
  6161     0203  302C               	movlw	44
  6162     0204  0020               	movlb	0	; select bank0
  6163     0205  00A0               	movwf	setupForFreefall@msg
  6164     0206                     l2537:
  6165                           
  6166                           ;ADXL345.c: 139:     memset(msg.data, 0, sizeof(msg.data));
  6167     0206  3021               	movlw	low (setupForFreefall@msg+1)
  6168     0207  00F0               	movwf	memset@dest
  6169     0208  3000               	movlw	high (setupForFreefall@msg+1)
  6170     0209  00F1               	movwf	memset@dest+1
  6171     020A  3000               	movlw	0
  6172     020B  00F2               	movwf	memset@c
  6173     020C  00F3               	movwf	memset@c+1
  6174     020D  3019               	movlw	25
  6175     020E  00F4               	movwf	memset@n
  6176     020F  3000               	movlw	0
  6177     0210  00F5               	movwf	memset@n+1
  6178     0211  318E  2699  3181   	fcall	_memset
  6179     0214                     l2539:
  6180                           
  6181                           ;ADXL345.c: 140:     msg.data[0] = 0x17;
  6182     0214  3017               	movlw	23
  6183     0215  0020               	movlb	0	; select bank0
  6184     0216  00A1               	movwf	setupForFreefall@msg+1
  6185     0217                     l2541:
  6186     0217  0022               	movlb	2	; select bank2
  6187     0218  120E               	bcf	14,4	;volatile
  6188     0219                     l2543:
  6189                           
  6190                           ;ADXL345.c: 142:     SPI1_BufferWrite(&msg, 2);
  6191     0219  3020               	movlw	low setupForFreefall@msg
  6192     021A  00F0               	movwf	SPI1_BufferWrite@bufferData
  6193     021B  3000               	movlw	high setupForFreefall@msg
  6194     021C  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6195     021D  3002               	movlw	2
  6196     021E  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6197     021F  3000               	movlw	0
  6198     0220  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6199     0221  318F  2721  3181   	fcall	_SPI1_BufferWrite
  6200     0224                     l2545:
  6201     0224  0022               	movlb	2	; select bank2
  6202     0225  160E               	bsf	14,4	;volatile
  6203     0226                     l2547:
  6204                           
  6205                           ;ADXL345.c: 146:     msg.registerAddr = 0x2E;
  6206     0226  302E               	movlw	46
  6207     0227  0020               	movlb	0	; select bank0
  6208     0228  00A0               	movwf	setupForFreefall@msg
  6209     0229                     l2549:
  6210                           
  6211                           ;ADXL345.c: 147:     memset(msg.data, 0, sizeof(msg.data));
  6212     0229  3021               	movlw	low (setupForFreefall@msg+1)
  6213     022A  00F0               	movwf	memset@dest
  6214     022B  3000               	movlw	high (setupForFreefall@msg+1)
  6215     022C  00F1               	movwf	memset@dest+1
  6216     022D  3000               	movlw	0
  6217     022E  00F2               	movwf	memset@c
  6218     022F  00F3               	movwf	memset@c+1
  6219     0230  3019               	movlw	25
  6220     0231  00F4               	movwf	memset@n
  6221     0232  3000               	movlw	0
  6222     0233  00F5               	movwf	memset@n+1
  6223     0234  318E  2699  3181   	fcall	_memset
  6224     0237                     l2551:
  6225                           
  6226                           ;ADXL345.c: 148:     msg.data[0] = 0x10;
  6227     0237  3010               	movlw	16
  6228     0238  0020               	movlb	0	; select bank0
  6229     0239  00A1               	movwf	setupForFreefall@msg+1
  6230     023A                     l2553:
  6231     023A  0022               	movlb	2	; select bank2
  6232     023B  120E               	bcf	14,4	;volatile
  6233     023C                     l2555:
  6234                           
  6235                           ;ADXL345.c: 150:     SPI1_BufferWrite(&msg, 2);
  6236     023C  3020               	movlw	low setupForFreefall@msg
  6237     023D  00F0               	movwf	SPI1_BufferWrite@bufferData
  6238     023E  3000               	movlw	high setupForFreefall@msg
  6239     023F  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6240     0240  3002               	movlw	2
  6241     0241  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6242     0242  3000               	movlw	0
  6243     0243  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6244     0244  318F  2721  3181   	fcall	_SPI1_BufferWrite
  6245     0247                     l2557:
  6246     0247  0022               	movlb	2	; select bank2
  6247     0248  160E               	bsf	14,4	;volatile
  6248     0249                     l2559:
  6249     0249  120E               	bcf	14,4	;volatile
  6250     024A                     l2561:
  6251                           
  6252                           ;ADXL345.c: 155:     SPI1_ByteExchange(0x30);
  6253     024A  3030               	movlw	48
  6254     024B  00F0               	movwf	SPI1_ByteExchange@byteData
  6255     024C  318E  265F  3181   	fcall	_SPI1_ByteExchange
  6256     024F                     l2563:
  6257     024F  0022               	movlb	2	; select bank2
  6258     0250  160E               	bsf	14,4	;volatile
  6259     0251                     l2565:
  6260                           
  6261                           ;ADXL345.c: 158:     SPI1_Close();
  6262     0251  318E  2616  3181   	fcall	_SPI1_Close
  6263     0254                     l520:
  6264     0254  0008               	return
  6265     0255                     __end_of_setupForFreefall:
  6266                           
  6267                           	psect	text22
  6268     0383                     __ptext22:	
  6269 ;; *************** function _orientation_Up *****************
  6270 ;; Defined at:
  6271 ;;		line 257 in file "ADXL345.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;		None
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;  msg            26    8[BANK0 ] struct Message
  6276 ;;  acc_data        6    0[BANK0 ] char [6]
  6277 ;;  g_deltaZ        2   39[BANK0 ] short 
  6278 ;;  g_deltaY        2   37[BANK0 ] short 
  6279 ;;  g_deltaX        2   35[BANK0 ] short 
  6280 ;;  g_magnitude     2    6[BANK0 ] int 
  6281 ;;  addr_val        1   34[BANK0 ] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      _Bool 
  6284 ;; Registers used:
  6285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Locals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Totals:         2      41       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;Total ram usage:       43 bytes
  6296 ;; Hardware stack levels used: 1
  6297 ;; Hardware stack levels required when called: 2
  6298 ;; This function calls:
  6299 ;;		_SPI1_BufferRead
  6300 ;;		_SPI1_BufferWrite
  6301 ;;		_SPI1_ByteExchange
  6302 ;;		_SPI1_Close
  6303 ;;		_SPI1_Open
  6304 ;;		___wmul
  6305 ;; This function is called by:
  6306 ;;		_MotionEventHandler
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310     0383                     _orientation_Up:	
  6311                           ;psect for function _orientation_Up
  6312                           
  6313     0383                     l2675:	
  6314                           ;incstack = 0
  6315                           ; Regs used in _orientation_Up: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6316                           
  6317                           
  6318                           ;ADXL345.c: 258:     while (!SPI1_Open(ADXL345)) {
  6319     0383  2B87               	goto	l2679
  6320     0384                     l2677:
  6321                           
  6322                           ;ADXL345.c: 259:         SPI1_Close();
  6323     0384  318E  2616  3183   	fcall	_SPI1_Close
  6324     0387                     l2679:
  6325                           
  6326                           ;ADXL345.c: 258:     while (!SPI1_Open(ADXL345)) {
  6327     0387  01F6               	clrf	SPI1_Open@spiConfigIndex
  6328     0388  3180  20C4  3183   	fcall	_SPI1_Open
  6329     038B  3A00               	xorlw	0
  6330     038C  1903               	skipnz
  6331     038D  2B8F               	goto	u971
  6332     038E  2B90               	goto	u970
  6333     038F                     u971:
  6334     038F  2B84               	goto	l2677
  6335     0390                     u970:
  6336     0390                     l2681:
  6337                           
  6338                           ;ADXL345.c: 261:     int8_t acc_data[6] = {0};
  6339     0390  3020               	movlw	low orientation_Up@acc_data
  6340     0391  0086               	movwf	6
  6341     0392  3000               	movlw	high orientation_Up@acc_data
  6342     0393  0087               	movwf	7
  6343     0394  3006               	movlw	6
  6344     0395  00FA               	movwf	??_orientation_Up
  6345     0396  3000               	movlw	0
  6346     0397                     u980:
  6347     0397  001E               	movwi fsr1++
  6348     0398  0BFA               	decfsz	??_orientation_Up,f
  6349     0399  2B97               	goto	u980
  6350     039A                     l2683:
  6351                           
  6352                           ;ADXL345.c: 262:     int16_t g_deltaX, g_deltaY, g_deltaZ;;ADXL345.c: 264:     struct Me
      +                          ssage msg;;ADXL345.c: 265:     msg.registerAddr = 0x31;
  6353     039A  3031               	movlw	49
  6354     039B  0020               	movlb	0	; select bank0
  6355     039C  00A8               	movwf	orientation_Up@msg
  6356     039D                     l2685:
  6357                           
  6358                           ;ADXL345.c: 266:     msg.data[0] = 0x0C;
  6359     039D  300C               	movlw	12
  6360     039E  00A9               	movwf	orientation_Up@msg+1
  6361     039F                     l2687:
  6362     039F  0022               	movlb	2	; select bank2
  6363     03A0  120E               	bcf	14,4	;volatile
  6364     03A1                     l2689:
  6365                           
  6366                           ;ADXL345.c: 268:     SPI1_BufferWrite(&msg, 2);
  6367     03A1  3028               	movlw	low orientation_Up@msg
  6368     03A2  00F0               	movwf	SPI1_BufferWrite@bufferData
  6369     03A3  3000               	movlw	high orientation_Up@msg
  6370     03A4  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6371     03A5  3002               	movlw	2
  6372     03A6  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6373     03A7  3000               	movlw	0
  6374     03A8  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6375     03A9  318F  2721  3183   	fcall	_SPI1_BufferWrite
  6376     03AC                     l2691:
  6377     03AC  0022               	movlb	2	; select bank2
  6378     03AD  160E               	bsf	14,4	;volatile
  6379     03AE                     l2693:
  6380                           
  6381                           ;ADXL345.c: 271:     _delay((unsigned long)((10)*(4000000/4000.0)));
  6382     03AE  300D               	movlw	13
  6383     03AF  00FA               	movwf	??_orientation_Up
  6384     03B0  30FC               	movlw	252
  6385     03B1                     u1617:
  6386     03B1  0B89               	decfsz	9,f
  6387     03B2  2BB1               	goto	u1617
  6388     03B3  0BFA               	decfsz	??_orientation_Up,f
  6389     03B4  2BB1               	goto	u1617
  6390     03B5                     l2695:
  6391     03B5  0022               	movlb	2	; select bank2
  6392     03B6  120E               	bcf	14,4	;volatile
  6393     03B7                     l2697:
  6394                           
  6395                           ;ADXL345.c: 275:     uint8_t addr_val = 0x32 | 0x80;
  6396     03B7  30B2               	movlw	178
  6397     03B8  0020               	movlb	0	; select bank0
  6398     03B9  00C2               	movwf	orientation_Up@addr_val
  6399     03BA                     l2699:
  6400                           
  6401                           ;ADXL345.c: 276:     addr_val = addr_val | 0x40;
  6402     03BA  0842               	movf	orientation_Up@addr_val,w
  6403     03BB  3840               	iorlw	64
  6404     03BC  00C2               	movwf	orientation_Up@addr_val
  6405     03BD                     l2701:
  6406                           
  6407                           ;ADXL345.c: 277:     SPI1_ByteExchange(addr_val);
  6408     03BD  0842               	movf	orientation_Up@addr_val,w
  6409     03BE  00F0               	movwf	SPI1_ByteExchange@byteData
  6410     03BF  318E  265F  3183   	fcall	_SPI1_ByteExchange
  6411     03C2                     l2703:
  6412                           
  6413                           ;ADXL345.c: 278:     SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  6414     03C2  3020               	movlw	(low (orientation_Up@acc_data| 0))& (0+255)
  6415     03C3  00F0               	movwf	SPI1_BufferRead@bufferData
  6416     03C4  3006               	movlw	6
  6417     03C5  00F1               	movwf	SPI1_BufferRead@bufferSize
  6418     03C6  3000               	movlw	0
  6419     03C7  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  6420     03C8  318F  2741  3183   	fcall	_SPI1_BufferRead
  6421     03CB                     l2705:
  6422     03CB  0022               	movlb	2	; select bank2
  6423     03CC  160E               	bsf	14,4	;volatile
  6424     03CD                     l2707:
  6425                           
  6426                           ;ADXL345.c: 280:     SPI1_Close();
  6427     03CD  318E  2616  3183   	fcall	_SPI1_Close
  6428     03D0                     l2709:
  6429                           
  6430                           ;ADXL345.c: 283:     g_deltaX = acc_data[1] - 0x40;
  6431     03D0  0020               	movlb	0	; select bank0
  6432     03D1  0821               	movf	orientation_Up@acc_data+1,w
  6433     03D2  00FA               	movwf	??_orientation_Up
  6434     03D3  01FB               	clrf	??_orientation_Up+1
  6435     03D4  1BFA               	btfsc	??_orientation_Up,7
  6436     03D5  03FB               	decf	??_orientation_Up+1,f
  6437     03D6  087A               	movf	??_orientation_Up,w
  6438     03D7  3EC0               	addlw	192
  6439     03D8  00C3               	movwf	orientation_Up@g_deltaX
  6440     03D9  30FF               	movlw	255
  6441     03DA  3D7B               	addwfc	??_orientation_Up+1,w
  6442     03DB  00C4               	movwf	orientation_Up@g_deltaX+1
  6443     03DC                     l2711:
  6444                           
  6445                           ;ADXL345.c: 284:     g_deltaY = acc_data[3];
  6446     03DC  0823               	movf	orientation_Up@acc_data+3,w
  6447     03DD  00C5               	movwf	orientation_Up@g_deltaY
  6448     03DE  01C6               	clrf	orientation_Up@g_deltaY+1
  6449     03DF  1BC5               	btfsc	orientation_Up@g_deltaY,7
  6450     03E0  03C6               	decf	orientation_Up@g_deltaY+1,f
  6451     03E1                     l2713:
  6452                           
  6453                           ;ADXL345.c: 285:     g_deltaZ = acc_data[5];
  6454     03E1  0825               	movf	orientation_Up@acc_data+5,w
  6455     03E2  00C7               	movwf	orientation_Up@g_deltaZ
  6456     03E3  01C8               	clrf	orientation_Up@g_deltaZ+1
  6457     03E4  1BC7               	btfsc	orientation_Up@g_deltaZ,7
  6458     03E5  03C8               	decf	orientation_Up@g_deltaZ+1,f
  6459     03E6                     l2715:
  6460                           
  6461                           ;ADXL345.c: 288:     g_deltaX *= g_deltaX;
  6462     03E6  0844               	movf	orientation_Up@g_deltaX+1,w
  6463     03E7  00F1               	movwf	___wmul@multiplier+1
  6464     03E8  0843               	movf	orientation_Up@g_deltaX,w
  6465     03E9  00F0               	movwf	___wmul@multiplier
  6466     03EA  0844               	movf	orientation_Up@g_deltaX+1,w
  6467     03EB  00F3               	movwf	___wmul@multiplicand+1
  6468     03EC  0843               	movf	orientation_Up@g_deltaX,w
  6469     03ED  00F2               	movwf	___wmul@multiplicand
  6470     03EE  318F  2702  3183   	fcall	___wmul
  6471     03F1  0871               	movf	?___wmul+1,w
  6472     03F2  0020               	movlb	0	; select bank0
  6473     03F3  00C4               	movwf	orientation_Up@g_deltaX+1
  6474     03F4  0870               	movf	?___wmul,w
  6475     03F5  00C3               	movwf	orientation_Up@g_deltaX
  6476     03F6                     l2717:
  6477                           
  6478                           ;ADXL345.c: 289:     g_deltaY *= g_deltaY;
  6479     03F6  0846               	movf	orientation_Up@g_deltaY+1,w
  6480     03F7  00F1               	movwf	___wmul@multiplier+1
  6481     03F8  0845               	movf	orientation_Up@g_deltaY,w
  6482     03F9  00F0               	movwf	___wmul@multiplier
  6483     03FA  0846               	movf	orientation_Up@g_deltaY+1,w
  6484     03FB  00F3               	movwf	___wmul@multiplicand+1
  6485     03FC  0845               	movf	orientation_Up@g_deltaY,w
  6486     03FD  00F2               	movwf	___wmul@multiplicand
  6487     03FE  318F  2702  3183   	fcall	___wmul
  6488     0401  0871               	movf	?___wmul+1,w
  6489     0402  0020               	movlb	0	; select bank0
  6490     0403  00C6               	movwf	orientation_Up@g_deltaY+1
  6491     0404  0870               	movf	?___wmul,w
  6492     0405  00C5               	movwf	orientation_Up@g_deltaY
  6493     0406                     l2719:
  6494                           
  6495                           ;ADXL345.c: 290:     g_deltaZ *= g_deltaZ;
  6496     0406  0848               	movf	orientation_Up@g_deltaZ+1,w
  6497     0407  00F1               	movwf	___wmul@multiplier+1
  6498     0408  0847               	movf	orientation_Up@g_deltaZ,w
  6499     0409  00F0               	movwf	___wmul@multiplier
  6500     040A  0848               	movf	orientation_Up@g_deltaZ+1,w
  6501     040B  00F3               	movwf	___wmul@multiplicand+1
  6502     040C  0847               	movf	orientation_Up@g_deltaZ,w
  6503     040D  00F2               	movwf	___wmul@multiplicand
  6504     040E  318F  2702  3183   	fcall	___wmul
  6505     0411  0871               	movf	?___wmul+1,w
  6506     0412  0020               	movlb	0	; select bank0
  6507     0413  00C8               	movwf	orientation_Up@g_deltaZ+1
  6508     0414  0870               	movf	?___wmul,w
  6509     0415  00C7               	movwf	orientation_Up@g_deltaZ
  6510     0416                     l2721:
  6511                           
  6512                           ;ADXL345.c: 291:     int g_magnitude = g_deltaX + g_deltaY + g_deltaZ;
  6513     0416  0845               	movf	orientation_Up@g_deltaY,w
  6514     0417  0743               	addwf	orientation_Up@g_deltaX,w
  6515     0418  00FA               	movwf	??_orientation_Up
  6516     0419  0846               	movf	orientation_Up@g_deltaY+1,w
  6517     041A  3D44               	addwfc	orientation_Up@g_deltaX+1,w
  6518     041B  00FB               	movwf	??_orientation_Up+1
  6519     041C  0847               	movf	orientation_Up@g_deltaZ,w
  6520     041D  077A               	addwf	??_orientation_Up,w
  6521     041E  00A6               	movwf	orientation_Up@g_magnitude
  6522     041F  0848               	movf	orientation_Up@g_deltaZ+1,w
  6523     0420  3D7B               	addwfc	??_orientation_Up+1,w
  6524     0421  00A7               	movwf	orientation_Up@g_magnitude+1
  6525     0422                     l2723:
  6526                           
  6527                           ;ADXL345.c: 292:     if (g_magnitude < acceleration_squared_threshold) {
  6528     0422  3004               	movlw	4
  6529     0423  0227               	subwf	orientation_Up@g_magnitude+1,w
  6530     0424  30B0               	movlw	176
  6531     0425  1903               	skipnz
  6532     0426  0226               	subwf	orientation_Up@g_magnitude,w
  6533     0427  1803               	skipnc
  6534     0428  2C2A               	goto	u991
  6535     0429  2C2B               	goto	u990
  6536     042A                     u991:
  6537     042A  2C2D               	goto	l2731
  6538     042B                     u990:
  6539     042B                     l2725:
  6540                           
  6541                           ;ADXL345.c: 293:         return 1;
  6542     042B  3001               	movlw	1
  6543     042C  2C2E               	goto	l589
  6544     042D                     l2731:
  6545                           
  6546                           ;ADXL345.c: 295:         return 0;
  6547     042D  3000               	movlw	0
  6548     042E                     l589:
  6549     042E  0008               	return
  6550     042F                     __end_of_orientation_Up:
  6551                           
  6552                           	psect	text23
  6553     0F41                     __ptext23:	
  6554 ;; *************** function _SPI1_BufferRead *****************
  6555 ;; Defined at:
  6556 ;;		line 143 in file "mcc_generated_files/spi/src/mssp.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  bufferData      1    0[COMMON] PTR void 
  6559 ;;		 -> calibrate@acc_data(6), orientation_Up@acc_data(6), 
  6560 ;;  bufferSize      2    1[COMMON] unsigned int 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  bufferInputS    2    3[COMMON] unsigned int 
  6563 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  6564 ;;		 -> calibrate@acc_data(6), orientation_Up@acc_data(6), 
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6574 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;Total ram usage:        6 bytes
  6579 ;; Hardware stack levels used: 1
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_orientation_Up
  6584 ;;		_calibrate
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588     0F41                     _SPI1_BufferRead:	
  6589                           ;psect for function _SPI1_BufferRead
  6590                           
  6591     0F41                     l2335:	
  6592                           ;incstack = 0
  6593                           ; Regs used in _SPI1_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  6594                           
  6595                           
  6596                           ;mcc_generated_files/spi/src/mssp.c: 143: void SPI1_BufferRead(void *bufferData, size_t 
      +                          bufferSize);mcc_generated_files/spi/src/mssp.c: 144: {;mcc_generated_files/spi/src/mssp.
      +                          c: 145:     uint8_t *bufferInput = bufferData;
  6597     0F41  0870               	movf	SPI1_BufferRead@bufferData,w
  6598     0F42  00F5               	movwf	SPI1_BufferRead@bufferInput
  6599                           
  6600                           ;mcc_generated_files/spi/src/mssp.c: 146:     size_t bufferInputSize = bufferSize;
  6601     0F43  0872               	movf	SPI1_BufferRead@bufferSize+1,w
  6602     0F44  00F4               	movwf	SPI1_BufferRead@bufferInputSize+1
  6603     0F45  0871               	movf	SPI1_BufferRead@bufferSize,w
  6604     0F46  00F3               	movwf	SPI1_BufferRead@bufferInputSize
  6605                           
  6606                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6607     0F47  2F5C               	goto	l2345
  6608     0F48                     l2337:
  6609                           
  6610                           ;mcc_generated_files/spi/src/mssp.c: 148:     {;mcc_generated_files/spi/src/mssp.c: 149:
      +                                   SSP1BUF = 0x00;
  6611     0F48  0024               	movlb	4	; select bank4
  6612     0F49  0191               	clrf	17	;volatile
  6613     0F4A                     l160:	
  6614                           ;mcc_generated_files/spi/src/mssp.c: 151:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          153:         }
  6615                           
  6616                           
  6617                           ;mcc_generated_files/spi/src/mssp.c: 150:         while (!PIR1bits.SSP1IF)
  6618     0F4A  0020               	movlb	0	; select bank0
  6619     0F4B  1D91               	btfss	17,3	;volatile
  6620     0F4C  2F4E               	goto	u811
  6621     0F4D  2F4F               	goto	u810
  6622     0F4E                     u811:
  6623     0F4E  2F4A               	goto	l160
  6624     0F4F                     u810:
  6625     0F4F                     l162:
  6626                           
  6627                           ;mcc_generated_files/spi/src/mssp.c: 154:         PIR1bits.SSP1IF = 0;
  6628     0F4F  1191               	bcf	17,3	;volatile
  6629     0F50                     l2339:
  6630                           
  6631                           ;mcc_generated_files/spi/src/mssp.c: 155:         *bufferInput = SSP1BUF;
  6632     0F50  0875               	movf	SPI1_BufferRead@bufferInput,w
  6633     0F51  0086               	movwf	6
  6634     0F52  0187               	clrf	7
  6635     0F53  0024               	movlb	4	; select bank4
  6636     0F54  0811               	movf	17,w	;volatile
  6637     0F55  0081               	movwf	1
  6638     0F56                     l2341:
  6639                           
  6640                           ;mcc_generated_files/spi/src/mssp.c: 156:         bufferInput++;
  6641     0F56  3001               	movlw	1
  6642     0F57  07F5               	addwf	SPI1_BufferRead@bufferInput,f
  6643     0F58                     l2343:
  6644                           
  6645                           ;mcc_generated_files/spi/src/mssp.c: 157:         bufferInputSize--;
  6646     0F58  3001               	movlw	1
  6647     0F59  02F3               	subwf	SPI1_BufferRead@bufferInputSize,f
  6648     0F5A  3000               	movlw	0
  6649     0F5B  3BF4               	subwfb	SPI1_BufferRead@bufferInputSize+1,f
  6650     0F5C                     l2345:
  6651                           
  6652                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6653     0F5C  0873               	movf	SPI1_BufferRead@bufferInputSize,w
  6654     0F5D  0474               	iorwf	SPI1_BufferRead@bufferInputSize+1,w
  6655     0F5E  1D03               	btfss	3,2
  6656     0F5F  2F61               	goto	u821
  6657     0F60  2F62               	goto	u820
  6658     0F61                     u821:
  6659     0F61  2F48               	goto	l2337
  6660     0F62                     u820:
  6661     0F62                     l164:
  6662     0F62  0008               	return
  6663     0F63                     __end_of_SPI1_BufferRead:
  6664                           
  6665                           	psect	text24
  6666     0EB0                     __ptext24:	
  6667 ;; *************** function _ADXL345_ClearInterrupt *****************
  6668 ;; Defined at:
  6669 ;;		line 100 in file "ADXL345.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  1    wreg      void 
  6676 ;; Registers used:
  6677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;Total ram usage:        0 bytes
  6688 ;; Hardware stack levels used: 1
  6689 ;; Hardware stack levels required when called: 2
  6690 ;; This function calls:
  6691 ;;		_SPI1_ByteExchange
  6692 ;;		_SPI1_Close
  6693 ;;		_SPI1_Open
  6694 ;; This function is called by:
  6695 ;;		_MotionEventHandler
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699     0EB0                     _ADXL345_ClearInterrupt:	
  6700                           ;psect for function _ADXL345_ClearInterrupt
  6701                           
  6702     0EB0                     l2501:	
  6703                           ;incstack = 0
  6704                           ; Regs used in _ADXL345_ClearInterrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6705                           
  6706                           
  6707                           ;ADXL345.c: 101:     while (!SPI1_Open(ADXL345)) {
  6708     0EB0  2EB4               	goto	l2505
  6709     0EB1                     l2503:
  6710                           
  6711                           ;ADXL345.c: 102:         SPI1_Close();
  6712     0EB1  318E  2616  318E   	fcall	_SPI1_Close
  6713     0EB4                     l2505:
  6714                           
  6715                           ;ADXL345.c: 101:     while (!SPI1_Open(ADXL345)) {
  6716     0EB4  01F6               	clrf	SPI1_Open@spiConfigIndex
  6717     0EB5  3180  20C4  318E   	fcall	_SPI1_Open
  6718     0EB8  3A00               	xorlw	0
  6719     0EB9  1903               	skipnz
  6720     0EBA  2EBC               	goto	u931
  6721     0EBB  2EBD               	goto	u930
  6722     0EBC                     u931:
  6723     0EBC  2EB1               	goto	l2503
  6724     0EBD                     u930:
  6725     0EBD                     l490:	
  6726                           ;ADXL345.c: 106:     do { LATCbits.LATC4 = 0; } while(0);
  6727                           
  6728     0EBD  0022               	movlb	2	; select bank2
  6729     0EBE  120E               	bcf	14,4	;volatile
  6730     0EBF                     l2507:
  6731                           
  6732                           ;ADXL345.c: 107:     SPI1_ByteExchange(0x30);
  6733     0EBF  3030               	movlw	48
  6734     0EC0  00F0               	movwf	SPI1_ByteExchange@byteData
  6735     0EC1  318E  265F  318E   	fcall	_SPI1_ByteExchange
  6736     0EC4                     l2509:
  6737     0EC4  0022               	movlb	2	; select bank2
  6738     0EC5  160E               	bsf	14,4	;volatile
  6739     0EC6                     l2511:
  6740                           
  6741                           ;ADXL345.c: 110:     SPI1_Close();
  6742     0EC6  318E  2616  318E   	fcall	_SPI1_Close
  6743     0EC9                     l494:
  6744     0EC9  0008               	return
  6745     0ECA                     __end_of_ADXL345_ClearInterrupt:
  6746                           
  6747                           	psect	text25
  6748     0E5F                     __ptext25:	
  6749 ;; *************** function _SPI1_ByteExchange *****************
  6750 ;; Defined at:
  6751 ;;		line 161 in file "mcc_generated_files/spi/src/mssp.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  byteData        1    0[COMMON] unsigned char 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      unsigned char 
  6758 ;; Registers used:
  6759 ;;		wreg
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used: 1
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_ADXL345_ClearInterrupt
  6775 ;;		_setupForFreefall
  6776 ;;		_setupForImpact
  6777 ;;		_setupForInactivity
  6778 ;;		_orientation_Up
  6779 ;;		_calibrate
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783     0E5F                     _SPI1_ByteExchange:	
  6784                           ;psect for function _SPI1_ByteExchange
  6785                           
  6786     0E5F                     l2347:	
  6787                           ;incstack = 0
  6788                           ; Regs used in _SPI1_ByteExchange: [wreg]
  6789                           
  6790                           
  6791                           ;mcc_generated_files/spi/src/mssp.c: 161: uint8_t SPI1_ByteExchange(uint8_t byteData);mc
      +                          c_generated_files/spi/src/mssp.c: 162: {;mcc_generated_files/spi/src/mssp.c: 163:     SS
      +                          P1BUF = byteData;
  6792     0E5F  0870               	movf	SPI1_ByteExchange@byteData,w
  6793     0E60  0024               	movlb	4	; select bank4
  6794     0E61  0091               	movwf	17	;volatile
  6795     0E62                     l167:	
  6796                           ;mcc_generated_files/spi/src/mssp.c: 165:     {;mcc_generated_files/spi/src/mssp.c: 167:
      +                               }
  6797                           
  6798                           
  6799                           ;mcc_generated_files/spi/src/mssp.c: 164:     while (!PIR1bits.SSP1IF)
  6800     0E62  0020               	movlb	0	; select bank0
  6801     0E63  1D91               	btfss	17,3	;volatile
  6802     0E64  2E66               	goto	u831
  6803     0E65  2E67               	goto	u830
  6804     0E66                     u831:
  6805     0E66  2E62               	goto	l167
  6806     0E67                     u830:
  6807     0E67                     l169:
  6808                           
  6809                           ;mcc_generated_files/spi/src/mssp.c: 168:     PIR1bits.SSP1IF = 0;
  6810     0E67  1191               	bcf	17,3	;volatile
  6811     0E68                     l2349:
  6812                           
  6813                           ;mcc_generated_files/spi/src/mssp.c: 169:     return SSP1BUF;;	Return value of _SPI1_Byt
      +                          eExchange is never used
  6814     0E68  0024               	movlb	4	; select bank4
  6815     0E69  0811               	movf	17,w	;volatile
  6816     0E6A                     l170:
  6817     0E6A  0008               	return
  6818     0E6B                     __end_of_SPI1_ByteExchange:
  6819                           
  6820                           	psect	text26
  6821     0004                     __ptext26:	
  6822 ;; *************** function _EEPROM_Read *****************
  6823 ;; Defined at:
  6824 ;;		line 81 in file "mcc_generated_files/nvm/src/nvm.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  address         2    0[COMMON] unsigned short 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      unsigned char 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;Total ram usage:        2 bytes
  6843 ;; Hardware stack levels used: 1
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_main
  6848 ;;		_EEPROM_ByteRead
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852     0004                     _EEPROM_Read:	
  6853                           ;psect for function _EEPROM_Read
  6854                           
  6855     0004                     l2747:	
  6856                           ;incstack = 0
  6857                           ; Regs used in _EEPROM_Read: [wreg+status,2]
  6858                           
  6859                           
  6860                           ;mcc_generated_files/nvm/src/nvm.c: 81: eeprom_data_t EEPROM_Read(eeprom_address_t addre
      +                          ss);mcc_generated_files/nvm/src/nvm.c: 82: {;mcc_generated_files/nvm/src/nvm.c: 84:     
      +                          EECON1bits.CFGS = 0;
  6861     0004  0023               	movlb	3	; select bank3
  6862     0005  1315               	bcf	21,6	;volsfr
  6863                           
  6864                           ;mcc_generated_files/nvm/src/nvm.c: 85:     EECON1bits.EEPGD = 0;
  6865     0006  1395               	bcf	21,7	;volsfr
  6866     0007                     l2749:
  6867                           
  6868                           ;mcc_generated_files/nvm/src/nvm.c: 88:     EEADRH = (uint8_t) (address >> 8);
  6869     0007  0871               	movf	EEPROM_Read@address+1,w
  6870     0008  0092               	movwf	18	;volatile
  6871     0009                     l2751:
  6872                           
  6873                           ;mcc_generated_files/nvm/src/nvm.c: 89:     EEADRL = (uint8_t) address;
  6874     0009  0870               	movf	EEPROM_Read@address,w
  6875     000A  0091               	movwf	17	;volatile
  6876     000B                     l2753:
  6877                           
  6878                           ;mcc_generated_files/nvm/src/nvm.c: 92:     EECON1bits.RD = 1;
  6879     000B  1415               	bsf	21,0	;volsfr
  6880     000C                     l2755:
  6881                           
  6882                           ;mcc_generated_files/nvm/src/nvm.c: 93:     __nop();
  6883     000C  0000               	nop
  6884     000D                     l2757:
  6885                           
  6886                           ;mcc_generated_files/nvm/src/nvm.c: 94:     __nop();
  6887     000D  0000               	nop
  6888     000E                     l2759:
  6889                           
  6890                           ;mcc_generated_files/nvm/src/nvm.c: 96:     return EEDATL;
  6891     000E  0023               	movlb	3	; select bank3
  6892     000F  0813               	movf	19,w	;volatile
  6893     0010                     l76:
  6894     0010  0008               	return
  6895     0011                     __end_of_EEPROM_Read:
  6896                           
  6897                           	psect	text27
  6898     0FD3                     __ptext27:	
  6899 ;; *************** function _ADXL345_validation *****************
  6900 ;; Defined at:
  6901 ;;		line 57 in file "ADXL345.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;		None
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;  temp            2   10[COMMON] unsigned char [2]
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  1    wreg      _Bool 
  6908 ;; Registers used:
  6909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;Total ram usage:        2 bytes
  6920 ;; Hardware stack levels used: 1
  6921 ;; Hardware stack levels required when called: 2
  6922 ;; This function calls:
  6923 ;;		_SPI1_BufferExchange
  6924 ;;		_SPI1_Close
  6925 ;;		_SPI1_Open
  6926 ;; This function is called by:
  6927 ;;		_main
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931     0FD3                     _ADXL345_validation:	
  6932                           ;psect for function _ADXL345_validation
  6933                           
  6934     0FD3                     l2777:	
  6935                           ;incstack = 0
  6936                           ; Regs used in _ADXL345_validation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6937                           
  6938                           
  6939                           ;ADXL345.c: 58:     if (SPI1_Open(ADXL345)) {
  6940     0FD3  01F6               	clrf	SPI1_Open@spiConfigIndex
  6941     0FD4  3180  20C4  318F   	fcall	_SPI1_Open
  6942     0FD7  3A00               	xorlw	0
  6943     0FD8  1903               	skipnz
  6944     0FD9  2FDB               	goto	u1021
  6945     0FDA  2FDC               	goto	u1020
  6946     0FDB                     u1021:
  6947     0FDB  2FF9               	goto	l465
  6948     0FDC                     u1020:
  6949     0FDC                     l457:	
  6950                           ;ADXL345.c: 59:         do { LATCbits.LATC4 = 0; } while(0);
  6951                           
  6952     0FDC  0022               	movlb	2	; select bank2
  6953     0FDD  120E               	bcf	14,4	;volatile
  6954     0FDE                     l2779:
  6955                           
  6956                           ;ADXL345.c: 60:         uint8_t temp[2] = {0x00 | 0x80, 0x00};
  6957     0FDE  0020               	movlb	0	; select bank0
  6958     0FDF  086A               	movf	ADXL345_validation@F2683+1,w
  6959     0FE0  00FB               	movwf	ADXL345_validation@temp+1
  6960     0FE1  0869               	movf	ADXL345_validation@F2683,w
  6961     0FE2  00FA               	movwf	ADXL345_validation@temp
  6962     0FE3                     l2781:
  6963                           
  6964                           ;ADXL345.c: 61:         SPI1_BufferExchange(&temp, sizeof(temp));
  6965     0FE3  307A               	movlw	(low (ADXL345_validation@temp| 0))& (0+255)
  6966     0FE4  00F0               	movwf	SPI1_BufferExchange@bufferData
  6967     0FE5  3002               	movlw	2
  6968     0FE6  00F1               	movwf	SPI1_BufferExchange@bufferSize
  6969     0FE7  3000               	movlw	0
  6970     0FE8  00F2               	movwf	SPI1_BufferExchange@bufferSize+1
  6971     0FE9  318F  27AD  318F   	fcall	_SPI1_BufferExchange
  6972     0FEC                     l2783:
  6973                           
  6974                           ;ADXL345.c: 62:         if (temp[1] == 0xE5) {
  6975     0FEC  30E5               	movlw	229
  6976     0FED  067B               	xorwf	ADXL345_validation@temp+1,w
  6977     0FEE  1D03               	btfss	3,2
  6978     0FEF  2FF1               	goto	u1031
  6979     0FF0  2FF2               	goto	u1030
  6980     0FF1                     u1031:
  6981     0FF1  2FF9               	goto	l465
  6982     0FF2                     u1030:
  6983     0FF2                     l462:	
  6984                           ;ADXL345.c: 63:             do { LATCbits.LATC4 = 1; } while(0);
  6985                           
  6986     0FF2  0022               	movlb	2	; select bank2
  6987     0FF3  160E               	bsf	14,4	;volatile
  6988     0FF4                     l2785:
  6989                           
  6990                           ;ADXL345.c: 64:             SPI1_Close();
  6991     0FF4  318E  2616  318F   	fcall	_SPI1_Close
  6992     0FF7                     l2787:
  6993                           
  6994                           ;ADXL345.c: 65:             return 1;
  6995     0FF7  3001               	movlw	1
  6996     0FF8  2FFF               	goto	l464
  6997     0FF9                     l465:	
  6998                           ;ADXL345.c: 68:     do { LATCbits.LATC4 = 1; } while(0);
  6999                           
  7000     0FF9  0022               	movlb	2	; select bank2
  7001     0FFA  160E               	bsf	14,4	;volatile
  7002     0FFB                     l2791:
  7003                           
  7004                           ;ADXL345.c: 69:     SPI1_Close();
  7005     0FFB  318E  2616  318F   	fcall	_SPI1_Close
  7006     0FFE                     l2793:
  7007                           
  7008                           ;ADXL345.c: 70:     return 0;
  7009     0FFE  3000               	movlw	0
  7010     0FFF                     l464:
  7011     0FFF  0008               	return
  7012     1000                     __end_of_ADXL345_validation:
  7013                           
  7014                           	psect	text28
  7015     0FAD                     __ptext28:	
  7016 ;; *************** function _SPI1_BufferExchange *****************
  7017 ;; Defined at:
  7018 ;;		line 108 in file "mcc_generated_files/spi/src/mssp.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  bufferData      1    0[COMMON] PTR void 
  7021 ;;		 -> ADXL345_validation@temp(2), 
  7022 ;;  bufferSize      2    1[COMMON] unsigned int 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  bufferInputS    2    3[COMMON] unsigned int 
  7025 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  7026 ;;		 -> ADXL345_validation@temp(2), 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7036 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;Total ram usage:        6 bytes
  7041 ;; Hardware stack levels used: 1
  7042 ;; This function calls:
  7043 ;;		Nothing
  7044 ;; This function is called by:
  7045 ;;		_ADXL345_validation
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049     0FAD                     _SPI1_BufferExchange:	
  7050                           ;psect for function _SPI1_BufferExchange
  7051                           
  7052     0FAD                     l2421:	
  7053                           ;incstack = 0
  7054                           ; Regs used in _SPI1_BufferExchange: [wreg+fsr1l+fsr1h+status,2+status,0]
  7055                           
  7056                           
  7057                           ;mcc_generated_files/spi/src/mssp.c: 108: void SPI1_BufferExchange(void *bufferData, siz
      +                          e_t bufferSize);mcc_generated_files/spi/src/mssp.c: 109: {;mcc_generated_files/spi/src/m
      +                          ssp.c: 110:     uint8_t *bufferInput = bufferData;
  7058     0FAD  0870               	movf	SPI1_BufferExchange@bufferData,w
  7059     0FAE  00F5               	movwf	SPI1_BufferExchange@bufferInput
  7060                           
  7061                           ;mcc_generated_files/spi/src/mssp.c: 111:     size_t bufferInputSize = bufferSize;
  7062     0FAF  0872               	movf	SPI1_BufferExchange@bufferSize+1,w
  7063     0FB0  00F4               	movwf	SPI1_BufferExchange@bufferInputSize+1
  7064     0FB1  0871               	movf	SPI1_BufferExchange@bufferSize,w
  7065     0FB2  00F3               	movwf	SPI1_BufferExchange@bufferInputSize
  7066                           
  7067                           ;mcc_generated_files/spi/src/mssp.c: 112:     while (0U != bufferInputSize)
  7068     0FB3  2FCC               	goto	l2431
  7069     0FB4                     l2423:
  7070                           
  7071                           ;mcc_generated_files/spi/src/mssp.c: 113:     {;mcc_generated_files/spi/src/mssp.c: 114:
      +                                   SSP1BUF = *bufferInput;
  7072     0FB4  0875               	movf	SPI1_BufferExchange@bufferInput,w
  7073     0FB5  0086               	movwf	6
  7074     0FB6  0187               	clrf	7
  7075     0FB7  0801               	movf	1,w
  7076     0FB8  0024               	movlb	4	; select bank4
  7077     0FB9  0091               	movwf	17	;volatile
  7078     0FBA                     l142:	
  7079                           ;mcc_generated_files/spi/src/mssp.c: 116:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          118:         }
  7080                           
  7081                           
  7082                           ;mcc_generated_files/spi/src/mssp.c: 115:         while (!PIR1bits.SSP1IF)
  7083     0FBA  0020               	movlb	0	; select bank0
  7084     0FBB  1D91               	btfss	17,3	;volatile
  7085     0FBC  2FBE               	goto	u891
  7086     0FBD  2FBF               	goto	u890
  7087     0FBE                     u891:
  7088     0FBE  2FBA               	goto	l142
  7089     0FBF                     u890:
  7090     0FBF                     l144:
  7091                           
  7092                           ;mcc_generated_files/spi/src/mssp.c: 119:         PIR1bits.SSP1IF = 0;
  7093     0FBF  1191               	bcf	17,3	;volatile
  7094     0FC0                     l2425:
  7095                           
  7096                           ;mcc_generated_files/spi/src/mssp.c: 120:         *bufferInput = SSP1BUF;
  7097     0FC0  0875               	movf	SPI1_BufferExchange@bufferInput,w
  7098     0FC1  0086               	movwf	6
  7099     0FC2  0187               	clrf	7
  7100     0FC3  0024               	movlb	4	; select bank4
  7101     0FC4  0811               	movf	17,w	;volatile
  7102     0FC5  0081               	movwf	1
  7103     0FC6                     l2427:
  7104                           
  7105                           ;mcc_generated_files/spi/src/mssp.c: 121:         bufferInput++;
  7106     0FC6  3001               	movlw	1
  7107     0FC7  07F5               	addwf	SPI1_BufferExchange@bufferInput,f
  7108     0FC8                     l2429:
  7109                           
  7110                           ;mcc_generated_files/spi/src/mssp.c: 122:         bufferInputSize--;
  7111     0FC8  3001               	movlw	1
  7112     0FC9  02F3               	subwf	SPI1_BufferExchange@bufferInputSize,f
  7113     0FCA  3000               	movlw	0
  7114     0FCB  3BF4               	subwfb	SPI1_BufferExchange@bufferInputSize+1,f
  7115     0FCC                     l2431:
  7116                           
  7117                           ;mcc_generated_files/spi/src/mssp.c: 112:     while (0U != bufferInputSize)
  7118     0FCC  0873               	movf	SPI1_BufferExchange@bufferInputSize,w
  7119     0FCD  0474               	iorwf	SPI1_BufferExchange@bufferInputSize+1,w
  7120     0FCE  1D03               	btfss	3,2
  7121     0FCF  2FD1               	goto	u901
  7122     0FD0  2FD2               	goto	u900
  7123     0FD1                     u901:
  7124     0FD1  2FB4               	goto	l2423
  7125     0FD2                     u900:
  7126     0FD2                     l146:
  7127     0FD2  0008               	return
  7128     0FD3                     __end_of_SPI1_BufferExchange:
  7129                           
  7130                           	psect	text29
  7131     0060                     __ptext29:	
  7132 ;; *************** function _ADXL345_init *****************
  7133 ;; Defined at:
  7134 ;;		line 33 in file "ADXL345.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;		None
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  msg            26    0[BANK0 ] struct Message
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      _Bool 
  7141 ;; Registers used:
  7142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;Total ram usage:       26 bytes
  7153 ;; Hardware stack levels used: 1
  7154 ;; Hardware stack levels required when called: 2
  7155 ;; This function calls:
  7156 ;;		_SPI1_BufferWrite
  7157 ;;		_SPI1_Close
  7158 ;;		_SPI1_Open
  7159 ;;		_memcpy
  7160 ;;		_memset
  7161 ;; This function is called by:
  7162 ;;		_main
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166     0060                     _ADXL345_init:	
  7167                           ;psect for function _ADXL345_init
  7168                           
  7169     0060                     l2797:	
  7170                           ;incstack = 0
  7171                           ; Regs used in _ADXL345_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7172                           
  7173                           
  7174                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  7175     0060  2864               	goto	l2801
  7176     0061                     l2799:
  7177                           
  7178                           ;ADXL345.c: 35:         SPI1_Close();
  7179     0061  318E  2616  3180   	fcall	_SPI1_Close
  7180     0064                     l2801:
  7181                           
  7182                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  7183     0064  01F6               	clrf	SPI1_Open@spiConfigIndex
  7184     0065  3180  20C4  3180   	fcall	_SPI1_Open
  7185     0068  3A00               	xorlw	0
  7186     0069  1903               	skipnz
  7187     006A  286C               	goto	u1041
  7188     006B  286D               	goto	u1040
  7189     006C                     u1041:
  7190     006C  2861               	goto	l2799
  7191     006D                     u1040:
  7192     006D                     l444:
  7193                           
  7194                           ;ADXL345.c: 38:     struct Message msg;;ADXL345.c: 39:     msg.registerAddr = 0x24 | 0x4
      +                          0;
  7195     006D  3064               	movlw	100
  7196     006E  0020               	movlb	0	; select bank0
  7197     006F  00A0               	movwf	ADXL345_init@msg
  7198     0070                     l2803:
  7199                           
  7200                           ;ADXL345.c: 40:     memset(msg.data, 0, sizeof(msg.data));
  7201     0070  3021               	movlw	low (ADXL345_init@msg+1)
  7202     0071  00F0               	movwf	memset@dest
  7203     0072  3000               	movlw	high (ADXL345_init@msg+1)
  7204     0073  00F1               	movwf	memset@dest+1
  7205     0074  3000               	movlw	0
  7206     0075  00F2               	movwf	memset@c
  7207     0076  00F3               	movwf	memset@c+1
  7208     0077  3019               	movlw	25
  7209     0078  00F4               	movwf	memset@n
  7210     0079  3000               	movlw	0
  7211     007A  00F5               	movwf	memset@n+1
  7212     007B  318E  2699  3180   	fcall	_memset
  7213     007E                     l2805:
  7214                           
  7215                           ;ADXL345.c: 41:     memcpy(msg.data, ADXL345_init_settings, sizeof(ADXL345_init_settings
      +                          ));
  7216     007E  3021               	movlw	low (ADXL345_init@msg+1)
  7217     007F  00F0               	movwf	memcpy@d1
  7218     0080  3000               	movlw	high (ADXL345_init@msg+1)
  7219     0081  00F1               	movwf	memcpy@d1+1
  7220     0082  3039               	movlw	low (_ADXL345_init_settings| (0+32768))
  7221     0083  00F2               	movwf	memcpy@s1
  7222     0084  3090               	movlw	high (_ADXL345_init_settings| (0+32768))
  7223     0085  00F3               	movwf	memcpy@s1+1
  7224     0086  300C               	movlw	12
  7225     0087  00F4               	movwf	memcpy@n
  7226     0088  3000               	movlw	0
  7227     0089  00F5               	movwf	memcpy@n+1
  7228     008A  318F  2763  3180   	fcall	_memcpy
  7229     008D                     l2807:
  7230     008D  0022               	movlb	2	; select bank2
  7231     008E  120E               	bcf	14,4	;volatile
  7232     008F                     l2809:
  7233                           
  7234                           ;ADXL345.c: 43:     SPI1_BufferWrite(&msg, sizeof(ADXL345_init_settings) + 1);
  7235     008F  3020               	movlw	low ADXL345_init@msg
  7236     0090  00F0               	movwf	SPI1_BufferWrite@bufferData
  7237     0091  3000               	movlw	high ADXL345_init@msg
  7238     0092  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  7239     0093  300D               	movlw	13
  7240     0094  00F2               	movwf	SPI1_BufferWrite@bufferSize
  7241     0095  3000               	movlw	0
  7242     0096  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  7243     0097  318F  2721  3180   	fcall	_SPI1_BufferWrite
  7244     009A                     l2811:
  7245     009A  0022               	movlb	2	; select bank2
  7246     009B  160E               	bsf	14,4	;volatile
  7247     009C                     l2813:
  7248                           
  7249                           ;ADXL345.c: 46:     msg.registerAddr = 0x31;
  7250     009C  3031               	movlw	49
  7251     009D  0020               	movlb	0	; select bank0
  7252     009E  00A0               	movwf	ADXL345_init@msg
  7253     009F                     l2815:
  7254                           
  7255                           ;ADXL345.c: 47:     memset(msg.data, 0, sizeof(msg.data));
  7256     009F  3021               	movlw	low (ADXL345_init@msg+1)
  7257     00A0  00F0               	movwf	memset@dest
  7258     00A1  3000               	movlw	high (ADXL345_init@msg+1)
  7259     00A2  00F1               	movwf	memset@dest+1
  7260     00A3  3000               	movlw	0
  7261     00A4  00F2               	movwf	memset@c
  7262     00A5  00F3               	movwf	memset@c+1
  7263     00A6  3019               	movlw	25
  7264     00A7  00F4               	movwf	memset@n
  7265     00A8  3000               	movlw	0
  7266     00A9  00F5               	movwf	memset@n+1
  7267     00AA  318E  2699  3180   	fcall	_memset
  7268     00AD                     l2817:
  7269                           
  7270                           ;ADXL345.c: 48:     msg.data[0] = 0x0B;
  7271     00AD  300B               	movlw	11
  7272     00AE  0020               	movlb	0	; select bank0
  7273     00AF  00A1               	movwf	ADXL345_init@msg+1
  7274     00B0                     l2819:
  7275     00B0  0022               	movlb	2	; select bank2
  7276     00B1  120E               	bcf	14,4	;volatile
  7277     00B2                     l2821:
  7278                           
  7279                           ;ADXL345.c: 50:     SPI1_BufferWrite(&msg, 2);
  7280     00B2  3020               	movlw	low ADXL345_init@msg
  7281     00B3  00F0               	movwf	SPI1_BufferWrite@bufferData
  7282     00B4  3000               	movlw	high ADXL345_init@msg
  7283     00B5  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  7284     00B6  3002               	movlw	2
  7285     00B7  00F2               	movwf	SPI1_BufferWrite@bufferSize
  7286     00B8  3000               	movlw	0
  7287     00B9  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  7288     00BA  318F  2721  3180   	fcall	_SPI1_BufferWrite
  7289     00BD                     l2823:
  7290     00BD  0022               	movlb	2	; select bank2
  7291     00BE  160E               	bsf	14,4	;volatile
  7292     00BF                     l2825:
  7293                           
  7294                           ;ADXL345.c: 53:     SPI1_Close();
  7295     00BF  318E  2616  3180   	fcall	_SPI1_Close
  7296     00C2                     l2827:
  7297                           
  7298                           ;ADXL345.c: 54:     return 1;
  7299     00C2  3001               	movlw	1
  7300     00C3                     l453:
  7301     00C3  0008               	return
  7302     00C4                     __end_of_ADXL345_init:
  7303                           
  7304                           	psect	text30
  7305     0E99                     __ptext30:	
  7306 ;; *************** function _memset *****************
  7307 ;; Defined at:
  7308 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memset.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  dest            2    0[COMMON] PTR void 
  7311 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7312 ;;  c               2    2[COMMON] int 
  7313 ;;  n               2    4[COMMON] unsigned int 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  p               1    6[COMMON] PTR unsigned char 
  7316 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  2    0[COMMON] PTR void 
  7319 ;; Registers used:
  7320 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7326 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;Total ram usage:        7 bytes
  7331 ;; Hardware stack levels used: 1
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_ADXL345_init
  7336 ;;		_setupForFreefall
  7337 ;;		_setupForImpact
  7338 ;;		_setupForInactivity
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342     0E99                     _memset:	
  7343                           ;psect for function _memset
  7344                           
  7345     0E99                     l2363:	
  7346                           ;incstack = 0
  7347                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7348                           
  7349     0E99  0870               	movf	memset@dest,w
  7350     0E9A  00F6               	movwf	memset@p
  7351     0E9B  2EA3               	goto	l2369
  7352     0E9C                     l2365:
  7353     0E9C  0876               	movf	memset@p,w
  7354     0E9D  0086               	movwf	6
  7355     0E9E  0187               	clrf	7
  7356     0E9F  0872               	movf	memset@c,w
  7357     0EA0  0081               	movwf	1
  7358     0EA1                     l2367:
  7359     0EA1  3001               	movlw	1
  7360     0EA2  07F6               	addwf	memset@p,f
  7361     0EA3                     l2369:
  7362     0EA3  3001               	movlw	1
  7363     0EA4  02F4               	subwf	memset@n,f
  7364     0EA5  3000               	movlw	0
  7365     0EA6  3BF5               	subwfb	memset@n+1,f
  7366     0EA7  0A74               	incf	memset@n,w
  7367     0EA8  1D03               	skipz
  7368     0EA9  2EAE               	goto	u871
  7369     0EAA  0A75               	incf	memset@n+1,w
  7370     0EAB  1D03               	btfss	3,2
  7371     0EAC  2EAE               	goto	u871
  7372     0EAD  2EAF               	goto	u870
  7373     0EAE                     u871:
  7374     0EAE  2E9C               	goto	l2365
  7375     0EAF                     u870:
  7376     0EAF                     l1321:
  7377     0EAF  0008               	return
  7378     0EB0                     __end_of_memset:
  7379                           
  7380                           	psect	text31
  7381     0F63                     __ptext31:	
  7382 ;; *************** function _memcpy *****************
  7383 ;; Defined at:
  7384 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memcpy.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  d1              2    0[COMMON] PTR void 
  7387 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7388 ;;  s1              2    2[COMMON] PTR const void 
  7389 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7390 ;;  n               2    4[COMMON] unsigned int 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  s               2    6[COMMON] PTR const unsigned char 
  7393 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7394 ;;  d               1    9[COMMON] PTR unsigned char 
  7395 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7396 ;;  tmp             1    8[COMMON] unsigned char 
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  2    0[COMMON] PTR void 
  7399 ;; Registers used:
  7400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7406 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;Total ram usage:       10 bytes
  7411 ;; Hardware stack levels used: 1
  7412 ;; This function calls:
  7413 ;;		Nothing
  7414 ;; This function is called by:
  7415 ;;		_ADXL345_init
  7416 ;;		_setupForFreefall
  7417 ;;		_setupForImpact
  7418 ;;		_setupForInactivity
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422     0F63                     _memcpy:	
  7423                           ;psect for function _memcpy
  7424                           
  7425     0F63                     l2371:	
  7426                           ;incstack = 0
  7427                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7428                           
  7429     0F63  0873               	movf	memcpy@s1+1,w
  7430     0F64  00F7               	movwf	memcpy@s+1
  7431     0F65  0872               	movf	memcpy@s1,w
  7432     0F66  00F6               	movwf	memcpy@s
  7433     0F67                     l2373:
  7434     0F67  0870               	movf	memcpy@d1,w
  7435     0F68  00F9               	movwf	memcpy@d
  7436     0F69  2F7B               	goto	l2383
  7437     0F6A                     l2375:
  7438     0F6A  0876               	movf	memcpy@s,w
  7439     0F6B  0084               	movwf	4
  7440     0F6C  0877               	movf	memcpy@s+1,w
  7441     0F6D  0085               	movwf	5
  7442     0F6E  0800               	movf	0,w	;code access
  7443     0F6F  00F8               	movwf	memcpy@tmp
  7444     0F70                     l2377:
  7445     0F70  3001               	movlw	1
  7446     0F71  07F6               	addwf	memcpy@s,f
  7447     0F72  3000               	movlw	0
  7448     0F73  3DF7               	addwfc	memcpy@s+1,f
  7449     0F74                     l2379:
  7450     0F74  0879               	movf	memcpy@d,w
  7451     0F75  0086               	movwf	6
  7452     0F76  0187               	clrf	7
  7453     0F77  0878               	movf	memcpy@tmp,w
  7454     0F78  0081               	movwf	1
  7455     0F79                     l2381:
  7456     0F79  3001               	movlw	1
  7457     0F7A  07F9               	addwf	memcpy@d,f
  7458     0F7B                     l2383:
  7459     0F7B  3001               	movlw	1
  7460     0F7C  02F4               	subwf	memcpy@n,f
  7461     0F7D  3000               	movlw	0
  7462     0F7E  3BF5               	subwfb	memcpy@n+1,f
  7463     0F7F  0A74               	incf	memcpy@n,w
  7464     0F80  1D03               	skipz
  7465     0F81  2F86               	goto	u881
  7466     0F82  0A75               	incf	memcpy@n+1,w
  7467     0F83  1D03               	btfss	3,2
  7468     0F84  2F86               	goto	u881
  7469     0F85  2F87               	goto	u880
  7470     0F86                     u881:
  7471     0F86  2F6A               	goto	l2375
  7472     0F87                     u880:
  7473     0F87                     l1315:
  7474     0F87  0008               	return
  7475     0F88                     __end_of_memcpy:
  7476                           
  7477                           	psect	text32
  7478     00C4                     __ptext32:	
  7479 ;; *************** function _SPI1_Open *****************
  7480 ;; Defined at:
  7481 ;;		line 82 in file "mcc_generated_files/spi/src/mssp.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  spiConfigInd    1    6[COMMON] unsigned char 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  returnValue     1    9[COMMON] _Bool 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      _Bool 
  7488 ;; Registers used:
  7489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7495 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;Total ram usage:        4 bytes
  7500 ;; Hardware stack levels used: 1
  7501 ;; Hardware stack levels required when called: 1
  7502 ;; This function calls:
  7503 ;;		___wmul
  7504 ;; This function is called by:
  7505 ;;		_ADXL345_init
  7506 ;;		_ADXL345_validation
  7507 ;;		_saveOffsets
  7508 ;;		_ADXL345_ClearInterrupt
  7509 ;;		_setupForFreefall
  7510 ;;		_setupForImpact
  7511 ;;		_setupForInactivity
  7512 ;;		_orientation_Up
  7513 ;;		_calibrate
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517     00C4                     _SPI1_Open:	
  7518                           ;psect for function _SPI1_Open
  7519                           
  7520     00C4                     l2305:	
  7521                           ;incstack = 0
  7522                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7523                           
  7524     00C4                     l2307:
  7525                           
  7526                           ;mcc_generated_files/spi/src/mssp.c: 85:     if (SSP1CON1bits.SSPEN == 0)
  7527     00C4  0024               	movlb	4	; select bank4
  7528     00C5  1A95               	btfsc	21,5	;volatile
  7529     00C6  28C8               	goto	u781
  7530     00C7  28C9               	goto	u780
  7531     00C8                     u781:
  7532     00C8  292D               	goto	l2315
  7533     00C9                     u780:
  7534     00C9                     l2309:
  7535                           
  7536                           ;mcc_generated_files/spi/src/mssp.c: 86:     {;mcc_generated_files/spi/src/mssp.c: 87:  
      +                                 SSP1STAT = spi1_configuration[spiConfigIndex].stat;
  7537     00C9  0876               	movf	SPI1_Open@spiConfigIndex,w
  7538     00CA  00F7               	movwf	??_SPI1_Open
  7539     00CB  01F8               	clrf	??_SPI1_Open+1
  7540     00CC  0877               	movf	??_SPI1_Open,w
  7541     00CD  00F0               	movwf	___wmul@multiplier
  7542     00CE  0878               	movf	??_SPI1_Open+1,w
  7543     00CF  00F1               	movwf	___wmul@multiplier+1
  7544     00D0  3005               	movlw	5
  7545     00D1  00F2               	movwf	___wmul@multiplicand
  7546     00D2  3000               	movlw	0
  7547     00D3  00F3               	movwf	___wmul@multiplicand+1
  7548     00D4  318F  2702  3180   	fcall	___wmul
  7549     00D7  301C               	movlw	low _spi1_configuration
  7550     00D8  0770               	addwf	?___wmul,w
  7551     00D9  0084               	movwf	4
  7552     00DA  3010               	movlw	high _spi1_configuration
  7553     00DB  3D71               	addwfc	?___wmul+1,w
  7554     00DC  3880               	iorlw	128
  7555     00DD  0085               	movwf	5
  7556     00DE  0800               	movf	0,w	;code access
  7557     00DF  0024               	movlb	4	; select bank4
  7558     00E0  0094               	movwf	20	;volatile
  7559                           
  7560                           ;mcc_generated_files/spi/src/mssp.c: 88:         SSP1CON1 = spi1_configuration[spiConfig
      +                          Index].con1;
  7561     00E1  0876               	movf	SPI1_Open@spiConfigIndex,w
  7562     00E2  00F7               	movwf	??_SPI1_Open
  7563     00E3  01F8               	clrf	??_SPI1_Open+1
  7564     00E4  0877               	movf	??_SPI1_Open,w
  7565     00E5  00F0               	movwf	___wmul@multiplier
  7566     00E6  0878               	movf	??_SPI1_Open+1,w
  7567     00E7  00F1               	movwf	___wmul@multiplier+1
  7568     00E8  3005               	movlw	5
  7569     00E9  00F2               	movwf	___wmul@multiplicand
  7570     00EA  3000               	movlw	0
  7571     00EB  00F3               	movwf	___wmul@multiplicand+1
  7572     00EC  318F  2702  3180   	fcall	___wmul
  7573     00EF  301D               	movlw	low (_spi1_configuration+1)
  7574     00F0  0770               	addwf	?___wmul,w
  7575     00F1  0084               	movwf	4
  7576     00F2  3010               	movlw	high (_spi1_configuration+1)
  7577     00F3  3D71               	addwfc	?___wmul+1,w
  7578     00F4  3880               	iorlw	128
  7579     00F5  0085               	movwf	5
  7580     00F6  0800               	movf	0,w	;code access
  7581     00F7  0024               	movlb	4	; select bank4
  7582     00F8  0095               	movwf	21	;volatile
  7583                           
  7584                           ;mcc_generated_files/spi/src/mssp.c: 89:         SSP1CON3 = spi1_configuration[spiConfig
      +                          Index].con3;
  7585     00F9  0876               	movf	SPI1_Open@spiConfigIndex,w
  7586     00FA  00F7               	movwf	??_SPI1_Open
  7587     00FB  01F8               	clrf	??_SPI1_Open+1
  7588     00FC  0877               	movf	??_SPI1_Open,w
  7589     00FD  00F0               	movwf	___wmul@multiplier
  7590     00FE  0878               	movf	??_SPI1_Open+1,w
  7591     00FF  00F1               	movwf	___wmul@multiplier+1
  7592     0100  3005               	movlw	5
  7593     0101  00F2               	movwf	___wmul@multiplicand
  7594     0102  3000               	movlw	0
  7595     0103  00F3               	movwf	___wmul@multiplicand+1
  7596     0104  318F  2702  3180   	fcall	___wmul
  7597     0107  301E               	movlw	low (_spi1_configuration+2)
  7598     0108  0770               	addwf	?___wmul,w
  7599     0109  0084               	movwf	4
  7600     010A  3010               	movlw	high (_spi1_configuration+2)
  7601     010B  3D71               	addwfc	?___wmul+1,w
  7602     010C  3880               	iorlw	128
  7603     010D  0085               	movwf	5
  7604     010E  0800               	movf	0,w	;code access
  7605     010F  0024               	movlb	4	; select bank4
  7606     0110  0097               	movwf	23	;volatile
  7607                           
  7608                           ;mcc_generated_files/spi/src/mssp.c: 90:         SSP1ADD = spi1_configuration[spiConfigI
      +                          ndex].baud;
  7609     0111  0876               	movf	SPI1_Open@spiConfigIndex,w
  7610     0112  00F7               	movwf	??_SPI1_Open
  7611     0113  01F8               	clrf	??_SPI1_Open+1
  7612     0114  0877               	movf	??_SPI1_Open,w
  7613     0115  00F0               	movwf	___wmul@multiplier
  7614     0116  0878               	movf	??_SPI1_Open+1,w
  7615     0117  00F1               	movwf	___wmul@multiplier+1
  7616     0118  3005               	movlw	5
  7617     0119  00F2               	movwf	___wmul@multiplicand
  7618     011A  3000               	movlw	0
  7619     011B  00F3               	movwf	___wmul@multiplicand+1
  7620     011C  318F  2702  3180   	fcall	___wmul
  7621     011F  301F               	movlw	low (_spi1_configuration+3)
  7622     0120  0770               	addwf	?___wmul,w
  7623     0121  0084               	movwf	4
  7624     0122  3010               	movlw	high (_spi1_configuration+3)
  7625     0123  3D71               	addwfc	?___wmul+1,w
  7626     0124  3880               	iorlw	128
  7627     0125  0085               	movwf	5
  7628     0126  0800               	movf	0,w	;code access
  7629     0127  0024               	movlb	4	; select bank4
  7630     0128  0092               	movwf	18	;volatile
  7631     0129                     l2311:
  7632                           
  7633                           ;mcc_generated_files/spi/src/mssp.c: 92:         SSP1CON1bits.SSPEN = 1;
  7634     0129  1695               	bsf	21,5	;volatile
  7635     012A                     l2313:
  7636                           
  7637                           ;mcc_generated_files/spi/src/mssp.c: 94:         returnValue = 1;
  7638     012A  3001               	movlw	1
  7639     012B  00F9               	movwf	SPI1_Open@returnValue
  7640                           
  7641                           ;mcc_generated_files/spi/src/mssp.c: 95:     }
  7642     012C  292E               	goto	l2317
  7643     012D                     l2315:
  7644                           
  7645                           ;mcc_generated_files/spi/src/mssp.c: 97:     {;mcc_generated_files/spi/src/mssp.c: 98:  
      +                                 returnValue = 0;
  7646     012D  01F9               	clrf	SPI1_Open@returnValue
  7647     012E                     l2317:
  7648                           
  7649                           ;mcc_generated_files/spi/src/mssp.c: 100:     return returnValue;
  7650     012E  0879               	movf	SPI1_Open@returnValue,w
  7651     012F                     l134:
  7652     012F  0008               	return
  7653     0130                     __end_of_SPI1_Open:
  7654                           
  7655                           	psect	text33
  7656     0F02                     __ptext33:	
  7657 ;; *************** function ___wmul *****************
  7658 ;; Defined at:
  7659 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  multiplier      2    0[COMMON] unsigned int 
  7662 ;;  multiplicand    2    2[COMMON] unsigned int 
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;  product         2    4[COMMON] unsigned int 
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  2    0[COMMON] unsigned int 
  7667 ;; Registers used:
  7668 ;;		wreg, status,2, status,0
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;Total ram usage:        6 bytes
  7679 ;; Hardware stack levels used: 1
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_SPI1_Open
  7684 ;;		_orientation_Up
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688     0F02                     ___wmul:	
  7689                           ;psect for function ___wmul
  7690                           
  7691     0F02                     l2289:	
  7692                           ;incstack = 0
  7693                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7694                           
  7695     0F02  01F4               	clrf	___wmul@product
  7696     0F03  01F5               	clrf	___wmul@product+1
  7697     0F04                     l2291:
  7698     0F04  1C70               	btfss	___wmul@multiplier,0
  7699     0F05  2F07               	goto	u741
  7700     0F06  2F08               	goto	u740
  7701     0F07                     u741:
  7702     0F07  2F0C               	goto	l853
  7703     0F08                     u740:
  7704     0F08                     l2293:
  7705     0F08  0872               	movf	___wmul@multiplicand,w
  7706     0F09  07F4               	addwf	___wmul@product,f
  7707     0F0A  0873               	movf	___wmul@multiplicand+1,w
  7708     0F0B  3DF5               	addwfc	___wmul@product+1,f
  7709     0F0C                     l853:
  7710     0F0C  3001               	movlw	1
  7711     0F0D                     u755:
  7712     0F0D  35F2               	lslf	___wmul@multiplicand,f
  7713     0F0E  0DF3               	rlf	___wmul@multiplicand+1,f
  7714     0F0F  0B89               	decfsz	9,f
  7715     0F10  2F0D               	goto	u755
  7716     0F11                     l2295:
  7717     0F11  3001               	movlw	1
  7718     0F12                     u765:
  7719     0F12  36F1               	lsrf	___wmul@multiplier+1,f
  7720     0F13  0CF0               	rrf	___wmul@multiplier,f
  7721     0F14  0B89               	decfsz	9,f
  7722     0F15  2F12               	goto	u765
  7723     0F16                     l2297:
  7724     0F16  0870               	movf	___wmul@multiplier,w
  7725     0F17  0471               	iorwf	___wmul@multiplier+1,w
  7726     0F18  1D03               	btfss	3,2
  7727     0F19  2F1B               	goto	u771
  7728     0F1A  2F1C               	goto	u770
  7729     0F1B                     u771:
  7730     0F1B  2F04               	goto	l2291
  7731     0F1C                     u770:
  7732     0F1C                     l2299:
  7733     0F1C  0875               	movf	___wmul@product+1,w
  7734     0F1D  00F1               	movwf	?___wmul+1
  7735     0F1E  0874               	movf	___wmul@product,w
  7736     0F1F  00F0               	movwf	?___wmul
  7737     0F20                     l855:
  7738     0F20  0008               	return
  7739     0F21                     __end_of___wmul:
  7740                           
  7741                           	psect	text34
  7742     0E16                     __ptext34:	
  7743 ;; *************** function _SPI1_Close *****************
  7744 ;; Defined at:
  7745 ;;		line 103 in file "mcc_generated_files/spi/src/mssp.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;		None
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;		None
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  1    wreg      void 
  7752 ;; Registers used:
  7753 ;;		None
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;Total ram usage:        0 bytes
  7764 ;; Hardware stack levels used: 1
  7765 ;; This function calls:
  7766 ;;		Nothing
  7767 ;; This function is called by:
  7768 ;;		_ADXL345_init
  7769 ;;		_ADXL345_validation
  7770 ;;		_saveOffsets
  7771 ;;		_ADXL345_ClearInterrupt
  7772 ;;		_setupForFreefall
  7773 ;;		_setupForImpact
  7774 ;;		_setupForInactivity
  7775 ;;		_orientation_Up
  7776 ;;		_calibrate
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780     0E16                     _SPI1_Close:	
  7781                           ;psect for function _SPI1_Close
  7782                           
  7783     0E16                     l2321:	
  7784                           ;incstack = 0
  7785                           ; Regs used in _SPI1_Close: []
  7786                           
  7787                           
  7788                           ;mcc_generated_files/spi/src/mssp.c: 105:     SSP1CON1bits.SSPEN = 0;
  7789     0E16  0024               	movlb	4	; select bank4
  7790     0E17  1295               	bcf	21,5	;volatile
  7791     0E18                     l137:
  7792     0E18  0008               	return
  7793     0E19                     __end_of_SPI1_Close:
  7794                           
  7795                           	psect	text35
  7796     0F21                     __ptext35:	
  7797 ;; *************** function _SPI1_BufferWrite *****************
  7798 ;; Defined at:
  7799 ;;		line 126 in file "mcc_generated_files/spi/src/mssp.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  bufferData      2    0[COMMON] PTR void 
  7802 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7803 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7804 ;;  bufferSize      2    2[COMMON] unsigned int 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  bufferInputS    2    4[COMMON] unsigned int 
  7807 ;;  bufferInput     1    6[COMMON] PTR unsigned char 
  7808 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7809 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;Total ram usage:        7 bytes
  7824 ;; Hardware stack levels used: 1
  7825 ;; This function calls:
  7826 ;;		Nothing
  7827 ;; This function is called by:
  7828 ;;		_ADXL345_init
  7829 ;;		_saveOffsets
  7830 ;;		_setupForFreefall
  7831 ;;		_setupForImpact
  7832 ;;		_setupForInactivity
  7833 ;;		_orientation_Up
  7834 ;;		_calibrate
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838     0F21                     _SPI1_BufferWrite:	
  7839                           ;psect for function _SPI1_BufferWrite
  7840                           
  7841     0F21                     l2323:	
  7842                           ;incstack = 0
  7843                           ; Regs used in _SPI1_BufferWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7844                           
  7845                           
  7846                           ;mcc_generated_files/spi/src/mssp.c: 126: void SPI1_BufferWrite(void *bufferData, size_t
      +                           bufferSize);mcc_generated_files/spi/src/mssp.c: 127: {;mcc_generated_files/spi/src/mssp
      +                          .c: 128:     uint8_t *bufferInput = bufferData;
  7847     0F21  0870               	movf	SPI1_BufferWrite@bufferData,w
  7848     0F22  00F6               	movwf	SPI1_BufferWrite@bufferInput
  7849     0F23                     l2325:
  7850                           
  7851                           ;mcc_generated_files/spi/src/mssp.c: 129:     size_t bufferInputSize = bufferSize;
  7852     0F23  0873               	movf	SPI1_BufferWrite@bufferSize+1,w
  7853     0F24  00F5               	movwf	SPI1_BufferWrite@bufferInputSize+1
  7854     0F25  0872               	movf	SPI1_BufferWrite@bufferSize,w
  7855     0F26  00F4               	movwf	SPI1_BufferWrite@bufferInputSize
  7856                           
  7857                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7858     0F27  2F3A               	goto	l2333
  7859     0F28                     l2327:
  7860                           
  7861                           ;mcc_generated_files/spi/src/mssp.c: 131:     {;mcc_generated_files/spi/src/mssp.c: 132:
      +                                   SSP1BUF = *bufferInput;
  7862     0F28  0876               	movf	SPI1_BufferWrite@bufferInput,w
  7863     0F29  0086               	movwf	6
  7864     0F2A  0187               	clrf	7
  7865     0F2B  0801               	movf	1,w
  7866     0F2C  0024               	movlb	4	; select bank4
  7867     0F2D  0091               	movwf	17	;volatile
  7868     0F2E                     l151:	
  7869                           ;mcc_generated_files/spi/src/mssp.c: 134:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          136:         }
  7870                           
  7871                           
  7872                           ;mcc_generated_files/spi/src/mssp.c: 133:         while (!PIR1bits.SSP1IF)
  7873     0F2E  0020               	movlb	0	; select bank0
  7874     0F2F  1D91               	btfss	17,3	;volatile
  7875     0F30  2F32               	goto	u791
  7876     0F31  2F33               	goto	u790
  7877     0F32                     u791:
  7878     0F32  2F2E               	goto	l151
  7879     0F33                     u790:
  7880     0F33                     l153:
  7881                           
  7882                           ;mcc_generated_files/spi/src/mssp.c: 137:         PIR1bits.SSP1IF = 0;
  7883     0F33  1191               	bcf	17,3	;volatile
  7884     0F34                     l2329:
  7885                           
  7886                           ;mcc_generated_files/spi/src/mssp.c: 138:         bufferInput++;
  7887     0F34  3001               	movlw	1
  7888     0F35  07F6               	addwf	SPI1_BufferWrite@bufferInput,f
  7889     0F36                     l2331:
  7890                           
  7891                           ;mcc_generated_files/spi/src/mssp.c: 139:         bufferInputSize--;
  7892     0F36  3001               	movlw	1
  7893     0F37  02F4               	subwf	SPI1_BufferWrite@bufferInputSize,f
  7894     0F38  3000               	movlw	0
  7895     0F39  3BF5               	subwfb	SPI1_BufferWrite@bufferInputSize+1,f
  7896     0F3A                     l2333:
  7897                           
  7898                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7899     0F3A  0874               	movf	SPI1_BufferWrite@bufferInputSize,w
  7900     0F3B  0475               	iorwf	SPI1_BufferWrite@bufferInputSize+1,w
  7901     0F3C  1D03               	btfss	3,2
  7902     0F3D  2F3F               	goto	u801
  7903     0F3E  2F40               	goto	u800
  7904     0F3F                     u801:
  7905     0F3F  2F28               	goto	l2327
  7906     0F40                     u800:
  7907     0F40                     l155:
  7908     0F40  0008               	return
  7909     0F41                     __end_of_SPI1_BufferWrite:
  7910     0002                     ___latbits      equ	2
  7911     007E                     btemp           set	126	;btemp
  7912     007E                     wtemp0          set	126
  7913     22F0                     __pbssBIGRAM    equ	8944
  7914                           
  7915                           	psect	config
  7916                           
  7917                           ;Config register CONFIG1 @ 0x8007
  7918                           ;	Oscillator Selection
  7919                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7920                           ;	Watchdog Timer Enable
  7921                           ;	WDTE = SWDTEN, WDT controlled by the SWDTEN bit in the WDTCON register
  7922                           ;	Power-up Timer Enable
  7923                           ;	PWRTE = ON, PWRT enabled
  7924                           ;	MCLR Pin Function Select
  7925                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7926                           ;	Flash Program Memory Code Protection
  7927                           ;	CP = OFF, Program memory code protection is disabled
  7928                           ;	Data Memory Code Protection
  7929                           ;	CPD = OFF, Data memory code protection is disabled
  7930                           ;	Brown-out Reset Enable
  7931                           ;	BOREN = ON, Brown-out Reset enabled
  7932                           ;	Clock Out Enable
  7933                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7934                           ;	Internal/External Switchover
  7935                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7936                           ;	Fail-Safe Clock Monitor Enable
  7937                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7938     8007                     	org	32775
  7939     8007  3FCC               	dw	16332
  7940                           
  7941                           ;Config register CONFIG2 @ 0x8008
  7942                           ;	Flash Memory Self-Write Protection
  7943                           ;	WRT = OFF, Write protection off
  7944                           ;	PLL Enable
  7945                           ;	PLLEN = OFF, 4x PLL disabled
  7946                           ;	Stack Overflow/Underflow Reset Enable
  7947                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7948                           ;	Brown-out Reset Voltage Selection
  7949                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7950                           ;	In-Circuit Debugger Mode
  7951                           ;	DEBUG = 0x1, unprogrammed default
  7952                           ;	Low-Voltage Programming Enable
  7953                           ;	LVP = ON, Low-voltage programming enabled
  7954     8008                     	org	32776
  7955     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    83
    Data        2
    BSS         19
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     52      75
    BANK1            80     55      55
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    eeprom_interface$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    eeprom_interface$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    eeprom_interface$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    eeprom_interface$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@d1	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memcpy@s1	PTR const void  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memset@dest	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    MotionEventHandler@state	PTR enum E2675 size(1) Largest target is 1
		 -> main@current_state(BANK0[1]), 

    NULL$1	PTR unsigned char  size(2) Largest target is 0

    S258$4$0	PTR void  size(1) Largest target is 2
		 -> ADXL345_validation@temp(COMMON[2]), 

    S258$5$0	PTR void  size(1) Largest target is 6
		 -> calibrate@acc_data(BANK1[6]), orientation_Up@acc_data(BANK0[6]), 

    S258$6$0	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    S258SPI_INTERFACE$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    S258SPI_INTERFACE$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    S258SPI_INTERFACE$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    S258SPI_INTERFACE$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    S258SPI_INTERFACE$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    S258SPI_INTERFACE$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    S258SPI_INTERFACE$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    S258SPI_INTERFACE$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    S258SPI_INTERFACE$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    S258SPI_INTERFACE$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    S258SPI_INTERFACE$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    S258SPI_INTERFACE$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    S258SPI_INTERFACE$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S258SPI_INTERFACE$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S29$4$1	PTR unsigned char  size(2) Largest target is 0

    S29$5$1	PTR unsigned char  size(2) Largest target is 0

    S29EEPROM_INTERFACE$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    S29EEPROM_INTERFACE$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    S29EEPROM_INTERFACE$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    S29EEPROM_INTERFACE$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    sp__memcpy	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    sp__memset	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferExchange@bufferData	PTR void  size(1) Largest target is 2
		 -> ADXL345_validation@temp(COMMON[2]), 

    SPI1_BufferExchange@bufferInput	PTR unsigned char  size(1) Largest target is 2
		 -> ADXL345_validation@temp(COMMON[2]), 

    SPI1_BufferRead@bufferData	PTR void  size(1) Largest target is 6
		 -> calibrate@acc_data(BANK1[6]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferRead@bufferInput	PTR unsigned char  size(1) Largest target is 6
		 -> calibrate@acc_data(BANK1[6]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferWrite@bufferData	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferWrite@bufferInput	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_Host$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    SPI1_Host$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    SPI1_Host$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    SPI1_Host$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    SPI1_Host$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    SPI1_Host$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    SPI1_Host$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    SPI1_Host$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    SPI1_Host$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    SPI1_Host$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    SPI1_Host$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    SPI1_Host$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    SPI1_Host$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SPI1_Host$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SW1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SW1_DefaultInterruptHandler(), NULL(), 

    SW1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SW1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_ADXL345_validation
    _main->_saveOffsets
    _calibrate->_saveOffsets
    _saveOffsets->_SPI1_Open
    _PIN_MANAGER_Initialize->_SW1_SetInterruptHandler
    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _SW1_ISR->_SW1_DefaultInterruptHandler
    _MotionEventHandler->_orientation_Up
    _setupForInactivity->_SPI1_Open
    _setupForInactivity->_memcpy
    _setupForImpact->_SPI1_Open
    _setupForImpact->_memcpy
    _setupForFreefall->_SPI1_Open
    _setupForFreefall->_memcpy
    _orientation_Up->_SPI1_Open
    _ADXL345_ClearInterrupt->_SPI1_Open
    _ADXL345_validation->_SPI1_Open
    _ADXL345_init->_SPI1_Open
    _ADXL345_init->_memcpy
    _SPI1_Open->___wmul

Critical Paths under _main in BANK0

    _main->_MotionEventHandler
    _calibrate->_saveOffsets
    _MotionEventHandler->_orientation_Up

Critical Paths under _main in BANK1

    _main->_calibrate

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    8382
                                             44 BANK0      8     8      0
                       _ADXL345_init
                 _ADXL345_validation
                        _EEPROM_Read
                       _EEPROM_Write
                 _MotionEventHandler
                      _NVM_StatusGet
                    _PIN_MANAGER_IOC
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                          _calibrate
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           58    58      0    2146
                                             27 BANK0      3     3      0
                                              0 BANK1     55    55      0
                       _EEPROM_Write
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _saveOffsets                                         29    27      2     575
                                             10 COMMON     2     0      2
                                              0 BANK0     27    27      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         4     1      3     101
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      46
                   _CLOCK_Initialize
               _INTERRUPT_Initialize
                     _NVM_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      23
            _SW1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _SW1_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _NVM_Initialize                                       0     0      0       0
                    _NVM_StatusClear
 ---------------------------------------------------------------------------------
 (3) _NVM_StatusClear                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0      23
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_IOC                                      0     0      0       0
                            _SW1_ISR
 ---------------------------------------------------------------------------------
 (2) _SW1_ISR                                              0     0      0       0
                                NULL *
        _SW1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (3) _SW1_DefaultInterruptHandler                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NVM_StatusGet                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotionEventHandler                                   3     2      1    4114
                                             41 BANK0      3     2      1
             _ADXL345_ClearInterrupt
                     _orientation_Up
                   _setupForFreefall
                     _setupForImpact
                 _setupForInactivity
 ---------------------------------------------------------------------------------
 (2) _setupForInactivity                                  26    26      0     882
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForImpact                                      26    26      0     882
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForFreefall                                    26    26      0     882
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _orientation_Up                                      43    43      0    1007
                                             10 COMMON     2     2      0
                                              0 BANK0     41    41      0
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferRead                                      6     3      3      98
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (2) _ADXL345_ClearInterrupt                               0     0      0     262
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _SPI1_ByteExchange                                    1     0      1      32
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          2     0      2      46
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADXL345_validation                                   2     2      0     395
                                             10 COMMON     2     2      0
                _SPI1_BufferExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferExchange                                  6     3      3     116
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _ADXL345_init                                        26    26      0     781
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               7     1      6     129
                                              0 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6     155
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (2) _SPI1_Open                                            4     3      1     230
                                              6 COMMON     4     3      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     106
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SPI1_Close                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferWrite                                     7     3      4     126
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADXL345_init
     _SPI1_BufferWrite
     _SPI1_Close
     _SPI1_Open
       ___wmul
     _memcpy
     _memset
   _ADXL345_validation
     _SPI1_BufferExchange
     _SPI1_Close
     _SPI1_Open
   _EEPROM_Read
   _EEPROM_Write
   _MotionEventHandler
     _ADXL345_ClearInterrupt
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
     _orientation_Up
       _SPI1_BufferRead
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       ___wmul
     _setupForFreefall
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForImpact
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForInactivity
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
   _NVM_StatusGet
   _PIN_MANAGER_IOC
     _SW1_ISR
       NULL(Fake) *
       _SW1_DefaultInterruptHandler *
   _SPI1_Initialize
   _SYSTEM_Initialize
     _CLOCK_Initialize
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _NVM_Initialize
       _NVM_StatusClear
     _PIN_MANAGER_Initialize
       _SW1_SetInterruptHandler
     _SPI1_Initialize
     _WDT_Initialize
   _calibrate
     _EEPROM_Write
     _SPI1_BufferRead
     _SPI1_BufferWrite
     _SPI1_ByteExchange
     _SPI1_Close
     _SPI1_Open
     _saveOffsets
       _SPI1_BufferWrite
       _SPI1_Close
       _SPI1_Open
   _saveOffsets

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14     12      14    100.0%
BANK0               80     52      75     93.8%
BANK1               80     55      55     68.8%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               80      0       0      0.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               32      0       0      0.0%
BANK10               0      0       0      0.0%
BANK11               0      0       0      0.0%
BANK12               0      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     144      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Feb 06 16:40:55 2025

                      _SPI1_ByteExchange 0E5F                                       l54 0E1F  
                                     l63 0E40                                       l67 0E1B  
                                     l76 0010                                       l79 0F01  
                     ?_SPI1_ByteExchange 0070                      ___wmul@multiplicand 0072  
                                    l202 0E5E                                      l212 0E29  
                                    l134 012F                                      l142 0FBA  
                                    l126 0E53                                      l151 0F2E  
                                    l144 0FBF                                      l160 0F4A  
                                    l312 0E23                                      l400 052C  
                                    l153 0F33                                      l137 0E18  
                                    l146 0FD2                                      l170 0E6A  
                                    l162 0F4F                                      l155 0F40  
                                    l307 0E98                                      l164 0F62  
                                    l500 01CB                                      l270 0E49  
                                    l167 0E62                                      l520 0254  
                                    l169 0E67                                      l361 045F  
                                    l274 0E85                                      l266 0FAC  
                                    l283 0EE3                                      l611 05B5  
                                    l371 0499                                      l444 006D  
                                    l292 0E37                                      l612 05B7  
                                    l604 0586                                      l356 043D  
                                    l453 00C3                                      l277 0E2F  
                                    l365 0482                                      l462 0FF2  
                                    l526 0262                                      l630 06CB  
                                    l366 0471                                      l703 01BD  
                                    l471 0020                                      l631 06DA  
                                    l607 0594                                      l375 04BC  
                                    l464 0FFF                                      l552 02F9  
                                    l616 07DC                                      l608 05A3  
                                    l384 04F3                                      l376 04AB  
                                    l457 0FDC                                      l465 0FF9  
                                    l490 0EBD                                      l546 02EB  
                                    l634 06FC                                      l394 053E  
                                    l386 04F5                                      l635 06FE  
                                    l627 06BD                                      l619 0671  
                                    l572 0382                                      l484 005F  
                                    l644 07C4                                      l477 003B  
                                    l645 07C9                                      l397 051F  
                                    l494 0EC9                                      l681 016A  
                                    l674 013A                                      l684 0176  
                                    l853 0F0C                                      l589 042E  
                                    l677 014A                                      l597 0562  
                                    l598 0567                                      l855 0F20  
                                    u800 0F40                                      u801 0F3F  
                                    u810 0F4F                                      u811 0F4E  
                                    u740 0F08                                      u900 0FD2  
                                    u820 0F62                                      u741 0F07  
                                    u901 0FD1                                      u821 0F61  
                                    u830 0E67                                      u910 0E7E  
                                    u831 0E66                                      u911 0E7D  
                                    u840 0ED7                                      u920 0020  
                                    u841 0ED6                                      u921 001F  
                                    u770 0F1C                                      u930 0EBD  
                                    u850 0EE1                                      u771 0F1B  
                                    u755 0F0D                                      u931 0EBC  
                                    u851 0EDE                                      u780 00C9  
                                    u940 01CB                                      u765 0F12  
                                    u781 00C8                                      u941 01CA  
                                    u790 0F33                                      u870 0EAF  
                                    u950 0262                                      u791 0F32  
                                    u871 0EAE                                      u951 0261  
                                    u880 0F87                                      u960 02F9  
                                    u864 0EE3                                      u881 0F86  
                                    u961 02F8                                      u890 0FBF  
                                    u970 0390                                      u891 0FBE  
                                    u971 038F                                      u980 0397  
                                    u990 042B                                      u991 042A  
                    ??_SPI1_ByteExchange 0071                        orientation_Up@msg 0028  
                                    wreg 0009                                     l1321 0EAF  
                                   l3001 0141                                     l1315 0F87  
                                   l3011 0161                                     l3003 0144  
                                   l3021 0183                                     l3013 0164  
                                   l3005 014E                                     l2311 0129  
                                   l3023 0186                                     l3015 016E  
                                   l3007 0151                                     l2303 0E19  
                                   l3111 044C                                     l3103 042F  
                                   l2321 0E16                                     l2313 012A  
                                   l2305 00C4                                     l3025 0187  
                                   l3017 0178                                     l3033 0191  
                                   l3009 0158                                     l2401 0EF3  
                                   l3121 0473                                     l3113 044E  
                                   l3105 0432                                     l2331 0F36  
                                   l2323 0F21                                     l2315 012D  
                                   l2307 00C4                                     l3027 018A  
                                   l3019 0181                                     l2411 0EFA  
                                   l2403 0EF5                                     l3131 04AD  
                                   l3123 0480                                     l3115 0457  
                                   l3107 0435                                     l2333 0F3A  
                                   l2325 0F23                                     l2317 012E  
                                   l2309 00C9                                     l2421 0FAD  
                                   l2501 0EB0                                     l2341 0F56  
                                   l3061 01A1                                     l2413 0EFF  
                                   l2405 0EF7                                     l3141 04D0  
                                   l3133 04BA                                     l3125 0491  
                                   l3117 0461                                     l3109 043F  
                                   l2327 0F28                                     l2423 0FB4  
                                   l2431 0FCC                                     l2511 0EC6  
                                   l2503 0EB1                                     l2343 0F58  
                                   l2335 0F41                                     l3207 01AC  
                                   l3039 019B                                     l2415 0E1C  
                                   l2407 0EF8                                     l3151 04DF  
                                   l3143 04D1                                     l3135 04BD  
                                   l3127 049B                                     l3119 046E  
                                   l2329 0F34                                     l2425 0FC0  
                                   l2505 0EB4                                     l2337 0F48  
                                   l2345 0F5C                                     l2521 01D2  
                                   l2513 01BE                                     l2601 02BD  
                                   l2361 0ED7                                     l2353 0E24  
                                   l2433 0E54                                     l2441 0F8C  
                                   l2417 0E4A                                     l2409 0EF9  
                                   l3161 04F6                                     l3153 04E4  
                                   l3145 04D4                                     l3137 04C9  
                                   l3129 04A8                                     l2291 0F04  
                                   l2371 0F63                                     l2363 0E99  
                                   l2427 0FC6                                     l2347 0E5F  
                                   l2507 0EBF                                     l2339 0F50  
                                   l2531 01F6                                     l2523 01D4  
                                   l2515 01BF                                     l2611 02DE  
                                   l2603 02C0                                     l2435 0E57  
                                   l2355 0E2A                                     l2451 0FA4  
                                   l2443 0F8F                                     l2419 0E4E  
                                   l3171 050C                                     l3163 04FF  
                                   l3155 04E6                                     l3147 04D9  
                                   l3139 04CE                                     l2293 0F08  
                                   l2381 0F79                                     l2373 0F67  
                                   l2365 0E9C                                     l2429 0FC8  
                                   l2349 0E68                                     l2509 0EC4  
                                   l2701 03BD                                     l2541 0217  
                                   l2533 0201                                     l2525 01D7  
                                   l2517 01C2                                     l2613 02E0  
                                   l2605 02CE                                     l2621 02EC  
                                   l2357 0ECA                                     l2461 0E30  
                                   l2453 0FAB                                     l2445 0F94  
                                   l2437 0F88                                     l3173 050F  
                                   l3165 0501                                     l3157 04E7  
                                   l3149 04DB                                     l2295 0F11  
                                   l2375 0F6A                                     l2383 0F7B  
                                   l2367 0EA1                                     l2711 03DC  
                                   l2703 03C2                                     l2551 0237  
                                   l2543 0219                                     l2535 0203  
                                   l2527 01E5                                     l2519 01CD  
                                   l2615 02E1                                     l2607 02D1  
                                   l2631 0302                                     l2623 02ED  
                                   l2359 0ED2                                     l2455 0E77  
                                   l2463 0E33                                     l2447 0F98  
                                   l2439 0F8A                                     l2391 0EEB  
                                   l2471 0017                                     l3183 0521  
                                   l3175 0515                                     l3159 04EA  
                                   l3167 0502                                     l2297 0F16  
                                   l2289 0F02                                     l2377 0F70  
                                   l2369 0EA3                                     l2801 0064  
                                   l2721 0416                                     l2713 03E1  
                                   l2705 03CB                                     l2561 024A  
                                   l2553 023A                                     l2545 0224  
                                   l2537 0206                                     l2529 01F4  
                                   l2617 02E6                                     l2609 02D3  
                                   l2641 032F                                     l2633 0305  
                                   l2625 02F0                                     l2457 0E7E  
                                   l2449 0FA1                                     l2465 0E20  
                                   l2393 0EEC                                     l2385 0EE4  
                                   l2481 0034                                     l2473 0023  
                                   l3185 052A                                     l3177 051C  
                                   l3169 050A                                     l2299 0F1C  
                                   l2379 0F74                                     l2811 009A  
                                   l2803 0070                                     l2731 042D  
                                   l2723 0422                                     l2715 03E6  
                                   l2707 03CD                                     l2563 024F  
                                   l2555 023C                                     l2547 0226  
                                   l2539 0214                                     l2619 02E8  
                                   l2571 0259                                     l2651 0347  
                                   l2643 0331                                     l2635 0313  
                                   l2627 02FB                                     l2459 0E83  
                                   l2395 0EEE                                     l2387 0EE8  
                                   l2491 004B                                     l2483 0037  
                                   l2475 0025                                     l2467 0013  
                                   l2821 00B2                                     l2813 009C  
                                   l2805 007E                                     l2725 042B  
                                   l2717 03F6                                     l2709 03D0  
                                   l2565 0251                                     l2557 0247  
                                   l2549 0229                                     l2581 027C  
                                   l2573 0264                                     l2661 0368  
                                   l2653 0352                                     l2645 0334  
                                   l2637 0322                                     l2629 0300  
                                   l2397 0EF0                                     l2389 0EEA  
                                   l2493 004D                                     l2485 0039  
                                   l2477 0027                                     l2469 0014  
                                   l2823 00BD                                     l2815 009F  
                                   l2807 008D                                     l2751 0009  
                                   l2719 0406                                     l2559 0249  
                                   l2591 029D                                     l2583 028B  
                                   l2575 0269                                     l2567 0255  
                                   l2671 037D                                     l2663 036A  
                                   l2655 0354                                     l2647 0342  
                                   l2639 0324                                     l2743 0E3F  
                                   l2735 0E38                                     l2399 0EF2  
                                   l2495 004F                                     l2487 0046  
                                   l2479 0032                                     l2903 0661  
                                   l2831 0543                                     l2825 00BF  
                                   l2817 00AD                                     l2809 008F  
                                   l2753 000B                                     l2681 0390  
                                   l2593 02AB                                     l2585 028D  
                                   l2577 026B                                     l2569 0256  
                                   l2673 037F                                     l2665 0375  
                                   l2657 0357                                     l2649 0345  
                                   l2737 0E3D                                     l2497 005A  
                                   l2489 0048                                     l2921 069E  
                                   l2841 0559                                     l2833 054E  
                                   l2827 00C2                                     l2819 00B0  
                                   l2755 000C                                     l2747 0004  
                                   l2691 03AC                                     l2683 039A  
                                   l2675 0383                                     l2595 02AE  
                                   l2587 0298                                     l2579 026E  
                                   l2667 0377                                     l2659 0365  
                                   l2763 0E41                                     l2771 0E8C  
                                   l2499 005C                                     l2931 06DB  
                                   l2923 06BA                                     l2915 068E  
                                   l2851 0581                                     l2843 0569  
                                   l2835 0551                                     l2781 0FE3  
                                   l2757 000D                                     l2749 0007  
                                   l2693 03AE                                     l2685 039D  
                                   l2677 0384                                     l2597 02B0  
                                   l2589 029A                                     l2669 0378  
                                   l2765 0E46                                     l2773 0E8F  
                                   l2941 0704                                     l2933 06E9  
                                   l2925 06BF                                     l2909 0676  
                                   l2861 05B2                                     l2853 0588  
                                   l2845 0574                                     l2837 0553  
                                   l2791 0FFB                                     l2783 0FEC  
                                   l2759 000E                                     l2695 03B5  
                                   l2687 039F                                     l2679 0387  
                                   l2599 02BB                                     l2775 0E92  
                                   l2767 0E86                                     l2951 072B  
                                   l2943 0709                                     l2935 06EC  
                                   l2927 06C9                                     l2871 05C2  
                                   l2855 0592                                     l2847 0576  
                                   l2839 0556                                     l2793 0FFE  
                                   l2785 0FF4                                     l2777 0FD3  
                                   l2697 03B7                                     l2689 03A1  
                                   l2769 0E89                                     l2945 0712  
                                   l2929 06D5                                     l2881 05F5  
                                   l2873 05CB                                     l2857 059E  
                                   l2849 0579                                     l2787 0FF7  
                                   l2779 0FDE                                     l2699 03BA  
                                   l2971 0784                                     l2947 0714  
                                   l2939 0701                                     l2955 0731  
                                   l2883 05FE                                     l2875 05CD  
                                   l2867 05BA                                     l2859 05A4  
                                   l2797 0060                                     l2981 07AE  
                                   l2973 0788                                     l2965 0774  
                                   l2957 0758                                     l2949 0722  
                                   l2893 061B                                     l2885 0603  
                                   l2877 05DB                                     l2869 05BD  
                                   l2799 0061                                     l2991 07D8  
                                   l2983 07B8                                     l2975 0790  
                                   l2959 075C                                     l2895 0645  
                                   l2887 0612                                     l2879 05E8  
                                   l2993 07DB                                     l2985 07BB  
                                   l2977 079A                                     l2897 0649  
                                   l2889 0619                                     l2987 07CB  
                                   l2979 07A4                                     l2997 0130  
                                   l2989 07D6                                     l2999 013E  
                                   u1000 0E3D                                     u1001 0E3C  
                                   u1010 0E46                                     u1011 0E45  
                                   u1020 0FDC                                     u1021 0FDB  
                                   u1030 0FF2                                     u1031 0FF1  
                                   u1040 006D                                     u1200 06FB  
                                   u1120 0649                                     u1041 006C  
                                   u1201 06FA                                     u1121 0648  
                                   u1105 0624                                     u1130 0660  
                                   u1050 054B                                     u1131 065F  
                                   u1115 0639                                     u1300 0176  
                                   u1220 075C                                     u1140 0670  
                                   u1060 0562                                     u1301 0175  
                                   u1221 075B                                     u1205 06F7  
                                   u1141 066F                                     u1061 0561  
                                   u1310 019A                                     u1230 0773  
                                   u1150 0676                                     u1070 05A3  
                                   u1311 0199                                     u1231 0772  
                                   u1215 073B                                     u1151 0675  
                                   u1135 065C                                     u1071 05A2  
                                   u1240 0783                                     u1160 068D  
                                   u1080 0612                                     u1400 051C  
                                   u1241 0782                                     u1161 068C  
                                   u1145 066C                                     u1081 0611  
                                   u1401 051B                                     u1250 07C4  
                                   u1170 069D                                     u1090 0619  
                                   u1410 053E                                     u1251 07C3  
                                   u1235 076F                                     u1171 069C  
                                   u1091 0618                                     u1411 053D  
                                   u1260 013E                                     u1261 013D  
                                   u1245 077F                                     u1165 0689  
                                   u1085 060E                                     _LATA 010C  
                                   u1270 014E                                     u1190 06DA  
                                   u1350 043D                                     u1271 014D  
                                   u1191 06D9                                     u1175 0699  
                                   u1415 053A                                     u1351 043C  
                                   _LATC 010E                                     u1280 0161  
                                   u1360 045F                                     u1281 0160  
                                   u1185 06AE                                     u1361 045E  
                                   u1290 016E                                     u1370 0499  
                                   u1291 016D                                     u1507 057D  
                                   u1371 0498                                     u1427 0445  
                                   u1380 04C9                                     u1517 058C  
                                   u1381 04C8                                     u1437 0467  
                                   u1390 050A                                     u1607 017C  
                                   u1527 0598                                     u1391 0509  
                                   u1447 0479                                     u1617 03B1  
                                   u1537 05AA                                     u1457 0489  
                                   u1547 05F9                                     u1467 04A1  
                                   u1557 06C3                                     u1477 04B3  
                                   u1567 06CF                                     u1487 04FA  
                                   u1577 06E1                                     u1497 0525  
                                   u1587 0726                                     u1597 0ECD  
                         ?_NVM_StatusGet 0070                                     _WPUA 020C  
                                   _WPUC 020E                        main@current_state 0053  
                        __end_of_SW1_ISR 0E86                  __end_of_NVM_StatusClear 0E1C  
                                   _main 042F                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006                                     btemp 007E  
                           _unlockKeyLow 007D              _INT_DefaultInterruptHandler 0000  
                                   start 0002                __end_of_SPI1_ByteExchange 0E6B  
        __end_of_INT_SetInterruptHandler 0E2A                    calibrate@addr_val_997 00B4  
                   __end_of_EEPROM_Write 0F02                           _no_motion_init 1045  
                            ?_SPI1_Close 0070                                    ?_main 0070  
                                  _EEADR 0191                                    _IOCAF 0393  
                                  _IOCAN 0392                                    _IOCAP 0391  
                                  _TRISA 008C                                    _TRISC 008E  
                    orientation_Up@F2699 005A                             _ADXL345_init 0060  
                __end_of_PIN_MANAGER_IOC 0E4A                           _WDT_Initialize 0E20  
                                  main@i 0051                  _SW1_SetInterruptHandler 0E2A  
                          _unlockKeyHigh 007C                                    pclath 000A  
        SPI1_BufferWrite@bufferInputSize 0074                                    status 0003  
                                  wtemp0 007E                         ??_setupForImpact 007A  
                     _ADXL345_validation 0FD3                         EEPROM_Write@data 0072  
                        __initialization 07DD                             __end_of_main 0543  
                    ?_ADXL345_validation 0070                   __end_of_no_motion_init 1049  
         SPI1_BufferRead@bufferInputSize 0073       SPI1_BufferExchange@bufferInputSize 0073  
                                 ??_main 004C                             ?_saveOffsets 007A  
                 __end_of_WDT_Initialize 0E24                                ??_SW1_ISR 0071  
                   ??_ADXL345_validation 007A                          ??_NVM_StatusGet 0070  
                                 _EEADRH 0192                                   _EEADRL 0191  
                                 _EEDATA 0193                                   _EEDATL 0193  
                                 _EECON1 0195                                   _EECON2 0196  
               __end_of_SPI1_BufferWrite 0F41                                   _ANSELA 018C  
                                 _ANSELC 018E                                   _BORCON 0116  
                                 _INLVLA 038C                                   _INLVLC 038E  
                                 _OSCCON 0099                                   _WDTCON 0097  
                       ?_NVM_StatusClear 0070                         _eeprom_interface 102B  
                      __end_of_SPI1_Host 101C                        __end_of_SPI1_Open 0130  
                                 ___wmul 0F02                 __end_of_setupForFreefall 0255  
                                 _memcpy 0F63                                   _memset 0E99  
                      ?_CLOCK_Initialize 0070                        ??_SPI1_BufferRead 0073  
               ??_ADXL345_ClearInterrupt 007A                       ??_CLOCK_Initialize 0070  
                 ADXL345_validation@temp 007A                          ?_WDT_Initialize 0070  
              ??_SW1_SetInterruptHandler 0072                        setupForImpact@msg 0020  
SW1_SetInterruptHandler@InterruptHandler 0070  INT_SetInterruptHandler@InterruptHandler 0070  
                       ?_PIN_MANAGER_IOC 0070                           _SPI1_IsRxReady 0000  
                         _SPI1_IsTxReady 0000                         ??_NVM_Initialize 0070  
                      _SYSTEM_Initialize 0E86                  __end_of__initialization 07FD  
                         _SPI1_ByteWrite 0000                       ?_SYSTEM_Initialize 0070  
          __end_of_ADXL345_init_settings 1045                           __pcstackCOMMON 0070  
                         calibrate@F2711 0054                             __pidataBANK0 0E14  
                    ??_SYSTEM_Initialize 0072                        ??_SPI1_Initialize 0070  
                         calibrate@i_996 00AE                           calibrate@Z_n1g 00A6  
                     _spi1_configuration 101C                           _OPTION_REGbits 0095  
                         calibrate@sum_X 00A8                           calibrate@sum_Y 00AA  
                         calibrate@sum_Z 00B5                               _dataBuffer 22F0  
              __end_of_SYSTEM_Initialize 0E99                        calibrate@acc_data 00A0  
                      saveOffsets@x_axis 0020                             _EEPROM_Write 0EE4  
                      saveOffsets@y_axis 007A                               __pbssBANK0 0054  
                      saveOffsets@z_axis 007B               __end_of_MotionEventHandler 01BE  
                      calibrate@addr_val 00B3              SPI1_BufferWrite@bufferInput 0076  
                             __pmaintext 042F                                  ?___wmul 0070  
              SPI1_BufferRead@bufferData 0070                SPI1_BufferRead@bufferSize 0071  
                                ?_memcpy 0070                                  ?_memset 0070  
                                _APFCON0 011D                             ??_SPI1_Close 0070  
                                _OSCTUNE 0098                                  _SSP1ADD 0212  
                                _SSP1BUF 0211                                  _SW1_ISR 0E77  
                      __end_of_calibrate 07DD                        __end_of_fall_init 1051  
                MotionEventHandler@state 0049                               calibrate@i 00AC  
                     __end_of_SPI1_Close 0E19            SPI1_BufferExchange@bufferData 0070  
          SPI1_BufferExchange@bufferSize 0071           SPI1_BufferExchange@bufferInput 0075  
                                __ptext1 0543                                  __ptext2 0011  
                                __ptext3 0EE4                                  __ptext4 0E86  
                                __ptext5 0E20                                  __ptext6 0E4A  
                                __ptext7 0F88                                  __ptext8 0E2A  
                                __ptext9 0E1C                 __end_of_eeprom_interface 1039  
               ??_PIN_MANAGER_Initialize 0072                                _IOCAFbits 0393  
                _INT_SetInterruptHandler 0E24                  ADXL345_validation@F2683 0069  
                                clrloop0 0E6C                     end_of_initialization 07FD  
                      ?_SPI1_BufferWrite 0070             ?_SW1_DefaultInterruptHandler 0070  
                                memcpy@d 0079                                  memcpy@n 0074  
                                memcpy@s 0076                            ??_EEPROM_Read 0072  
                                memset@c 0072                                  memset@n 0074  
                                memset@p 0076                       ??_SPI1_BufferWrite 0074  
                        _EEPROM_ByteRead 0000                   _ADXL345_ClearInterrupt 0EB0  
                        _SPI1_BufferRead 0F41                               _timer_20ms 0062  
                              _SPI1_Host 1000                        ?_setupForFreefall 0070  
                              _SPI1_Open 00C4                         ??_WDT_Initialize 0070  
                     ??_setupForFreefall 007A                                _PORTAbits 000C  
                    _SPI1_BufferExchange 0FAD                    __end_of_NVM_StatusGet 0E41  
                   ?_SPI1_BufferExchange 0070            ??_SW1_DefaultInterruptHandler 0070  
                        _SPI1_Initialize 0E4A                      __end_of_EEPROM_Read 0011  
           __end_of_INTERRUPT_Initialize 0E5F                               ?_SPI1_Open 0076  
                         __end_of___wmul 0F21                           __end_of_memcpy 0F88  
                         __end_of_memset 0EB0                ??_INT_SetInterruptHandler 0072  
                    start_initialization 07DD                             calibrate@msg 00BB  
                  ??_SPI1_BufferExchange 0073                  __end_of_SPI1_BufferRead 0F63  
                  setupForInactivity@msg 0020                          ADXL345_init@msg 0020  
                  _ADXL345_init_settings 1039                                 ??___wmul 0074  
                     _MotionEventHandler 0130                           _orientation_Up 0383  
             __end_of_setupForInactivity 0383                              __pdataBANK0 0069  
                               ??_memcpy 0076                                 ??_memset 0076  
                             memset@dest 0070                 ?_SW1_SetInterruptHandler 0070  
                    ?_MotionEventHandler 0049                            _SPI1_ByteRead 0000  
                            __pbssBIGRAM 22F0                            ?_ADXL345_init 0070  
                            __pbssCOMMON 007C                                ___latbits 0002  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
                               ?_SW1_ISR 0070                  __end_of_SPI1_Initialize 0E54  
                              _calibrate 0543                              _EEPROM_Read 0004  
                   ??_MotionEventHandler 004A                                __pnvBANK0 0065  
             SPI1_BufferWrite@bufferData 0070                   _PIN_MANAGER_Initialize 0F88  
             SPI1_BufferWrite@bufferSize 0072                   __end_of_orientation_Up 042F  
                   SPI1_Open@returnValue 0079                                _fall_init 104D  
                            ??_SPI1_Open 0077                            ??_saveOffsets 007C  
             SPI1_BufferRead@bufferInput 0075                           ??_ADXL345_init 007A  
                      ??_NVM_StatusClear 0070                      __end_of_impact_init 104D  
                   _INTERRUPT_Initialize 0E54                  ?_ADXL345_ClearInterrupt 0070  
                       _CLOCK_Initialize 0E30                               ?_calibrate 0070  
                         ___wmul@product 0074                         ?_SPI1_BufferRead 0070  
                               _LATAbits 010C                                 _LATCbits 010E  
                              clear_ram0 0E6B                                 _PIE1bits 0091  
                               _PIR1bits 0011                          ?_orientation_Up 0070  
                   _SW1_InterruptHandler 0065                                 _SSP1CON1 0215  
                               _SSP1CON3 0217          __end_of_SW1_SetInterruptHandler 0E30  
                     calibrate@sum_X_avg 00B7                       calibrate@sum_Y_avg 00B9  
                     calibrate@sum_Z_avg 00D5                                 _SSP1STAT 0214  
                      ??_PIN_MANAGER_IOC 0071                           _setupForImpact 0255  
                      _SPI1_Deinitialize 0000                        ___wmul@multiplier 0070  
                              main@X_val 004E                                main@Y_val 004F  
                              main@Z_val 0050                      __end_of_saveOffsets 0060  
                       ?_SPI1_Initialize 0070           __end_of_ADXL345_ClearInterrupt 0ECA  
                  ?_INTERRUPT_Initialize 0070                           saveOffsets@msg 0021  
                             _EECON1bits 0195                     calibrate@offset_0g_X 00B0  
                   calibrate@offset_0g_Y 00B1                     calibrate@offset_0g_Z 00B2  
                              memcpy@tmp 0078                   __end_of_setupForImpact 02EC  
                            _impact_init 1049               __end_of_ADXL345_validation 1000  
                               __ptext10 0E19                                 __ptext11 0E54  
                               __ptext20 0255                                 __ptext12 0E24  
                               __ptext21 01BE                                 __ptext13 0E30  
                               __ptext30 0E99                                 __ptext22 0383  
                               __ptext14 0E41                                 __ptext31 0F63  
                               __ptext23 0F41                                 __ptext15 0E77  
                               __ptext32 00C4                                 __ptext24 0EB0  
                               __ptext16 0ECA                                 __ptext33 0F02  
                               __ptext25 0E5F                                 __ptext17 0E38  
                               __ptext34 0E16                                 __ptext26 0004  
                               __ptext18 0130                                 __ptext35 0F21  
                               __ptext27 0FD3                                 __ptext19 02EC  
                               __ptext28 0FAD                                 __ptext29 0060  
                           _SSP1CON1bits 0215                            ?_EEPROM_Write 0070  
                            ??_calibrate 003B   __end_of_acceleration_squared_threshold 1053  
         _acceleration_squared_threshold 1051                      setupForFreefall@msg 0020  
                   __end_of_ADXL345_init 00C4                           _NVM_Initialize 0E1C  
                        ?_setupForImpact 0070                              _saveOffsets 0011  
                             _INTCONbits 000B                                 memcpy@d1 0070  
                               memcpy@s1 0072                     _INT_InterruptHandler 0067  
                 orientation_Up@acc_data 0020              __end_of_SPI1_BufferExchange 0FD3  
                     _setupForInactivity 02EC                   ??_INTERRUPT_Initialize 0072  
                         ??_EEPROM_Write 0073                   orientation_Up@addr_val 0042  
    __end_of_SW1_DefaultInterruptHandler 0EE4              _SW1_DefaultInterruptHandler 0ECA  
           _orientation_check_timer_20ms 0060                   orientation_Up@g_deltaX 0043  
                 orientation_Up@g_deltaY 0045                   orientation_Up@g_deltaZ 0047  
                       _EEPROM_ByteWrite 0000                      ?_setupForInactivity 0070  
                           ?_EEPROM_Read 0070                  ?_PIN_MANAGER_Initialize 0070  
              SPI1_ByteExchange@byteData 0070                   _good_orientation_count 0064  
                 __end_of_NVM_Initialize 0E20                orientation_Up@g_magnitude 0026  
                     EEPROM_Read@address 0070                          _NVM_StatusClear 0E19  
                       _SPI1_BufferWrite 0F21                 ?_INT_SetInterruptHandler 0070  
               __end_of_CLOCK_Initialize 0E38                     ??_setupForInactivity 007A  
                          __pstringtext1 1000                            __pstringtext2 101C  
                          __pstringtext3 102B                            __pstringtext4 1051  
                          __pstringtext5 1039                            __pstringtext6 1045  
                          __pstringtext7 1049                            __pstringtext8 104D  
                             _SPI1_Close 0E16                         _setupForFreefall 01BE  
    EEPROM_Write@globalInterruptBitValue 0073           __end_of_PIN_MANAGER_Initialize 0FAD  
                          _NVM_StatusGet 0E38                         ??_orientation_Up 007A  
                        _PIN_MANAGER_IOC 0E41                               _NVM_IsBusy 0000  
                SPI1_Open@spiConfigIndex 0076                          ?_NVM_Initialize 0070  
                    EEPROM_Write@address 0070               __end_of_spi1_configuration 102B  
