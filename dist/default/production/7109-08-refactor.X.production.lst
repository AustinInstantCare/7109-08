

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Feb 05 16:14:41 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16LF1825
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,space=0,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,space=0,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,space=0,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,space=0,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,space=0,delta=2,noexec
    12                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
    14                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	clrtext,global,class=CODE,space=0,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2,group=2
    49                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2,group=2
    50                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=1
    52                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    55                           	dabs	1,0x620,48
    56                           	dabs	1,0x5A0,80
    57                           	dabs	1,0x520,80
    58                           	dabs	1,0x4C0,48
    59                           	dabs	1,0x22F0,0,_dataBuffer
    60                           	dabs	1,0x7E,2
    61     0000                     
    62                           ; Generated 07/09/2023 GMT
    63                           ; 
    64                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC16LF1825 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96     0008                     bsr             equ	8
    97     0005                     fsr0h           equ	5
    98     0004                     fsr0l           equ	4
    99     0007                     fsr1h           equ	7
   100     0006                     fsr1l           equ	6
   101     0000                     indf            equ	0
   102     0000                     indf0           equ	0
   103     0001                     indf1           equ	1
   104     000B                     intcon          equ	11
   105     0002                     pc              equ	2
   106     0002                     pcl             equ	2
   107     000A                     pclath          equ	10
   108     0003                     status          equ	3
   109     0009                     wreg            equ	9
   110     0000                     INDF0           equ	0	;# 
   111     0001                     INDF1           equ	1	;# 
   112     0002                     PCL             equ	2	;# 
   113     0003                     STATUS          equ	3	;# 
   114     0004                     FSR0L           equ	4	;# 
   115     0005                     FSR0H           equ	5	;# 
   116     0006                     FSR1L           equ	6	;# 
   117     0007                     FSR1H           equ	7	;# 
   118     0008                     BSR             equ	8	;# 
   119     0009                     WREG            equ	9	;# 
   120     000A                     PCLATH          equ	10	;# 
   121     000B                     INTCON          equ	11	;# 
   122     000C                     PORTA           equ	12	;# 
   123     000E                     PORTC           equ	14	;# 
   124     0011                     PIR1            equ	17	;# 
   125     0012                     PIR2            equ	18	;# 
   126     0013                     PIR3            equ	19	;# 
   127     0015                     TMR0            equ	21	;# 
   128     0016                     TMR1            equ	22	;# 
   129     0016                     TMR1L           equ	22	;# 
   130     0017                     TMR1H           equ	23	;# 
   131     0018                     T1CON           equ	24	;# 
   132     0019                     T1GCON          equ	25	;# 
   133     001A                     TMR2            equ	26	;# 
   134     001B                     PR2             equ	27	;# 
   135     001C                     T2CON           equ	28	;# 
   136     001E                     CPSCON0         equ	30	;# 
   137     001F                     CPSCON1         equ	31	;# 
   138     008C                     TRISA           equ	140	;# 
   139     008E                     TRISC           equ	142	;# 
   140     0091                     PIE1            equ	145	;# 
   141     0092                     PIE2            equ	146	;# 
   142     0093                     PIE3            equ	147	;# 
   143     0095                     OPTION_REG      equ	149	;# 
   144     0096                     PCON            equ	150	;# 
   145     0097                     WDTCON          equ	151	;# 
   146     0098                     OSCTUNE         equ	152	;# 
   147     0099                     OSCCON          equ	153	;# 
   148     009A                     OSCSTAT         equ	154	;# 
   149     009B                     ADRES           equ	155	;# 
   150     009B                     ADRESL          equ	155	;# 
   151     009C                     ADRESH          equ	156	;# 
   152     009D                     ADCON0          equ	157	;# 
   153     009E                     ADCON1          equ	158	;# 
   154     010C                     LATA            equ	268	;# 
   155     010E                     LATC            equ	270	;# 
   156     0111                     CM1CON0         equ	273	;# 
   157     0112                     CM1CON1         equ	274	;# 
   158     0113                     CM2CON0         equ	275	;# 
   159     0114                     CM2CON1         equ	276	;# 
   160     0115                     CMOUT           equ	277	;# 
   161     0116                     BORCON          equ	278	;# 
   162     0117                     FVRCON          equ	279	;# 
   163     0118                     DACCON0         equ	280	;# 
   164     0119                     DACCON1         equ	281	;# 
   165     011A                     SRCON0          equ	282	;# 
   166     011B                     SRCON1          equ	283	;# 
   167     011D                     APFCON0         equ	285	;# 
   168     011E                     APFCON1         equ	286	;# 
   169     018C                     ANSELA          equ	396	;# 
   170     018E                     ANSELC          equ	398	;# 
   171     0191                     EEADR           equ	401	;# 
   172     0191                     EEADRL          equ	401	;# 
   173     0192                     EEADRH          equ	402	;# 
   174     0193                     EEDAT           equ	403	;# 
   175     0193                     EEDATL          equ	403	;# 
   176     0193                     EEDATA          equ	403	;# 
   177     0194                     EEDATH          equ	404	;# 
   178     0195                     EECON1          equ	405	;# 
   179     0196                     EECON2          equ	406	;# 
   180     0199                     RCREG           equ	409	;# 
   181     019A                     TXREG           equ	410	;# 
   182     019B                     SPBRG           equ	411	;# 
   183     019B                     SPBRGL          equ	411	;# 
   184     019C                     SPBRGH          equ	412	;# 
   185     019D                     RCSTA           equ	413	;# 
   186     019E                     TXSTA           equ	414	;# 
   187     019F                     BAUDCON         equ	415	;# 
   188     020C                     WPUA            equ	524	;# 
   189     020E                     WPUC            equ	526	;# 
   190     0211                     SSP1BUF         equ	529	;# 
   191     0211                     SSPBUF          equ	529	;# 
   192     0212                     SSP1ADD         equ	530	;# 
   193     0212                     SSPADD          equ	530	;# 
   194     0213                     SSP1MSK         equ	531	;# 
   195     0213                     SSPMSK          equ	531	;# 
   196     0214                     SSP1STAT        equ	532	;# 
   197     0214                     SSPSTAT         equ	532	;# 
   198     0215                     SSP1CON1        equ	533	;# 
   199     0215                     SSPCON1         equ	533	;# 
   200     0215                     SSPCON          equ	533	;# 
   201     0216                     SSP1CON2        equ	534	;# 
   202     0216                     SSPCON2         equ	534	;# 
   203     0217                     SSP1CON3        equ	535	;# 
   204     0217                     SSPCON3         equ	535	;# 
   205     0291                     CCPR1           equ	657	;# 
   206     0291                     CCPR1L          equ	657	;# 
   207     0292                     CCPR1H          equ	658	;# 
   208     0293                     CCP1CON         equ	659	;# 
   209     0294                     PWM1CON         equ	660	;# 
   210     0295                     CCP1AS          equ	661	;# 
   211     0295                     ECCP1AS         equ	661	;# 
   212     0296                     PSTR1CON        equ	662	;# 
   213     0298                     CCPR2           equ	664	;# 
   214     0298                     CCPR2L          equ	664	;# 
   215     0299                     CCPR2H          equ	665	;# 
   216     029A                     CCP2CON         equ	666	;# 
   217     029B                     PWM2CON         equ	667	;# 
   218     029C                     CCP2AS          equ	668	;# 
   219     029D                     PSTR2CON        equ	669	;# 
   220     029E                     CCPTMRS         equ	670	;# 
   221     029E                     CCPTMRS0        equ	670	;# 
   222     0311                     CCPR3           equ	785	;# 
   223     0311                     CCPR3L          equ	785	;# 
   224     0312                     CCPR3H          equ	786	;# 
   225     0313                     CCP3CON         equ	787	;# 
   226     0318                     CCPR4           equ	792	;# 
   227     0318                     CCPR4L          equ	792	;# 
   228     0319                     CCPR4H          equ	793	;# 
   229     031A                     CCP4CON         equ	794	;# 
   230     038C                     INLVLA          equ	908	;# 
   231     038E                     INLVLC          equ	910	;# 
   232     0391                     IOCAP           equ	913	;# 
   233     0392                     IOCAN           equ	914	;# 
   234     0393                     IOCAF           equ	915	;# 
   235     039A                     CLKRCON         equ	922	;# 
   236     039C                     MDCON           equ	924	;# 
   237     039D                     MDSRC           equ	925	;# 
   238     039E                     MDCARL          equ	926	;# 
   239     039F                     MDCARH          equ	927	;# 
   240     0415                     TMR4            equ	1045	;# 
   241     0416                     PR4             equ	1046	;# 
   242     0417                     T4CON           equ	1047	;# 
   243     041C                     TMR6            equ	1052	;# 
   244     041D                     PR6             equ	1053	;# 
   245     041E                     T6CON           equ	1054	;# 
   246     0FE4                     STATUS_SHAD     equ	4068	;# 
   247     0FE5                     WREG_SHAD       equ	4069	;# 
   248     0FE6                     BSR_SHAD        equ	4070	;# 
   249     0FE7                     PCLATH_SHAD     equ	4071	;# 
   250     0FE8                     FSR0L_SHAD      equ	4072	;# 
   251     0FE9                     FSR0H_SHAD      equ	4073	;# 
   252     0FEA                     FSR1L_SHAD      equ	4074	;# 
   253     0FEB                     FSR1H_SHAD      equ	4075	;# 
   254     0FED                     STKPTR          equ	4077	;# 
   255     0FEE                     TOSL            equ	4078	;# 
   256     0FEF                     TOSH            equ	4079	;# 
   257     0000                     INDF0           equ	0	;# 
   258     0001                     INDF1           equ	1	;# 
   259     0002                     PCL             equ	2	;# 
   260     0003                     STATUS          equ	3	;# 
   261     0004                     FSR0L           equ	4	;# 
   262     0005                     FSR0H           equ	5	;# 
   263     0006                     FSR1L           equ	6	;# 
   264     0007                     FSR1H           equ	7	;# 
   265     0008                     BSR             equ	8	;# 
   266     0009                     WREG            equ	9	;# 
   267     000A                     PCLATH          equ	10	;# 
   268     000B                     INTCON          equ	11	;# 
   269     000C                     PORTA           equ	12	;# 
   270     000E                     PORTC           equ	14	;# 
   271     0011                     PIR1            equ	17	;# 
   272     0012                     PIR2            equ	18	;# 
   273     0013                     PIR3            equ	19	;# 
   274     0015                     TMR0            equ	21	;# 
   275     0016                     TMR1            equ	22	;# 
   276     0016                     TMR1L           equ	22	;# 
   277     0017                     TMR1H           equ	23	;# 
   278     0018                     T1CON           equ	24	;# 
   279     0019                     T1GCON          equ	25	;# 
   280     001A                     TMR2            equ	26	;# 
   281     001B                     PR2             equ	27	;# 
   282     001C                     T2CON           equ	28	;# 
   283     001E                     CPSCON0         equ	30	;# 
   284     001F                     CPSCON1         equ	31	;# 
   285     008C                     TRISA           equ	140	;# 
   286     008E                     TRISC           equ	142	;# 
   287     0091                     PIE1            equ	145	;# 
   288     0092                     PIE2            equ	146	;# 
   289     0093                     PIE3            equ	147	;# 
   290     0095                     OPTION_REG      equ	149	;# 
   291     0096                     PCON            equ	150	;# 
   292     0097                     WDTCON          equ	151	;# 
   293     0098                     OSCTUNE         equ	152	;# 
   294     0099                     OSCCON          equ	153	;# 
   295     009A                     OSCSTAT         equ	154	;# 
   296     009B                     ADRES           equ	155	;# 
   297     009B                     ADRESL          equ	155	;# 
   298     009C                     ADRESH          equ	156	;# 
   299     009D                     ADCON0          equ	157	;# 
   300     009E                     ADCON1          equ	158	;# 
   301     010C                     LATA            equ	268	;# 
   302     010E                     LATC            equ	270	;# 
   303     0111                     CM1CON0         equ	273	;# 
   304     0112                     CM1CON1         equ	274	;# 
   305     0113                     CM2CON0         equ	275	;# 
   306     0114                     CM2CON1         equ	276	;# 
   307     0115                     CMOUT           equ	277	;# 
   308     0116                     BORCON          equ	278	;# 
   309     0117                     FVRCON          equ	279	;# 
   310     0118                     DACCON0         equ	280	;# 
   311     0119                     DACCON1         equ	281	;# 
   312     011A                     SRCON0          equ	282	;# 
   313     011B                     SRCON1          equ	283	;# 
   314     011D                     APFCON0         equ	285	;# 
   315     011E                     APFCON1         equ	286	;# 
   316     018C                     ANSELA          equ	396	;# 
   317     018E                     ANSELC          equ	398	;# 
   318     0191                     EEADR           equ	401	;# 
   319     0191                     EEADRL          equ	401	;# 
   320     0192                     EEADRH          equ	402	;# 
   321     0193                     EEDAT           equ	403	;# 
   322     0193                     EEDATL          equ	403	;# 
   323     0193                     EEDATA          equ	403	;# 
   324     0194                     EEDATH          equ	404	;# 
   325     0195                     EECON1          equ	405	;# 
   326     0196                     EECON2          equ	406	;# 
   327     0199                     RCREG           equ	409	;# 
   328     019A                     TXREG           equ	410	;# 
   329     019B                     SPBRG           equ	411	;# 
   330     019B                     SPBRGL          equ	411	;# 
   331     019C                     SPBRGH          equ	412	;# 
   332     019D                     RCSTA           equ	413	;# 
   333     019E                     TXSTA           equ	414	;# 
   334     019F                     BAUDCON         equ	415	;# 
   335     020C                     WPUA            equ	524	;# 
   336     020E                     WPUC            equ	526	;# 
   337     0211                     SSP1BUF         equ	529	;# 
   338     0211                     SSPBUF          equ	529	;# 
   339     0212                     SSP1ADD         equ	530	;# 
   340     0212                     SSPADD          equ	530	;# 
   341     0213                     SSP1MSK         equ	531	;# 
   342     0213                     SSPMSK          equ	531	;# 
   343     0214                     SSP1STAT        equ	532	;# 
   344     0214                     SSPSTAT         equ	532	;# 
   345     0215                     SSP1CON1        equ	533	;# 
   346     0215                     SSPCON1         equ	533	;# 
   347     0215                     SSPCON          equ	533	;# 
   348     0216                     SSP1CON2        equ	534	;# 
   349     0216                     SSPCON2         equ	534	;# 
   350     0217                     SSP1CON3        equ	535	;# 
   351     0217                     SSPCON3         equ	535	;# 
   352     0291                     CCPR1           equ	657	;# 
   353     0291                     CCPR1L          equ	657	;# 
   354     0292                     CCPR1H          equ	658	;# 
   355     0293                     CCP1CON         equ	659	;# 
   356     0294                     PWM1CON         equ	660	;# 
   357     0295                     CCP1AS          equ	661	;# 
   358     0295                     ECCP1AS         equ	661	;# 
   359     0296                     PSTR1CON        equ	662	;# 
   360     0298                     CCPR2           equ	664	;# 
   361     0298                     CCPR2L          equ	664	;# 
   362     0299                     CCPR2H          equ	665	;# 
   363     029A                     CCP2CON         equ	666	;# 
   364     029B                     PWM2CON         equ	667	;# 
   365     029C                     CCP2AS          equ	668	;# 
   366     029D                     PSTR2CON        equ	669	;# 
   367     029E                     CCPTMRS         equ	670	;# 
   368     029E                     CCPTMRS0        equ	670	;# 
   369     0311                     CCPR3           equ	785	;# 
   370     0311                     CCPR3L          equ	785	;# 
   371     0312                     CCPR3H          equ	786	;# 
   372     0313                     CCP3CON         equ	787	;# 
   373     0318                     CCPR4           equ	792	;# 
   374     0318                     CCPR4L          equ	792	;# 
   375     0319                     CCPR4H          equ	793	;# 
   376     031A                     CCP4CON         equ	794	;# 
   377     038C                     INLVLA          equ	908	;# 
   378     038E                     INLVLC          equ	910	;# 
   379     0391                     IOCAP           equ	913	;# 
   380     0392                     IOCAN           equ	914	;# 
   381     0393                     IOCAF           equ	915	;# 
   382     039A                     CLKRCON         equ	922	;# 
   383     039C                     MDCON           equ	924	;# 
   384     039D                     MDSRC           equ	925	;# 
   385     039E                     MDCARL          equ	926	;# 
   386     039F                     MDCARH          equ	927	;# 
   387     0415                     TMR4            equ	1045	;# 
   388     0416                     PR4             equ	1046	;# 
   389     0417                     T4CON           equ	1047	;# 
   390     041C                     TMR6            equ	1052	;# 
   391     041D                     PR6             equ	1053	;# 
   392     041E                     T6CON           equ	1054	;# 
   393     0FE4                     STATUS_SHAD     equ	4068	;# 
   394     0FE5                     WREG_SHAD       equ	4069	;# 
   395     0FE6                     BSR_SHAD        equ	4070	;# 
   396     0FE7                     PCLATH_SHAD     equ	4071	;# 
   397     0FE8                     FSR0L_SHAD      equ	4072	;# 
   398     0FE9                     FSR0H_SHAD      equ	4073	;# 
   399     0FEA                     FSR1L_SHAD      equ	4074	;# 
   400     0FEB                     FSR1H_SHAD      equ	4075	;# 
   401     0FED                     STKPTR          equ	4077	;# 
   402     0FEE                     TOSL            equ	4078	;# 
   403     0FEF                     TOSH            equ	4079	;# 
   404     0000                     INDF0           equ	0	;# 
   405     0001                     INDF1           equ	1	;# 
   406     0002                     PCL             equ	2	;# 
   407     0003                     STATUS          equ	3	;# 
   408     0004                     FSR0L           equ	4	;# 
   409     0005                     FSR0H           equ	5	;# 
   410     0006                     FSR1L           equ	6	;# 
   411     0007                     FSR1H           equ	7	;# 
   412     0008                     BSR             equ	8	;# 
   413     0009                     WREG            equ	9	;# 
   414     000A                     PCLATH          equ	10	;# 
   415     000B                     INTCON          equ	11	;# 
   416     000C                     PORTA           equ	12	;# 
   417     000E                     PORTC           equ	14	;# 
   418     0011                     PIR1            equ	17	;# 
   419     0012                     PIR2            equ	18	;# 
   420     0013                     PIR3            equ	19	;# 
   421     0015                     TMR0            equ	21	;# 
   422     0016                     TMR1            equ	22	;# 
   423     0016                     TMR1L           equ	22	;# 
   424     0017                     TMR1H           equ	23	;# 
   425     0018                     T1CON           equ	24	;# 
   426     0019                     T1GCON          equ	25	;# 
   427     001A                     TMR2            equ	26	;# 
   428     001B                     PR2             equ	27	;# 
   429     001C                     T2CON           equ	28	;# 
   430     001E                     CPSCON0         equ	30	;# 
   431     001F                     CPSCON1         equ	31	;# 
   432     008C                     TRISA           equ	140	;# 
   433     008E                     TRISC           equ	142	;# 
   434     0091                     PIE1            equ	145	;# 
   435     0092                     PIE2            equ	146	;# 
   436     0093                     PIE3            equ	147	;# 
   437     0095                     OPTION_REG      equ	149	;# 
   438     0096                     PCON            equ	150	;# 
   439     0097                     WDTCON          equ	151	;# 
   440     0098                     OSCTUNE         equ	152	;# 
   441     0099                     OSCCON          equ	153	;# 
   442     009A                     OSCSTAT         equ	154	;# 
   443     009B                     ADRES           equ	155	;# 
   444     009B                     ADRESL          equ	155	;# 
   445     009C                     ADRESH          equ	156	;# 
   446     009D                     ADCON0          equ	157	;# 
   447     009E                     ADCON1          equ	158	;# 
   448     010C                     LATA            equ	268	;# 
   449     010E                     LATC            equ	270	;# 
   450     0111                     CM1CON0         equ	273	;# 
   451     0112                     CM1CON1         equ	274	;# 
   452     0113                     CM2CON0         equ	275	;# 
   453     0114                     CM2CON1         equ	276	;# 
   454     0115                     CMOUT           equ	277	;# 
   455     0116                     BORCON          equ	278	;# 
   456     0117                     FVRCON          equ	279	;# 
   457     0118                     DACCON0         equ	280	;# 
   458     0119                     DACCON1         equ	281	;# 
   459     011A                     SRCON0          equ	282	;# 
   460     011B                     SRCON1          equ	283	;# 
   461     011D                     APFCON0         equ	285	;# 
   462     011E                     APFCON1         equ	286	;# 
   463     018C                     ANSELA          equ	396	;# 
   464     018E                     ANSELC          equ	398	;# 
   465     0191                     EEADR           equ	401	;# 
   466     0191                     EEADRL          equ	401	;# 
   467     0192                     EEADRH          equ	402	;# 
   468     0193                     EEDAT           equ	403	;# 
   469     0193                     EEDATL          equ	403	;# 
   470     0193                     EEDATA          equ	403	;# 
   471     0194                     EEDATH          equ	404	;# 
   472     0195                     EECON1          equ	405	;# 
   473     0196                     EECON2          equ	406	;# 
   474     0199                     RCREG           equ	409	;# 
   475     019A                     TXREG           equ	410	;# 
   476     019B                     SPBRG           equ	411	;# 
   477     019B                     SPBRGL          equ	411	;# 
   478     019C                     SPBRGH          equ	412	;# 
   479     019D                     RCSTA           equ	413	;# 
   480     019E                     TXSTA           equ	414	;# 
   481     019F                     BAUDCON         equ	415	;# 
   482     020C                     WPUA            equ	524	;# 
   483     020E                     WPUC            equ	526	;# 
   484     0211                     SSP1BUF         equ	529	;# 
   485     0211                     SSPBUF          equ	529	;# 
   486     0212                     SSP1ADD         equ	530	;# 
   487     0212                     SSPADD          equ	530	;# 
   488     0213                     SSP1MSK         equ	531	;# 
   489     0213                     SSPMSK          equ	531	;# 
   490     0214                     SSP1STAT        equ	532	;# 
   491     0214                     SSPSTAT         equ	532	;# 
   492     0215                     SSP1CON1        equ	533	;# 
   493     0215                     SSPCON1         equ	533	;# 
   494     0215                     SSPCON          equ	533	;# 
   495     0216                     SSP1CON2        equ	534	;# 
   496     0216                     SSPCON2         equ	534	;# 
   497     0217                     SSP1CON3        equ	535	;# 
   498     0217                     SSPCON3         equ	535	;# 
   499     0291                     CCPR1           equ	657	;# 
   500     0291                     CCPR1L          equ	657	;# 
   501     0292                     CCPR1H          equ	658	;# 
   502     0293                     CCP1CON         equ	659	;# 
   503     0294                     PWM1CON         equ	660	;# 
   504     0295                     CCP1AS          equ	661	;# 
   505     0295                     ECCP1AS         equ	661	;# 
   506     0296                     PSTR1CON        equ	662	;# 
   507     0298                     CCPR2           equ	664	;# 
   508     0298                     CCPR2L          equ	664	;# 
   509     0299                     CCPR2H          equ	665	;# 
   510     029A                     CCP2CON         equ	666	;# 
   511     029B                     PWM2CON         equ	667	;# 
   512     029C                     CCP2AS          equ	668	;# 
   513     029D                     PSTR2CON        equ	669	;# 
   514     029E                     CCPTMRS         equ	670	;# 
   515     029E                     CCPTMRS0        equ	670	;# 
   516     0311                     CCPR3           equ	785	;# 
   517     0311                     CCPR3L          equ	785	;# 
   518     0312                     CCPR3H          equ	786	;# 
   519     0313                     CCP3CON         equ	787	;# 
   520     0318                     CCPR4           equ	792	;# 
   521     0318                     CCPR4L          equ	792	;# 
   522     0319                     CCPR4H          equ	793	;# 
   523     031A                     CCP4CON         equ	794	;# 
   524     038C                     INLVLA          equ	908	;# 
   525     038E                     INLVLC          equ	910	;# 
   526     0391                     IOCAP           equ	913	;# 
   527     0392                     IOCAN           equ	914	;# 
   528     0393                     IOCAF           equ	915	;# 
   529     039A                     CLKRCON         equ	922	;# 
   530     039C                     MDCON           equ	924	;# 
   531     039D                     MDSRC           equ	925	;# 
   532     039E                     MDCARL          equ	926	;# 
   533     039F                     MDCARH          equ	927	;# 
   534     0415                     TMR4            equ	1045	;# 
   535     0416                     PR4             equ	1046	;# 
   536     0417                     T4CON           equ	1047	;# 
   537     041C                     TMR6            equ	1052	;# 
   538     041D                     PR6             equ	1053	;# 
   539     041E                     T6CON           equ	1054	;# 
   540     0FE4                     STATUS_SHAD     equ	4068	;# 
   541     0FE5                     WREG_SHAD       equ	4069	;# 
   542     0FE6                     BSR_SHAD        equ	4070	;# 
   543     0FE7                     PCLATH_SHAD     equ	4071	;# 
   544     0FE8                     FSR0L_SHAD      equ	4072	;# 
   545     0FE9                     FSR0H_SHAD      equ	4073	;# 
   546     0FEA                     FSR1L_SHAD      equ	4074	;# 
   547     0FEB                     FSR1H_SHAD      equ	4075	;# 
   548     0FED                     STKPTR          equ	4077	;# 
   549     0FEE                     TOSL            equ	4078	;# 
   550     0FEF                     TOSH            equ	4079	;# 
   551     0000                     INDF0           equ	0	;# 
   552     0001                     INDF1           equ	1	;# 
   553     0002                     PCL             equ	2	;# 
   554     0003                     STATUS          equ	3	;# 
   555     0004                     FSR0L           equ	4	;# 
   556     0005                     FSR0H           equ	5	;# 
   557     0006                     FSR1L           equ	6	;# 
   558     0007                     FSR1H           equ	7	;# 
   559     0008                     BSR             equ	8	;# 
   560     0009                     WREG            equ	9	;# 
   561     000A                     PCLATH          equ	10	;# 
   562     000B                     INTCON          equ	11	;# 
   563     000C                     PORTA           equ	12	;# 
   564     000E                     PORTC           equ	14	;# 
   565     0011                     PIR1            equ	17	;# 
   566     0012                     PIR2            equ	18	;# 
   567     0013                     PIR3            equ	19	;# 
   568     0015                     TMR0            equ	21	;# 
   569     0016                     TMR1            equ	22	;# 
   570     0016                     TMR1L           equ	22	;# 
   571     0017                     TMR1H           equ	23	;# 
   572     0018                     T1CON           equ	24	;# 
   573     0019                     T1GCON          equ	25	;# 
   574     001A                     TMR2            equ	26	;# 
   575     001B                     PR2             equ	27	;# 
   576     001C                     T2CON           equ	28	;# 
   577     001E                     CPSCON0         equ	30	;# 
   578     001F                     CPSCON1         equ	31	;# 
   579     008C                     TRISA           equ	140	;# 
   580     008E                     TRISC           equ	142	;# 
   581     0091                     PIE1            equ	145	;# 
   582     0092                     PIE2            equ	146	;# 
   583     0093                     PIE3            equ	147	;# 
   584     0095                     OPTION_REG      equ	149	;# 
   585     0096                     PCON            equ	150	;# 
   586     0097                     WDTCON          equ	151	;# 
   587     0098                     OSCTUNE         equ	152	;# 
   588     0099                     OSCCON          equ	153	;# 
   589     009A                     OSCSTAT         equ	154	;# 
   590     009B                     ADRES           equ	155	;# 
   591     009B                     ADRESL          equ	155	;# 
   592     009C                     ADRESH          equ	156	;# 
   593     009D                     ADCON0          equ	157	;# 
   594     009E                     ADCON1          equ	158	;# 
   595     010C                     LATA            equ	268	;# 
   596     010E                     LATC            equ	270	;# 
   597     0111                     CM1CON0         equ	273	;# 
   598     0112                     CM1CON1         equ	274	;# 
   599     0113                     CM2CON0         equ	275	;# 
   600     0114                     CM2CON1         equ	276	;# 
   601     0115                     CMOUT           equ	277	;# 
   602     0116                     BORCON          equ	278	;# 
   603     0117                     FVRCON          equ	279	;# 
   604     0118                     DACCON0         equ	280	;# 
   605     0119                     DACCON1         equ	281	;# 
   606     011A                     SRCON0          equ	282	;# 
   607     011B                     SRCON1          equ	283	;# 
   608     011D                     APFCON0         equ	285	;# 
   609     011E                     APFCON1         equ	286	;# 
   610     018C                     ANSELA          equ	396	;# 
   611     018E                     ANSELC          equ	398	;# 
   612     0191                     EEADR           equ	401	;# 
   613     0191                     EEADRL          equ	401	;# 
   614     0192                     EEADRH          equ	402	;# 
   615     0193                     EEDAT           equ	403	;# 
   616     0193                     EEDATL          equ	403	;# 
   617     0193                     EEDATA          equ	403	;# 
   618     0194                     EEDATH          equ	404	;# 
   619     0195                     EECON1          equ	405	;# 
   620     0196                     EECON2          equ	406	;# 
   621     0199                     RCREG           equ	409	;# 
   622     019A                     TXREG           equ	410	;# 
   623     019B                     SPBRG           equ	411	;# 
   624     019B                     SPBRGL          equ	411	;# 
   625     019C                     SPBRGH          equ	412	;# 
   626     019D                     RCSTA           equ	413	;# 
   627     019E                     TXSTA           equ	414	;# 
   628     019F                     BAUDCON         equ	415	;# 
   629     020C                     WPUA            equ	524	;# 
   630     020E                     WPUC            equ	526	;# 
   631     0211                     SSP1BUF         equ	529	;# 
   632     0211                     SSPBUF          equ	529	;# 
   633     0212                     SSP1ADD         equ	530	;# 
   634     0212                     SSPADD          equ	530	;# 
   635     0213                     SSP1MSK         equ	531	;# 
   636     0213                     SSPMSK          equ	531	;# 
   637     0214                     SSP1STAT        equ	532	;# 
   638     0214                     SSPSTAT         equ	532	;# 
   639     0215                     SSP1CON1        equ	533	;# 
   640     0215                     SSPCON1         equ	533	;# 
   641     0215                     SSPCON          equ	533	;# 
   642     0216                     SSP1CON2        equ	534	;# 
   643     0216                     SSPCON2         equ	534	;# 
   644     0217                     SSP1CON3        equ	535	;# 
   645     0217                     SSPCON3         equ	535	;# 
   646     0291                     CCPR1           equ	657	;# 
   647     0291                     CCPR1L          equ	657	;# 
   648     0292                     CCPR1H          equ	658	;# 
   649     0293                     CCP1CON         equ	659	;# 
   650     0294                     PWM1CON         equ	660	;# 
   651     0295                     CCP1AS          equ	661	;# 
   652     0295                     ECCP1AS         equ	661	;# 
   653     0296                     PSTR1CON        equ	662	;# 
   654     0298                     CCPR2           equ	664	;# 
   655     0298                     CCPR2L          equ	664	;# 
   656     0299                     CCPR2H          equ	665	;# 
   657     029A                     CCP2CON         equ	666	;# 
   658     029B                     PWM2CON         equ	667	;# 
   659     029C                     CCP2AS          equ	668	;# 
   660     029D                     PSTR2CON        equ	669	;# 
   661     029E                     CCPTMRS         equ	670	;# 
   662     029E                     CCPTMRS0        equ	670	;# 
   663     0311                     CCPR3           equ	785	;# 
   664     0311                     CCPR3L          equ	785	;# 
   665     0312                     CCPR3H          equ	786	;# 
   666     0313                     CCP3CON         equ	787	;# 
   667     0318                     CCPR4           equ	792	;# 
   668     0318                     CCPR4L          equ	792	;# 
   669     0319                     CCPR4H          equ	793	;# 
   670     031A                     CCP4CON         equ	794	;# 
   671     038C                     INLVLA          equ	908	;# 
   672     038E                     INLVLC          equ	910	;# 
   673     0391                     IOCAP           equ	913	;# 
   674     0392                     IOCAN           equ	914	;# 
   675     0393                     IOCAF           equ	915	;# 
   676     039A                     CLKRCON         equ	922	;# 
   677     039C                     MDCON           equ	924	;# 
   678     039D                     MDSRC           equ	925	;# 
   679     039E                     MDCARL          equ	926	;# 
   680     039F                     MDCARH          equ	927	;# 
   681     0415                     TMR4            equ	1045	;# 
   682     0416                     PR4             equ	1046	;# 
   683     0417                     T4CON           equ	1047	;# 
   684     041C                     TMR6            equ	1052	;# 
   685     041D                     PR6             equ	1053	;# 
   686     041E                     T6CON           equ	1054	;# 
   687     0FE4                     STATUS_SHAD     equ	4068	;# 
   688     0FE5                     WREG_SHAD       equ	4069	;# 
   689     0FE6                     BSR_SHAD        equ	4070	;# 
   690     0FE7                     PCLATH_SHAD     equ	4071	;# 
   691     0FE8                     FSR0L_SHAD      equ	4072	;# 
   692     0FE9                     FSR0H_SHAD      equ	4073	;# 
   693     0FEA                     FSR1L_SHAD      equ	4074	;# 
   694     0FEB                     FSR1H_SHAD      equ	4075	;# 
   695     0FED                     STKPTR          equ	4077	;# 
   696     0FEE                     TOSL            equ	4078	;# 
   697     0FEF                     TOSH            equ	4079	;# 
   698     0000                     INDF0           equ	0	;# 
   699     0001                     INDF1           equ	1	;# 
   700     0002                     PCL             equ	2	;# 
   701     0003                     STATUS          equ	3	;# 
   702     0004                     FSR0L           equ	4	;# 
   703     0005                     FSR0H           equ	5	;# 
   704     0006                     FSR1L           equ	6	;# 
   705     0007                     FSR1H           equ	7	;# 
   706     0008                     BSR             equ	8	;# 
   707     0009                     WREG            equ	9	;# 
   708     000A                     PCLATH          equ	10	;# 
   709     000B                     INTCON          equ	11	;# 
   710     000C                     PORTA           equ	12	;# 
   711     000E                     PORTC           equ	14	;# 
   712     0011                     PIR1            equ	17	;# 
   713     0012                     PIR2            equ	18	;# 
   714     0013                     PIR3            equ	19	;# 
   715     0015                     TMR0            equ	21	;# 
   716     0016                     TMR1            equ	22	;# 
   717     0016                     TMR1L           equ	22	;# 
   718     0017                     TMR1H           equ	23	;# 
   719     0018                     T1CON           equ	24	;# 
   720     0019                     T1GCON          equ	25	;# 
   721     001A                     TMR2            equ	26	;# 
   722     001B                     PR2             equ	27	;# 
   723     001C                     T2CON           equ	28	;# 
   724     001E                     CPSCON0         equ	30	;# 
   725     001F                     CPSCON1         equ	31	;# 
   726     008C                     TRISA           equ	140	;# 
   727     008E                     TRISC           equ	142	;# 
   728     0091                     PIE1            equ	145	;# 
   729     0092                     PIE2            equ	146	;# 
   730     0093                     PIE3            equ	147	;# 
   731     0095                     OPTION_REG      equ	149	;# 
   732     0096                     PCON            equ	150	;# 
   733     0097                     WDTCON          equ	151	;# 
   734     0098                     OSCTUNE         equ	152	;# 
   735     0099                     OSCCON          equ	153	;# 
   736     009A                     OSCSTAT         equ	154	;# 
   737     009B                     ADRES           equ	155	;# 
   738     009B                     ADRESL          equ	155	;# 
   739     009C                     ADRESH          equ	156	;# 
   740     009D                     ADCON0          equ	157	;# 
   741     009E                     ADCON1          equ	158	;# 
   742     010C                     LATA            equ	268	;# 
   743     010E                     LATC            equ	270	;# 
   744     0111                     CM1CON0         equ	273	;# 
   745     0112                     CM1CON1         equ	274	;# 
   746     0113                     CM2CON0         equ	275	;# 
   747     0114                     CM2CON1         equ	276	;# 
   748     0115                     CMOUT           equ	277	;# 
   749     0116                     BORCON          equ	278	;# 
   750     0117                     FVRCON          equ	279	;# 
   751     0118                     DACCON0         equ	280	;# 
   752     0119                     DACCON1         equ	281	;# 
   753     011A                     SRCON0          equ	282	;# 
   754     011B                     SRCON1          equ	283	;# 
   755     011D                     APFCON0         equ	285	;# 
   756     011E                     APFCON1         equ	286	;# 
   757     018C                     ANSELA          equ	396	;# 
   758     018E                     ANSELC          equ	398	;# 
   759     0191                     EEADR           equ	401	;# 
   760     0191                     EEADRL          equ	401	;# 
   761     0192                     EEADRH          equ	402	;# 
   762     0193                     EEDAT           equ	403	;# 
   763     0193                     EEDATL          equ	403	;# 
   764     0193                     EEDATA          equ	403	;# 
   765     0194                     EEDATH          equ	404	;# 
   766     0195                     EECON1          equ	405	;# 
   767     0196                     EECON2          equ	406	;# 
   768     0199                     RCREG           equ	409	;# 
   769     019A                     TXREG           equ	410	;# 
   770     019B                     SPBRG           equ	411	;# 
   771     019B                     SPBRGL          equ	411	;# 
   772     019C                     SPBRGH          equ	412	;# 
   773     019D                     RCSTA           equ	413	;# 
   774     019E                     TXSTA           equ	414	;# 
   775     019F                     BAUDCON         equ	415	;# 
   776     020C                     WPUA            equ	524	;# 
   777     020E                     WPUC            equ	526	;# 
   778     0211                     SSP1BUF         equ	529	;# 
   779     0211                     SSPBUF          equ	529	;# 
   780     0212                     SSP1ADD         equ	530	;# 
   781     0212                     SSPADD          equ	530	;# 
   782     0213                     SSP1MSK         equ	531	;# 
   783     0213                     SSPMSK          equ	531	;# 
   784     0214                     SSP1STAT        equ	532	;# 
   785     0214                     SSPSTAT         equ	532	;# 
   786     0215                     SSP1CON1        equ	533	;# 
   787     0215                     SSPCON1         equ	533	;# 
   788     0215                     SSPCON          equ	533	;# 
   789     0216                     SSP1CON2        equ	534	;# 
   790     0216                     SSPCON2         equ	534	;# 
   791     0217                     SSP1CON3        equ	535	;# 
   792     0217                     SSPCON3         equ	535	;# 
   793     0291                     CCPR1           equ	657	;# 
   794     0291                     CCPR1L          equ	657	;# 
   795     0292                     CCPR1H          equ	658	;# 
   796     0293                     CCP1CON         equ	659	;# 
   797     0294                     PWM1CON         equ	660	;# 
   798     0295                     CCP1AS          equ	661	;# 
   799     0295                     ECCP1AS         equ	661	;# 
   800     0296                     PSTR1CON        equ	662	;# 
   801     0298                     CCPR2           equ	664	;# 
   802     0298                     CCPR2L          equ	664	;# 
   803     0299                     CCPR2H          equ	665	;# 
   804     029A                     CCP2CON         equ	666	;# 
   805     029B                     PWM2CON         equ	667	;# 
   806     029C                     CCP2AS          equ	668	;# 
   807     029D                     PSTR2CON        equ	669	;# 
   808     029E                     CCPTMRS         equ	670	;# 
   809     029E                     CCPTMRS0        equ	670	;# 
   810     0311                     CCPR3           equ	785	;# 
   811     0311                     CCPR3L          equ	785	;# 
   812     0312                     CCPR3H          equ	786	;# 
   813     0313                     CCP3CON         equ	787	;# 
   814     0318                     CCPR4           equ	792	;# 
   815     0318                     CCPR4L          equ	792	;# 
   816     0319                     CCPR4H          equ	793	;# 
   817     031A                     CCP4CON         equ	794	;# 
   818     038C                     INLVLA          equ	908	;# 
   819     038E                     INLVLC          equ	910	;# 
   820     0391                     IOCAP           equ	913	;# 
   821     0392                     IOCAN           equ	914	;# 
   822     0393                     IOCAF           equ	915	;# 
   823     039A                     CLKRCON         equ	922	;# 
   824     039C                     MDCON           equ	924	;# 
   825     039D                     MDSRC           equ	925	;# 
   826     039E                     MDCARL          equ	926	;# 
   827     039F                     MDCARH          equ	927	;# 
   828     0415                     TMR4            equ	1045	;# 
   829     0416                     PR4             equ	1046	;# 
   830     0417                     T4CON           equ	1047	;# 
   831     041C                     TMR6            equ	1052	;# 
   832     041D                     PR6             equ	1053	;# 
   833     041E                     T6CON           equ	1054	;# 
   834     0FE4                     STATUS_SHAD     equ	4068	;# 
   835     0FE5                     WREG_SHAD       equ	4069	;# 
   836     0FE6                     BSR_SHAD        equ	4070	;# 
   837     0FE7                     PCLATH_SHAD     equ	4071	;# 
   838     0FE8                     FSR0L_SHAD      equ	4072	;# 
   839     0FE9                     FSR0H_SHAD      equ	4073	;# 
   840     0FEA                     FSR1L_SHAD      equ	4074	;# 
   841     0FEB                     FSR1H_SHAD      equ	4075	;# 
   842     0FED                     STKPTR          equ	4077	;# 
   843     0FEE                     TOSL            equ	4078	;# 
   844     0FEF                     TOSH            equ	4079	;# 
   845     0000                     INDF0           equ	0	;# 
   846     0001                     INDF1           equ	1	;# 
   847     0002                     PCL             equ	2	;# 
   848     0003                     STATUS          equ	3	;# 
   849     0004                     FSR0L           equ	4	;# 
   850     0005                     FSR0H           equ	5	;# 
   851     0006                     FSR1L           equ	6	;# 
   852     0007                     FSR1H           equ	7	;# 
   853     0008                     BSR             equ	8	;# 
   854     0009                     WREG            equ	9	;# 
   855     000A                     PCLATH          equ	10	;# 
   856     000B                     INTCON          equ	11	;# 
   857     000C                     PORTA           equ	12	;# 
   858     000E                     PORTC           equ	14	;# 
   859     0011                     PIR1            equ	17	;# 
   860     0012                     PIR2            equ	18	;# 
   861     0013                     PIR3            equ	19	;# 
   862     0015                     TMR0            equ	21	;# 
   863     0016                     TMR1            equ	22	;# 
   864     0016                     TMR1L           equ	22	;# 
   865     0017                     TMR1H           equ	23	;# 
   866     0018                     T1CON           equ	24	;# 
   867     0019                     T1GCON          equ	25	;# 
   868     001A                     TMR2            equ	26	;# 
   869     001B                     PR2             equ	27	;# 
   870     001C                     T2CON           equ	28	;# 
   871     001E                     CPSCON0         equ	30	;# 
   872     001F                     CPSCON1         equ	31	;# 
   873     008C                     TRISA           equ	140	;# 
   874     008E                     TRISC           equ	142	;# 
   875     0091                     PIE1            equ	145	;# 
   876     0092                     PIE2            equ	146	;# 
   877     0093                     PIE3            equ	147	;# 
   878     0095                     OPTION_REG      equ	149	;# 
   879     0096                     PCON            equ	150	;# 
   880     0097                     WDTCON          equ	151	;# 
   881     0098                     OSCTUNE         equ	152	;# 
   882     0099                     OSCCON          equ	153	;# 
   883     009A                     OSCSTAT         equ	154	;# 
   884     009B                     ADRES           equ	155	;# 
   885     009B                     ADRESL          equ	155	;# 
   886     009C                     ADRESH          equ	156	;# 
   887     009D                     ADCON0          equ	157	;# 
   888     009E                     ADCON1          equ	158	;# 
   889     010C                     LATA            equ	268	;# 
   890     010E                     LATC            equ	270	;# 
   891     0111                     CM1CON0         equ	273	;# 
   892     0112                     CM1CON1         equ	274	;# 
   893     0113                     CM2CON0         equ	275	;# 
   894     0114                     CM2CON1         equ	276	;# 
   895     0115                     CMOUT           equ	277	;# 
   896     0116                     BORCON          equ	278	;# 
   897     0117                     FVRCON          equ	279	;# 
   898     0118                     DACCON0         equ	280	;# 
   899     0119                     DACCON1         equ	281	;# 
   900     011A                     SRCON0          equ	282	;# 
   901     011B                     SRCON1          equ	283	;# 
   902     011D                     APFCON0         equ	285	;# 
   903     011E                     APFCON1         equ	286	;# 
   904     018C                     ANSELA          equ	396	;# 
   905     018E                     ANSELC          equ	398	;# 
   906     0191                     EEADR           equ	401	;# 
   907     0191                     EEADRL          equ	401	;# 
   908     0192                     EEADRH          equ	402	;# 
   909     0193                     EEDAT           equ	403	;# 
   910     0193                     EEDATL          equ	403	;# 
   911     0193                     EEDATA          equ	403	;# 
   912     0194                     EEDATH          equ	404	;# 
   913     0195                     EECON1          equ	405	;# 
   914     0196                     EECON2          equ	406	;# 
   915     0199                     RCREG           equ	409	;# 
   916     019A                     TXREG           equ	410	;# 
   917     019B                     SPBRG           equ	411	;# 
   918     019B                     SPBRGL          equ	411	;# 
   919     019C                     SPBRGH          equ	412	;# 
   920     019D                     RCSTA           equ	413	;# 
   921     019E                     TXSTA           equ	414	;# 
   922     019F                     BAUDCON         equ	415	;# 
   923     020C                     WPUA            equ	524	;# 
   924     020E                     WPUC            equ	526	;# 
   925     0211                     SSP1BUF         equ	529	;# 
   926     0211                     SSPBUF          equ	529	;# 
   927     0212                     SSP1ADD         equ	530	;# 
   928     0212                     SSPADD          equ	530	;# 
   929     0213                     SSP1MSK         equ	531	;# 
   930     0213                     SSPMSK          equ	531	;# 
   931     0214                     SSP1STAT        equ	532	;# 
   932     0214                     SSPSTAT         equ	532	;# 
   933     0215                     SSP1CON1        equ	533	;# 
   934     0215                     SSPCON1         equ	533	;# 
   935     0215                     SSPCON          equ	533	;# 
   936     0216                     SSP1CON2        equ	534	;# 
   937     0216                     SSPCON2         equ	534	;# 
   938     0217                     SSP1CON3        equ	535	;# 
   939     0217                     SSPCON3         equ	535	;# 
   940     0291                     CCPR1           equ	657	;# 
   941     0291                     CCPR1L          equ	657	;# 
   942     0292                     CCPR1H          equ	658	;# 
   943     0293                     CCP1CON         equ	659	;# 
   944     0294                     PWM1CON         equ	660	;# 
   945     0295                     CCP1AS          equ	661	;# 
   946     0295                     ECCP1AS         equ	661	;# 
   947     0296                     PSTR1CON        equ	662	;# 
   948     0298                     CCPR2           equ	664	;# 
   949     0298                     CCPR2L          equ	664	;# 
   950     0299                     CCPR2H          equ	665	;# 
   951     029A                     CCP2CON         equ	666	;# 
   952     029B                     PWM2CON         equ	667	;# 
   953     029C                     CCP2AS          equ	668	;# 
   954     029D                     PSTR2CON        equ	669	;# 
   955     029E                     CCPTMRS         equ	670	;# 
   956     029E                     CCPTMRS0        equ	670	;# 
   957     0311                     CCPR3           equ	785	;# 
   958     0311                     CCPR3L          equ	785	;# 
   959     0312                     CCPR3H          equ	786	;# 
   960     0313                     CCP3CON         equ	787	;# 
   961     0318                     CCPR4           equ	792	;# 
   962     0318                     CCPR4L          equ	792	;# 
   963     0319                     CCPR4H          equ	793	;# 
   964     031A                     CCP4CON         equ	794	;# 
   965     038C                     INLVLA          equ	908	;# 
   966     038E                     INLVLC          equ	910	;# 
   967     0391                     IOCAP           equ	913	;# 
   968     0392                     IOCAN           equ	914	;# 
   969     0393                     IOCAF           equ	915	;# 
   970     039A                     CLKRCON         equ	922	;# 
   971     039C                     MDCON           equ	924	;# 
   972     039D                     MDSRC           equ	925	;# 
   973     039E                     MDCARL          equ	926	;# 
   974     039F                     MDCARH          equ	927	;# 
   975     0415                     TMR4            equ	1045	;# 
   976     0416                     PR4             equ	1046	;# 
   977     0417                     T4CON           equ	1047	;# 
   978     041C                     TMR6            equ	1052	;# 
   979     041D                     PR6             equ	1053	;# 
   980     041E                     T6CON           equ	1054	;# 
   981     0FE4                     STATUS_SHAD     equ	4068	;# 
   982     0FE5                     WREG_SHAD       equ	4069	;# 
   983     0FE6                     BSR_SHAD        equ	4070	;# 
   984     0FE7                     PCLATH_SHAD     equ	4071	;# 
   985     0FE8                     FSR0L_SHAD      equ	4072	;# 
   986     0FE9                     FSR0H_SHAD      equ	4073	;# 
   987     0FEA                     FSR1L_SHAD      equ	4074	;# 
   988     0FEB                     FSR1H_SHAD      equ	4075	;# 
   989     0FED                     STKPTR          equ	4077	;# 
   990     0FEE                     TOSL            equ	4078	;# 
   991     0FEF                     TOSH            equ	4079	;# 
   992     0000                     INDF0           equ	0	;# 
   993     0001                     INDF1           equ	1	;# 
   994     0002                     PCL             equ	2	;# 
   995     0003                     STATUS          equ	3	;# 
   996     0004                     FSR0L           equ	4	;# 
   997     0005                     FSR0H           equ	5	;# 
   998     0006                     FSR1L           equ	6	;# 
   999     0007                     FSR1H           equ	7	;# 
  1000     0008                     BSR             equ	8	;# 
  1001     0009                     WREG            equ	9	;# 
  1002     000A                     PCLATH          equ	10	;# 
  1003     000B                     INTCON          equ	11	;# 
  1004     000C                     PORTA           equ	12	;# 
  1005     000E                     PORTC           equ	14	;# 
  1006     0011                     PIR1            equ	17	;# 
  1007     0012                     PIR2            equ	18	;# 
  1008     0013                     PIR3            equ	19	;# 
  1009     0015                     TMR0            equ	21	;# 
  1010     0016                     TMR1            equ	22	;# 
  1011     0016                     TMR1L           equ	22	;# 
  1012     0017                     TMR1H           equ	23	;# 
  1013     0018                     T1CON           equ	24	;# 
  1014     0019                     T1GCON          equ	25	;# 
  1015     001A                     TMR2            equ	26	;# 
  1016     001B                     PR2             equ	27	;# 
  1017     001C                     T2CON           equ	28	;# 
  1018     001E                     CPSCON0         equ	30	;# 
  1019     001F                     CPSCON1         equ	31	;# 
  1020     008C                     TRISA           equ	140	;# 
  1021     008E                     TRISC           equ	142	;# 
  1022     0091                     PIE1            equ	145	;# 
  1023     0092                     PIE2            equ	146	;# 
  1024     0093                     PIE3            equ	147	;# 
  1025     0095                     OPTION_REG      equ	149	;# 
  1026     0096                     PCON            equ	150	;# 
  1027     0097                     WDTCON          equ	151	;# 
  1028     0098                     OSCTUNE         equ	152	;# 
  1029     0099                     OSCCON          equ	153	;# 
  1030     009A                     OSCSTAT         equ	154	;# 
  1031     009B                     ADRES           equ	155	;# 
  1032     009B                     ADRESL          equ	155	;# 
  1033     009C                     ADRESH          equ	156	;# 
  1034     009D                     ADCON0          equ	157	;# 
  1035     009E                     ADCON1          equ	158	;# 
  1036     010C                     LATA            equ	268	;# 
  1037     010E                     LATC            equ	270	;# 
  1038     0111                     CM1CON0         equ	273	;# 
  1039     0112                     CM1CON1         equ	274	;# 
  1040     0113                     CM2CON0         equ	275	;# 
  1041     0114                     CM2CON1         equ	276	;# 
  1042     0115                     CMOUT           equ	277	;# 
  1043     0116                     BORCON          equ	278	;# 
  1044     0117                     FVRCON          equ	279	;# 
  1045     0118                     DACCON0         equ	280	;# 
  1046     0119                     DACCON1         equ	281	;# 
  1047     011A                     SRCON0          equ	282	;# 
  1048     011B                     SRCON1          equ	283	;# 
  1049     011D                     APFCON0         equ	285	;# 
  1050     011E                     APFCON1         equ	286	;# 
  1051     018C                     ANSELA          equ	396	;# 
  1052     018E                     ANSELC          equ	398	;# 
  1053     0191                     EEADR           equ	401	;# 
  1054     0191                     EEADRL          equ	401	;# 
  1055     0192                     EEADRH          equ	402	;# 
  1056     0193                     EEDAT           equ	403	;# 
  1057     0193                     EEDATL          equ	403	;# 
  1058     0193                     EEDATA          equ	403	;# 
  1059     0194                     EEDATH          equ	404	;# 
  1060     0195                     EECON1          equ	405	;# 
  1061     0196                     EECON2          equ	406	;# 
  1062     0199                     RCREG           equ	409	;# 
  1063     019A                     TXREG           equ	410	;# 
  1064     019B                     SPBRG           equ	411	;# 
  1065     019B                     SPBRGL          equ	411	;# 
  1066     019C                     SPBRGH          equ	412	;# 
  1067     019D                     RCSTA           equ	413	;# 
  1068     019E                     TXSTA           equ	414	;# 
  1069     019F                     BAUDCON         equ	415	;# 
  1070     020C                     WPUA            equ	524	;# 
  1071     020E                     WPUC            equ	526	;# 
  1072     0211                     SSP1BUF         equ	529	;# 
  1073     0211                     SSPBUF          equ	529	;# 
  1074     0212                     SSP1ADD         equ	530	;# 
  1075     0212                     SSPADD          equ	530	;# 
  1076     0213                     SSP1MSK         equ	531	;# 
  1077     0213                     SSPMSK          equ	531	;# 
  1078     0214                     SSP1STAT        equ	532	;# 
  1079     0214                     SSPSTAT         equ	532	;# 
  1080     0215                     SSP1CON1        equ	533	;# 
  1081     0215                     SSPCON1         equ	533	;# 
  1082     0215                     SSPCON          equ	533	;# 
  1083     0216                     SSP1CON2        equ	534	;# 
  1084     0216                     SSPCON2         equ	534	;# 
  1085     0217                     SSP1CON3        equ	535	;# 
  1086     0217                     SSPCON3         equ	535	;# 
  1087     0291                     CCPR1           equ	657	;# 
  1088     0291                     CCPR1L          equ	657	;# 
  1089     0292                     CCPR1H          equ	658	;# 
  1090     0293                     CCP1CON         equ	659	;# 
  1091     0294                     PWM1CON         equ	660	;# 
  1092     0295                     CCP1AS          equ	661	;# 
  1093     0295                     ECCP1AS         equ	661	;# 
  1094     0296                     PSTR1CON        equ	662	;# 
  1095     0298                     CCPR2           equ	664	;# 
  1096     0298                     CCPR2L          equ	664	;# 
  1097     0299                     CCPR2H          equ	665	;# 
  1098     029A                     CCP2CON         equ	666	;# 
  1099     029B                     PWM2CON         equ	667	;# 
  1100     029C                     CCP2AS          equ	668	;# 
  1101     029D                     PSTR2CON        equ	669	;# 
  1102     029E                     CCPTMRS         equ	670	;# 
  1103     029E                     CCPTMRS0        equ	670	;# 
  1104     0311                     CCPR3           equ	785	;# 
  1105     0311                     CCPR3L          equ	785	;# 
  1106     0312                     CCPR3H          equ	786	;# 
  1107     0313                     CCP3CON         equ	787	;# 
  1108     0318                     CCPR4           equ	792	;# 
  1109     0318                     CCPR4L          equ	792	;# 
  1110     0319                     CCPR4H          equ	793	;# 
  1111     031A                     CCP4CON         equ	794	;# 
  1112     038C                     INLVLA          equ	908	;# 
  1113     038E                     INLVLC          equ	910	;# 
  1114     0391                     IOCAP           equ	913	;# 
  1115     0392                     IOCAN           equ	914	;# 
  1116     0393                     IOCAF           equ	915	;# 
  1117     039A                     CLKRCON         equ	922	;# 
  1118     039C                     MDCON           equ	924	;# 
  1119     039D                     MDSRC           equ	925	;# 
  1120     039E                     MDCARL          equ	926	;# 
  1121     039F                     MDCARH          equ	927	;# 
  1122     0415                     TMR4            equ	1045	;# 
  1123     0416                     PR4             equ	1046	;# 
  1124     0417                     T4CON           equ	1047	;# 
  1125     041C                     TMR6            equ	1052	;# 
  1126     041D                     PR6             equ	1053	;# 
  1127     041E                     T6CON           equ	1054	;# 
  1128     0FE4                     STATUS_SHAD     equ	4068	;# 
  1129     0FE5                     WREG_SHAD       equ	4069	;# 
  1130     0FE6                     BSR_SHAD        equ	4070	;# 
  1131     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1132     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1133     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1134     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1135     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1136     0FED                     STKPTR          equ	4077	;# 
  1137     0FEE                     TOSL            equ	4078	;# 
  1138     0FEF                     TOSH            equ	4079	;# 
  1139     0000                     INDF0           equ	0	;# 
  1140     0001                     INDF1           equ	1	;# 
  1141     0002                     PCL             equ	2	;# 
  1142     0003                     STATUS          equ	3	;# 
  1143     0004                     FSR0L           equ	4	;# 
  1144     0005                     FSR0H           equ	5	;# 
  1145     0006                     FSR1L           equ	6	;# 
  1146     0007                     FSR1H           equ	7	;# 
  1147     0008                     BSR             equ	8	;# 
  1148     0009                     WREG            equ	9	;# 
  1149     000A                     PCLATH          equ	10	;# 
  1150     000B                     INTCON          equ	11	;# 
  1151     000C                     PORTA           equ	12	;# 
  1152     000E                     PORTC           equ	14	;# 
  1153     0011                     PIR1            equ	17	;# 
  1154     0012                     PIR2            equ	18	;# 
  1155     0013                     PIR3            equ	19	;# 
  1156     0015                     TMR0            equ	21	;# 
  1157     0016                     TMR1            equ	22	;# 
  1158     0016                     TMR1L           equ	22	;# 
  1159     0017                     TMR1H           equ	23	;# 
  1160     0018                     T1CON           equ	24	;# 
  1161     0019                     T1GCON          equ	25	;# 
  1162     001A                     TMR2            equ	26	;# 
  1163     001B                     PR2             equ	27	;# 
  1164     001C                     T2CON           equ	28	;# 
  1165     001E                     CPSCON0         equ	30	;# 
  1166     001F                     CPSCON1         equ	31	;# 
  1167     008C                     TRISA           equ	140	;# 
  1168     008E                     TRISC           equ	142	;# 
  1169     0091                     PIE1            equ	145	;# 
  1170     0092                     PIE2            equ	146	;# 
  1171     0093                     PIE3            equ	147	;# 
  1172     0095                     OPTION_REG      equ	149	;# 
  1173     0096                     PCON            equ	150	;# 
  1174     0097                     WDTCON          equ	151	;# 
  1175     0098                     OSCTUNE         equ	152	;# 
  1176     0099                     OSCCON          equ	153	;# 
  1177     009A                     OSCSTAT         equ	154	;# 
  1178     009B                     ADRES           equ	155	;# 
  1179     009B                     ADRESL          equ	155	;# 
  1180     009C                     ADRESH          equ	156	;# 
  1181     009D                     ADCON0          equ	157	;# 
  1182     009E                     ADCON1          equ	158	;# 
  1183     010C                     LATA            equ	268	;# 
  1184     010E                     LATC            equ	270	;# 
  1185     0111                     CM1CON0         equ	273	;# 
  1186     0112                     CM1CON1         equ	274	;# 
  1187     0113                     CM2CON0         equ	275	;# 
  1188     0114                     CM2CON1         equ	276	;# 
  1189     0115                     CMOUT           equ	277	;# 
  1190     0116                     BORCON          equ	278	;# 
  1191     0117                     FVRCON          equ	279	;# 
  1192     0118                     DACCON0         equ	280	;# 
  1193     0119                     DACCON1         equ	281	;# 
  1194     011A                     SRCON0          equ	282	;# 
  1195     011B                     SRCON1          equ	283	;# 
  1196     011D                     APFCON0         equ	285	;# 
  1197     011E                     APFCON1         equ	286	;# 
  1198     018C                     ANSELA          equ	396	;# 
  1199     018E                     ANSELC          equ	398	;# 
  1200     0191                     EEADR           equ	401	;# 
  1201     0191                     EEADRL          equ	401	;# 
  1202     0192                     EEADRH          equ	402	;# 
  1203     0193                     EEDAT           equ	403	;# 
  1204     0193                     EEDATL          equ	403	;# 
  1205     0193                     EEDATA          equ	403	;# 
  1206     0194                     EEDATH          equ	404	;# 
  1207     0195                     EECON1          equ	405	;# 
  1208     0196                     EECON2          equ	406	;# 
  1209     0199                     RCREG           equ	409	;# 
  1210     019A                     TXREG           equ	410	;# 
  1211     019B                     SPBRG           equ	411	;# 
  1212     019B                     SPBRGL          equ	411	;# 
  1213     019C                     SPBRGH          equ	412	;# 
  1214     019D                     RCSTA           equ	413	;# 
  1215     019E                     TXSTA           equ	414	;# 
  1216     019F                     BAUDCON         equ	415	;# 
  1217     020C                     WPUA            equ	524	;# 
  1218     020E                     WPUC            equ	526	;# 
  1219     0211                     SSP1BUF         equ	529	;# 
  1220     0211                     SSPBUF          equ	529	;# 
  1221     0212                     SSP1ADD         equ	530	;# 
  1222     0212                     SSPADD          equ	530	;# 
  1223     0213                     SSP1MSK         equ	531	;# 
  1224     0213                     SSPMSK          equ	531	;# 
  1225     0214                     SSP1STAT        equ	532	;# 
  1226     0214                     SSPSTAT         equ	532	;# 
  1227     0215                     SSP1CON1        equ	533	;# 
  1228     0215                     SSPCON1         equ	533	;# 
  1229     0215                     SSPCON          equ	533	;# 
  1230     0216                     SSP1CON2        equ	534	;# 
  1231     0216                     SSPCON2         equ	534	;# 
  1232     0217                     SSP1CON3        equ	535	;# 
  1233     0217                     SSPCON3         equ	535	;# 
  1234     0291                     CCPR1           equ	657	;# 
  1235     0291                     CCPR1L          equ	657	;# 
  1236     0292                     CCPR1H          equ	658	;# 
  1237     0293                     CCP1CON         equ	659	;# 
  1238     0294                     PWM1CON         equ	660	;# 
  1239     0295                     CCP1AS          equ	661	;# 
  1240     0295                     ECCP1AS         equ	661	;# 
  1241     0296                     PSTR1CON        equ	662	;# 
  1242     0298                     CCPR2           equ	664	;# 
  1243     0298                     CCPR2L          equ	664	;# 
  1244     0299                     CCPR2H          equ	665	;# 
  1245     029A                     CCP2CON         equ	666	;# 
  1246     029B                     PWM2CON         equ	667	;# 
  1247     029C                     CCP2AS          equ	668	;# 
  1248     029D                     PSTR2CON        equ	669	;# 
  1249     029E                     CCPTMRS         equ	670	;# 
  1250     029E                     CCPTMRS0        equ	670	;# 
  1251     0311                     CCPR3           equ	785	;# 
  1252     0311                     CCPR3L          equ	785	;# 
  1253     0312                     CCPR3H          equ	786	;# 
  1254     0313                     CCP3CON         equ	787	;# 
  1255     0318                     CCPR4           equ	792	;# 
  1256     0318                     CCPR4L          equ	792	;# 
  1257     0319                     CCPR4H          equ	793	;# 
  1258     031A                     CCP4CON         equ	794	;# 
  1259     038C                     INLVLA          equ	908	;# 
  1260     038E                     INLVLC          equ	910	;# 
  1261     0391                     IOCAP           equ	913	;# 
  1262     0392                     IOCAN           equ	914	;# 
  1263     0393                     IOCAF           equ	915	;# 
  1264     039A                     CLKRCON         equ	922	;# 
  1265     039C                     MDCON           equ	924	;# 
  1266     039D                     MDSRC           equ	925	;# 
  1267     039E                     MDCARL          equ	926	;# 
  1268     039F                     MDCARH          equ	927	;# 
  1269     0415                     TMR4            equ	1045	;# 
  1270     0416                     PR4             equ	1046	;# 
  1271     0417                     T4CON           equ	1047	;# 
  1272     041C                     TMR6            equ	1052	;# 
  1273     041D                     PR6             equ	1053	;# 
  1274     041E                     T6CON           equ	1054	;# 
  1275     0FE4                     STATUS_SHAD     equ	4068	;# 
  1276     0FE5                     WREG_SHAD       equ	4069	;# 
  1277     0FE6                     BSR_SHAD        equ	4070	;# 
  1278     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1279     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1280     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1281     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1282     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1283     0FED                     STKPTR          equ	4077	;# 
  1284     0FEE                     TOSL            equ	4078	;# 
  1285     0FEF                     TOSH            equ	4079	;# 
  1286     0000                     INDF0           equ	0	;# 
  1287     0001                     INDF1           equ	1	;# 
  1288     0002                     PCL             equ	2	;# 
  1289     0003                     STATUS          equ	3	;# 
  1290     0004                     FSR0L           equ	4	;# 
  1291     0005                     FSR0H           equ	5	;# 
  1292     0006                     FSR1L           equ	6	;# 
  1293     0007                     FSR1H           equ	7	;# 
  1294     0008                     BSR             equ	8	;# 
  1295     0009                     WREG            equ	9	;# 
  1296     000A                     PCLATH          equ	10	;# 
  1297     000B                     INTCON          equ	11	;# 
  1298     000C                     PORTA           equ	12	;# 
  1299     000E                     PORTC           equ	14	;# 
  1300     0011                     PIR1            equ	17	;# 
  1301     0012                     PIR2            equ	18	;# 
  1302     0013                     PIR3            equ	19	;# 
  1303     0015                     TMR0            equ	21	;# 
  1304     0016                     TMR1            equ	22	;# 
  1305     0016                     TMR1L           equ	22	;# 
  1306     0017                     TMR1H           equ	23	;# 
  1307     0018                     T1CON           equ	24	;# 
  1308     0019                     T1GCON          equ	25	;# 
  1309     001A                     TMR2            equ	26	;# 
  1310     001B                     PR2             equ	27	;# 
  1311     001C                     T2CON           equ	28	;# 
  1312     001E                     CPSCON0         equ	30	;# 
  1313     001F                     CPSCON1         equ	31	;# 
  1314     008C                     TRISA           equ	140	;# 
  1315     008E                     TRISC           equ	142	;# 
  1316     0091                     PIE1            equ	145	;# 
  1317     0092                     PIE2            equ	146	;# 
  1318     0093                     PIE3            equ	147	;# 
  1319     0095                     OPTION_REG      equ	149	;# 
  1320     0096                     PCON            equ	150	;# 
  1321     0097                     WDTCON          equ	151	;# 
  1322     0098                     OSCTUNE         equ	152	;# 
  1323     0099                     OSCCON          equ	153	;# 
  1324     009A                     OSCSTAT         equ	154	;# 
  1325     009B                     ADRES           equ	155	;# 
  1326     009B                     ADRESL          equ	155	;# 
  1327     009C                     ADRESH          equ	156	;# 
  1328     009D                     ADCON0          equ	157	;# 
  1329     009E                     ADCON1          equ	158	;# 
  1330     010C                     LATA            equ	268	;# 
  1331     010E                     LATC            equ	270	;# 
  1332     0111                     CM1CON0         equ	273	;# 
  1333     0112                     CM1CON1         equ	274	;# 
  1334     0113                     CM2CON0         equ	275	;# 
  1335     0114                     CM2CON1         equ	276	;# 
  1336     0115                     CMOUT           equ	277	;# 
  1337     0116                     BORCON          equ	278	;# 
  1338     0117                     FVRCON          equ	279	;# 
  1339     0118                     DACCON0         equ	280	;# 
  1340     0119                     DACCON1         equ	281	;# 
  1341     011A                     SRCON0          equ	282	;# 
  1342     011B                     SRCON1          equ	283	;# 
  1343     011D                     APFCON0         equ	285	;# 
  1344     011E                     APFCON1         equ	286	;# 
  1345     018C                     ANSELA          equ	396	;# 
  1346     018E                     ANSELC          equ	398	;# 
  1347     0191                     EEADR           equ	401	;# 
  1348     0191                     EEADRL          equ	401	;# 
  1349     0192                     EEADRH          equ	402	;# 
  1350     0193                     EEDAT           equ	403	;# 
  1351     0193                     EEDATL          equ	403	;# 
  1352     0193                     EEDATA          equ	403	;# 
  1353     0194                     EEDATH          equ	404	;# 
  1354     0195                     EECON1          equ	405	;# 
  1355     0196                     EECON2          equ	406	;# 
  1356     0199                     RCREG           equ	409	;# 
  1357     019A                     TXREG           equ	410	;# 
  1358     019B                     SPBRG           equ	411	;# 
  1359     019B                     SPBRGL          equ	411	;# 
  1360     019C                     SPBRGH          equ	412	;# 
  1361     019D                     RCSTA           equ	413	;# 
  1362     019E                     TXSTA           equ	414	;# 
  1363     019F                     BAUDCON         equ	415	;# 
  1364     020C                     WPUA            equ	524	;# 
  1365     020E                     WPUC            equ	526	;# 
  1366     0211                     SSP1BUF         equ	529	;# 
  1367     0211                     SSPBUF          equ	529	;# 
  1368     0212                     SSP1ADD         equ	530	;# 
  1369     0212                     SSPADD          equ	530	;# 
  1370     0213                     SSP1MSK         equ	531	;# 
  1371     0213                     SSPMSK          equ	531	;# 
  1372     0214                     SSP1STAT        equ	532	;# 
  1373     0214                     SSPSTAT         equ	532	;# 
  1374     0215                     SSP1CON1        equ	533	;# 
  1375     0215                     SSPCON1         equ	533	;# 
  1376     0215                     SSPCON          equ	533	;# 
  1377     0216                     SSP1CON2        equ	534	;# 
  1378     0216                     SSPCON2         equ	534	;# 
  1379     0217                     SSP1CON3        equ	535	;# 
  1380     0217                     SSPCON3         equ	535	;# 
  1381     0291                     CCPR1           equ	657	;# 
  1382     0291                     CCPR1L          equ	657	;# 
  1383     0292                     CCPR1H          equ	658	;# 
  1384     0293                     CCP1CON         equ	659	;# 
  1385     0294                     PWM1CON         equ	660	;# 
  1386     0295                     CCP1AS          equ	661	;# 
  1387     0295                     ECCP1AS         equ	661	;# 
  1388     0296                     PSTR1CON        equ	662	;# 
  1389     0298                     CCPR2           equ	664	;# 
  1390     0298                     CCPR2L          equ	664	;# 
  1391     0299                     CCPR2H          equ	665	;# 
  1392     029A                     CCP2CON         equ	666	;# 
  1393     029B                     PWM2CON         equ	667	;# 
  1394     029C                     CCP2AS          equ	668	;# 
  1395     029D                     PSTR2CON        equ	669	;# 
  1396     029E                     CCPTMRS         equ	670	;# 
  1397     029E                     CCPTMRS0        equ	670	;# 
  1398     0311                     CCPR3           equ	785	;# 
  1399     0311                     CCPR3L          equ	785	;# 
  1400     0312                     CCPR3H          equ	786	;# 
  1401     0313                     CCP3CON         equ	787	;# 
  1402     0318                     CCPR4           equ	792	;# 
  1403     0318                     CCPR4L          equ	792	;# 
  1404     0319                     CCPR4H          equ	793	;# 
  1405     031A                     CCP4CON         equ	794	;# 
  1406     038C                     INLVLA          equ	908	;# 
  1407     038E                     INLVLC          equ	910	;# 
  1408     0391                     IOCAP           equ	913	;# 
  1409     0392                     IOCAN           equ	914	;# 
  1410     0393                     IOCAF           equ	915	;# 
  1411     039A                     CLKRCON         equ	922	;# 
  1412     039C                     MDCON           equ	924	;# 
  1413     039D                     MDSRC           equ	925	;# 
  1414     039E                     MDCARL          equ	926	;# 
  1415     039F                     MDCARH          equ	927	;# 
  1416     0415                     TMR4            equ	1045	;# 
  1417     0416                     PR4             equ	1046	;# 
  1418     0417                     T4CON           equ	1047	;# 
  1419     041C                     TMR6            equ	1052	;# 
  1420     041D                     PR6             equ	1053	;# 
  1421     041E                     T6CON           equ	1054	;# 
  1422     0FE4                     STATUS_SHAD     equ	4068	;# 
  1423     0FE5                     WREG_SHAD       equ	4069	;# 
  1424     0FE6                     BSR_SHAD        equ	4070	;# 
  1425     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1426     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1427     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1428     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1429     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1430     0FED                     STKPTR          equ	4077	;# 
  1431     0FEE                     TOSL            equ	4078	;# 
  1432     0FEF                     TOSH            equ	4079	;# 
  1433     0000                     INDF0           equ	0	;# 
  1434     0001                     INDF1           equ	1	;# 
  1435     0002                     PCL             equ	2	;# 
  1436     0003                     STATUS          equ	3	;# 
  1437     0004                     FSR0L           equ	4	;# 
  1438     0005                     FSR0H           equ	5	;# 
  1439     0006                     FSR1L           equ	6	;# 
  1440     0007                     FSR1H           equ	7	;# 
  1441     0008                     BSR             equ	8	;# 
  1442     0009                     WREG            equ	9	;# 
  1443     000A                     PCLATH          equ	10	;# 
  1444     000B                     INTCON          equ	11	;# 
  1445     000C                     PORTA           equ	12	;# 
  1446     000E                     PORTC           equ	14	;# 
  1447     0011                     PIR1            equ	17	;# 
  1448     0012                     PIR2            equ	18	;# 
  1449     0013                     PIR3            equ	19	;# 
  1450     0015                     TMR0            equ	21	;# 
  1451     0016                     TMR1            equ	22	;# 
  1452     0016                     TMR1L           equ	22	;# 
  1453     0017                     TMR1H           equ	23	;# 
  1454     0018                     T1CON           equ	24	;# 
  1455     0019                     T1GCON          equ	25	;# 
  1456     001A                     TMR2            equ	26	;# 
  1457     001B                     PR2             equ	27	;# 
  1458     001C                     T2CON           equ	28	;# 
  1459     001E                     CPSCON0         equ	30	;# 
  1460     001F                     CPSCON1         equ	31	;# 
  1461     008C                     TRISA           equ	140	;# 
  1462     008E                     TRISC           equ	142	;# 
  1463     0091                     PIE1            equ	145	;# 
  1464     0092                     PIE2            equ	146	;# 
  1465     0093                     PIE3            equ	147	;# 
  1466     0095                     OPTION_REG      equ	149	;# 
  1467     0096                     PCON            equ	150	;# 
  1468     0097                     WDTCON          equ	151	;# 
  1469     0098                     OSCTUNE         equ	152	;# 
  1470     0099                     OSCCON          equ	153	;# 
  1471     009A                     OSCSTAT         equ	154	;# 
  1472     009B                     ADRES           equ	155	;# 
  1473     009B                     ADRESL          equ	155	;# 
  1474     009C                     ADRESH          equ	156	;# 
  1475     009D                     ADCON0          equ	157	;# 
  1476     009E                     ADCON1          equ	158	;# 
  1477     010C                     LATA            equ	268	;# 
  1478     010E                     LATC            equ	270	;# 
  1479     0111                     CM1CON0         equ	273	;# 
  1480     0112                     CM1CON1         equ	274	;# 
  1481     0113                     CM2CON0         equ	275	;# 
  1482     0114                     CM2CON1         equ	276	;# 
  1483     0115                     CMOUT           equ	277	;# 
  1484     0116                     BORCON          equ	278	;# 
  1485     0117                     FVRCON          equ	279	;# 
  1486     0118                     DACCON0         equ	280	;# 
  1487     0119                     DACCON1         equ	281	;# 
  1488     011A                     SRCON0          equ	282	;# 
  1489     011B                     SRCON1          equ	283	;# 
  1490     011D                     APFCON0         equ	285	;# 
  1491     011E                     APFCON1         equ	286	;# 
  1492     018C                     ANSELA          equ	396	;# 
  1493     018E                     ANSELC          equ	398	;# 
  1494     0191                     EEADR           equ	401	;# 
  1495     0191                     EEADRL          equ	401	;# 
  1496     0192                     EEADRH          equ	402	;# 
  1497     0193                     EEDAT           equ	403	;# 
  1498     0193                     EEDATL          equ	403	;# 
  1499     0193                     EEDATA          equ	403	;# 
  1500     0194                     EEDATH          equ	404	;# 
  1501     0195                     EECON1          equ	405	;# 
  1502     0196                     EECON2          equ	406	;# 
  1503     0199                     RCREG           equ	409	;# 
  1504     019A                     TXREG           equ	410	;# 
  1505     019B                     SPBRG           equ	411	;# 
  1506     019B                     SPBRGL          equ	411	;# 
  1507     019C                     SPBRGH          equ	412	;# 
  1508     019D                     RCSTA           equ	413	;# 
  1509     019E                     TXSTA           equ	414	;# 
  1510     019F                     BAUDCON         equ	415	;# 
  1511     020C                     WPUA            equ	524	;# 
  1512     020E                     WPUC            equ	526	;# 
  1513     0211                     SSP1BUF         equ	529	;# 
  1514     0211                     SSPBUF          equ	529	;# 
  1515     0212                     SSP1ADD         equ	530	;# 
  1516     0212                     SSPADD          equ	530	;# 
  1517     0213                     SSP1MSK         equ	531	;# 
  1518     0213                     SSPMSK          equ	531	;# 
  1519     0214                     SSP1STAT        equ	532	;# 
  1520     0214                     SSPSTAT         equ	532	;# 
  1521     0215                     SSP1CON1        equ	533	;# 
  1522     0215                     SSPCON1         equ	533	;# 
  1523     0215                     SSPCON          equ	533	;# 
  1524     0216                     SSP1CON2        equ	534	;# 
  1525     0216                     SSPCON2         equ	534	;# 
  1526     0217                     SSP1CON3        equ	535	;# 
  1527     0217                     SSPCON3         equ	535	;# 
  1528     0291                     CCPR1           equ	657	;# 
  1529     0291                     CCPR1L          equ	657	;# 
  1530     0292                     CCPR1H          equ	658	;# 
  1531     0293                     CCP1CON         equ	659	;# 
  1532     0294                     PWM1CON         equ	660	;# 
  1533     0295                     CCP1AS          equ	661	;# 
  1534     0295                     ECCP1AS         equ	661	;# 
  1535     0296                     PSTR1CON        equ	662	;# 
  1536     0298                     CCPR2           equ	664	;# 
  1537     0298                     CCPR2L          equ	664	;# 
  1538     0299                     CCPR2H          equ	665	;# 
  1539     029A                     CCP2CON         equ	666	;# 
  1540     029B                     PWM2CON         equ	667	;# 
  1541     029C                     CCP2AS          equ	668	;# 
  1542     029D                     PSTR2CON        equ	669	;# 
  1543     029E                     CCPTMRS         equ	670	;# 
  1544     029E                     CCPTMRS0        equ	670	;# 
  1545     0311                     CCPR3           equ	785	;# 
  1546     0311                     CCPR3L          equ	785	;# 
  1547     0312                     CCPR3H          equ	786	;# 
  1548     0313                     CCP3CON         equ	787	;# 
  1549     0318                     CCPR4           equ	792	;# 
  1550     0318                     CCPR4L          equ	792	;# 
  1551     0319                     CCPR4H          equ	793	;# 
  1552     031A                     CCP4CON         equ	794	;# 
  1553     038C                     INLVLA          equ	908	;# 
  1554     038E                     INLVLC          equ	910	;# 
  1555     0391                     IOCAP           equ	913	;# 
  1556     0392                     IOCAN           equ	914	;# 
  1557     0393                     IOCAF           equ	915	;# 
  1558     039A                     CLKRCON         equ	922	;# 
  1559     039C                     MDCON           equ	924	;# 
  1560     039D                     MDSRC           equ	925	;# 
  1561     039E                     MDCARL          equ	926	;# 
  1562     039F                     MDCARH          equ	927	;# 
  1563     0415                     TMR4            equ	1045	;# 
  1564     0416                     PR4             equ	1046	;# 
  1565     0417                     T4CON           equ	1047	;# 
  1566     041C                     TMR6            equ	1052	;# 
  1567     041D                     PR6             equ	1053	;# 
  1568     041E                     T6CON           equ	1054	;# 
  1569     0FE4                     STATUS_SHAD     equ	4068	;# 
  1570     0FE5                     WREG_SHAD       equ	4069	;# 
  1571     0FE6                     BSR_SHAD        equ	4070	;# 
  1572     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1573     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1574     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1575     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1576     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1577     0FED                     STKPTR          equ	4077	;# 
  1578     0FEE                     TOSL            equ	4078	;# 
  1579     0FEF                     TOSH            equ	4079	;# 
  1580     0000                     INDF0           equ	0	;# 
  1581     0001                     INDF1           equ	1	;# 
  1582     0002                     PCL             equ	2	;# 
  1583     0003                     STATUS          equ	3	;# 
  1584     0004                     FSR0L           equ	4	;# 
  1585     0005                     FSR0H           equ	5	;# 
  1586     0006                     FSR1L           equ	6	;# 
  1587     0007                     FSR1H           equ	7	;# 
  1588     0008                     BSR             equ	8	;# 
  1589     0009                     WREG            equ	9	;# 
  1590     000A                     PCLATH          equ	10	;# 
  1591     000B                     INTCON          equ	11	;# 
  1592     000C                     PORTA           equ	12	;# 
  1593     000E                     PORTC           equ	14	;# 
  1594     0011                     PIR1            equ	17	;# 
  1595     0012                     PIR2            equ	18	;# 
  1596     0013                     PIR3            equ	19	;# 
  1597     0015                     TMR0            equ	21	;# 
  1598     0016                     TMR1            equ	22	;# 
  1599     0016                     TMR1L           equ	22	;# 
  1600     0017                     TMR1H           equ	23	;# 
  1601     0018                     T1CON           equ	24	;# 
  1602     0019                     T1GCON          equ	25	;# 
  1603     001A                     TMR2            equ	26	;# 
  1604     001B                     PR2             equ	27	;# 
  1605     001C                     T2CON           equ	28	;# 
  1606     001E                     CPSCON0         equ	30	;# 
  1607     001F                     CPSCON1         equ	31	;# 
  1608     008C                     TRISA           equ	140	;# 
  1609     008E                     TRISC           equ	142	;# 
  1610     0091                     PIE1            equ	145	;# 
  1611     0092                     PIE2            equ	146	;# 
  1612     0093                     PIE3            equ	147	;# 
  1613     0095                     OPTION_REG      equ	149	;# 
  1614     0096                     PCON            equ	150	;# 
  1615     0097                     WDTCON          equ	151	;# 
  1616     0098                     OSCTUNE         equ	152	;# 
  1617     0099                     OSCCON          equ	153	;# 
  1618     009A                     OSCSTAT         equ	154	;# 
  1619     009B                     ADRES           equ	155	;# 
  1620     009B                     ADRESL          equ	155	;# 
  1621     009C                     ADRESH          equ	156	;# 
  1622     009D                     ADCON0          equ	157	;# 
  1623     009E                     ADCON1          equ	158	;# 
  1624     010C                     LATA            equ	268	;# 
  1625     010E                     LATC            equ	270	;# 
  1626     0111                     CM1CON0         equ	273	;# 
  1627     0112                     CM1CON1         equ	274	;# 
  1628     0113                     CM2CON0         equ	275	;# 
  1629     0114                     CM2CON1         equ	276	;# 
  1630     0115                     CMOUT           equ	277	;# 
  1631     0116                     BORCON          equ	278	;# 
  1632     0117                     FVRCON          equ	279	;# 
  1633     0118                     DACCON0         equ	280	;# 
  1634     0119                     DACCON1         equ	281	;# 
  1635     011A                     SRCON0          equ	282	;# 
  1636     011B                     SRCON1          equ	283	;# 
  1637     011D                     APFCON0         equ	285	;# 
  1638     011E                     APFCON1         equ	286	;# 
  1639     018C                     ANSELA          equ	396	;# 
  1640     018E                     ANSELC          equ	398	;# 
  1641     0191                     EEADR           equ	401	;# 
  1642     0191                     EEADRL          equ	401	;# 
  1643     0192                     EEADRH          equ	402	;# 
  1644     0193                     EEDAT           equ	403	;# 
  1645     0193                     EEDATL          equ	403	;# 
  1646     0193                     EEDATA          equ	403	;# 
  1647     0194                     EEDATH          equ	404	;# 
  1648     0195                     EECON1          equ	405	;# 
  1649     0196                     EECON2          equ	406	;# 
  1650     0199                     RCREG           equ	409	;# 
  1651     019A                     TXREG           equ	410	;# 
  1652     019B                     SPBRG           equ	411	;# 
  1653     019B                     SPBRGL          equ	411	;# 
  1654     019C                     SPBRGH          equ	412	;# 
  1655     019D                     RCSTA           equ	413	;# 
  1656     019E                     TXSTA           equ	414	;# 
  1657     019F                     BAUDCON         equ	415	;# 
  1658     020C                     WPUA            equ	524	;# 
  1659     020E                     WPUC            equ	526	;# 
  1660     0211                     SSP1BUF         equ	529	;# 
  1661     0211                     SSPBUF          equ	529	;# 
  1662     0212                     SSP1ADD         equ	530	;# 
  1663     0212                     SSPADD          equ	530	;# 
  1664     0213                     SSP1MSK         equ	531	;# 
  1665     0213                     SSPMSK          equ	531	;# 
  1666     0214                     SSP1STAT        equ	532	;# 
  1667     0214                     SSPSTAT         equ	532	;# 
  1668     0215                     SSP1CON1        equ	533	;# 
  1669     0215                     SSPCON1         equ	533	;# 
  1670     0215                     SSPCON          equ	533	;# 
  1671     0216                     SSP1CON2        equ	534	;# 
  1672     0216                     SSPCON2         equ	534	;# 
  1673     0217                     SSP1CON3        equ	535	;# 
  1674     0217                     SSPCON3         equ	535	;# 
  1675     0291                     CCPR1           equ	657	;# 
  1676     0291                     CCPR1L          equ	657	;# 
  1677     0292                     CCPR1H          equ	658	;# 
  1678     0293                     CCP1CON         equ	659	;# 
  1679     0294                     PWM1CON         equ	660	;# 
  1680     0295                     CCP1AS          equ	661	;# 
  1681     0295                     ECCP1AS         equ	661	;# 
  1682     0296                     PSTR1CON        equ	662	;# 
  1683     0298                     CCPR2           equ	664	;# 
  1684     0298                     CCPR2L          equ	664	;# 
  1685     0299                     CCPR2H          equ	665	;# 
  1686     029A                     CCP2CON         equ	666	;# 
  1687     029B                     PWM2CON         equ	667	;# 
  1688     029C                     CCP2AS          equ	668	;# 
  1689     029D                     PSTR2CON        equ	669	;# 
  1690     029E                     CCPTMRS         equ	670	;# 
  1691     029E                     CCPTMRS0        equ	670	;# 
  1692     0311                     CCPR3           equ	785	;# 
  1693     0311                     CCPR3L          equ	785	;# 
  1694     0312                     CCPR3H          equ	786	;# 
  1695     0313                     CCP3CON         equ	787	;# 
  1696     0318                     CCPR4           equ	792	;# 
  1697     0318                     CCPR4L          equ	792	;# 
  1698     0319                     CCPR4H          equ	793	;# 
  1699     031A                     CCP4CON         equ	794	;# 
  1700     038C                     INLVLA          equ	908	;# 
  1701     038E                     INLVLC          equ	910	;# 
  1702     0391                     IOCAP           equ	913	;# 
  1703     0392                     IOCAN           equ	914	;# 
  1704     0393                     IOCAF           equ	915	;# 
  1705     039A                     CLKRCON         equ	922	;# 
  1706     039C                     MDCON           equ	924	;# 
  1707     039D                     MDSRC           equ	925	;# 
  1708     039E                     MDCARL          equ	926	;# 
  1709     039F                     MDCARH          equ	927	;# 
  1710     0415                     TMR4            equ	1045	;# 
  1711     0416                     PR4             equ	1046	;# 
  1712     0417                     T4CON           equ	1047	;# 
  1713     041C                     TMR6            equ	1052	;# 
  1714     041D                     PR6             equ	1053	;# 
  1715     041E                     T6CON           equ	1054	;# 
  1716     0FE4                     STATUS_SHAD     equ	4068	;# 
  1717     0FE5                     WREG_SHAD       equ	4069	;# 
  1718     0FE6                     BSR_SHAD        equ	4070	;# 
  1719     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1720     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1721     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1722     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1723     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1724     0FED                     STKPTR          equ	4077	;# 
  1725     0FEE                     TOSL            equ	4078	;# 
  1726     0FEF                     TOSH            equ	4079	;# 
  1727     0000                     INDF0           equ	0	;# 
  1728     0001                     INDF1           equ	1	;# 
  1729     0002                     PCL             equ	2	;# 
  1730     0003                     STATUS          equ	3	;# 
  1731     0004                     FSR0L           equ	4	;# 
  1732     0005                     FSR0H           equ	5	;# 
  1733     0006                     FSR1L           equ	6	;# 
  1734     0007                     FSR1H           equ	7	;# 
  1735     0008                     BSR             equ	8	;# 
  1736     0009                     WREG            equ	9	;# 
  1737     000A                     PCLATH          equ	10	;# 
  1738     000B                     INTCON          equ	11	;# 
  1739     000C                     PORTA           equ	12	;# 
  1740     000E                     PORTC           equ	14	;# 
  1741     0011                     PIR1            equ	17	;# 
  1742     0012                     PIR2            equ	18	;# 
  1743     0013                     PIR3            equ	19	;# 
  1744     0015                     TMR0            equ	21	;# 
  1745     0016                     TMR1            equ	22	;# 
  1746     0016                     TMR1L           equ	22	;# 
  1747     0017                     TMR1H           equ	23	;# 
  1748     0018                     T1CON           equ	24	;# 
  1749     0019                     T1GCON          equ	25	;# 
  1750     001A                     TMR2            equ	26	;# 
  1751     001B                     PR2             equ	27	;# 
  1752     001C                     T2CON           equ	28	;# 
  1753     001E                     CPSCON0         equ	30	;# 
  1754     001F                     CPSCON1         equ	31	;# 
  1755     008C                     TRISA           equ	140	;# 
  1756     008E                     TRISC           equ	142	;# 
  1757     0091                     PIE1            equ	145	;# 
  1758     0092                     PIE2            equ	146	;# 
  1759     0093                     PIE3            equ	147	;# 
  1760     0095                     OPTION_REG      equ	149	;# 
  1761     0096                     PCON            equ	150	;# 
  1762     0097                     WDTCON          equ	151	;# 
  1763     0098                     OSCTUNE         equ	152	;# 
  1764     0099                     OSCCON          equ	153	;# 
  1765     009A                     OSCSTAT         equ	154	;# 
  1766     009B                     ADRES           equ	155	;# 
  1767     009B                     ADRESL          equ	155	;# 
  1768     009C                     ADRESH          equ	156	;# 
  1769     009D                     ADCON0          equ	157	;# 
  1770     009E                     ADCON1          equ	158	;# 
  1771     010C                     LATA            equ	268	;# 
  1772     010E                     LATC            equ	270	;# 
  1773     0111                     CM1CON0         equ	273	;# 
  1774     0112                     CM1CON1         equ	274	;# 
  1775     0113                     CM2CON0         equ	275	;# 
  1776     0114                     CM2CON1         equ	276	;# 
  1777     0115                     CMOUT           equ	277	;# 
  1778     0116                     BORCON          equ	278	;# 
  1779     0117                     FVRCON          equ	279	;# 
  1780     0118                     DACCON0         equ	280	;# 
  1781     0119                     DACCON1         equ	281	;# 
  1782     011A                     SRCON0          equ	282	;# 
  1783     011B                     SRCON1          equ	283	;# 
  1784     011D                     APFCON0         equ	285	;# 
  1785     011E                     APFCON1         equ	286	;# 
  1786     018C                     ANSELA          equ	396	;# 
  1787     018E                     ANSELC          equ	398	;# 
  1788     0191                     EEADR           equ	401	;# 
  1789     0191                     EEADRL          equ	401	;# 
  1790     0192                     EEADRH          equ	402	;# 
  1791     0193                     EEDAT           equ	403	;# 
  1792     0193                     EEDATL          equ	403	;# 
  1793     0193                     EEDATA          equ	403	;# 
  1794     0194                     EEDATH          equ	404	;# 
  1795     0195                     EECON1          equ	405	;# 
  1796     0196                     EECON2          equ	406	;# 
  1797     0199                     RCREG           equ	409	;# 
  1798     019A                     TXREG           equ	410	;# 
  1799     019B                     SPBRG           equ	411	;# 
  1800     019B                     SPBRGL          equ	411	;# 
  1801     019C                     SPBRGH          equ	412	;# 
  1802     019D                     RCSTA           equ	413	;# 
  1803     019E                     TXSTA           equ	414	;# 
  1804     019F                     BAUDCON         equ	415	;# 
  1805     020C                     WPUA            equ	524	;# 
  1806     020E                     WPUC            equ	526	;# 
  1807     0211                     SSP1BUF         equ	529	;# 
  1808     0211                     SSPBUF          equ	529	;# 
  1809     0212                     SSP1ADD         equ	530	;# 
  1810     0212                     SSPADD          equ	530	;# 
  1811     0213                     SSP1MSK         equ	531	;# 
  1812     0213                     SSPMSK          equ	531	;# 
  1813     0214                     SSP1STAT        equ	532	;# 
  1814     0214                     SSPSTAT         equ	532	;# 
  1815     0215                     SSP1CON1        equ	533	;# 
  1816     0215                     SSPCON1         equ	533	;# 
  1817     0215                     SSPCON          equ	533	;# 
  1818     0216                     SSP1CON2        equ	534	;# 
  1819     0216                     SSPCON2         equ	534	;# 
  1820     0217                     SSP1CON3        equ	535	;# 
  1821     0217                     SSPCON3         equ	535	;# 
  1822     0291                     CCPR1           equ	657	;# 
  1823     0291                     CCPR1L          equ	657	;# 
  1824     0292                     CCPR1H          equ	658	;# 
  1825     0293                     CCP1CON         equ	659	;# 
  1826     0294                     PWM1CON         equ	660	;# 
  1827     0295                     CCP1AS          equ	661	;# 
  1828     0295                     ECCP1AS         equ	661	;# 
  1829     0296                     PSTR1CON        equ	662	;# 
  1830     0298                     CCPR2           equ	664	;# 
  1831     0298                     CCPR2L          equ	664	;# 
  1832     0299                     CCPR2H          equ	665	;# 
  1833     029A                     CCP2CON         equ	666	;# 
  1834     029B                     PWM2CON         equ	667	;# 
  1835     029C                     CCP2AS          equ	668	;# 
  1836     029D                     PSTR2CON        equ	669	;# 
  1837     029E                     CCPTMRS         equ	670	;# 
  1838     029E                     CCPTMRS0        equ	670	;# 
  1839     0311                     CCPR3           equ	785	;# 
  1840     0311                     CCPR3L          equ	785	;# 
  1841     0312                     CCPR3H          equ	786	;# 
  1842     0313                     CCP3CON         equ	787	;# 
  1843     0318                     CCPR4           equ	792	;# 
  1844     0318                     CCPR4L          equ	792	;# 
  1845     0319                     CCPR4H          equ	793	;# 
  1846     031A                     CCP4CON         equ	794	;# 
  1847     038C                     INLVLA          equ	908	;# 
  1848     038E                     INLVLC          equ	910	;# 
  1849     0391                     IOCAP           equ	913	;# 
  1850     0392                     IOCAN           equ	914	;# 
  1851     0393                     IOCAF           equ	915	;# 
  1852     039A                     CLKRCON         equ	922	;# 
  1853     039C                     MDCON           equ	924	;# 
  1854     039D                     MDSRC           equ	925	;# 
  1855     039E                     MDCARL          equ	926	;# 
  1856     039F                     MDCARH          equ	927	;# 
  1857     0415                     TMR4            equ	1045	;# 
  1858     0416                     PR4             equ	1046	;# 
  1859     0417                     T4CON           equ	1047	;# 
  1860     041C                     TMR6            equ	1052	;# 
  1861     041D                     PR6             equ	1053	;# 
  1862     041E                     T6CON           equ	1054	;# 
  1863     0FE4                     STATUS_SHAD     equ	4068	;# 
  1864     0FE5                     WREG_SHAD       equ	4069	;# 
  1865     0FE6                     BSR_SHAD        equ	4070	;# 
  1866     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1867     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1868     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1869     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1870     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1871     0FED                     STKPTR          equ	4077	;# 
  1872     0FEE                     TOSL            equ	4078	;# 
  1873     0FEF                     TOSH            equ	4079	;_dataBuffer
  1874                           
  1875 ;; Function _EEPROM_ByteWrite is unused but had its address taken
  1876     0000                     _EEPROM_ByteWrite equ	0
  1877                           
  1878 ;; Function _EEPROM_ByteRead is unused but had its address taken
  1879     0000                     _EEPROM_ByteRead equ	0
  1880                           
  1881 ;; Function _NVM_IsBusy is unused but had its address taken
  1882     0000                     _NVM_IsBusy     equ	0
  1883                           
  1884 ;; Function _SPI1_Deinitialize is unused but had its address taken
  1885     0000                     _SPI1_Deinitialize equ	0
  1886                           
  1887 ;; Function _SPI1_ByteRead is unused but had its address taken
  1888     0000                     _SPI1_ByteRead  equ	0
  1889                           
  1890 ;; Function _SPI1_IsRxReady is unused but had its address taken
  1891     0000                     _SPI1_IsRxReady equ	0
  1892                           
  1893 ;; Function _SPI1_IsTxReady is unused but had its address taken
  1894     0000                     _SPI1_IsTxReady equ	0
  1895                           
  1896 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  1897     0000                     _INT_DefaultInterruptHandler equ	0
  1898                           
  1899                           	psect	stringtext1
  1900     1000                     __pstringtext1:
  1901     1000                     _SPI1_Host:
  1902     1000  349A               	retlw	low _SPI1_Initialize
  1903     1001  340E               	retlw	high _SPI1_Initialize
  1904     1002  3400               	retlw	0
  1905     1003  3400               	retlw	0
  1906     1004  34F9               	retlw	low _SPI1_Open
  1907     1005  3400               	retlw	high _SPI1_Open
  1908     1006  347F               	retlw	low _SPI1_Close
  1909     1007  340E               	retlw	high _SPI1_Close
  1910     1008  34DA               	retlw	low _SPI1_BufferExchange
  1911     1009  340F               	retlw	high _SPI1_BufferExchange
  1912     100A  3493               	retlw	low _SPI1_BufferRead
  1913     100B  340F               	retlw	high _SPI1_BufferRead
  1914     100C  3473               	retlw	low _SPI1_BufferWrite
  1915     100D  340F               	retlw	high _SPI1_BufferWrite
  1916     100E  34AF               	retlw	low _SPI1_ByteExchange
  1917     100F  340E               	retlw	high _SPI1_ByteExchange
  1918     1010  3400               	retlw	0
  1919     1011  3400               	retlw	0
  1920     1012  3488               	retlw	low _SPI1_ByteWrite
  1921     1013  340E               	retlw	high _SPI1_ByteWrite
  1922     1014  3400               	retlw	0
  1923     1015  3400               	retlw	0
  1924     1016  3400               	retlw	0
  1925     1017  3400               	retlw	0
  1926     1018  3400               	retlw	0
  1927     1019  3400               	retlw	0
  1928     101A  3400               	retlw	0
  1929     101B  3400               	retlw	0
  1930     101C                     __end_of_SPI1_Host:
  1931                           
  1932                           	psect	stringtext2
  1933     101C                     __pstringtext2:
  1934     101C                     _spi1_configuration:
  1935     101C  3400               	retlw	0
  1936     101D  341A               	retlw	26
  1937     101E  3410               	retlw	16
  1938     101F  3407               	retlw	7
  1939     1020  3400               	retlw	0
  1940     1021  3440               	retlw	64
  1941     1022  340A               	retlw	10
  1942     1023  3410               	retlw	16
  1943     1024  3407               	retlw	7
  1944     1025  3400               	retlw	0
  1945     1026  3464               	retlw	100
  1946     1027  3400               	retlw	0
  1947     1028  3410               	retlw	16
  1948     1029  3401               	retlw	1
  1949     102A  3400               	retlw	0
  1950     102B                     __end_of_spi1_configuration:
  1951                           
  1952                           	psect	stringtext3
  1953     102B                     __pstringtext3:
  1954     102B                     _eeprom_interface:
  1955     102B  3400               	retlw	0
  1956     102C  3400               	retlw	0
  1957     102D  3400               	retlw	0
  1958     102E  3400               	retlw	0
  1959     102F  3400               	retlw	0
  1960     1030  3400               	retlw	0
  1961     1031  3400               	retlw	0
  1962     1032  3400               	retlw	0
  1963     1033  3400               	retlw	0
  1964     1034  3400               	retlw	0
  1965     1035  3400               	retlw	0
  1966     1036  3400               	retlw	0
  1967     1037  3400               	retlw	0
  1968     1038  3400               	retlw	0
  1969     1039                     __end_of_eeprom_interface:
  1970                           
  1971                           	psect	stringtext4
  1972     1051                     __pstringtext4:
  1973     1051                     _acceleration_squared_threshold:
  1974     1051  34B0               	retlw	176
  1975     1052  3404               	retlw	4
  1976     1053                     __end_of_acceleration_squared_threshold:
  1977                           
  1978                           	psect	stringtext5
  1979     1039                     __pstringtext5:
  1980     1039                     _ADXL345_init_settings:
  1981     1039  3418               	retlw	24
  1982     103A  3403               	retlw	3
  1983     103B  34FF               	retlw	255
  1984     103C  347F               	retlw	127
  1985     103D  3407               	retlw	7
  1986     103E  3418               	retlw	24
  1987     103F  3400               	retlw	0
  1988     1040  3400               	retlw	0
  1989     1041  3417               	retlw	23
  1990     1042  3408               	retlw	8
  1991     1043  3404               	retlw	4
  1992     1044  3400               	retlw	0
  1993     1045                     __end_of_ADXL345_init_settings:
  1994                           
  1995                           	psect	stringtext6
  1996     1045                     __pstringtext6:
  1997     1045                     _no_motion_init:
  1998     1045  3408               	retlw	8
  1999     1046  3403               	retlw	3
  2000     1047  3402               	retlw	2
  2001     1048  34FF               	retlw	255
  2002     1049                     __end_of_no_motion_init:
  2003                           
  2004                           	psect	stringtext7
  2005     1049                     __pstringtext7:
  2006     1049                     _impact_init:
  2007     1049  3430               	retlw	48
  2008     104A  3403               	retlw	3
  2009     104B  3401               	retlw	1
  2010     104C  347F               	retlw	127
  2011     104D                     __end_of_impact_init:
  2012                           
  2013                           	psect	stringtext8
  2014     104D                     __pstringtext8:
  2015     104D                     _fall_init:
  2016     104D  3418               	retlw	24
  2017     104E  3403               	retlw	3
  2018     104F  34FF               	retlw	255
  2019     1050  347F               	retlw	127
  2020     1051                     __end_of_fall_init:
  2021                           
  2022                           	psect	nvBANK0
  2023     0064                     __pnvBANK0:
  2024     0064                     _INT_InterruptHandler:
  2025     0064                     	ds	2
  2026     000C                     _PORTAbits      set	12
  2027     0011                     _PIR1bits       set	17
  2028     000B                     _INTCONbits     set	11
  2029     0097                     _WDTCON         set	151
  2030     0098                     _OSCTUNE        set	152
  2031     0099                     _OSCCON         set	153
  2032     008E                     _TRISC          set	142
  2033     008C                     _TRISA          set	140
  2034     0095                     _OPTION_REGbits set	149
  2035     0091                     _PIE1bits       set	145
  2036     010E                     _LATCbits       set	270
  2037     0116                     _BORCON         set	278
  2038     010C                     _LATAbits       set	268
  2039     011D                     _APFCON0        set	285
  2040     010E                     _LATC           set	270
  2041     010C                     _LATA           set	268
  2042     0191                     _EEADR          set	401
  2043     0193                     _EEDATA         set	403
  2044     0195                     _EECON1         set	405
  2045     018E                     _ANSELC         set	398
  2046     018C                     _ANSELA         set	396
  2047     0196                     _EECON2         set	406
  2048     0193                     _EEDATL         set	403
  2049     0194                     _EEDATH         set	404
  2050     0191                     _EEADRL         set	401
  2051     0192                     _EEADRH         set	402
  2052     0195                     _EECON1bits     set	405
  2053     0CAD                     _LWLO           set	3245
  2054     020E                     _WPUC           set	526
  2055     020C                     _WPUA           set	524
  2056     0211                     _SSP1BUF        set	529
  2057     0215                     _SSP1CON1bits   set	533
  2058     0212                     _SSP1ADD        set	530
  2059     0217                     _SSP1CON3       set	535
  2060     0215                     _SSP1CON1       set	533
  2061     0214                     _SSP1STAT       set	532
  2062     0393                     _IOCAFbits      set	915
  2063     0393                     _IOCAF          set	915
  2064     0392                     _IOCAN          set	914
  2065     0391                     _IOCAP          set	913
  2066     038E                     _INLVLC         set	910
  2067     038C                     _INLVLA         set	908
  2068                           
  2069                           	psect	cinit
  2070     07DA                     start_initialization:	
  2071                           ; #config settings
  2072                           
  2073     07DA                     __initialization:	;BIGRAM
  2074                           
  2075                           ; Clear objects allocated to BIGRAM
  2076     07DA  30F0               	movlw	low (0+8944)
  2077     07DB  0084               	movwf	4
  2078     07DC  3022               	movlw	high (0+8944)
  2079     07DD  0085               	movwf	5
  2080     07DE  3000               	movlw	0
  2081     07DF  00FE               	movwf	btemp
  2082     07E0  3001               	movlw	1
  2083     07E1  00FF               	movwf	btemp+1
  2084     07E2  318E  26BB  3187   	fcall	clear_ram0
  2085                           
  2086                           ; Clear objects allocated to COMMON
  2087     07E5  01FC               	clrf	__pbssCOMMON& (0+127)
  2088     07E6  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  2089                           
  2090                           ; Clear objects allocated to BANK0
  2091     07E7  3055               	movlw	low __pbssBANK0
  2092     07E8  0084               	movwf	4
  2093     07E9  3000               	movlw	high __pbssBANK0
  2094     07EA  0085               	movwf	5
  2095     07EB  300F               	movlw	15
  2096     07EC  00FE               	movwf	btemp
  2097     07ED  3000               	movlw	0
  2098     07EE  00FF               	movwf	btemp+1
  2099     07EF  318E  26BB  3187   	fcall	clear_ram0
  2100                           
  2101                           ; Clear objects allocated to BANK1
  2102     07F2  30DE               	movlw	low __pbssBANK1
  2103     07F3  0084               	movwf	4
  2104     07F4  3000               	movlw	high __pbssBANK1
  2105     07F5  0085               	movwf	5
  2106     07F6  300C               	movlw	12
  2107     07F7  00FE               	movwf	btemp
  2108     07F8  3000               	movlw	0
  2109     07F9  00FF               	movwf	btemp+1
  2110     07FA  318E  26BB  3187   	fcall	clear_ram0
  2111     07FD                     end_of_initialization:	
  2112                           ;End of C runtime variable initialization code
  2113                           
  2114     07FD                     __end_of__initialization:
  2115     07FD  0020               	movlb	0
  2116     07FE  3184  2C5E         	ljmp	_main	;jump to C main() function
  2117                           
  2118                           	psect	bssCOMMON
  2119     007C                     __pbssCOMMON:
  2120     007C                     _unlockKeyHigh:
  2121     007C                     	ds	1
  2122     007D                     _unlockKeyLow:
  2123     007D                     	ds	1
  2124                           
  2125                           	psect	bssBANK0
  2126     0055                     __pbssBANK0:
  2127     0055                     orientation_Up@F2713:
  2128     0055                     	ds	6
  2129     005B                     _orientation_check_timer_20ms:
  2130     005B                     	ds	2
  2131     005D                     _timer_20ms:
  2132     005D                     	ds	2
  2133     005F                     ADXL345_validation@F2697:
  2134     005F                     	ds	2
  2135     0061                     _SW1_InterruptHandler:
  2136     0061                     	ds	2
  2137     0063                     _good_orientation_count:
  2138     0063                     	ds	1
  2139                           
  2140                           	psect	bssBANK1
  2141     00DE                     __pbssBANK1:
  2142     00DE                     calibrate@F2724:
  2143     00DE                     	ds	12
  2144                           
  2145                           	psect	clrtext
  2146     0EBB                     clear_ram0:	
  2147                           ;	Called with FSR0 containing the base address, and
  2148                           ;	btemp/btemp+1 has the size to clear
  2149                           
  2150     0EBB  0064               	clrwdt	;clear the watchdog before getting into this loop
  2151     0EBC                     clrloop0:
  2152     0EBC  0180               	clrf	0	;clear RAM location pointed to by FSR
  2153     0EBD  3101               	addfsr 0,1
  2154     0EBE  3001               	movlw	1
  2155     0EBF  02FE               	subwf	btemp,f
  2156     0EC0  3000               	movlw	0
  2157     0EC1  3BFF               	subwfb	btemp+1,f
  2158     0EC2  087F               	movf	btemp+1,w
  2159     0EC3  047E               	iorwf	btemp,w
  2160     0EC4  1D03               	skipz
  2161     0EC5  2EBC               	goto	clrloop0	;have we reached the end yet?
  2162     0EC6  3400               	retlw	0	;all done for this memory range, return
  2163                           
  2164                           	psect	cstackBANK1
  2165     00A0                     __pcstackBANK1:
  2166     00A0                     calibrate@acc_data:
  2167                           
  2168                           ; 12 bytes @ 0x0
  2169     00A0                     	ds	12
  2170     00AC                     calibrate@Z_n1g:
  2171                           
  2172                           ; 2 bytes @ 0xC
  2173     00AC                     	ds	2
  2174     00AE                     calibrate@sum_X:
  2175                           
  2176                           ; 2 bytes @ 0xE
  2177     00AE                     	ds	2
  2178     00B0                     calibrate@sum_Y:
  2179                           
  2180                           ; 2 bytes @ 0x10
  2181     00B0                     	ds	2
  2182     00B2                     calibrate@offset_0g_X:
  2183                           
  2184                           ; 2 bytes @ 0x12
  2185     00B2                     	ds	2
  2186     00B4                     calibrate@offset_0g_Y:
  2187                           
  2188                           ; 2 bytes @ 0x14
  2189     00B4                     	ds	2
  2190     00B6                     calibrate@offset_0g_Z:
  2191                           
  2192                           ; 2 bytes @ 0x16
  2193     00B6                     	ds	2
  2194     00B8                     calibrate@i:
  2195                           
  2196                           ; 2 bytes @ 0x18
  2197     00B8                     	ds	2
  2198     00BA                     calibrate@i_995:
  2199                           
  2200                           ; 2 bytes @ 0x1A
  2201     00BA                     	ds	2
  2202     00BC                     calibrate@sum_Z:
  2203                           
  2204                           ; 2 bytes @ 0x1C
  2205     00BC                     	ds	2
  2206     00BE                     calibrate@sum_X_avg:
  2207                           
  2208                           ; 2 bytes @ 0x1E
  2209     00BE                     	ds	2
  2210     00C0                     calibrate@sum_Y_avg:
  2211                           
  2212                           ; 2 bytes @ 0x20
  2213     00C0                     	ds	2
  2214     00C2                     calibrate@msg:
  2215                           
  2216                           ; 26 bytes @ 0x22
  2217     00C2                     	ds	26
  2218     00DC                     calibrate@sum_Z_avg:
  2219                           
  2220                           ; 2 bytes @ 0x3C
  2221     00DC                     	ds	2
  2222                           
  2223                           	psect	cstackCOMMON
  2224     0070                     __pcstackCOMMON:
  2225     0070                     ?_EEPROM_Write:
  2226     0070                     ?_NVM_StatusClear:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229     0070                     ?_EEPROM_Read:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232     0070                     ?_SPI1_Initialize:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235     0070                     ?_SPI1_Close:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238     0070                     ?_SPI1_BufferExchange:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241     0070                     ?_SPI1_BufferRead:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244     0070                     ?_SPI1_BufferWrite:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247     0070                     ?_SPI1_ByteExchange:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250     0070                     ?_SPI1_ByteWrite:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253     0070                     ?_INT_SetInterruptHandler:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256     0070                     ?_WDT_Initialize:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259     0070                     ?_ADXL345_validation:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262     0070                     ?_ADXL345_init:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265     0070                     ?_calibrate:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268     0070                     ?_NVM_Initialize:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271     0070                     ?_INTERRUPT_Initialize:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274     0070                     ?_PIN_MANAGER_Initialize:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277     0070                     ?_PIN_MANAGER_IOC:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280     0070                     ?_CLOCK_Initialize:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283     0070                     ?_SYSTEM_Initialize:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286     0070                     ?_ADXL345_ClearInterrupt:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289     0070                     ?_setupForFreefall:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292     0070                     ?_setupForImpact:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295     0070                     ?_setupForInactivity:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298     0070                     ?_orientation_Up:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301     0070                     ?_memset:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304     0070                     ?_memcpy:	
  2305                           ; 2 bytes @ 0x0
  2306                           
  2307     0070                     ?_main:	
  2308                           ; 2 bytes @ 0x0
  2309                           
  2310     0070                     ?___wmul:	
  2311                           ; 2 bytes @ 0x0
  2312                           
  2313     0070                     SPI1_BufferExchange@bufferData:	
  2314                           ; 2 bytes @ 0x0
  2315                           
  2316     0070                     SPI1_BufferRead@bufferData:	
  2317                           ; 1 bytes @ 0x0
  2318                           
  2319     0070                     SPI1_ByteExchange@byteData:	
  2320                           ; 1 bytes @ 0x0
  2321                           
  2322     0070                     SPI1_ByteWrite@byteData:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325     0070                     EEPROM_Read@address:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328     0070                     EEPROM_Write@address:	
  2329                           ; 2 bytes @ 0x0
  2330                           
  2331     0070                     SPI1_BufferWrite@bufferData:	
  2332                           ; 2 bytes @ 0x0
  2333                           
  2334     0070                     INT_SetInterruptHandler@InterruptHandler:	
  2335                           ; 2 bytes @ 0x0
  2336                           
  2337     0070                     ___wmul@multiplier:	
  2338                           ; 2 bytes @ 0x0
  2339                           
  2340     0070                     memcpy@d1:	
  2341                           ; 2 bytes @ 0x0
  2342                           
  2343     0070                     memset@dest:	
  2344                           ; 2 bytes @ 0x0
  2345                           
  2346     0070                     ??_NVM_StatusClear:	
  2347                           ; 2 bytes @ 0x0
  2348                           
  2349     0070                     ??_SPI1_Initialize:	
  2350                           ; 1 bytes @ 0x0
  2351                           
  2352     0070                     ??_SPI1_Close:	
  2353                           ; 1 bytes @ 0x0
  2354                           
  2355     0070                     ??_WDT_Initialize:	
  2356                           ; 1 bytes @ 0x0
  2357                           
  2358     0070                     ??_NVM_Initialize:	
  2359                           ; 1 bytes @ 0x0
  2360                           
  2361     0070                     ??_PIN_MANAGER_Initialize:	
  2362                           ; 1 bytes @ 0x0
  2363                           
  2364     0070                     ??_PIN_MANAGER_IOC:	
  2365                           ; 1 bytes @ 0x0
  2366                           
  2367     0070                     ??_CLOCK_Initialize:	
  2368                           ; 1 bytes @ 0x0
  2369                           
  2370                           
  2371                           ; 1 bytes @ 0x0
  2372     0070                     	ds	1
  2373     0071                     SPI1_BufferExchange@bufferSize:
  2374     0071                     SPI1_BufferRead@bufferSize:	
  2375                           ; 2 bytes @ 0x1
  2376                           
  2377     0071                     ??_SPI1_ByteExchange:	
  2378                           ; 2 bytes @ 0x1
  2379                           
  2380     0071                     ??_SPI1_ByteWrite:	
  2381                           ; 1 bytes @ 0x1
  2382                           
  2383                           
  2384                           ; 1 bytes @ 0x1
  2385     0071                     	ds	1
  2386     0072                     EEPROM_Write@data:
  2387     0072                     SPI1_BufferWrite@bufferSize:	
  2388                           ; 1 bytes @ 0x2
  2389                           
  2390     0072                     ___wmul@multiplicand:	
  2391                           ; 2 bytes @ 0x2
  2392                           
  2393     0072                     memcpy@s1:	
  2394                           ; 2 bytes @ 0x2
  2395                           
  2396     0072                     memset@c:	
  2397                           ; 2 bytes @ 0x2
  2398                           
  2399     0072                     ??_EEPROM_Read:	
  2400                           ; 2 bytes @ 0x2
  2401                           
  2402     0072                     ??_INT_SetInterruptHandler:	
  2403                           ; 1 bytes @ 0x2
  2404                           
  2405     0072                     ??_INTERRUPT_Initialize:	
  2406                           ; 1 bytes @ 0x2
  2407                           
  2408     0072                     ??_SYSTEM_Initialize:	
  2409                           ; 1 bytes @ 0x2
  2410                           
  2411                           
  2412                           ; 1 bytes @ 0x2
  2413     0072                     	ds	1
  2414     0073                     EEPROM_Write@globalInterruptBitValue:
  2415     0073                     SPI1_BufferExchange@bufferInputSize:	
  2416                           ; 1 bytes @ 0x3
  2417                           
  2418     0073                     SPI1_BufferRead@bufferInputSize:	
  2419                           ; 2 bytes @ 0x3
  2420                           
  2421     0073                     ??_EEPROM_Write:	
  2422                           ; 2 bytes @ 0x3
  2423                           
  2424     0073                     ??_SPI1_BufferExchange:	
  2425                           ; 1 bytes @ 0x3
  2426                           
  2427     0073                     ??_SPI1_BufferRead:	
  2428                           ; 1 bytes @ 0x3
  2429                           
  2430                           
  2431                           ; 1 bytes @ 0x3
  2432     0073                     	ds	1
  2433     0074                     SPI1_BufferWrite@bufferInputSize:
  2434     0074                     ___wmul@product:	
  2435                           ; 2 bytes @ 0x4
  2436                           
  2437     0074                     memcpy@n:	
  2438                           ; 2 bytes @ 0x4
  2439                           
  2440     0074                     memset@n:	
  2441                           ; 2 bytes @ 0x4
  2442                           
  2443     0074                     ??_SPI1_BufferWrite:	
  2444                           ; 2 bytes @ 0x4
  2445                           
  2446     0074                     ??___wmul:	
  2447                           ; 1 bytes @ 0x4
  2448                           
  2449                           
  2450                           ; 1 bytes @ 0x4
  2451     0074                     	ds	1
  2452     0075                     SPI1_BufferExchange@bufferInput:
  2453     0075                     SPI1_BufferRead@bufferInput:	
  2454                           ; 1 bytes @ 0x5
  2455                           
  2456                           
  2457                           ; 1 bytes @ 0x5
  2458     0075                     	ds	1
  2459     0076                     ?_SPI1_Open:
  2460     0076                     SPI1_Open@spiConfigIndex:	
  2461                           ; 1 bytes @ 0x6
  2462                           
  2463     0076                     SPI1_BufferWrite@bufferInput:	
  2464                           ; 1 bytes @ 0x6
  2465                           
  2466     0076                     memset@p:	
  2467                           ; 1 bytes @ 0x6
  2468                           
  2469     0076                     memcpy@s:	
  2470                           ; 1 bytes @ 0x6
  2471                           
  2472     0076                     ??_memset:	
  2473                           ; 2 bytes @ 0x6
  2474                           
  2475     0076                     ??_memcpy:	
  2476                           ; 1 bytes @ 0x6
  2477                           
  2478                           
  2479                           ; 1 bytes @ 0x6
  2480     0076                     	ds	1
  2481     0077                     ??_SPI1_Open:
  2482                           
  2483                           ; 1 bytes @ 0x7
  2484     0077                     	ds	1
  2485     0078                     memcpy@tmp:
  2486                           
  2487                           ; 1 bytes @ 0x8
  2488     0078                     	ds	1
  2489     0079                     SPI1_Open@returnValue:
  2490     0079                     memcpy@d:	
  2491                           ; 1 bytes @ 0x9
  2492                           
  2493                           
  2494                           ; 1 bytes @ 0x9
  2495     0079                     	ds	1
  2496     007A                     ?_saveOffsets:
  2497     007A                     saveOffsets@y_axis:	
  2498                           ; 1 bytes @ 0xA
  2499                           
  2500     007A                     ??_ADXL345_validation:	
  2501                           ; 1 bytes @ 0xA
  2502                           
  2503     007A                     ??_ADXL345_init:	
  2504                           ; 1 bytes @ 0xA
  2505                           
  2506     007A                     ??_ADXL345_ClearInterrupt:	
  2507                           ; 1 bytes @ 0xA
  2508                           
  2509     007A                     ??_setupForFreefall:	
  2510                           ; 1 bytes @ 0xA
  2511                           
  2512     007A                     ??_setupForImpact:	
  2513                           ; 1 bytes @ 0xA
  2514                           
  2515     007A                     ??_setupForInactivity:	
  2516                           ; 1 bytes @ 0xA
  2517                           
  2518     007A                     ??_orientation_Up:	
  2519                           ; 1 bytes @ 0xA
  2520                           
  2521                           
  2522                           ; 1 bytes @ 0xA
  2523     007A                     	ds	1
  2524     007B                     saveOffsets@z_axis:
  2525                           
  2526                           ; 1 bytes @ 0xB
  2527     007B                     	ds	1
  2528     007C                     ??_saveOffsets:
  2529                           
  2530                           	psect	cstackBANK0
  2531     0020                     __pcstackBANK0:	
  2532                           ; 1 bytes @ 0xC
  2533                           
  2534     0020                     saveOffsets@x_axis:
  2535     0020                     ADXL345_validation@temp:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538     0020                     orientation_Up@acc_data:	
  2539                           ; 2 bytes @ 0x0
  2540                           
  2541     0020                     ADXL345_init@msg:	
  2542                           ; 6 bytes @ 0x0
  2543                           
  2544     0020                     setupForFreefall@msg:	
  2545                           ; 26 bytes @ 0x0
  2546                           
  2547     0020                     setupForImpact@msg:	
  2548                           ; 26 bytes @ 0x0
  2549                           
  2550     0020                     setupForInactivity@msg:	
  2551                           ; 26 bytes @ 0x0
  2552                           
  2553                           
  2554                           ; 26 bytes @ 0x0
  2555     0020                     	ds	1
  2556     0021                     saveOffsets@msg:
  2557                           
  2558                           ; 26 bytes @ 0x1
  2559     0021                     	ds	1
  2560     0022                     ADXL345_validation@passed:
  2561                           
  2562                           ; 1 bytes @ 0x2
  2563     0022                     	ds	4
  2564     0026                     orientation_Up@g_magnitude:
  2565                           
  2566                           ; 2 bytes @ 0x6
  2567     0026                     	ds	2
  2568     0028                     orientation_Up@msg:
  2569                           
  2570                           ; 26 bytes @ 0x8
  2571     0028                     	ds	19
  2572     003B                     ??_calibrate:
  2573                           
  2574                           ; 1 bytes @ 0x1B
  2575     003B                     	ds	7
  2576     0042                     orientation_Up@g_deltaX:
  2577                           
  2578                           ; 2 bytes @ 0x22
  2579     0042                     	ds	2
  2580     0044                     orientation_Up@g_deltaY:
  2581                           
  2582                           ; 2 bytes @ 0x24
  2583     0044                     	ds	2
  2584     0046                     orientation_Up@g_deltaZ:
  2585                           
  2586                           ; 2 bytes @ 0x26
  2587     0046                     	ds	2
  2588     0048                     ?_MotionEventHandler:
  2589     0048                     MotionEventHandler@state:	
  2590                           ; 1 bytes @ 0x28
  2591                           
  2592                           
  2593                           ; 1 bytes @ 0x28
  2594     0048                     	ds	1
  2595     0049                     ??_MotionEventHandler:
  2596                           
  2597                           ; 1 bytes @ 0x29
  2598     0049                     	ds	2
  2599     004B                     ??_main:
  2600                           
  2601                           ; 1 bytes @ 0x2B
  2602     004B                     	ds	2
  2603     004D                     main@X_val:
  2604                           
  2605                           ; 1 bytes @ 0x2D
  2606     004D                     	ds	1
  2607     004E                     main@Y_val:
  2608                           
  2609                           ; 1 bytes @ 0x2E
  2610     004E                     	ds	1
  2611     004F                     main@Z_val:
  2612                           
  2613                           ; 1 bytes @ 0x2F
  2614     004F                     	ds	1
  2615     0050                     main@i:
  2616                           
  2617                           ; 2 bytes @ 0x30
  2618     0050                     	ds	2
  2619     0052                     main@i_861:
  2620                           
  2621                           ; 2 bytes @ 0x32
  2622     0052                     	ds	2
  2623     0054                     main@current_state:
  2624                           
  2625                           ; 1 bytes @ 0x34
  2626     0054                     	ds	1
  2627                           
  2628                           	psect	maintext
  2629     045E                     __pmaintext:	
  2630 ;;
  2631 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2632 ;;
  2633 ;; *************** function _main *****************
  2634 ;; Defined at:
  2635 ;;		line 45 in file "main.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  i               2   50[BANK0 ] int 
  2640 ;;  i               2   48[BANK0 ] int 
  2641 ;;  Z_val           1   47[BANK0 ] unsigned char 
  2642 ;;  Y_val           1   46[BANK0 ] unsigned char 
  2643 ;;  X_val           1   45[BANK0 ] unsigned char 
  2644 ;;  current_stat    1   52[BANK0 ] enum E2688
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  2  371[None  ] int 
  2647 ;; Registers used:
  2648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : B1F/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2655 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2656 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2658 ;;Total ram usage:       10 bytes
  2659 ;; Hardware stack levels required when called: 4
  2660 ;; This function calls:
  2661 ;;		_ADXL345_init
  2662 ;;		_ADXL345_validation
  2663 ;;		_EEPROM_Read
  2664 ;;		_MotionEventHandler
  2665 ;;		_PIN_MANAGER_IOC
  2666 ;;		_SPI1_Initialize
  2667 ;;		_SYSTEM_Initialize
  2668 ;;		_calibrate
  2669 ;;		_saveOffsets
  2670 ;; This function is called by:
  2671 ;;		Startup code after reset
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675     045E                     _main:	
  2676                           ;psect for function _main
  2677                           
  2678     045E                     l3161:	
  2679                           ;incstack = 0
  2680                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2681                           
  2682                           
  2683                           ;main.c: 47:     SYSTEM_Initialize();
  2684     045E  318E  26D4  3184   	fcall	_SYSTEM_Initialize
  2685     0461                     l3163:
  2686                           
  2687                           ;main.c: 48:     SPI1_Initialize();
  2688     0461  318E  269A  3184   	fcall	_SPI1_Initialize
  2689     0464                     l3165:
  2690                           
  2691                           ;main.c: 50:     if (ADXL345_validation()) {
  2692     0464  3180  200C  3184   	fcall	_ADXL345_validation
  2693     0467  3A00               	xorlw	0
  2694     0468  1903               	skipnz
  2695     0469  2C6B               	goto	u1271
  2696     046A  2C6C               	goto	u1270
  2697     046B                     u1271:
  2698     046B  2C7E               	goto	l378
  2699     046C                     u1270:
  2700     046C                     l373:	
  2701                           ;main.c: 51:         do { LATAbits.LATA4 = 1; } while(0);
  2702                           
  2703     046C  0022               	movlb	2	; select bank2
  2704     046D  160C               	bsf	12,4	;volatile
  2705     046E                     l3167:
  2706                           
  2707                           ;main.c: 52:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2708     046E  3002               	movlw	2
  2709     046F  0020               	movlb	0	; select bank0
  2710     0470  00CC               	movwf	??_main+1
  2711     0471  3045               	movlw	69
  2712     0472  00CB               	movwf	??_main
  2713     0473  30A9               	movlw	169
  2714     0474                     u1347:
  2715     0474  0B89               	decfsz	9,f
  2716     0475  2C74               	goto	u1347
  2717     0476  0BCB               	decfsz	??_main,f
  2718     0477  2C74               	goto	u1347
  2719     0478  0BCC               	decfsz	??_main+1,f
  2720     0479  2C74               	goto	u1347
  2721     047A  3200               	nop2
  2722     047B                     l3169:
  2723     047B  0022               	movlb	2	; select bank2
  2724     047C  120C               	bcf	12,4	;volatile
  2725     047D  2C8F               	goto	l377
  2726     047E                     l378:	
  2727                           ;main.c: 55:         do { LATAbits.LATA5 = 1; } while(0);
  2728                           
  2729     047E  0022               	movlb	2	; select bank2
  2730     047F  168C               	bsf	12,5	;volatile
  2731     0480                     l3171:
  2732                           
  2733                           ;main.c: 56:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2734     0480  3002               	movlw	2
  2735     0481  0020               	movlb	0	; select bank0
  2736     0482  00CC               	movwf	??_main+1
  2737     0483  3045               	movlw	69
  2738     0484  00CB               	movwf	??_main
  2739     0485  30A9               	movlw	169
  2740     0486                     u1357:
  2741     0486  0B89               	decfsz	9,f
  2742     0487  2C86               	goto	u1357
  2743     0488  0BCB               	decfsz	??_main,f
  2744     0489  2C86               	goto	u1357
  2745     048A  0BCC               	decfsz	??_main+1,f
  2746     048B  2C86               	goto	u1357
  2747     048C  3200               	nop2
  2748     048D                     l3173:
  2749     048D  0022               	movlb	2	; select bank2
  2750     048E  128C               	bcf	12,5	;volatile
  2751     048F                     l377:	
  2752                           ;main.c: 58:     }
  2753                           
  2754                           
  2755                           ;main.c: 60:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2756     048F  3002               	movlw	2
  2757     0490  0020               	movlb	0	; select bank0
  2758     0491  00CC               	movwf	??_main+1
  2759     0492  3045               	movlw	69
  2760     0493  00CB               	movwf	??_main
  2761     0494  30A9               	movlw	169
  2762     0495                     u1367:
  2763     0495  0B89               	decfsz	9,f
  2764     0496  2C95               	goto	u1367
  2765     0497  0BCB               	decfsz	??_main,f
  2766     0498  2C95               	goto	u1367
  2767     0499  0BCC               	decfsz	??_main+1,f
  2768     049A  2C95               	goto	u1367
  2769     049B  3200               	nop2
  2770     049C                     l3175:
  2771                           
  2772                           ;main.c: 62:     if (ADXL345_init()) {
  2773     049C  3180  2095  3184   	fcall	_ADXL345_init
  2774     049F  3A00               	xorlw	0
  2775     04A0  1903               	skipnz
  2776     04A1  2CA3               	goto	u1281
  2777     04A2  2CA4               	goto	u1280
  2778     04A3                     u1281:
  2779     04A3  2CB6               	goto	l388
  2780     04A4                     u1280:
  2781     04A4                     l383:	
  2782                           ;main.c: 63:         do { LATAbits.LATA4 = 1; } while(0);
  2783                           
  2784     04A4  0022               	movlb	2	; select bank2
  2785     04A5  160C               	bsf	12,4	;volatile
  2786     04A6                     l3177:
  2787                           
  2788                           ;main.c: 64:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2789     04A6  3002               	movlw	2
  2790     04A7  0020               	movlb	0	; select bank0
  2791     04A8  00CC               	movwf	??_main+1
  2792     04A9  3045               	movlw	69
  2793     04AA  00CB               	movwf	??_main
  2794     04AB  30A9               	movlw	169
  2795     04AC                     u1377:
  2796     04AC  0B89               	decfsz	9,f
  2797     04AD  2CAC               	goto	u1377
  2798     04AE  0BCB               	decfsz	??_main,f
  2799     04AF  2CAC               	goto	u1377
  2800     04B0  0BCC               	decfsz	??_main+1,f
  2801     04B1  2CAC               	goto	u1377
  2802     04B2  3200               	nop2
  2803     04B3                     l3179:
  2804     04B3  0022               	movlb	2	; select bank2
  2805     04B4  120C               	bcf	12,4	;volatile
  2806     04B5  2CC7               	goto	l3185
  2807     04B6                     l388:	
  2808                           ;main.c: 67:         do { LATAbits.LATA5 = 1; } while(0);
  2809                           
  2810     04B6  0022               	movlb	2	; select bank2
  2811     04B7  168C               	bsf	12,5	;volatile
  2812     04B8                     l3181:
  2813                           
  2814                           ;main.c: 68:         _delay((unsigned long)((250)*(4000000/4000.0)));
  2815     04B8  3002               	movlw	2
  2816     04B9  0020               	movlb	0	; select bank0
  2817     04BA  00CC               	movwf	??_main+1
  2818     04BB  3045               	movlw	69
  2819     04BC  00CB               	movwf	??_main
  2820     04BD  30A9               	movlw	169
  2821     04BE                     u1387:
  2822     04BE  0B89               	decfsz	9,f
  2823     04BF  2CBE               	goto	u1387
  2824     04C0  0BCB               	decfsz	??_main,f
  2825     04C1  2CBE               	goto	u1387
  2826     04C2  0BCC               	decfsz	??_main+1,f
  2827     04C3  2CBE               	goto	u1387
  2828     04C4  3200               	nop2
  2829     04C5                     l3183:
  2830     04C5  0022               	movlb	2	; select bank2
  2831     04C6  128C               	bcf	12,5	;volatile
  2832     04C7                     l3185:
  2833                           
  2834                           ;main.c: 72:     if (EEPROM_Read(0x10) != 0x57) {
  2835     04C7  3010               	movlw	16
  2836     04C8  00F0               	movwf	EEPROM_Read@address
  2837     04C9  3000               	movlw	0
  2838     04CA  00F1               	movwf	EEPROM_Read@address+1
  2839     04CB  318E  26C7  3184   	fcall	_EEPROM_Read
  2840     04CE  3A57               	xorlw	87
  2841     04CF  1903               	skipnz
  2842     04D0  2CD2               	goto	u1291
  2843     04D1  2CD3               	goto	u1290
  2844     04D2                     u1291:
  2845     04D2  2D00               	goto	l392
  2846     04D3                     u1290:
  2847     04D3                     l3189:
  2848     04D3  3185  2562  3184   	fcall	_calibrate
  2849     04D6  3A00               	xorlw	0
  2850     04D7  1903               	skipnz
  2851     04D8  2CDA               	goto	u1301
  2852     04D9  2CDB               	goto	u1300
  2853     04DA                     u1301:
  2854     04DA  2CD3               	goto	l3189
  2855     04DB                     u1300:
  2856     04DB                     l3191:
  2857                           
  2858                           ;main.c: 74:         for (int i = 0; i < 3; i++) {
  2859     04DB  0020               	movlb	0	; select bank0
  2860     04DC  01D0               	clrf	main@i
  2861     04DD  01D1               	clrf	main@i+1
  2862     04DE                     l398:	
  2863                           ;main.c: 75:             do { LATAbits.LATA4 = 1; } while(0);
  2864                           
  2865     04DE  0022               	movlb	2	; select bank2
  2866     04DF  160C               	bsf	12,4	;volatile
  2867     04E0                     l400:	
  2868                           ;main.c: 76:             do { LATAbits.LATA5 = 1; } while(0);
  2869                           
  2870     04E0  168C               	bsf	12,5	;volatile
  2871     04E1                     l3197:
  2872                           
  2873                           ;main.c: 77:             _delay((unsigned long)((100)*(4000000/4000.0)));
  2874     04E1  3082               	movlw	130
  2875     04E2  0020               	movlb	0	; select bank0
  2876     04E3  00CB               	movwf	??_main
  2877     04E4  30DD               	movlw	221
  2878     04E5                     u1397:
  2879     04E5  0B89               	decfsz	9,f
  2880     04E6  2CE5               	goto	u1397
  2881     04E7  0BCB               	decfsz	??_main,f
  2882     04E8  2CE5               	goto	u1397
  2883     04E9  3200               	nop2
  2884     04EA                     l3199:
  2885     04EA  0022               	movlb	2	; select bank2
  2886     04EB  120C               	bcf	12,4	;volatile
  2887     04EC                     l3201:
  2888     04EC  128C               	bcf	12,5	;volatile
  2889     04ED                     l405:
  2890                           
  2891                           ;main.c: 80:         }
  2892     04ED  3001               	movlw	1
  2893     04EE  0020               	movlb	0	; select bank0
  2894     04EF  07D0               	addwf	main@i,f
  2895     04F0  3000               	movlw	0
  2896     04F1  3DD1               	addwfc	main@i+1,f
  2897     04F2  0851               	movf	main@i+1,w
  2898     04F3  3A80               	xorlw	128
  2899     04F4  00CB               	movwf	??_main
  2900     04F5  3080               	movlw	128
  2901     04F6  024B               	subwf	??_main,w
  2902     04F7  1D03               	skipz
  2903     04F8  2CFB               	goto	u1315
  2904     04F9  3003               	movlw	3
  2905     04FA  0250               	subwf	main@i,w
  2906     04FB                     u1315:
  2907     04FB  1C03               	skipc
  2908     04FC  2CFE               	goto	u1311
  2909     04FD  2CFF               	goto	u1310
  2910     04FE                     u1311:
  2911     04FE  2CDE               	goto	l398
  2912     04FF                     u1310:
  2913     04FF  2D29               	goto	l3225
  2914     0500                     l392:
  2915                           
  2916                           ;main.c: 82:         uint8_t X_val = ( EEADR = 0x02, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2917     0500  3000               	movlw	0
  2918     0501  0023               	movlb	3	; select bank3
  2919     0502  0092               	movwf	18	;volatile
  2920     0503  3002               	movlw	2
  2921     0504  0091               	movwf	17	;volatile
  2922     0505                     l3203:
  2923     0505  303F               	movlw	63
  2924     0506  0595               	andwf	21,f	;volsfr
  2925     0507                     l3205:
  2926     0507  1415               	bsf	21,0	;volsfr
  2927     0508                     l3207:
  2928     0508  0813               	movf	19,w	;volatile
  2929     0509  0020               	movlb	0	; select bank0
  2930     050A  00CD               	movwf	main@X_val
  2931     050B                     l3209:
  2932                           
  2933                           ;main.c: 83:         uint8_t Y_val = ( EEADR = 0x04, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2934     050B  3000               	movlw	0
  2935     050C  0023               	movlb	3	; select bank3
  2936     050D  0092               	movwf	18	;volatile
  2937     050E  3004               	movlw	4
  2938     050F  0091               	movwf	17	;volatile
  2939     0510                     l3211:
  2940     0510  303F               	movlw	63
  2941     0511  0595               	andwf	21,f	;volsfr
  2942     0512                     l3213:
  2943     0512  1415               	bsf	21,0	;volsfr
  2944     0513  0813               	movf	19,w	;volatile
  2945     0514  0020               	movlb	0	; select bank0
  2946     0515  00CE               	movwf	main@Y_val
  2947     0516                     l3215:
  2948                           
  2949                           ;main.c: 84:         uint8_t Z_val = ( EEADR = 0x06, EECON1 &= 0x3F, EECON1bits.RD = 1, 
      +                          EEDATA);
  2950     0516  3000               	movlw	0
  2951     0517  0023               	movlb	3	; select bank3
  2952     0518  0092               	movwf	18	;volatile
  2953     0519  3006               	movlw	6
  2954     051A  0091               	movwf	17	;volatile
  2955     051B                     l3217:
  2956     051B  303F               	movlw	63
  2957     051C  0595               	andwf	21,f	;volsfr
  2958     051D                     l3219:
  2959     051D  1415               	bsf	21,0	;volsfr
  2960     051E                     l3221:
  2961     051E  0813               	movf	19,w	;volatile
  2962     051F  0020               	movlb	0	; select bank0
  2963     0520  00CF               	movwf	main@Z_val
  2964     0521                     l3223:
  2965                           
  2966                           ;main.c: 85:         saveOffsets(X_val, Y_val, Z_val);
  2967     0521  084E               	movf	main@Y_val,w
  2968     0522  00FA               	movwf	saveOffsets@y_axis
  2969     0523  084F               	movf	main@Z_val,w
  2970     0524  00FB               	movwf	saveOffsets@z_axis
  2971     0525  084D               	movf	main@X_val,w
  2972     0526  3180  2046  3184   	fcall	_saveOffsets
  2973     0529                     l3225:
  2974                           
  2975                           ;main.c: 88:     State_t current_state = WAITING_FOR_FREEFALL;
  2976     0529  0020               	movlb	0	; select bank0
  2977     052A  01D4               	clrf	main@current_state
  2978     052B                     l3227:
  2979                           
  2980                           ;main.c: 91:     {;main.c: 92:         PIN_MANAGER_IOC();
  2981     052B  318E  2682  3184   	fcall	_PIN_MANAGER_IOC
  2982     052E                     l3229:
  2983                           
  2984                           ;main.c: 93:         MotionEventHandler(&current_state);
  2985     052E  3054               	movlw	(low (main@current_state| 0))& (0+255)
  2986     052F  0020               	movlb	0	; select bank0
  2987     0530  00C8               	movwf	MotionEventHandler@state
  2988     0531  3181  2165  3184   	fcall	_MotionEventHandler
  2989     0534                     l3231:
  2990                           
  2991                           ;main.c: 94:         if (current_state == FALL_DETECTED) {
  2992     0534  3004               	movlw	4
  2993     0535  0020               	movlb	0	; select bank0
  2994     0536  0654               	xorwf	main@current_state,w
  2995     0537  1D03               	btfss	3,2
  2996     0538  2D3A               	goto	u1321
  2997     0539  2D3B               	goto	u1320
  2998     053A                     u1321:
  2999     053A  2D5D               	goto	l408
  3000     053B                     u1320:
  3001     053B                     l3233:
  3002                           
  3003                           ;main.c: 95:             current_state = WAITING_FOR_FREEFALL;
  3004     053B  01D4               	clrf	main@current_state
  3005                           
  3006                           ;main.c: 96:             for (int i = 0; i < 3; i++) {
  3007     053C  01D2               	clrf	main@i_861
  3008     053D  01D3               	clrf	main@i_861+1
  3009     053E                     l411:	
  3010                           ;main.c: 97:                 do { LATAbits.LATA4 = 1; } while(0);
  3011                           
  3012     053E  0022               	movlb	2	; select bank2
  3013     053F  160C               	bsf	12,4	;volatile
  3014     0540                     l3239:
  3015                           
  3016                           ;main.c: 98:                 _delay((unsigned long)((100)*(4000000/4000.0)));
  3017     0540  3082               	movlw	130
  3018     0541  0020               	movlb	0	; select bank0
  3019     0542  00CB               	movwf	??_main
  3020     0543  30DD               	movlw	221
  3021     0544                     u1407:
  3022     0544  0B89               	decfsz	9,f
  3023     0545  2D44               	goto	u1407
  3024     0546  0BCB               	decfsz	??_main,f
  3025     0547  2D44               	goto	u1407
  3026     0548  3200               	nop2
  3027     0549                     l3241:
  3028     0549  0022               	movlb	2	; select bank2
  3029     054A  120C               	bcf	12,4	;volatile
  3030     054B                     l414:
  3031                           
  3032                           ;main.c: 100:             }
  3033     054B  3001               	movlw	1
  3034     054C  0020               	movlb	0	; select bank0
  3035     054D  07D2               	addwf	main@i_861,f
  3036     054E  3000               	movlw	0
  3037     054F  3DD3               	addwfc	main@i_861+1,f
  3038     0550  0853               	movf	main@i_861+1,w
  3039     0551  3A80               	xorlw	128
  3040     0552  00CB               	movwf	??_main
  3041     0553  3080               	movlw	128
  3042     0554  024B               	subwf	??_main,w
  3043     0555  1D03               	skipz
  3044     0556  2D59               	goto	u1335
  3045     0557  3003               	movlw	3
  3046     0558  0252               	subwf	main@i_861,w
  3047     0559                     u1335:
  3048     0559  1C03               	skipc
  3049     055A  2D5C               	goto	u1331
  3050     055B  2D5D               	goto	u1330
  3051     055C                     u1331:
  3052     055C  2D3E               	goto	l411
  3053     055D                     u1330:
  3054     055D                     l408:	
  3055                           ;main.c: 101:         }
  3056                           
  3057     055D  0063               	sleep	;# 
  3058                           
  3059                           ;main.c: 103:         __nop();
  3060     055E  0000               	nop
  3061     055F  2D2B               	goto	l3227
  3062     0560  3180  2802         	ljmp	start
  3063     0562                     __end_of_main:
  3064                           
  3065                           	psect	text1
  3066     0562                     __ptext1:	
  3067 ;; *************** function _calibrate *****************
  3068 ;; Defined at:
  3069 ;;		line 300 in file "ADXL345.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  i               2   26[BANK1 ] int 
  3074 ;;  i               2   24[BANK1 ] int 
  3075 ;;  msg            26   34[BANK1 ] struct Message
  3076 ;;  acc_data       12    0[BANK1 ] int [6]
  3077 ;;  sum_Z_avg       2   60[BANK1 ] int 
  3078 ;;  sum_Y_avg       2   32[BANK1 ] int 
  3079 ;;  sum_X_avg       2   30[BANK1 ] int 
  3080 ;;  sum_Z           2   28[BANK1 ] int 
  3081 ;;  offset_0g_Z     2   22[BANK1 ] int 
  3082 ;;  offset_0g_Y     2   20[BANK1 ] int 
  3083 ;;  offset_0g_X     2   18[BANK1 ] int 
  3084 ;;  sum_Y           2   16[BANK1 ] int 
  3085 ;;  sum_X           2   14[BANK1 ] int 
  3086 ;;  Z_n1g           2   12[BANK1 ] short 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      _Bool 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3097 ;;      Locals:         0       0      62       0       0       0       0       0       0       0       0       0       
      +0       0
  3098 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3099 ;;      Totals:         0       3      62       0       0       0       0       0       0       0       0       0       
      +0       0
  3100 ;;Total ram usage:       65 bytes
  3101 ;; Hardware stack levels used: 1
  3102 ;; Hardware stack levels required when called: 3
  3103 ;; This function calls:
  3104 ;;		_EEPROM_Write
  3105 ;;		_SPI1_BufferRead
  3106 ;;		_SPI1_BufferWrite
  3107 ;;		_SPI1_ByteWrite
  3108 ;;		_SPI1_Close
  3109 ;;		_SPI1_Open
  3110 ;;		_saveOffsets
  3111 ;; This function is called by:
  3112 ;;		_main
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116     0562                     _calibrate:	
  3117                           ;psect for function _calibrate
  3118                           
  3119     0562                     l2893:	
  3120                           ;incstack = 0
  3121                           ; Regs used in _calibrate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3122                           
  3123                           
  3124                           ;ADXL345.c: 301:     int offset_0g_X, offset_0g_Y, offset_0g_Z;;ADXL345.c: 302:     int 
      +                          acc_data[6] = {0};
  3125     0562  30A0               	movlw	low calibrate@acc_data
  3126     0563  0086               	movwf	6
  3127     0564  3000               	movlw	high calibrate@acc_data
  3128     0565  0087               	movwf	7
  3129     0566  300C               	movlw	12
  3130     0567  0020               	movlb	0	; select bank0
  3131     0568  00BB               	movwf	??_calibrate
  3132     0569  3000               	movlw	0
  3133     056A                     u980:
  3134     056A  001E               	movwi fsr1++
  3135     056B  0BBB               	decfsz	??_calibrate,f
  3136     056C  2D6A               	goto	u980
  3137     056D                     l2895:
  3138                           
  3139                           ;ADXL345.c: 303:     int sum_X = 0, sum_Y = 0, sum_Z = 0;
  3140     056D  0021               	movlb	1	; select bank1
  3141     056E  01AE               	clrf	calibrate@sum_X^(0+128)
  3142     056F  01AF               	clrf	(calibrate@sum_X+1)^(0+128)
  3143     0570                     l2897:
  3144     0570  01B0               	clrf	calibrate@sum_Y^(0+128)
  3145     0571  01B1               	clrf	(calibrate@sum_Y+1)^(0+128)
  3146     0572                     l2899:
  3147     0572  01BC               	clrf	calibrate@sum_Z^(0+128)
  3148     0573  01BD               	clrf	(calibrate@sum_Z+1)^(0+128)
  3149                           
  3150                           ;ADXL345.c: 304:     int sum_X_avg, sum_Y_avg, sum_Z_avg;;ADXL345.c: 306:     while (!SP
      +                          I1_Open(ADXL345)) {
  3151     0574  2D78               	goto	l2903
  3152     0575                     l2901:
  3153                           
  3154                           ;ADXL345.c: 307:         SPI1_Close();
  3155     0575  318E  267F  3185   	fcall	_SPI1_Close
  3156     0578                     l2903:
  3157                           
  3158                           ;ADXL345.c: 306:     while (!SPI1_Open(ADXL345)) {
  3159     0578  01F6               	clrf	SPI1_Open@spiConfigIndex
  3160     0579  3180  20F9  3185   	fcall	_SPI1_Open
  3161     057C  3A00               	xorlw	0
  3162     057D  1903               	skipnz
  3163     057E  2D80               	goto	u991
  3164     057F  2D81               	goto	u990
  3165     0580                     u991:
  3166     0580  2D75               	goto	l2901
  3167     0581                     u990:
  3168     0581                     l616:
  3169                           
  3170                           ;ADXL345.c: 310:     struct Message msg;;ADXL345.c: 311:     msg.registerAddr = 0x31;
  3171     0581  3031               	movlw	49
  3172     0582  0021               	movlb	1	; select bank1
  3173     0583  00C2               	movwf	calibrate@msg^(0+128)
  3174                           
  3175                           ;ADXL345.c: 312:     msg.data[0] = 0x0C;
  3176     0584  300C               	movlw	12
  3177     0585  00C3               	movwf	(calibrate@msg^(0+128)+1)
  3178     0586                     l617:	
  3179                           ;ADXL345.c: 313:     do { LATCbits.LATC4 = 0; } while(0);
  3180                           
  3181     0586  0022               	movlb	2	; select bank2
  3182     0587  120E               	bcf	14,4	;volatile
  3183     0588                     l2905:
  3184                           
  3185                           ;ADXL345.c: 314:     SPI1_BufferWrite(&msg, 2);
  3186     0588  30C2               	movlw	low calibrate@msg
  3187     0589  00F0               	movwf	SPI1_BufferWrite@bufferData
  3188     058A  3000               	movlw	high calibrate@msg
  3189     058B  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  3190     058C  3002               	movlw	2
  3191     058D  00F2               	movwf	SPI1_BufferWrite@bufferSize
  3192     058E  3000               	movlw	0
  3193     058F  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  3194     0590  318F  2773  3185   	fcall	_SPI1_BufferWrite
  3195     0593                     l2907:
  3196     0593  0022               	movlb	2	; select bank2
  3197     0594  160E               	bsf	14,4	;volatile
  3198     0595  2DAE               	goto	l2913
  3199     0596                     l623:	
  3200                           ;ADXL345.c: 319:         do { LATAbits.LATA4 = 1; } while(0);
  3201                           
  3202     0596  0022               	movlb	2	; select bank2
  3203     0597  160C               	bsf	12,4	;volatile
  3204     0598                     l2909:
  3205                           
  3206                           ;ADXL345.c: 320:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3207     0598  3082               	movlw	130
  3208     0599  0020               	movlb	0	; select bank0
  3209     059A  00BB               	movwf	??_calibrate
  3210     059B  30DD               	movlw	221
  3211     059C                     u1417:
  3212     059C  0B89               	decfsz	9,f
  3213     059D  2D9C               	goto	u1417
  3214     059E  0BBB               	decfsz	??_calibrate,f
  3215     059F  2D9C               	goto	u1417
  3216     05A0  3200               	nop2
  3217     05A1  0064               	clrwdt	;# 
  3218     05A2                     l2911:
  3219     05A2  0022               	movlb	2	; select bank2
  3220     05A3  120C               	bcf	12,4	;volatile
  3221     05A4                     l626:
  3222                           
  3223                           ;ADXL345.c: 323:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3224     05A4  3082               	movlw	130
  3225     05A5  0020               	movlb	0	; select bank0
  3226     05A6  00BB               	movwf	??_calibrate
  3227     05A7  30DD               	movlw	221
  3228     05A8                     u1427:
  3229     05A8  0B89               	decfsz	9,f
  3230     05A9  2DA8               	goto	u1427
  3231     05AA  0BBB               	decfsz	??_calibrate,f
  3232     05AB  2DA8               	goto	u1427
  3233     05AC  3200               	nop2
  3234     05AD  0064               	clrwdt	;# 
  3235     05AE                     l2913:
  3236                           
  3237                           ;ADXL345.c: 318:     while(!PORTAbits.RA1) {
  3238     05AE  0020               	movlb	0	; select bank0
  3239     05AF  1C8C               	btfss	12,1	;volatile
  3240     05B0  2DB2               	goto	u1001
  3241     05B1  2DB3               	goto	u1000
  3242     05B2                     u1001:
  3243     05B2  2D96               	goto	l623
  3244     05B3                     u1000:
  3245     05B3                     l627:
  3246     05B3  0064               	clrwdt	;# 
  3247     05B4                     l2915:
  3248                           
  3249                           ;ADXL345.c: 328:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3250     05B4  3008               	movlw	8
  3251     05B5  0020               	movlb	0	; select bank0
  3252     05B6  00BC               	movwf	??_calibrate+1
  3253     05B7  309D               	movlw	157
  3254     05B8  00BB               	movwf	??_calibrate
  3255     05B9  3005               	movlw	5
  3256     05BA                     u1437:
  3257     05BA  0B89               	decfsz	9,f
  3258     05BB  2DBA               	goto	u1437
  3259     05BC  0BBB               	decfsz	??_calibrate,f
  3260     05BD  2DBA               	goto	u1437
  3261     05BE  0BBC               	decfsz	??_calibrate+1,f
  3262     05BF  2DBA               	goto	u1437
  3263     05C0  3200               	nop2
  3264     05C1  0064               	clrwdt	;# 
  3265     05C2                     l2917:
  3266                           
  3267                           ;ADXL345.c: 331:     for(int i = 0; i < 128; i++) {
  3268     05C2  0021               	movlb	1	; select bank1
  3269     05C3  01B8               	clrf	calibrate@i^(0+128)
  3270     05C4  01B9               	clrf	(calibrate@i+1)^(0+128)
  3271     05C5                     l630:	
  3272                           ;ADXL345.c: 333:         do { LATCbits.LATC4 = 0; } while(0);
  3273                           
  3274     05C5  0022               	movlb	2	; select bank2
  3275     05C6  120E               	bcf	14,4	;volatile
  3276     05C7                     l2923:
  3277                           
  3278                           ;ADXL345.c: 334:         SPI1_ByteWrite(0x32);
  3279     05C7  3032               	movlw	50
  3280     05C8  00F0               	movwf	SPI1_ByteWrite@byteData
  3281     05C9  318E  2688  3185   	fcall	_SPI1_ByteWrite
  3282     05CC                     l2925:
  3283                           
  3284                           ;ADXL345.c: 335:         SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  3285     05CC  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3286     05CD  00F0               	movwf	SPI1_BufferRead@bufferData
  3287     05CE  300C               	movlw	12
  3288     05CF  00F1               	movwf	SPI1_BufferRead@bufferSize
  3289     05D0  3000               	movlw	0
  3290     05D1  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3291     05D2  318F  2793  3185   	fcall	_SPI1_BufferRead
  3292     05D5                     l2927:
  3293     05D5  0022               	movlb	2	; select bank2
  3294     05D6  160E               	bsf	14,4	;volatile
  3295     05D7                     l2929:
  3296                           
  3297                           ;ADXL345.c: 338:         sum_X += acc_data[1];
  3298     05D7  0021               	movlb	1	; select bank1
  3299     05D8  0822               	movf	(calibrate@acc_data^(0+128)+2),w
  3300     05D9  07AE               	addwf	calibrate@sum_X^(0+128),f
  3301     05DA  0823               	movf	((calibrate@acc_data+1)^(0+128)+2),w
  3302     05DB  3DAF               	addwfc	(calibrate@sum_X+1)^(0+128),f
  3303     05DC                     l2931:
  3304                           
  3305                           ;ADXL345.c: 339:         sum_Y += acc_data[3];
  3306     05DC  0826               	movf	(calibrate@acc_data^(0+128)+6),w
  3307     05DD  07B0               	addwf	calibrate@sum_Y^(0+128),f
  3308     05DE  0827               	movf	((calibrate@acc_data+1)^(0+128)+6),w
  3309     05DF  3DB1               	addwfc	(calibrate@sum_Y+1)^(0+128),f
  3310     05E0                     l2933:
  3311                           
  3312                           ;ADXL345.c: 340:         sum_Z += acc_data[5];
  3313     05E0  082A               	movf	(calibrate@acc_data^(0+128)+10),w
  3314     05E1  07BC               	addwf	calibrate@sum_Z^(0+128),f
  3315     05E2  082B               	movf	((calibrate@acc_data+1)^(0+128)+10),w
  3316     05E3  3DBD               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3317     05E4                     l2935:
  3318                           
  3319                           ;ADXL345.c: 342:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3320     05E4  3007               	movlw	7
  3321     05E5  0020               	movlb	0	; select bank0
  3322     05E6  00BB               	movwf	??_calibrate
  3323     05E7  307D               	movlw	125
  3324     05E8                     u1447:
  3325     05E8  0B89               	decfsz	9,f
  3326     05E9  2DE8               	goto	u1447
  3327     05EA  0BBB               	decfsz	??_calibrate,f
  3328     05EB  2DE8               	goto	u1447
  3329     05EC  0064               	clrwdt	;# 
  3330     05ED                     l2937:
  3331                           
  3332                           ;ADXL345.c: 344:     }
  3333     05ED  3001               	movlw	1
  3334     05EE  0021               	movlb	1	; select bank1
  3335     05EF  07B8               	addwf	calibrate@i^(0+128),f
  3336     05F0  3000               	movlw	0
  3337     05F1  3DB9               	addwfc	(calibrate@i+1)^(0+128),f
  3338     05F2                     l2939:
  3339     05F2  0839               	movf	(calibrate@i+1)^(0+128),w
  3340     05F3  3A80               	xorlw	128
  3341     05F4  0020               	movlb	0	; select bank0
  3342     05F5  00BB               	movwf	??_calibrate
  3343     05F6  3080               	movlw	128
  3344     05F7  023B               	subwf	??_calibrate,w
  3345     05F8  1D03               	skipz
  3346     05F9  2DFD               	goto	u1015
  3347     05FA  3080               	movlw	128
  3348     05FB  0021               	movlb	1	; select bank1
  3349     05FC  0238               	subwf	calibrate@i^(0+128),w
  3350     05FD                     u1015:
  3351     05FD  1C03               	skipc
  3352     05FE  2E00               	goto	u1011
  3353     05FF  2E01               	goto	u1010
  3354     0600                     u1011:
  3355     0600  2DC5               	goto	l630
  3356     0601                     u1010:
  3357     0601                     l2941:
  3358                           
  3359                           ;ADXL345.c: 347:     if (sum_Z == 0) return 0;
  3360     0601  0021               	movlb	1	; select bank1
  3361     0602  083C               	movf	calibrate@sum_Z^(0+128),w
  3362     0603  043D               	iorwf	(calibrate@sum_Z+1)^(0+128),w
  3363     0604  1D03               	btfss	3,2
  3364     0605  2E07               	goto	u1021
  3365     0606  2E08               	goto	u1020
  3366     0607                     u1021:
  3367     0607  2E0A               	goto	l2947
  3368     0608                     u1020:
  3369     0608                     l2943:
  3370     0608  3000               	movlw	0
  3371     0609  2FD9               	goto	l635
  3372     060A                     l2947:
  3373                           
  3374                           ;ADXL345.c: 350:     sum_X_avg = sum_X >> 7;
  3375     060A  082F               	movf	(calibrate@sum_X+1)^(0+128),w
  3376     060B  0020               	movlb	0	; select bank0
  3377     060C  00BC               	movwf	??_calibrate+1
  3378     060D  0021               	movlb	1	; select bank1
  3379     060E  082E               	movf	calibrate@sum_X^(0+128),w
  3380     060F  0020               	movlb	0	; select bank0
  3381     0610  00BB               	movwf	??_calibrate
  3382     0611  3007               	movlw	7
  3383     0612  00BD               	movwf	??_calibrate+2
  3384     0613                     u1035:
  3385     0613  0D3C               	rlf	??_calibrate+1,w
  3386     0614  0CBC               	rrf	??_calibrate+1,f
  3387     0615  0CBB               	rrf	??_calibrate,f
  3388     0616  0BBD               	decfsz	??_calibrate+2,f
  3389     0617  2E13               	goto	u1035
  3390     0618  083B               	movf	??_calibrate,w
  3391     0619  0021               	movlb	1	; select bank1
  3392     061A  00BE               	movwf	calibrate@sum_X_avg^(0+128)
  3393     061B  0020               	movlb	0	; select bank0
  3394     061C  083C               	movf	??_calibrate+1,w
  3395     061D  0021               	movlb	1	; select bank1
  3396     061E  00BF               	movwf	(calibrate@sum_X_avg+1)^(0+128)
  3397                           
  3398                           ;ADXL345.c: 351:     sum_Y_avg = sum_Y >> 7;
  3399     061F  0831               	movf	(calibrate@sum_Y+1)^(0+128),w
  3400     0620  0020               	movlb	0	; select bank0
  3401     0621  00BC               	movwf	??_calibrate+1
  3402     0622  0021               	movlb	1	; select bank1
  3403     0623  0830               	movf	calibrate@sum_Y^(0+128),w
  3404     0624  0020               	movlb	0	; select bank0
  3405     0625  00BB               	movwf	??_calibrate
  3406     0626  3007               	movlw	7
  3407     0627  00BD               	movwf	??_calibrate+2
  3408     0628                     u1045:
  3409     0628  0D3C               	rlf	??_calibrate+1,w
  3410     0629  0CBC               	rrf	??_calibrate+1,f
  3411     062A  0CBB               	rrf	??_calibrate,f
  3412     062B  0BBD               	decfsz	??_calibrate+2,f
  3413     062C  2E28               	goto	u1045
  3414     062D  083B               	movf	??_calibrate,w
  3415     062E  0021               	movlb	1	; select bank1
  3416     062F  00C0               	movwf	calibrate@sum_Y_avg^(0+128)
  3417     0630  0020               	movlb	0	; select bank0
  3418     0631  083C               	movf	??_calibrate+1,w
  3419     0632  0021               	movlb	1	; select bank1
  3420     0633  00C1               	movwf	(calibrate@sum_Y_avg+1)^(0+128)
  3421     0634                     l2949:
  3422                           
  3423                           ;ADXL345.c: 355:     if (sum_X_avg & 0x80) {
  3424     0634  1FBE               	btfss	calibrate@sum_X_avg^(0+128),7
  3425     0635  2E37               	goto	u1051
  3426     0636  2E38               	goto	u1050
  3427     0637                     u1051:
  3428     0637  2E50               	goto	l2957
  3429     0638                     u1050:
  3430     0638                     l2951:
  3431                           
  3432                           ;ADXL345.c: 356:         if (~(sum_X_avg) + 1 >= 0x10) return 0;
  3433     0638  093E               	comf	calibrate@sum_X_avg^(0+128),w
  3434     0639  0020               	movlb	0	; select bank0
  3435     063A  00BB               	movwf	??_calibrate
  3436     063B  0021               	movlb	1	; select bank1
  3437     063C  093F               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3438     063D  0020               	movlb	0	; select bank0
  3439     063E  00BC               	movwf	??_calibrate+1
  3440     063F  0ABB               	incf	??_calibrate,f
  3441     0640  1903               	skipnz
  3442     0641  0ABC               	incf	??_calibrate+1,f
  3443     0642  083C               	movf	??_calibrate+1,w
  3444     0643  3A80               	xorlw	128
  3445     0644  00BD               	movwf	??_calibrate+2
  3446     0645  3080               	movlw	128
  3447     0646  023D               	subwf	??_calibrate+2,w
  3448     0647  1D03               	skipz
  3449     0648  2E4B               	goto	u1065
  3450     0649  3010               	movlw	16
  3451     064A  023B               	subwf	??_calibrate,w
  3452     064B                     u1065:
  3453     064B  1C03               	skipc
  3454     064C  2E4E               	goto	u1061
  3455     064D  2E4F               	goto	u1060
  3456     064E                     u1061:
  3457     064E  2E60               	goto	l638
  3458     064F                     u1060:
  3459     064F  2E08               	goto	l2943
  3460     0650                     l2957:
  3461                           
  3462                           ;ADXL345.c: 358:         if (sum_X_avg >= 0x10) return 0;
  3463     0650  083F               	movf	(calibrate@sum_X_avg+1)^(0+128),w
  3464     0651  3A80               	xorlw	128
  3465     0652  0020               	movlb	0	; select bank0
  3466     0653  00BB               	movwf	??_calibrate
  3467     0654  3080               	movlw	128
  3468     0655  023B               	subwf	??_calibrate,w
  3469     0656  1D03               	skipz
  3470     0657  2E5B               	goto	u1075
  3471     0658  3010               	movlw	16
  3472     0659  0021               	movlb	1	; select bank1
  3473     065A  023E               	subwf	calibrate@sum_X_avg^(0+128),w
  3474     065B                     u1075:
  3475     065B  1C03               	skipc
  3476     065C  2E5E               	goto	u1071
  3477     065D  2E5F               	goto	u1070
  3478     065E                     u1071:
  3479     065E  2E60               	goto	l638
  3480     065F                     u1070:
  3481     065F  2E08               	goto	l2943
  3482     0660                     l638:	
  3483                           ;ADXL345.c: 359:     }
  3484                           
  3485                           
  3486                           ;ADXL345.c: 361:     if (sum_Y_avg & 0x80) {
  3487     0660  0021               	movlb	1	; select bank1
  3488     0661  1FC0               	btfss	calibrate@sum_Y_avg^(0+128),7
  3489     0662  2E64               	goto	u1081
  3490     0663  2E65               	goto	u1080
  3491     0664                     u1081:
  3492     0664  2E7D               	goto	l2969
  3493     0665                     u1080:
  3494     0665                     l2963:
  3495                           
  3496                           ;ADXL345.c: 362:         if (~(sum_Y_avg) + 1 >= 0x10) return 0;
  3497     0665  0940               	comf	calibrate@sum_Y_avg^(0+128),w
  3498     0666  0020               	movlb	0	; select bank0
  3499     0667  00BB               	movwf	??_calibrate
  3500     0668  0021               	movlb	1	; select bank1
  3501     0669  0941               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3502     066A  0020               	movlb	0	; select bank0
  3503     066B  00BC               	movwf	??_calibrate+1
  3504     066C  0ABB               	incf	??_calibrate,f
  3505     066D  1903               	skipnz
  3506     066E  0ABC               	incf	??_calibrate+1,f
  3507     066F  083C               	movf	??_calibrate+1,w
  3508     0670  3A80               	xorlw	128
  3509     0671  00BD               	movwf	??_calibrate+2
  3510     0672  3080               	movlw	128
  3511     0673  023D               	subwf	??_calibrate+2,w
  3512     0674  1D03               	skipz
  3513     0675  2E78               	goto	u1095
  3514     0676  3010               	movlw	16
  3515     0677  023B               	subwf	??_calibrate,w
  3516     0678                     u1095:
  3517     0678  1C03               	skipc
  3518     0679  2E7B               	goto	u1091
  3519     067A  2E7C               	goto	u1090
  3520     067B                     u1091:
  3521     067B  2E8D               	goto	l2975
  3522     067C                     u1090:
  3523     067C  2E08               	goto	l2943
  3524     067D                     l2969:
  3525                           
  3526                           ;ADXL345.c: 364:         if (sum_Y_avg >= 0x10) return 0;
  3527     067D  0841               	movf	(calibrate@sum_Y_avg+1)^(0+128),w
  3528     067E  3A80               	xorlw	128
  3529     067F  0020               	movlb	0	; select bank0
  3530     0680  00BB               	movwf	??_calibrate
  3531     0681  3080               	movlw	128
  3532     0682  023B               	subwf	??_calibrate,w
  3533     0683  1D03               	skipz
  3534     0684  2E88               	goto	u1105
  3535     0685  3010               	movlw	16
  3536     0686  0021               	movlb	1	; select bank1
  3537     0687  0240               	subwf	calibrate@sum_Y_avg^(0+128),w
  3538     0688                     u1105:
  3539     0688  1C03               	skipc
  3540     0689  2E8B               	goto	u1101
  3541     068A  2E8C               	goto	u1100
  3542     068B                     u1101:
  3543     068B  2E8D               	goto	l2975
  3544     068C                     u1100:
  3545     068C  2E08               	goto	l2943
  3546     068D                     l2975:
  3547                           
  3548                           ;ADXL345.c: 367:     offset_0g_X = -sum_X_avg;
  3549     068D  0021               	movlb	1	; select bank1
  3550     068E  093E               	comf	calibrate@sum_X_avg^(0+128),w
  3551     068F  0020               	movlb	0	; select bank0
  3552     0690  00BB               	movwf	??_calibrate
  3553     0691  0021               	movlb	1	; select bank1
  3554     0692  093F               	comf	(calibrate@sum_X_avg+1)^(0+128),w
  3555     0693  0020               	movlb	0	; select bank0
  3556     0694  00BC               	movwf	??_calibrate+1
  3557     0695  0ABB               	incf	??_calibrate,f
  3558     0696  1903               	skipnz
  3559     0697  0ABC               	incf	??_calibrate+1,f
  3560     0698  083B               	movf	??_calibrate,w
  3561     0699  0021               	movlb	1	; select bank1
  3562     069A  00B2               	movwf	calibrate@offset_0g_X^(0+128)
  3563     069B  0020               	movlb	0	; select bank0
  3564     069C  083C               	movf	??_calibrate+1,w
  3565     069D  0021               	movlb	1	; select bank1
  3566     069E  00B3               	movwf	(calibrate@offset_0g_X+1)^(0+128)
  3567                           
  3568                           ;ADXL345.c: 368:     offset_0g_Y = -sum_Y_avg;
  3569     069F  0940               	comf	calibrate@sum_Y_avg^(0+128),w
  3570     06A0  0020               	movlb	0	; select bank0
  3571     06A1  00BB               	movwf	??_calibrate
  3572     06A2  0021               	movlb	1	; select bank1
  3573     06A3  0941               	comf	(calibrate@sum_Y_avg+1)^(0+128),w
  3574     06A4  0020               	movlb	0	; select bank0
  3575     06A5  00BC               	movwf	??_calibrate+1
  3576     06A6  0ABB               	incf	??_calibrate,f
  3577     06A7  1903               	skipnz
  3578     06A8  0ABC               	incf	??_calibrate+1,f
  3579     06A9  083B               	movf	??_calibrate,w
  3580     06AA  0021               	movlb	1	; select bank1
  3581     06AB  00B4               	movwf	calibrate@offset_0g_Y^(0+128)
  3582     06AC  0020               	movlb	0	; select bank0
  3583     06AD  083C               	movf	??_calibrate+1,w
  3584     06AE  0021               	movlb	1	; select bank1
  3585     06AF  00B5               	movwf	(calibrate@offset_0g_Y+1)^(0+128)
  3586                           
  3587                           ;ADXL345.c: 370:     sum_Z_avg = sum_Z >> 7;
  3588     06B0  083D               	movf	(calibrate@sum_Z+1)^(0+128),w
  3589     06B1  0020               	movlb	0	; select bank0
  3590     06B2  00BC               	movwf	??_calibrate+1
  3591     06B3  0021               	movlb	1	; select bank1
  3592     06B4  083C               	movf	calibrate@sum_Z^(0+128),w
  3593     06B5  0020               	movlb	0	; select bank0
  3594     06B6  00BB               	movwf	??_calibrate
  3595     06B7  3007               	movlw	7
  3596     06B8  00BD               	movwf	??_calibrate+2
  3597     06B9                     u1115:
  3598     06B9  0D3C               	rlf	??_calibrate+1,w
  3599     06BA  0CBC               	rrf	??_calibrate+1,f
  3600     06BB  0CBB               	rrf	??_calibrate,f
  3601     06BC  0BBD               	decfsz	??_calibrate+2,f
  3602     06BD  2EB9               	goto	u1115
  3603     06BE  083B               	movf	??_calibrate,w
  3604     06BF  0021               	movlb	1	; select bank1
  3605     06C0  00DC               	movwf	calibrate@sum_Z_avg^(0+128)
  3606     06C1  0020               	movlb	0	; select bank0
  3607     06C2  083C               	movf	??_calibrate+1,w
  3608     06C3  0021               	movlb	1	; select bank1
  3609     06C4  00DD               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3610     06C5                     l2977:
  3611                           
  3612                           ;ADXL345.c: 371:     sum_Z = 0;
  3613     06C5  01BC               	clrf	calibrate@sum_Z^(0+128)
  3614     06C6  01BD               	clrf	(calibrate@sum_Z+1)^(0+128)
  3615                           
  3616                           ;ADXL345.c: 374:     while(!PORTAbits.RA1) {
  3617     06C7  2EE0               	goto	l2983
  3618     06C8                     l646:	
  3619                           ;ADXL345.c: 375:         do { LATAbits.LATA5 = 1; } while(0);
  3620                           
  3621     06C8  0022               	movlb	2	; select bank2
  3622     06C9  168C               	bsf	12,5	;volatile
  3623     06CA                     l2979:
  3624                           
  3625                           ;ADXL345.c: 376:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3626     06CA  3082               	movlw	130
  3627     06CB  0020               	movlb	0	; select bank0
  3628     06CC  00BB               	movwf	??_calibrate
  3629     06CD  30DD               	movlw	221
  3630     06CE                     u1457:
  3631     06CE  0B89               	decfsz	9,f
  3632     06CF  2ECE               	goto	u1457
  3633     06D0  0BBB               	decfsz	??_calibrate,f
  3634     06D1  2ECE               	goto	u1457
  3635     06D2  3200               	nop2
  3636     06D3  0064               	clrwdt	;# 
  3637     06D4                     l2981:
  3638     06D4  0022               	movlb	2	; select bank2
  3639     06D5  128C               	bcf	12,5	;volatile
  3640     06D6                     l649:
  3641                           
  3642                           ;ADXL345.c: 379:         _delay((unsigned long)((100)*(4000000/4000.0)));
  3643     06D6  3082               	movlw	130
  3644     06D7  0020               	movlb	0	; select bank0
  3645     06D8  00BB               	movwf	??_calibrate
  3646     06D9  30DD               	movlw	221
  3647     06DA                     u1467:
  3648     06DA  0B89               	decfsz	9,f
  3649     06DB  2EDA               	goto	u1467
  3650     06DC  0BBB               	decfsz	??_calibrate,f
  3651     06DD  2EDA               	goto	u1467
  3652     06DE  3200               	nop2
  3653     06DF  0064               	clrwdt	;# 
  3654     06E0                     l2983:
  3655                           
  3656                           ;ADXL345.c: 374:     while(!PORTAbits.RA1) {
  3657     06E0  0020               	movlb	0	; select bank0
  3658     06E1  1C8C               	btfss	12,1	;volatile
  3659     06E2  2EE4               	goto	u1121
  3660     06E3  2EE5               	goto	u1120
  3661     06E4                     u1121:
  3662     06E4  2EC8               	goto	l646
  3663     06E5                     u1120:
  3664     06E5                     l650:
  3665     06E5  0064               	clrwdt	;# 
  3666     06E6                     l2985:
  3667                           
  3668                           ;ADXL345.c: 384:     _delay((unsigned long)((1500)*(4000000/4000.0)));
  3669     06E6  3008               	movlw	8
  3670     06E7  0020               	movlb	0	; select bank0
  3671     06E8  00BC               	movwf	??_calibrate+1
  3672     06E9  309D               	movlw	157
  3673     06EA  00BB               	movwf	??_calibrate
  3674     06EB  3005               	movlw	5
  3675     06EC                     u1477:
  3676     06EC  0B89               	decfsz	9,f
  3677     06ED  2EEC               	goto	u1477
  3678     06EE  0BBB               	decfsz	??_calibrate,f
  3679     06EF  2EEC               	goto	u1477
  3680     06F0  0BBC               	decfsz	??_calibrate+1,f
  3681     06F1  2EEC               	goto	u1477
  3682     06F2  3200               	nop2
  3683     06F3  0064               	clrwdt	;# 
  3684     06F4                     l2987:
  3685                           
  3686                           ;ADXL345.c: 387:     for(int i = 0; i < 128; i++) {
  3687     06F4  0021               	movlb	1	; select bank1
  3688     06F5  01BA               	clrf	calibrate@i_995^(0+128)
  3689     06F6  01BB               	clrf	(calibrate@i_995+1)^(0+128)
  3690     06F7                     l2989:
  3691     06F7  083B               	movf	(calibrate@i_995+1)^(0+128),w
  3692     06F8  3A80               	xorlw	128
  3693     06F9  0020               	movlb	0	; select bank0
  3694     06FA  00BB               	movwf	??_calibrate
  3695     06FB  3080               	movlw	128
  3696     06FC  023B               	subwf	??_calibrate,w
  3697     06FD  1D03               	skipz
  3698     06FE  2F02               	goto	u1135
  3699     06FF  3080               	movlw	128
  3700     0700  0021               	movlb	1	; select bank1
  3701     0701  023A               	subwf	calibrate@i_995^(0+128),w
  3702     0702                     u1135:
  3703     0702  1C03               	skipc
  3704     0703  2F05               	goto	u1131
  3705     0704  2F06               	goto	u1130
  3706     0705                     u1131:
  3707     0705  2F07               	goto	l653
  3708     0706                     u1130:
  3709     0706  2F2D               	goto	l3007
  3710     0707                     l653:	
  3711                           ;ADXL345.c: 389:         do { LATCbits.LATC4 = 0; } while(0);
  3712                           
  3713     0707  0022               	movlb	2	; select bank2
  3714     0708  120E               	bcf	14,4	;volatile
  3715     0709                     l2993:
  3716                           
  3717                           ;ADXL345.c: 390:         SPI1_ByteWrite(0x32);
  3718     0709  3032               	movlw	50
  3719     070A  00F0               	movwf	SPI1_ByteWrite@byteData
  3720     070B  318E  2688  3185   	fcall	_SPI1_ByteWrite
  3721     070E                     l2995:
  3722                           
  3723                           ;ADXL345.c: 391:         SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  3724     070E  30A0               	movlw	(low (calibrate@acc_data| 0))& (0+255)
  3725     070F  00F0               	movwf	SPI1_BufferRead@bufferData
  3726     0710  300C               	movlw	12
  3727     0711  00F1               	movwf	SPI1_BufferRead@bufferSize
  3728     0712  3000               	movlw	0
  3729     0713  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  3730     0714  318F  2793  3185   	fcall	_SPI1_BufferRead
  3731     0717                     l2997:
  3732     0717  0022               	movlb	2	; select bank2
  3733     0718  160E               	bsf	14,4	;volatile
  3734     0719                     l2999:
  3735                           
  3736                           ;ADXL345.c: 394:         sum_Z += acc_data[5];
  3737     0719  0021               	movlb	1	; select bank1
  3738     071A  082A               	movf	(calibrate@acc_data^(0+128)+10),w
  3739     071B  07BC               	addwf	calibrate@sum_Z^(0+128),f
  3740     071C  082B               	movf	((calibrate@acc_data+1)^(0+128)+10),w
  3741     071D  3DBD               	addwfc	(calibrate@sum_Z+1)^(0+128),f
  3742     071E                     l3001:
  3743                           
  3744                           ;ADXL345.c: 396:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3745     071E  3007               	movlw	7
  3746     071F  0020               	movlb	0	; select bank0
  3747     0720  00BB               	movwf	??_calibrate
  3748     0721  307D               	movlw	125
  3749     0722                     u1487:
  3750     0722  0B89               	decfsz	9,f
  3751     0723  2F22               	goto	u1487
  3752     0724  0BBB               	decfsz	??_calibrate,f
  3753     0725  2F22               	goto	u1487
  3754     0726  0064               	clrwdt	;# 
  3755     0727                     l3003:
  3756                           
  3757                           ;ADXL345.c: 398:     }
  3758     0727  3001               	movlw	1
  3759     0728  0021               	movlb	1	; select bank1
  3760     0729  07BA               	addwf	calibrate@i_995^(0+128),f
  3761     072A  3000               	movlw	0
  3762     072B  3DBB               	addwfc	(calibrate@i_995+1)^(0+128),f
  3763     072C  2EF7               	goto	l2989
  3764     072D                     l3007:
  3765                           
  3766                           ;ADXL345.c: 400:     int16_t Z_n1g = sum_Z >> 7;
  3767     072D  0021               	movlb	1	; select bank1
  3768     072E  083D               	movf	(calibrate@sum_Z+1)^(0+128),w
  3769     072F  0020               	movlb	0	; select bank0
  3770     0730  00BC               	movwf	??_calibrate+1
  3771     0731  0021               	movlb	1	; select bank1
  3772     0732  083C               	movf	calibrate@sum_Z^(0+128),w
  3773     0733  0020               	movlb	0	; select bank0
  3774     0734  00BB               	movwf	??_calibrate
  3775     0735  3007               	movlw	7
  3776     0736  00BD               	movwf	??_calibrate+2
  3777     0737                     u1145:
  3778     0737  0D3C               	rlf	??_calibrate+1,w
  3779     0738  0CBC               	rrf	??_calibrate+1,f
  3780     0739  0CBB               	rrf	??_calibrate,f
  3781     073A  0BBD               	decfsz	??_calibrate+2,f
  3782     073B  2F37               	goto	u1145
  3783     073C  083B               	movf	??_calibrate,w
  3784     073D  0021               	movlb	1	; select bank1
  3785     073E  00AC               	movwf	calibrate@Z_n1g^(0+128)
  3786     073F  0020               	movlb	0	; select bank0
  3787     0740  083C               	movf	??_calibrate+1,w
  3788     0741  0021               	movlb	1	; select bank1
  3789     0742  00AD               	movwf	(calibrate@Z_n1g+1)^(0+128)
  3790                           
  3791                           ;ADXL345.c: 401:     sum_Z_avg = (Z_n1g + sum_Z_avg) >> 1;
  3792     0743  085C               	movf	calibrate@sum_Z_avg^(0+128),w
  3793     0744  072C               	addwf	calibrate@Z_n1g^(0+128),w
  3794     0745  0020               	movlb	0	; select bank0
  3795     0746  00BB               	movwf	??_calibrate
  3796     0747  0021               	movlb	1	; select bank1
  3797     0748  085D               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3798     0749  3D2D               	addwfc	(calibrate@Z_n1g+1)^(0+128),w
  3799     074A  0020               	movlb	0	; select bank0
  3800     074B  00BC               	movwf	??_calibrate+1
  3801     074C  0D3C               	rlf	??_calibrate+1,w
  3802     074D  0C3C               	rrf	??_calibrate+1,w
  3803     074E  0021               	movlb	1	; select bank1
  3804     074F  00DD               	movwf	(calibrate@sum_Z_avg+1)^(0+128)
  3805     0750  0020               	movlb	0	; select bank0
  3806     0751  0C3B               	rrf	??_calibrate,w
  3807     0752  0021               	movlb	1	; select bank1
  3808     0753  00DC               	movwf	calibrate@sum_Z_avg^(0+128)
  3809     0754                     l3009:
  3810                           
  3811                           ;ADXL345.c: 405:     if (sum_Z_avg & 0x80) {
  3812     0754  1FDC               	btfss	calibrate@sum_Z_avg^(0+128),7
  3813     0755  2F57               	goto	u1151
  3814     0756  2F58               	goto	u1150
  3815     0757                     u1151:
  3816     0757  2F70               	goto	l3017
  3817     0758                     u1150:
  3818     0758                     l3011:
  3819                           
  3820                           ;ADXL345.c: 406:         if (~(sum_Z_avg) + 1 >= 0x20) return 0;
  3821     0758  095C               	comf	calibrate@sum_Z_avg^(0+128),w
  3822     0759  0020               	movlb	0	; select bank0
  3823     075A  00BB               	movwf	??_calibrate
  3824     075B  0021               	movlb	1	; select bank1
  3825     075C  095D               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3826     075D  0020               	movlb	0	; select bank0
  3827     075E  00BC               	movwf	??_calibrate+1
  3828     075F  0ABB               	incf	??_calibrate,f
  3829     0760  1903               	skipnz
  3830     0761  0ABC               	incf	??_calibrate+1,f
  3831     0762  083C               	movf	??_calibrate+1,w
  3832     0763  3A80               	xorlw	128
  3833     0764  00BD               	movwf	??_calibrate+2
  3834     0765  3080               	movlw	128
  3835     0766  023D               	subwf	??_calibrate+2,w
  3836     0767  1D03               	skipz
  3837     0768  2F6B               	goto	u1165
  3838     0769  3020               	movlw	32
  3839     076A  023B               	subwf	??_calibrate,w
  3840     076B                     u1165:
  3841     076B  1C03               	skipc
  3842     076C  2F6E               	goto	u1161
  3843     076D  2F6F               	goto	u1160
  3844     076E                     u1161:
  3845     076E  2F80               	goto	l3023
  3846     076F                     u1160:
  3847     076F  2E08               	goto	l2943
  3848     0770                     l3017:
  3849                           
  3850                           ;ADXL345.c: 408:         if (sum_Z_avg >= 0x20) return 0;
  3851     0770  085D               	movf	(calibrate@sum_Z_avg+1)^(0+128),w
  3852     0771  3A80               	xorlw	128
  3853     0772  0020               	movlb	0	; select bank0
  3854     0773  00BB               	movwf	??_calibrate
  3855     0774  3080               	movlw	128
  3856     0775  023B               	subwf	??_calibrate,w
  3857     0776  1D03               	skipz
  3858     0777  2F7B               	goto	u1175
  3859     0778  3020               	movlw	32
  3860     0779  0021               	movlb	1	; select bank1
  3861     077A  025C               	subwf	calibrate@sum_Z_avg^(0+128),w
  3862     077B                     u1175:
  3863     077B  1C03               	skipc
  3864     077C  2F7E               	goto	u1171
  3865     077D  2F7F               	goto	u1170
  3866     077E                     u1171:
  3867     077E  2F80               	goto	l3023
  3868     077F                     u1170:
  3869     077F  2E08               	goto	l2943
  3870     0780                     l3023:
  3871                           
  3872                           ;ADXL345.c: 411:     offset_0g_Z = -sum_Z_avg;
  3873     0780  0021               	movlb	1	; select bank1
  3874     0781  095C               	comf	calibrate@sum_Z_avg^(0+128),w
  3875     0782  0020               	movlb	0	; select bank0
  3876     0783  00BB               	movwf	??_calibrate
  3877     0784  0021               	movlb	1	; select bank1
  3878     0785  095D               	comf	(calibrate@sum_Z_avg+1)^(0+128),w
  3879     0786  0020               	movlb	0	; select bank0
  3880     0787  00BC               	movwf	??_calibrate+1
  3881     0788  0ABB               	incf	??_calibrate,f
  3882     0789  1903               	skipnz
  3883     078A  0ABC               	incf	??_calibrate+1,f
  3884     078B  083B               	movf	??_calibrate,w
  3885     078C  0021               	movlb	1	; select bank1
  3886     078D  00B6               	movwf	calibrate@offset_0g_Z^(0+128)
  3887     078E  0020               	movlb	0	; select bank0
  3888     078F  083C               	movf	??_calibrate+1,w
  3889     0790  0021               	movlb	1	; select bank1
  3890     0791  00B7               	movwf	(calibrate@offset_0g_Z+1)^(0+128)
  3891     0792                     l3025:
  3892                           
  3893                           ;ADXL345.c: 413:     saveOffsets((uint8_t)offset_0g_X, (uint8_t)offset_0g_Y, (uint8_t)of
      +                          fset_0g_Z);
  3894     0792  0834               	movf	calibrate@offset_0g_Y^(0+128),w
  3895     0793  00FA               	movwf	saveOffsets@y_axis
  3896     0794  0836               	movf	calibrate@offset_0g_Z^(0+128),w
  3897     0795  00FB               	movwf	saveOffsets@z_axis
  3898     0796  0832               	movf	calibrate@offset_0g_X^(0+128),w
  3899     0797  3180  2046  3185   	fcall	_saveOffsets
  3900     079A                     l3027:
  3901                           
  3902                           ;ADXL345.c: 416:     EEPROM_Write(0x02, (uint8_t)offset_0g_X);
  3903     079A  3002               	movlw	2
  3904     079B  00F0               	movwf	EEPROM_Write@address
  3905     079C  3000               	movlw	0
  3906     079D  00F1               	movwf	EEPROM_Write@address+1
  3907     079E  0021               	movlb	1	; select bank1
  3908     079F  0832               	movf	calibrate@offset_0g_X^(0+128),w
  3909     07A0  00F2               	movwf	EEPROM_Write@data
  3910     07A1  318F  2736  3185   	fcall	_EEPROM_Write
  3911     07A4                     l3029:
  3912                           
  3913                           ;ADXL345.c: 417:     EEPROM_Write(0x04, (uint8_t)offset_0g_Y);
  3914     07A4  3004               	movlw	4
  3915     07A5  00F0               	movwf	EEPROM_Write@address
  3916     07A6  3000               	movlw	0
  3917     07A7  00F1               	movwf	EEPROM_Write@address+1
  3918     07A8  0021               	movlb	1	; select bank1
  3919     07A9  0834               	movf	calibrate@offset_0g_Y^(0+128),w
  3920     07AA  00F2               	movwf	EEPROM_Write@data
  3921     07AB  318F  2736  3185   	fcall	_EEPROM_Write
  3922     07AE                     l3031:
  3923                           
  3924                           ;ADXL345.c: 418:     EEPROM_Write(0x06, (uint8_t)offset_0g_Z);
  3925     07AE  3006               	movlw	6
  3926     07AF  00F0               	movwf	EEPROM_Write@address
  3927     07B0  3000               	movlw	0
  3928     07B1  00F1               	movwf	EEPROM_Write@address+1
  3929     07B2  0021               	movlb	1	; select bank1
  3930     07B3  0836               	movf	calibrate@offset_0g_Z^(0+128),w
  3931     07B4  00F2               	movwf	EEPROM_Write@data
  3932     07B5  318F  2736  3185   	fcall	_EEPROM_Write
  3933     07B8                     l3033:
  3934                           
  3935                           ;ADXL345.c: 420:     EEPROM_Write(0x10, 0x57);
  3936     07B8  3010               	movlw	16
  3937     07B9  00F0               	movwf	EEPROM_Write@address
  3938     07BA  3000               	movlw	0
  3939     07BB  00F1               	movwf	EEPROM_Write@address+1
  3940     07BC  3057               	movlw	87
  3941     07BD  00F2               	movwf	EEPROM_Write@data
  3942     07BE  318F  2736  3185   	fcall	_EEPROM_Write
  3943     07C1                     l3035:
  3944                           
  3945                           ;ADXL345.c: 422:     msg.registerAddr = 0x31;
  3946     07C1  3031               	movlw	49
  3947     07C2  0021               	movlb	1	; select bank1
  3948     07C3  00C2               	movwf	calibrate@msg^(0+128)
  3949     07C4                     l3037:
  3950                           
  3951                           ;ADXL345.c: 423:     msg.data[0] = 0x0B;
  3952     07C4  300B               	movlw	11
  3953     07C5  00C3               	movwf	(calibrate@msg^(0+128)+1)
  3954     07C6                     l3039:
  3955     07C6  0022               	movlb	2	; select bank2
  3956     07C7  120E               	bcf	14,4	;volatile
  3957     07C8                     l3041:
  3958                           
  3959                           ;ADXL345.c: 425:     SPI1_BufferWrite(&msg, 2);
  3960     07C8  30C2               	movlw	low calibrate@msg
  3961     07C9  00F0               	movwf	SPI1_BufferWrite@bufferData
  3962     07CA  3000               	movlw	high calibrate@msg
  3963     07CB  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  3964     07CC  3002               	movlw	2
  3965     07CD  00F2               	movwf	SPI1_BufferWrite@bufferSize
  3966     07CE  3000               	movlw	0
  3967     07CF  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  3968     07D0  318F  2773  3185   	fcall	_SPI1_BufferWrite
  3969     07D3                     l3043:
  3970     07D3  0022               	movlb	2	; select bank2
  3971     07D4  160E               	bsf	14,4	;volatile
  3972     07D5                     l3045:
  3973                           
  3974                           ;ADXL345.c: 428:     SPI1_Close();
  3975     07D5  318E  267F  3185   	fcall	_SPI1_Close
  3976     07D8                     l3047:
  3977                           
  3978                           ;ADXL345.c: 429:     return 1;
  3979     07D8  3001               	movlw	1
  3980     07D9                     l635:
  3981     07D9  0008               	return
  3982     07DA                     __end_of_calibrate:
  3983                           
  3984                           	psect	text2
  3985     0046                     __ptext2:	
  3986 ;; *************** function _saveOffsets *****************
  3987 ;; Defined at:
  3988 ;;		line 76 in file "ADXL345.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;  x_axis          1    wreg     unsigned char 
  3991 ;;  y_axis          1   10[COMMON] unsigned char 
  3992 ;;  z_axis          1   11[COMMON] unsigned char 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  x_axis          1    0[BANK0 ] unsigned char 
  3995 ;;  msg            26    1[BANK0 ] struct Message
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Totals:         2      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;Total ram usage:       29 bytes
  4010 ;; Hardware stack levels used: 1
  4011 ;; Hardware stack levels required when called: 2
  4012 ;; This function calls:
  4013 ;;		_SPI1_BufferWrite
  4014 ;;		_SPI1_Close
  4015 ;;		_SPI1_Open
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;;		_calibrate
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022     0046                     _saveOffsets:	
  4023                           ;psect for function _saveOffsets
  4024                           
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in _saveOffsets: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4028                           ;saveOffsets@x_axis stored from wreg
  4029     0046  0020               	movlb	0	; select bank0
  4030     0047  00A0               	movwf	saveOffsets@x_axis
  4031     0048                     l2549:
  4032                           
  4033                           ;ADXL345.c: 77:     while (!SPI1_Open(ADXL345)) {
  4034     0048  284C               	goto	l2553
  4035     0049                     l2551:
  4036                           
  4037                           ;ADXL345.c: 78:         SPI1_Close();
  4038     0049  318E  267F  3180   	fcall	_SPI1_Close
  4039     004C                     l2553:
  4040                           
  4041                           ;ADXL345.c: 77:     while (!SPI1_Open(ADXL345)) {
  4042     004C  01F6               	clrf	SPI1_Open@spiConfigIndex
  4043     004D  3180  20F9  3180   	fcall	_SPI1_Open
  4044     0050  3A00               	xorlw	0
  4045     0051  1903               	skipnz
  4046     0052  2854               	goto	u871
  4047     0053  2855               	goto	u870
  4048     0054                     u871:
  4049     0054  2849               	goto	l2551
  4050     0055                     u870:
  4051     0055                     l490:
  4052                           
  4053                           ;ADXL345.c: 81:     struct Message msg;;ADXL345.c: 82:     msg.registerAddr = 0x1E;
  4054     0055  301E               	movlw	30
  4055     0056  0020               	movlb	0	; select bank0
  4056     0057  00A1               	movwf	saveOffsets@msg
  4057     0058                     l2555:
  4058                           
  4059                           ;ADXL345.c: 83:     msg.data[0] = x_axis;
  4060     0058  0820               	movf	saveOffsets@x_axis,w
  4061     0059  00A2               	movwf	saveOffsets@msg+1
  4062     005A                     l2557:
  4063     005A  0022               	movlb	2	; select bank2
  4064     005B  120E               	bcf	14,4	;volatile
  4065     005C                     l2559:
  4066                           
  4067                           ;ADXL345.c: 85:     SPI1_BufferWrite(&msg, 2);
  4068     005C  3021               	movlw	low saveOffsets@msg
  4069     005D  00F0               	movwf	SPI1_BufferWrite@bufferData
  4070     005E  3000               	movlw	high saveOffsets@msg
  4071     005F  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4072     0060  3002               	movlw	2
  4073     0061  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4074     0062  3000               	movlw	0
  4075     0063  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4076     0064  318F  2773  3180   	fcall	_SPI1_BufferWrite
  4077     0067                     l2561:
  4078     0067  0022               	movlb	2	; select bank2
  4079     0068  160E               	bsf	14,4	;volatile
  4080     0069                     l2563:
  4081                           
  4082                           ;ADXL345.c: 88:     msg.registerAddr = 0x1F;
  4083     0069  301F               	movlw	31
  4084     006A  0020               	movlb	0	; select bank0
  4085     006B  00A1               	movwf	saveOffsets@msg
  4086     006C                     l2565:
  4087                           
  4088                           ;ADXL345.c: 89:     msg.data[0] = y_axis;
  4089     006C  087A               	movf	saveOffsets@y_axis,w
  4090     006D  00A2               	movwf	saveOffsets@msg+1
  4091     006E                     l2567:
  4092     006E  0022               	movlb	2	; select bank2
  4093     006F  120E               	bcf	14,4	;volatile
  4094     0070                     l496:
  4095                           
  4096                           ;ADXL345.c: 91:     SPI1_BufferWrite(&msg, 2);
  4097     0070  3021               	movlw	low saveOffsets@msg
  4098     0071  00F0               	movwf	SPI1_BufferWrite@bufferData
  4099     0072  3000               	movlw	high saveOffsets@msg
  4100     0073  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4101     0074  3002               	movlw	2
  4102     0075  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4103     0076  3000               	movlw	0
  4104     0077  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4105     0078  318F  2773  3180   	fcall	_SPI1_BufferWrite
  4106     007B                     l2569:
  4107     007B  0022               	movlb	2	; select bank2
  4108     007C  160E               	bsf	14,4	;volatile
  4109     007D                     l2571:
  4110                           
  4111                           ;ADXL345.c: 94:     msg.registerAddr = 0x20;
  4112     007D  3020               	movlw	32
  4113     007E  0020               	movlb	0	; select bank0
  4114     007F  00A1               	movwf	saveOffsets@msg
  4115     0080                     l2573:
  4116                           
  4117                           ;ADXL345.c: 95:     msg.data[0] = z_axis;
  4118     0080  087B               	movf	saveOffsets@z_axis,w
  4119     0081  00A2               	movwf	saveOffsets@msg+1
  4120     0082                     l2575:
  4121     0082  0022               	movlb	2	; select bank2
  4122     0083  120E               	bcf	14,4	;volatile
  4123     0084                     l2577:
  4124                           
  4125                           ;ADXL345.c: 97:     SPI1_BufferWrite(&msg, 2);
  4126     0084  3021               	movlw	low saveOffsets@msg
  4127     0085  00F0               	movwf	SPI1_BufferWrite@bufferData
  4128     0086  3000               	movlw	high saveOffsets@msg
  4129     0087  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  4130     0088  3002               	movlw	2
  4131     0089  00F2               	movwf	SPI1_BufferWrite@bufferSize
  4132     008A  3000               	movlw	0
  4133     008B  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  4134     008C  318F  2773  3180   	fcall	_SPI1_BufferWrite
  4135     008F                     l2579:
  4136     008F  0022               	movlb	2	; select bank2
  4137     0090  160E               	bsf	14,4	;volatile
  4138     0091                     l2581:
  4139                           
  4140                           ;ADXL345.c: 100:     SPI1_Close();
  4141     0091  318E  267F  3180   	fcall	_SPI1_Close
  4142     0094                     l503:
  4143     0094  0008               	return
  4144     0095                     __end_of_saveOffsets:
  4145                           
  4146                           	psect	text3
  4147     0F36                     __ptext3:	
  4148 ;; *************** function _EEPROM_Write *****************
  4149 ;; Defined at:
  4150 ;;		line 242 in file "mcc_generated_files/nvm/src/nvm.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  address         2    0[COMMON] unsigned short 
  4153 ;;  data            1    2[COMMON] unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  globalInterr    1    3[COMMON] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4165 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;Total ram usage:        4 bytes
  4170 ;; Hardware stack levels used: 1
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_calibrate
  4175 ;;		_EEPROM_ByteWrite
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179     0F36                     _EEPROM_Write:	
  4180                           ;psect for function _EEPROM_Write
  4181                           
  4182     0F36                     l2475:	
  4183                           ;incstack = 0
  4184                           ; Regs used in _EEPROM_Write: [wreg+status,2+status,0]
  4185                           
  4186                           
  4187                           ;mcc_generated_files/nvm/src/nvm.c: 242: void EEPROM_Write(eeprom_address_t address, eep
      +                          rom_data_t data);mcc_generated_files/nvm/src/nvm.c: 243: {;mcc_generated_files/nvm/src/n
      +                          vm.c: 245:     uint8_t globalInterruptBitValue = INTCONbits.GIE;
  4188     0F36  0D0B               	rlf	11,w	;volatile
  4189     0F37  0D0B               	rlf	11,w	;volatile
  4190     0F38  3901               	andlw	1
  4191     0F39  00F3               	movwf	EEPROM_Write@globalInterruptBitValue
  4192     0F3A                     l2477:
  4193                           
  4194                           ;mcc_generated_files/nvm/src/nvm.c: 248:     EECON1bits.CFGS = 0;
  4195     0F3A  0023               	movlb	3	; select bank3
  4196     0F3B  1315               	bcf	21,6	;volsfr
  4197     0F3C                     l2479:
  4198                           
  4199                           ;mcc_generated_files/nvm/src/nvm.c: 249:     EECON1bits.EEPGD = 0;
  4200     0F3C  1395               	bcf	21,7	;volsfr
  4201     0F3D                     l2481:
  4202                           
  4203                           ;mcc_generated_files/nvm/src/nvm.c: 252:     EECON1bits.WREN = 1;
  4204     0F3D  1515               	bsf	21,2	;volsfr
  4205     0F3E                     l2483:
  4206                           
  4207                           ;mcc_generated_files/nvm/src/nvm.c: 255:     EEADRH = (uint8_t) (address >> 8);
  4208     0F3E  0871               	movf	EEPROM_Write@address+1,w
  4209     0F3F  0092               	movwf	18	;volatile
  4210     0F40                     l2485:
  4211                           
  4212                           ;mcc_generated_files/nvm/src/nvm.c: 256:     EEADRL = (uint8_t) address;
  4213     0F40  0870               	movf	EEPROM_Write@address,w
  4214     0F41  0091               	movwf	17	;volatile
  4215     0F42                     l2487:
  4216                           
  4217                           ;mcc_generated_files/nvm/src/nvm.c: 259:     EEDATL = data;
  4218     0F42  0872               	movf	EEPROM_Write@data,w
  4219     0F43  0093               	movwf	19	;volatile
  4220     0F44                     l2489:
  4221                           
  4222                           ;mcc_generated_files/nvm/src/nvm.c: 262:     INTCONbits.GIE = 0;
  4223     0F44  138B               	bcf	11,7	;volatile
  4224     0F45                     l2491:
  4225                           
  4226                           ;mcc_generated_files/nvm/src/nvm.c: 265:     EECON2 = unlockKeyLow;
  4227     0F45  087D               	movf	_unlockKeyLow,w	;volatile
  4228     0F46  0096               	movwf	22	;volsfr
  4229     0F47                     l2493:
  4230                           
  4231                           ;mcc_generated_files/nvm/src/nvm.c: 266:     EECON2 = unlockKeyHigh;
  4232     0F47  087C               	movf	_unlockKeyHigh,w	;volatile
  4233     0F48  0096               	movwf	22	;volsfr
  4234     0F49                     l2495:
  4235                           
  4236                           ;mcc_generated_files/nvm/src/nvm.c: 267:     EECON1bits.WR = 1;
  4237     0F49  1495               	bsf	21,1	;volsfr
  4238     0F4A                     l2497:
  4239                           
  4240                           ;mcc_generated_files/nvm/src/nvm.c: 268:     __nop();
  4241     0F4A  0000               	nop
  4242     0F4B                     l2499:
  4243                           
  4244                           ;mcc_generated_files/nvm/src/nvm.c: 269:     __nop();
  4245     0F4B  0000               	nop
  4246     0F4C                     l2501:
  4247                           
  4248                           ;mcc_generated_files/nvm/src/nvm.c: 272:     INTCONbits.GIE = globalInterruptBitValue;
  4249     0F4C  0C73               	rrf	EEPROM_Write@globalInterruptBitValue,w
  4250     0F4D  1C03               	skipc
  4251     0F4E  138B               	bcf	11,7	;volatile
  4252     0F4F  1803               	skipnc
  4253     0F50  178B               	bsf	11,7	;volatile
  4254     0F51                     l2503:
  4255                           
  4256                           ;mcc_generated_files/nvm/src/nvm.c: 275:     EECON1bits.WREN = 0;
  4257     0F51  0023               	movlb	3	; select bank3
  4258     0F52  1115               	bcf	21,2	;volsfr
  4259     0F53                     l106:
  4260     0F53  0008               	return
  4261     0F54                     __end_of_EEPROM_Write:
  4262                           
  4263                           	psect	text4
  4264     0ED4                     __ptext4:	
  4265 ;; *************** function _SYSTEM_Initialize *****************
  4266 ;; Defined at:
  4267 ;;		line 39 in file "mcc_generated_files/system/src/system.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, status,0, pclath, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;Total ram usage:        0 bytes
  4286 ;; Hardware stack levels used: 1
  4287 ;; Hardware stack levels required when called: 2
  4288 ;; This function calls:
  4289 ;;		_CLOCK_Initialize
  4290 ;;		_INTERRUPT_Initialize
  4291 ;;		_NVM_Initialize
  4292 ;;		_PIN_MANAGER_Initialize
  4293 ;;		_SPI1_Initialize
  4294 ;;		_WDT_Initialize
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300     0ED4                     _SYSTEM_Initialize:	
  4301                           ;psect for function _SYSTEM_Initialize
  4302                           
  4303     0ED4                     l2831:	
  4304                           ;incstack = 0
  4305                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4306                           
  4307                           
  4308                           ;mcc_generated_files/system/src/system.c: 41:     CLOCK_Initialize();
  4309     0ED4  3180  2004  318E   	fcall	_CLOCK_Initialize
  4310                           
  4311                           ;mcc_generated_files/system/src/system.c: 42:     PIN_MANAGER_Initialize();
  4312     0ED7  318F  2718  318E   	fcall	_PIN_MANAGER_Initialize
  4313                           
  4314                           ;mcc_generated_files/system/src/system.c: 43:     NVM_Initialize();
  4315     0EDA  318E  268C  318E   	fcall	_NVM_Initialize
  4316                           
  4317                           ;mcc_generated_files/system/src/system.c: 44:     SPI1_Initialize();
  4318     0EDD  318E  269A  318E   	fcall	_SPI1_Initialize
  4319                           
  4320                           ;mcc_generated_files/system/src/system.c: 45:     WDT_Initialize();
  4321     0EE0  318E  2690  318E   	fcall	_WDT_Initialize
  4322     0EE3                     l2833:
  4323                           
  4324                           ;mcc_generated_files/system/src/system.c: 46:     INTERRUPT_Initialize();
  4325     0EE3  318E  26A4  318E   	fcall	_INTERRUPT_Initialize
  4326     0EE6                     l328:
  4327     0EE6  0008               	return
  4328     0EE7                     __end_of_SYSTEM_Initialize:
  4329                           
  4330                           	psect	text5
  4331     0E90                     __ptext5:	
  4332 ;; *************** function _WDT_Initialize *****************
  4333 ;; Defined at:
  4334 ;;		line 36 in file "mcc_generated_files/system/src/watchdog.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		None
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;Total ram usage:        0 bytes
  4353 ;; Hardware stack levels used: 1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_SYSTEM_Initialize
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361     0E90                     _WDT_Initialize:	
  4362                           ;psect for function _WDT_Initialize
  4363                           
  4364     0E90                     l2547:	
  4365                           ;incstack = 0
  4366                           ; Regs used in _WDT_Initialize: []
  4367                           
  4368                           
  4369                           ;mcc_generated_files/system/src/watchdog.c: 39:     WDTCON = 0x19;
  4370     0E90  3019               	movlw	25
  4371     0E91  0021               	movlb	1	; select bank1
  4372     0E92  0097               	movwf	23	;volatile
  4373     0E93                     l333:
  4374     0E93  0008               	return
  4375     0E94                     __end_of_WDT_Initialize:
  4376                           
  4377                           	psect	text6
  4378     0E9A                     __ptext6:	
  4379 ;; *************** function _SPI1_Initialize *****************
  4380 ;; Defined at:
  4381 ;;		line 61 in file "mcc_generated_files/spi/src/mssp.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		status,2
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;Total ram usage:        0 bytes
  4400 ;; Hardware stack levels used: 1
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_SYSTEM_Initialize
  4405 ;;		_main
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409     0E9A                     _SPI1_Initialize:	
  4410                           ;psect for function _SPI1_Initialize
  4411                           
  4412     0E9A                     l2507:	
  4413                           ;incstack = 0
  4414                           ; Regs used in _SPI1_Initialize: [status,2]
  4415                           
  4416                           
  4417                           ;mcc_generated_files/spi/src/mssp.c: 64:     PIE1bits.SSP1IE = 0;
  4418     0E9A  0021               	movlb	1	; select bank1
  4419     0E9B  1191               	bcf	17,3	;volatile
  4420                           
  4421                           ;mcc_generated_files/spi/src/mssp.c: 65:     PIR1bits.SSP1IF = 0;
  4422     0E9C  0020               	movlb	0	; select bank0
  4423     0E9D  1191               	bcf	17,3	;volatile
  4424     0E9E                     l2509:
  4425                           
  4426                           ;mcc_generated_files/spi/src/mssp.c: 67:     SSP1STAT = 0x00;
  4427     0E9E  0024               	movlb	4	; select bank4
  4428     0E9F  0194               	clrf	20	;volatile
  4429                           
  4430                           ;mcc_generated_files/spi/src/mssp.c: 68:     SSP1CON1 = 0x00;
  4431     0EA0  0195               	clrf	21	;volatile
  4432                           
  4433                           ;mcc_generated_files/spi/src/mssp.c: 69:     SSP1CON3 = 0x00;
  4434     0EA1  0197               	clrf	23	;volatile
  4435                           
  4436                           ;mcc_generated_files/spi/src/mssp.c: 70:     SSP1ADD = 0x00;
  4437     0EA2  0192               	clrf	18	;volatile
  4438     0EA3                     l153:
  4439     0EA3  0008               	return
  4440     0EA4                     __end_of_SPI1_Initialize:
  4441                           
  4442                           	psect	text7
  4443     0F18                     __ptext7:	
  4444 ;; *************** function _PIN_MANAGER_Initialize *****************
  4445 ;; Defined at:
  4446 ;;		line 40 in file "mcc_generated_files/system/src/pins.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;		None
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      void 
  4453 ;; Registers used:
  4454 ;;		status,2
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;Total ram usage:        0 bytes
  4465 ;; Hardware stack levels used: 1
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_SYSTEM_Initialize
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473     0F18                     _PIN_MANAGER_Initialize:	
  4474                           ;psect for function _PIN_MANAGER_Initialize
  4475                           
  4476     0F18                     l2527:	
  4477                           ;incstack = 0
  4478                           ; Regs used in _PIN_MANAGER_Initialize: [status,2]
  4479                           
  4480                           
  4481                           ;mcc_generated_files/system/src/pins.c: 45:     LATA = 0x0;
  4482     0F18  0022               	movlb	2	; select bank2
  4483     0F19  018C               	clrf	12	;volatile
  4484     0F1A                     l2529:
  4485                           
  4486                           ;mcc_generated_files/system/src/pins.c: 46:     LATC = 0x18;
  4487     0F1A  3018               	movlw	24
  4488     0F1B  008E               	movwf	14	;volatile
  4489     0F1C                     l2531:
  4490                           
  4491                           ;mcc_generated_files/system/src/pins.c: 51:     TRISA = 0xF;
  4492     0F1C  300F               	movlw	15
  4493     0F1D  0021               	movlb	1	; select bank1
  4494     0F1E  008C               	movwf	12	;volatile
  4495     0F1F                     l2533:
  4496                           
  4497                           ;mcc_generated_files/system/src/pins.c: 52:     TRISC = 0x2;
  4498     0F1F  3002               	movlw	2
  4499     0F20  008E               	movwf	14	;volatile
  4500                           
  4501                           ;mcc_generated_files/system/src/pins.c: 57:     ANSELA = 0x0;
  4502     0F21  0023               	movlb	3	; select bank3
  4503     0F22  018C               	clrf	12	;volatile
  4504                           
  4505                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELC = 0x0;
  4506     0F23  018E               	clrf	14	;volatile
  4507     0F24                     l2535:
  4508                           
  4509                           ;mcc_generated_files/system/src/pins.c: 63:     WPUA = 0xA;
  4510     0F24  300A               	movlw	10
  4511     0F25  0024               	movlb	4	; select bank4
  4512     0F26  008C               	movwf	12	;volatile
  4513                           
  4514                           ;mcc_generated_files/system/src/pins.c: 64:     WPUC = 0x0;
  4515     0F27  018E               	clrf	14	;volatile
  4516     0F28                     l2537:
  4517                           
  4518                           ;mcc_generated_files/system/src/pins.c: 65:     OPTION_REGbits.nWPUEN = 0x0;
  4519     0F28  0021               	movlb	1	; select bank1
  4520     0F29  1395               	bcf	21,7	;volatile
  4521                           
  4522                           ;mcc_generated_files/system/src/pins.c: 77:     INLVLA = 0x0;
  4523     0F2A  0027               	movlb	7	; select bank7
  4524     0F2B  018C               	clrf	12	;volatile
  4525                           
  4526                           ;mcc_generated_files/system/src/pins.c: 78:     INLVLC = 0x0;
  4527     0F2C  018E               	clrf	14	;volatile
  4528                           
  4529                           ;mcc_generated_files/system/src/pins.c: 87:     APFCON0 = 0x0;
  4530     0F2D  0022               	movlb	2	; select bank2
  4531     0F2E  019D               	clrf	29	;volatile
  4532                           
  4533                           ;mcc_generated_files/system/src/pins.c: 92:     IOCAP = 0x0;
  4534     0F2F  0027               	movlb	7	; select bank7
  4535     0F30  0191               	clrf	17	;volatile
  4536     0F31                     l2539:
  4537                           
  4538                           ;mcc_generated_files/system/src/pins.c: 93:     IOCAN = 0x2;
  4539     0F31  3002               	movlw	2
  4540     0F32  0092               	movwf	18	;volatile
  4541                           
  4542                           ;mcc_generated_files/system/src/pins.c: 94:     IOCAF = 0x0;
  4543     0F33  0193               	clrf	19	;volatile
  4544     0F34                     l2541:
  4545                           
  4546                           ;mcc_generated_files/system/src/pins.c: 99:     INTCONbits.IOCIE = 1;
  4547     0F34  158B               	bsf	11,3	;volatile
  4548     0F35                     l287:
  4549     0F35  0008               	return
  4550     0F36                     __end_of_PIN_MANAGER_Initialize:
  4551                           
  4552                           	psect	text8
  4553     0E8C                     __ptext8:	
  4554 ;; *************** function _NVM_Initialize *****************
  4555 ;; Defined at:
  4556 ;;		line 42 in file "mcc_generated_files/nvm/src/nvm.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		status,2, status,0, pclath, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used: 1
  4576 ;; Hardware stack levels required when called: 1
  4577 ;; This function calls:
  4578 ;;		_NVM_StatusClear
  4579 ;; This function is called by:
  4580 ;;		_SYSTEM_Initialize
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584     0E8C                     _NVM_Initialize:	
  4585                           ;psect for function _NVM_Initialize
  4586                           
  4587     0E8C                     l2505:	
  4588                           ;incstack = 0
  4589                           ; Regs used in _NVM_Initialize: [status,2+status,0+pclath+cstack]
  4590                           
  4591                           
  4592                           ;mcc_generated_files/nvm/src/nvm.c: 44:     NVM_StatusClear();
  4593     0E8C  318E  2685  318E   	fcall	_NVM_StatusClear
  4594     0E8F                     l58:
  4595     0E8F  0008               	return
  4596     0E90                     __end_of_NVM_Initialize:
  4597                           
  4598                           	psect	text9
  4599     0E85                     __ptext9:	
  4600 ;; *************** function _NVM_StatusClear *****************
  4601 ;; Defined at:
  4602 ;;		line 64 in file "mcc_generated_files/nvm/src/nvm.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		None
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used: 1
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_NVM_Initialize
  4626 ;;		_EEPROM_ByteWrite
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630     0E85                     _NVM_StatusClear:	
  4631                           ;psect for function _NVM_StatusClear
  4632                           
  4633     0E85                     l2399:	
  4634                           ;incstack = 0
  4635                           ; Regs used in _NVM_StatusClear: []
  4636                           
  4637                           
  4638                           ;mcc_generated_files/nvm/src/nvm.c: 66:     EECON1bits.WRERR = 0;
  4639     0E85  0023               	movlb	3	; select bank3
  4640     0E86  1195               	bcf	21,3	;volsfr
  4641     0E87                     l71:
  4642     0E87  0008               	return
  4643     0E88                     __end_of_NVM_StatusClear:
  4644                           
  4645                           	psect	text10
  4646     0EA4                     __ptext10:	
  4647 ;; *************** function _INTERRUPT_Initialize *****************
  4648 ;; Defined at:
  4649 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0, pclath, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;Total ram usage:        0 bytes
  4668 ;; Hardware stack levels used: 1
  4669 ;; Hardware stack levels required when called: 1
  4670 ;; This function calls:
  4671 ;;		_INT_SetInterruptHandler
  4672 ;; This function is called by:
  4673 ;;		_SYSTEM_Initialize
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677     0EA4                     _INTERRUPT_Initialize:	
  4678                           ;psect for function _INTERRUPT_Initialize
  4679                           
  4680     0EA4                     l2523:	
  4681                           ;incstack = 0
  4682                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4683                           
  4684                           
  4685                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  4686     0EA4  108B               	bcf	11,1	;volatile
  4687                           
  4688                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  4689     0EA5  0021               	movlb	1	; select bank1
  4690     0EA6  1715               	bsf	21,6	;volatile
  4691     0EA7                     l2525:
  4692                           
  4693                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  4694     0EA7  3000               	movlw	0
  4695     0EA8  00F0               	movwf	INT_SetInterruptHandler@InterruptHandler
  4696     0EA9  3000               	movlw	0
  4697     0EAA  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  4698     0EAB  318E  2694  318E   	fcall	_INT_SetInterruptHandler
  4699     0EAE                     l229:
  4700     0EAE  0008               	return
  4701     0EAF                     __end_of_INTERRUPT_Initialize:
  4702                           
  4703                           	psect	text11
  4704     0E94                     __ptext11:	
  4705 ;; *************** function _INT_SetInterruptHandler *****************
  4706 ;; Defined at:
  4707 ;;		line 71 in file "mcc_generated_files/system/src/interrupt.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4710 ;;		 -> INT_DefaultInterruptHandler(1), 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4722 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;Total ram usage:        2 bytes
  4727 ;; Hardware stack levels used: 1
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_INTERRUPT_Initialize
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735     0E94                     _INT_SetInterruptHandler:	
  4736                           ;psect for function _INT_SetInterruptHandler
  4737                           
  4738     0E94                     l2451:	
  4739                           ;incstack = 0
  4740                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  4741                           
  4742                           
  4743                           ;mcc_generated_files/system/src/interrupt.c: 72:     INT_InterruptHandler = InterruptHan
      +                          dler;
  4744     0E94  0871               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  4745     0E95  0020               	movlb	0	; select bank0
  4746     0E96  00E5               	movwf	_INT_InterruptHandler+1
  4747     0E97  0870               	movf	INT_SetInterruptHandler@InterruptHandler,w
  4748     0E98  00E4               	movwf	_INT_InterruptHandler
  4749     0E99                     l239:
  4750     0E99  0008               	return
  4751     0E9A                     __end_of_INT_SetInterruptHandler:
  4752                           
  4753                           	psect	text12
  4754     0004                     __ptext12:	
  4755 ;; *************** function _CLOCK_Initialize *****************
  4756 ;; Defined at:
  4757 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		status,2
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used: 1
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_SYSTEM_Initialize
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784     0004                     _CLOCK_Initialize:	
  4785                           ;psect for function _CLOCK_Initialize
  4786                           
  4787     0004                     l2543:	
  4788                           ;incstack = 0
  4789                           ; Regs used in _CLOCK_Initialize: [status,2]
  4790                           
  4791                           
  4792                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (13 << 0x3)
  4793     0004  306A               	movlw	106
  4794     0005  0021               	movlb	1	; select bank1
  4795     0006  0099               	movwf	25	;volatile
  4796     0007                     l2545:
  4797                           
  4798                           ;mcc_generated_files/system/src/clock.c: 44:     BORCON = (0 << 0x7);
  4799     0007  0022               	movlb	2	; select bank2
  4800     0008  0196               	clrf	22	;volatile
  4801                           
  4802                           ;mcc_generated_files/system/src/clock.c: 45:     OSCTUNE = (0 << 0x0);
  4803     0009  0021               	movlb	1	; select bank1
  4804     000A  0198               	clrf	24	;volatile
  4805     000B                     l313:
  4806     000B  0008               	return
  4807     000C                     __end_of_CLOCK_Initialize:
  4808                           
  4809                           	psect	text13
  4810     0E82                     __ptext13:	
  4811 ;; *************** function _PIN_MANAGER_IOC *****************
  4812 ;; Defined at:
  4813 ;;		line 102 in file "mcc_generated_files/system/src/pins.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840     0E82                     _PIN_MANAGER_IOC:	
  4841                           ;psect for function _PIN_MANAGER_IOC
  4842                           
  4843     0E82                     l2829:	
  4844                           ;incstack = 0
  4845                           ; Regs used in _PIN_MANAGER_IOC: [wreg]
  4846                           
  4847                           
  4848                           ;mcc_generated_files/system/src/pins.c: 105:     if(IOCAFbits.IOCAF1 == 1)
  4849     0E82  0027               	movlb	7	; select bank7
  4850     0E83  0813               	movf	19,w	;volatile
  4851     0E84                     l291:
  4852     0E84  0008               	return
  4853     0E85                     __end_of_PIN_MANAGER_IOC:
  4854                           
  4855                           	psect	text14
  4856     0165                     __ptext14:	
  4857 ;; *************** function _MotionEventHandler *****************
  4858 ;; Defined at:
  4859 ;;		line 15 in file "fall.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  state           1   40[BANK0 ] PTR enum E2688
  4862 ;;		 -> main@current_state(1), 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;		None
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4874 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;Total ram usage:        3 bytes
  4879 ;; Hardware stack levels used: 1
  4880 ;; Hardware stack levels required when called: 3
  4881 ;; This function calls:
  4882 ;;		_ADXL345_ClearInterrupt
  4883 ;;		_orientation_Up
  4884 ;;		_setupForFreefall
  4885 ;;		_setupForImpact
  4886 ;;		_setupForInactivity
  4887 ;; This function is called by:
  4888 ;;		_main
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892     0165                     _MotionEventHandler:	
  4893                           ;psect for function _MotionEventHandler
  4894                           
  4895     0165                     l3051:	
  4896                           ;incstack = 0
  4897                           ; Regs used in _MotionEventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4898                           
  4899                           
  4900                           ;fall.c: 16:     timer_20ms++;
  4901     0165  3001               	movlw	1
  4902     0166  0020               	movlb	0	; select bank0
  4903     0167  07DD               	addwf	_timer_20ms,f
  4904     0168  3000               	movlw	0
  4905     0169  3DDE               	addwfc	_timer_20ms+1,f
  4906                           
  4907                           ;fall.c: 17:     orientation_check_timer_20ms++;
  4908     016A  3001               	movlw	1
  4909     016B  07DB               	addwf	_orientation_check_timer_20ms,f
  4910     016C  3000               	movlw	0
  4911     016D  3DDC               	addwfc	_orientation_check_timer_20ms+1,f
  4912                           
  4913                           ;fall.c: 19:     switch (*state) {
  4914     016E  29D6               	goto	l3115
  4915     016F                     l690:	
  4916                           ;fall.c: 20:         case WAITING_FOR_FREEFALL:
  4917                           
  4918                           
  4919                           ;fall.c: 22:             if (PORTAbits.RA2) {
  4920     016F  1D0C               	btfss	12,2	;volatile
  4921     0170  2972               	goto	u1181
  4922     0171  2973               	goto	u1180
  4923     0172                     u1181:
  4924     0172  29F2               	goto	l719
  4925     0173                     u1180:
  4926     0173                     l3053:
  4927                           
  4928                           ;fall.c: 23:                 setupForImpact();
  4929     0173  3182  228A  3181   	fcall	_setupForImpact
  4930     0176                     l3055:
  4931                           
  4932                           ;fall.c: 24:                 timer_20ms = 0;
  4933     0176  0020               	movlb	0	; select bank0
  4934     0177  01DD               	clrf	_timer_20ms
  4935     0178  01DE               	clrf	_timer_20ms+1
  4936     0179                     l3057:
  4937                           
  4938                           ;fall.c: 25:                 *state = WAITING_FOR_IMPACT;
  4939     0179  0848               	movf	MotionEventHandler@state,w
  4940     017A  0086               	movwf	6
  4941     017B  0187               	clrf	7
  4942     017C  3001               	movlw	1
  4943     017D  0081               	movwf	1
  4944     017E  29F2               	goto	l719
  4945     017F                     l693:	
  4946                           ;fall.c: 29:         case WAITING_FOR_IMPACT:
  4947                           
  4948                           
  4949                           ;fall.c: 31:             if (PORTAbits.RA2) {
  4950     017F  1D0C               	btfss	12,2	;volatile
  4951     0180  2982               	goto	u1191
  4952     0181  2983               	goto	u1190
  4953     0182                     u1191:
  4954     0182  298D               	goto	l3063
  4955     0183                     u1190:
  4956     0183                     l3059:
  4957                           
  4958                           ;fall.c: 32:                 setupForInactivity();
  4959     0183  3183  2321  3181   	fcall	_setupForInactivity
  4960     0186                     l3061:
  4961                           
  4962                           ;fall.c: 33:                 *state = WAITING_FOR_INACTIVITY;
  4963     0186  0020               	movlb	0	; select bank0
  4964     0187  0848               	movf	MotionEventHandler@state,w
  4965     0188  0086               	movwf	6
  4966     0189  0187               	clrf	7
  4967     018A  3002               	movlw	2
  4968     018B  0081               	movwf	1
  4969                           
  4970                           ;fall.c: 34:             }
  4971     018C  29F2               	goto	l719
  4972     018D                     l3063:
  4973     018D  3000               	movlw	0
  4974     018E  025E               	subwf	_timer_20ms+1,w
  4975     018F  3019               	movlw	25
  4976     0190  1903               	skipnz
  4977     0191  025D               	subwf	_timer_20ms,w
  4978     0192  1C03               	skipc
  4979     0193  2995               	goto	u1201
  4980     0194  2996               	goto	u1200
  4981     0195                     u1201:
  4982     0195  29F2               	goto	l719
  4983     0196                     u1200:
  4984     0196                     l3065:
  4985                           
  4986                           ;fall.c: 37:                 setupForFreefall();
  4987     0196  3181  21F3  3181   	fcall	_setupForFreefall
  4988     0199                     l3067:
  4989                           
  4990                           ;fall.c: 38:                 *state = WAITING_FOR_FREEFALL;
  4991     0199  0020               	movlb	0	; select bank0
  4992     019A  0848               	movf	MotionEventHandler@state,w
  4993     019B  0086               	movwf	6
  4994     019C  0187               	clrf	7
  4995     019D  0181               	clrf	1
  4996     019E  29F2               	goto	l719
  4997     019F                     l697:	
  4998                           ;fall.c: 42:         case WAITING_FOR_INACTIVITY:
  4999                           
  5000                           
  5001                           ;fall.c: 44:             if (PORTAbits.RA2) {
  5002     019F  1D0C               	btfss	12,2	;volatile
  5003     01A0  29A2               	goto	u1211
  5004     01A1  29A3               	goto	u1210
  5005     01A2                     u1211:
  5006     01A2  29C6               	goto	l3087
  5007     01A3                     u1210:
  5008     01A3                     l3069:
  5009                           
  5010                           ;fall.c: 45:                 if (!orientation_Up()) {
  5011     01A3  3183  23B8  3181   	fcall	_orientation_Up
  5012     01A6  3A00               	xorlw	0
  5013     01A7  1D03               	skipz
  5014     01A8  29AA               	goto	u1221
  5015     01A9  29AB               	goto	u1220
  5016     01AA                     u1221:
  5017     01AA  2996               	goto	l3065
  5018     01AB                     u1220:
  5019     01AB                     l700:	
  5020                           ;fall.c: 46:                     do { LATAbits.LATA5 = 1; } while(0);
  5021                           
  5022     01AB  0022               	movlb	2	; select bank2
  5023     01AC  168C               	bsf	12,5	;volatile
  5024     01AD                     l3071:
  5025                           
  5026                           ;fall.c: 47:                     _delay((unsigned long)((100)*(4000000/4000.0)));
  5027     01AD  3082               	movlw	130
  5028     01AE  0020               	movlb	0	; select bank0
  5029     01AF  00C9               	movwf	??_MotionEventHandler
  5030     01B0  30DD               	movlw	221
  5031     01B1                     u1497:
  5032     01B1  0B89               	decfsz	9,f
  5033     01B2  29B1               	goto	u1497
  5034     01B3  0BC9               	decfsz	??_MotionEventHandler,f
  5035     01B4  29B1               	goto	u1497
  5036     01B5  3200               	nop2
  5037     01B6                     l3073:
  5038     01B6  0022               	movlb	2	; select bank2
  5039     01B7  128C               	bcf	12,5	;volatile
  5040     01B8                     l3075:
  5041                           
  5042                           ;fall.c: 49:                     orientation_check_timer_20ms = 0;
  5043     01B8  0020               	movlb	0	; select bank0
  5044     01B9  01DB               	clrf	_orientation_check_timer_20ms
  5045     01BA  01DC               	clrf	_orientation_check_timer_20ms+1
  5046     01BB                     l3077:
  5047                           
  5048                           ;fall.c: 50:                     good_orientation_count = 0;
  5049     01BB  01E3               	clrf	_good_orientation_count
  5050     01BC                     l3079:
  5051                           
  5052                           ;fall.c: 51:                     ADXL345_ClearInterrupt();
  5053     01BC  318E  26FE  3181   	fcall	_ADXL345_ClearInterrupt
  5054     01BF                     l3081:
  5055                           
  5056                           ;fall.c: 52:                     *state = WAITING_FOR_TIMEOUT;
  5057     01BF  0020               	movlb	0	; select bank0
  5058     01C0  0848               	movf	MotionEventHandler@state,w
  5059     01C1  0086               	movwf	6
  5060     01C2  0187               	clrf	7
  5061     01C3  3003               	movlw	3
  5062     01C4  0081               	movwf	1
  5063                           
  5064                           ;fall.c: 53:                 } else {
  5065     01C5  29F2               	goto	l719
  5066     01C6                     l3087:
  5067     01C6  3000               	movlw	0
  5068     01C7  025E               	subwf	_timer_20ms+1,w
  5069     01C8  30E1               	movlw	225
  5070     01C9  1903               	skipnz
  5071     01CA  025D               	subwf	_timer_20ms,w
  5072     01CB  1C03               	skipc
  5073     01CC  29CE               	goto	u1231
  5074     01CD  29CF               	goto	u1230
  5075     01CE                     u1231:
  5076     01CE  29F2               	goto	l719
  5077     01CF                     u1230:
  5078     01CF  2996               	goto	l3065
  5079     01D0                     l3093:
  5080                           
  5081                           ;fall.c: 68:                 *state = FALL_DETECTED;
  5082     01D0  0848               	movf	MotionEventHandler@state,w
  5083     01D1  0086               	movwf	6
  5084     01D2  0187               	clrf	7
  5085     01D3  3004               	movlw	4
  5086     01D4  0081               	movwf	1
  5087                           
  5088                           ;fall.c: 69:             }
  5089     01D5  29F2               	goto	l719
  5090     01D6                     l3115:
  5091     01D6  0848               	movf	MotionEventHandler@state,w
  5092     01D7  0086               	movwf	6
  5093     01D8  0187               	clrf	7
  5094     01D9  0801               	movf	1,w
  5095     01DA  00C9               	movwf	??_MotionEventHandler
  5096     01DB  01CA               	clrf	??_MotionEventHandler+1
  5097                           
  5098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5099                           ; Switch size 1, requested type "simple"
  5100                           ; Number of cases is 1, Range of values is 0 to 0
  5101                           ; switch strategies available:
  5102                           ; Name         Instructions Cycles
  5103                           ; simple_byte            4     3 (average)
  5104                           ; direct_byte            8     6 (fixed)
  5105                           ; jumptable            260     6 (fixed)
  5106                           ;	Chosen strategy is simple_byte
  5107     01DC  084A               	movf	??_MotionEventHandler+1,w
  5108     01DD  3A00               	xorlw	0	; case 0
  5109     01DE  1903               	skipnz
  5110     01DF  29E1               	goto	l3263
  5111     01E0  29F2               	goto	l719
  5112     01E1                     l3263:
  5113                           
  5114                           ; Switch size 1, requested type "simple"
  5115                           ; Number of cases is 5, Range of values is 0 to 4
  5116                           ; switch strategies available:
  5117                           ; Name         Instructions Cycles
  5118                           ; direct_byte           16     6 (fixed)
  5119                           ; simple_byte           16     9 (average)
  5120                           ; jumptable            260     6 (fixed)
  5121                           ;	Chosen strategy is simple_byte
  5122     01E1  0849               	movf	??_MotionEventHandler,w
  5123     01E2  3A00               	xorlw	0	; case 0
  5124     01E3  1903               	skipnz
  5125     01E4  296F               	goto	l690
  5126     01E5  3A01               	xorlw	1	; case 1
  5127     01E6  1903               	skipnz
  5128     01E7  297F               	goto	l693
  5129     01E8  3A03               	xorlw	3	; case 2
  5130     01E9  1903               	skipnz
  5131     01EA  299F               	goto	l697
  5132     01EB  3A01               	xorlw	1	; case 3
  5133     01EC  1903               	skipnz
  5134     01ED  29D0               	goto	l3093
  5135     01EE  3A07               	xorlw	7	; case 4
  5136     01EF  1903               	skipnz
  5137     01F0  29F2               	goto	l719
  5138     01F1  29F2               	goto	l719
  5139     01F2                     l719:
  5140     01F2  0008               	return
  5141     01F3                     __end_of_MotionEventHandler:
  5142                           
  5143                           	psect	text15
  5144     0321                     __ptext15:	
  5145 ;; *************** function _setupForInactivity *****************
  5146 ;; Defined at:
  5147 ;;		line 212 in file "ADXL345.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  msg            26    0[BANK0 ] struct Message
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;Total ram usage:       26 bytes
  5166 ;; Hardware stack levels used: 1
  5167 ;; Hardware stack levels required when called: 2
  5168 ;; This function calls:
  5169 ;;		_SPI1_BufferWrite
  5170 ;;		_SPI1_ByteExchange
  5171 ;;		_SPI1_Close
  5172 ;;		_SPI1_Open
  5173 ;;		_memcpy
  5174 ;;		_memset
  5175 ;; This function is called by:
  5176 ;;		_MotionEventHandler
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180     0321                     _setupForInactivity:	
  5181                           ;psect for function _setupForInactivity
  5182                           
  5183     0321                     l2703:	
  5184                           ;incstack = 0
  5185                           ; Regs used in _setupForInactivity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5186                           
  5187                           
  5188                           ;ADXL345.c: 213:     while (!SPI1_Open(ADXL345)) {
  5189     0321  2B25               	goto	l2707
  5190     0322                     l2705:
  5191                           
  5192                           ;ADXL345.c: 214:         SPI1_Close();
  5193     0322  318E  267F  3183   	fcall	_SPI1_Close
  5194     0325                     l2707:
  5195                           
  5196                           ;ADXL345.c: 213:     while (!SPI1_Open(ADXL345)) {
  5197     0325  01F6               	clrf	SPI1_Open@spiConfigIndex
  5198     0326  3180  20F9  3183   	fcall	_SPI1_Open
  5199     0329  3A00               	xorlw	0
  5200     032A  1903               	skipnz
  5201     032B  2B2D               	goto	u911
  5202     032C  2B2E               	goto	u910
  5203     032D                     u911:
  5204     032D  2B22               	goto	l2705
  5205     032E                     u910:
  5206     032E                     l571:	
  5207                           ;ADXL345.c: 218:     do { LATCbits.LATC4 = 0; } while(0);
  5208                           
  5209     032E  0022               	movlb	2	; select bank2
  5210     032F  120E               	bcf	14,4	;volatile
  5211     0330                     l2709:
  5212                           
  5213                           ;ADXL345.c: 219:     SPI1_ByteExchange(0x30);
  5214     0330  3030               	movlw	48
  5215     0331  00F0               	movwf	SPI1_ByteExchange@byteData
  5216     0332  318E  26AF  3183   	fcall	_SPI1_ByteExchange
  5217     0335                     l2711:
  5218     0335  0022               	movlb	2	; select bank2
  5219     0336  160E               	bsf	14,4	;volatile
  5220     0337                     l2713:
  5221                           
  5222                           ;ADXL345.c: 228:     struct Message msg;;ADXL345.c: 229:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5223     0337  3064               	movlw	100
  5224     0338  0020               	movlb	0	; select bank0
  5225     0339  00A0               	movwf	setupForInactivity@msg
  5226     033A                     l2715:
  5227                           
  5228                           ;ADXL345.c: 230:     memset(msg.data, 0, sizeof(msg.data));
  5229     033A  3021               	movlw	low (setupForInactivity@msg+1)
  5230     033B  00F0               	movwf	memset@dest
  5231     033C  3000               	movlw	high (setupForInactivity@msg+1)
  5232     033D  00F1               	movwf	memset@dest+1
  5233     033E  3000               	movlw	0
  5234     033F  00F2               	movwf	memset@c
  5235     0340  00F3               	movwf	memset@c+1
  5236     0341  3019               	movlw	25
  5237     0342  00F4               	movwf	memset@n
  5238     0343  3000               	movlw	0
  5239     0344  00F5               	movwf	memset@n+1
  5240     0345  318E  26E7  3183   	fcall	_memset
  5241     0348                     l2717:
  5242                           
  5243                           ;ADXL345.c: 231:     memcpy(msg.data, no_motion_init, sizeof(no_motion_init));
  5244     0348  3021               	movlw	low (setupForInactivity@msg+1)
  5245     0349  00F0               	movwf	memcpy@d1
  5246     034A  3000               	movlw	high (setupForInactivity@msg+1)
  5247     034B  00F1               	movwf	memcpy@d1+1
  5248     034C  3045               	movlw	low (_no_motion_init| (0+32768))
  5249     034D  00F2               	movwf	memcpy@s1
  5250     034E  3090               	movlw	high (_no_motion_init| (0+32768))
  5251     034F  00F3               	movwf	memcpy@s1+1
  5252     0350  3004               	movlw	4
  5253     0351  00F4               	movwf	memcpy@n
  5254     0352  3000               	movlw	0
  5255     0353  00F5               	movwf	memcpy@n+1
  5256     0354  318F  27B5  3183   	fcall	_memcpy
  5257     0357                     l2719:
  5258     0357  0022               	movlb	2	; select bank2
  5259     0358  120E               	bcf	14,4	;volatile
  5260     0359                     l2721:
  5261                           
  5262                           ;ADXL345.c: 233:     SPI1_BufferWrite(&msg, sizeof(no_motion_init) + 1);
  5263     0359  3020               	movlw	low setupForInactivity@msg
  5264     035A  00F0               	movwf	SPI1_BufferWrite@bufferData
  5265     035B  3000               	movlw	high setupForInactivity@msg
  5266     035C  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5267     035D  3005               	movlw	5
  5268     035E  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5269     035F  3000               	movlw	0
  5270     0360  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5271     0361  318F  2773  3183   	fcall	_SPI1_BufferWrite
  5272     0364                     l2723:
  5273     0364  0022               	movlb	2	; select bank2
  5274     0365  160E               	bsf	14,4	;volatile
  5275     0366                     l2725:
  5276                           
  5277                           ;ADXL345.c: 237:     msg.registerAddr = 0x2C;
  5278     0366  302C               	movlw	44
  5279     0367  0020               	movlb	0	; select bank0
  5280     0368  00A0               	movwf	setupForInactivity@msg
  5281     0369                     l2727:
  5282                           
  5283                           ;ADXL345.c: 238:     memset(msg.data, 0, sizeof(msg.data));
  5284     0369  3021               	movlw	low (setupForInactivity@msg+1)
  5285     036A  00F0               	movwf	memset@dest
  5286     036B  3000               	movlw	high (setupForInactivity@msg+1)
  5287     036C  00F1               	movwf	memset@dest+1
  5288     036D  3000               	movlw	0
  5289     036E  00F2               	movwf	memset@c
  5290     036F  00F3               	movwf	memset@c+1
  5291     0370  3019               	movlw	25
  5292     0371  00F4               	movwf	memset@n
  5293     0372  3000               	movlw	0
  5294     0373  00F5               	movwf	memset@n+1
  5295     0374  318E  26E7  3183   	fcall	_memset
  5296     0377                     l2729:
  5297                           
  5298                           ;ADXL345.c: 239:     msg.data[0] = 0x17;
  5299     0377  3017               	movlw	23
  5300     0378  0020               	movlb	0	; select bank0
  5301     0379  00A1               	movwf	setupForInactivity@msg+1
  5302     037A                     l2731:
  5303     037A  0022               	movlb	2	; select bank2
  5304     037B  120E               	bcf	14,4	;volatile
  5305     037C                     l2733:
  5306                           
  5307                           ;ADXL345.c: 241:     SPI1_BufferWrite(&msg, 2);
  5308     037C  3020               	movlw	low setupForInactivity@msg
  5309     037D  00F0               	movwf	SPI1_BufferWrite@bufferData
  5310     037E  3000               	movlw	high setupForInactivity@msg
  5311     037F  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5312     0380  3002               	movlw	2
  5313     0381  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5314     0382  3000               	movlw	0
  5315     0383  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5316     0384  318F  2773  3183   	fcall	_SPI1_BufferWrite
  5317     0387                     l2735:
  5318     0387  0022               	movlb	2	; select bank2
  5319     0388  160E               	bsf	14,4	;volatile
  5320     0389                     l2737:
  5321                           
  5322                           ;ADXL345.c: 245:     msg.registerAddr = 0x2E;
  5323     0389  302E               	movlw	46
  5324     038A  0020               	movlb	0	; select bank0
  5325     038B  00A0               	movwf	setupForInactivity@msg
  5326     038C                     l2739:
  5327                           
  5328                           ;ADXL345.c: 246:     memset(msg.data, 0, sizeof(msg.data));
  5329     038C  3021               	movlw	low (setupForInactivity@msg+1)
  5330     038D  00F0               	movwf	memset@dest
  5331     038E  3000               	movlw	high (setupForInactivity@msg+1)
  5332     038F  00F1               	movwf	memset@dest+1
  5333     0390  3000               	movlw	0
  5334     0391  00F2               	movwf	memset@c
  5335     0392  00F3               	movwf	memset@c+1
  5336     0393  3019               	movlw	25
  5337     0394  00F4               	movwf	memset@n
  5338     0395  3000               	movlw	0
  5339     0396  00F5               	movwf	memset@n+1
  5340     0397  318E  26E7  3183   	fcall	_memset
  5341     039A                     l2741:
  5342                           
  5343                           ;ADXL345.c: 247:     msg.data[0] = 0x08;
  5344     039A  3008               	movlw	8
  5345     039B  0020               	movlb	0	; select bank0
  5346     039C  00A1               	movwf	setupForInactivity@msg+1
  5347     039D                     l2743:
  5348     039D  0022               	movlb	2	; select bank2
  5349     039E  120E               	bcf	14,4	;volatile
  5350     039F                     l2745:
  5351                           
  5352                           ;ADXL345.c: 249:     SPI1_BufferWrite(&msg, 2);
  5353     039F  3020               	movlw	low setupForInactivity@msg
  5354     03A0  00F0               	movwf	SPI1_BufferWrite@bufferData
  5355     03A1  3000               	movlw	high setupForInactivity@msg
  5356     03A2  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5357     03A3  3002               	movlw	2
  5358     03A4  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5359     03A5  3000               	movlw	0
  5360     03A6  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5361     03A7  318F  2773  3183   	fcall	_SPI1_BufferWrite
  5362     03AA                     l2747:
  5363     03AA  0022               	movlb	2	; select bank2
  5364     03AB  160E               	bsf	14,4	;volatile
  5365     03AC                     l2749:
  5366     03AC  120E               	bcf	14,4	;volatile
  5367     03AD                     l2751:
  5368                           
  5369                           ;ADXL345.c: 254:     SPI1_ByteExchange(0x30);
  5370     03AD  3030               	movlw	48
  5371     03AE  00F0               	movwf	SPI1_ByteExchange@byteData
  5372     03AF  318E  26AF  3183   	fcall	_SPI1_ByteExchange
  5373     03B2                     l2753:
  5374     03B2  0022               	movlb	2	; select bank2
  5375     03B3  160E               	bsf	14,4	;volatile
  5376     03B4                     l2755:
  5377                           
  5378                           ;ADXL345.c: 257:     SPI1_Close();
  5379     03B4  318E  267F  3183   	fcall	_SPI1_Close
  5380     03B7                     l591:
  5381     03B7  0008               	return
  5382     03B8                     __end_of_setupForInactivity:
  5383                           
  5384                           	psect	text16
  5385     028A                     __ptext16:	
  5386 ;; *************** function _setupForImpact *****************
  5387 ;; Defined at:
  5388 ;;		line 164 in file "ADXL345.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;  msg            26    0[BANK0 ] struct Message
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  1    wreg      void 
  5395 ;; Registers used:
  5396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;Total ram usage:       26 bytes
  5407 ;; Hardware stack levels used: 1
  5408 ;; Hardware stack levels required when called: 2
  5409 ;; This function calls:
  5410 ;;		_SPI1_BufferWrite
  5411 ;;		_SPI1_ByteExchange
  5412 ;;		_SPI1_Close
  5413 ;;		_SPI1_Open
  5414 ;;		_memcpy
  5415 ;;		_memset
  5416 ;; This function is called by:
  5417 ;;		_MotionEventHandler
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421     028A                     _setupForImpact:	
  5422                           ;psect for function _setupForImpact
  5423                           
  5424     028A                     l2649:	
  5425                           ;incstack = 0
  5426                           ; Regs used in _setupForImpact: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5427                           
  5428                           
  5429                           ;ADXL345.c: 165:     while (!SPI1_Open(ADXL345)) {
  5430     028A  2A8E               	goto	l2653
  5431     028B                     l2651:
  5432                           
  5433                           ;ADXL345.c: 166:         SPI1_Close();
  5434     028B  318E  267F  3182   	fcall	_SPI1_Close
  5435     028E                     l2653:
  5436                           
  5437                           ;ADXL345.c: 165:     while (!SPI1_Open(ADXL345)) {
  5438     028E  01F6               	clrf	SPI1_Open@spiConfigIndex
  5439     028F  3180  20F9  3182   	fcall	_SPI1_Open
  5440     0292  3A00               	xorlw	0
  5441     0293  1903               	skipnz
  5442     0294  2A96               	goto	u901
  5443     0295  2A97               	goto	u900
  5444     0296                     u901:
  5445     0296  2A8B               	goto	l2651
  5446     0297                     u900:
  5447     0297                     l545:	
  5448                           ;ADXL345.c: 170:     do { LATCbits.LATC4 = 0; } while(0);
  5449                           
  5450     0297  0022               	movlb	2	; select bank2
  5451     0298  120E               	bcf	14,4	;volatile
  5452     0299                     l2655:
  5453                           
  5454                           ;ADXL345.c: 171:     SPI1_ByteExchange(0x30);
  5455     0299  3030               	movlw	48
  5456     029A  00F0               	movwf	SPI1_ByteExchange@byteData
  5457     029B  318E  26AF  3182   	fcall	_SPI1_ByteExchange
  5458     029E                     l2657:
  5459     029E  0022               	movlb	2	; select bank2
  5460     029F  160E               	bsf	14,4	;volatile
  5461     02A0                     l2659:
  5462                           
  5463                           ;ADXL345.c: 180:     struct Message msg;;ADXL345.c: 181:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5464     02A0  3064               	movlw	100
  5465     02A1  0020               	movlb	0	; select bank0
  5466     02A2  00A0               	movwf	setupForImpact@msg
  5467     02A3                     l2661:
  5468                           
  5469                           ;ADXL345.c: 182:     memset(msg.data, 0, sizeof(msg.data));
  5470     02A3  3021               	movlw	low (setupForImpact@msg+1)
  5471     02A4  00F0               	movwf	memset@dest
  5472     02A5  3000               	movlw	high (setupForImpact@msg+1)
  5473     02A6  00F1               	movwf	memset@dest+1
  5474     02A7  3000               	movlw	0
  5475     02A8  00F2               	movwf	memset@c
  5476     02A9  00F3               	movwf	memset@c+1
  5477     02AA  3019               	movlw	25
  5478     02AB  00F4               	movwf	memset@n
  5479     02AC  3000               	movlw	0
  5480     02AD  00F5               	movwf	memset@n+1
  5481     02AE  318E  26E7  3182   	fcall	_memset
  5482     02B1                     l2663:
  5483                           
  5484                           ;ADXL345.c: 183:     memcpy(msg.data, impact_init, sizeof(impact_init));
  5485     02B1  3021               	movlw	low (setupForImpact@msg+1)
  5486     02B2  00F0               	movwf	memcpy@d1
  5487     02B3  3000               	movlw	high (setupForImpact@msg+1)
  5488     02B4  00F1               	movwf	memcpy@d1+1
  5489     02B5  3049               	movlw	low (_impact_init| (0+32768))
  5490     02B6  00F2               	movwf	memcpy@s1
  5491     02B7  3090               	movlw	high (_impact_init| (0+32768))
  5492     02B8  00F3               	movwf	memcpy@s1+1
  5493     02B9  3004               	movlw	4
  5494     02BA  00F4               	movwf	memcpy@n
  5495     02BB  3000               	movlw	0
  5496     02BC  00F5               	movwf	memcpy@n+1
  5497     02BD  318F  27B5  3182   	fcall	_memcpy
  5498     02C0                     l2665:
  5499     02C0  0022               	movlb	2	; select bank2
  5500     02C1  120E               	bcf	14,4	;volatile
  5501     02C2                     l2667:
  5502                           
  5503                           ;ADXL345.c: 185:     SPI1_BufferWrite(&msg, sizeof(impact_init) + 1);
  5504     02C2  3020               	movlw	low setupForImpact@msg
  5505     02C3  00F0               	movwf	SPI1_BufferWrite@bufferData
  5506     02C4  3000               	movlw	high setupForImpact@msg
  5507     02C5  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5508     02C6  3005               	movlw	5
  5509     02C7  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5510     02C8  3000               	movlw	0
  5511     02C9  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5512     02CA  318F  2773  3182   	fcall	_SPI1_BufferWrite
  5513     02CD                     l2669:
  5514     02CD  0022               	movlb	2	; select bank2
  5515     02CE  160E               	bsf	14,4	;volatile
  5516     02CF                     l2671:
  5517                           
  5518                           ;ADXL345.c: 189:     msg.registerAddr = 0x2C;
  5519     02CF  302C               	movlw	44
  5520     02D0  0020               	movlb	0	; select bank0
  5521     02D1  00A0               	movwf	setupForImpact@msg
  5522     02D2                     l2673:
  5523                           
  5524                           ;ADXL345.c: 190:     memset(msg.data, 0, sizeof(msg.data));
  5525     02D2  3021               	movlw	low (setupForImpact@msg+1)
  5526     02D3  00F0               	movwf	memset@dest
  5527     02D4  3000               	movlw	high (setupForImpact@msg+1)
  5528     02D5  00F1               	movwf	memset@dest+1
  5529     02D6  3000               	movlw	0
  5530     02D7  00F2               	movwf	memset@c
  5531     02D8  00F3               	movwf	memset@c+1
  5532     02D9  3019               	movlw	25
  5533     02DA  00F4               	movwf	memset@n
  5534     02DB  3000               	movlw	0
  5535     02DC  00F5               	movwf	memset@n+1
  5536     02DD  318E  26E7  3182   	fcall	_memset
  5537     02E0                     l2675:
  5538                           
  5539                           ;ADXL345.c: 191:     msg.data[0] = 0x1A;
  5540     02E0  301A               	movlw	26
  5541     02E1  0020               	movlb	0	; select bank0
  5542     02E2  00A1               	movwf	setupForImpact@msg+1
  5543     02E3                     l2677:
  5544     02E3  0022               	movlb	2	; select bank2
  5545     02E4  120E               	bcf	14,4	;volatile
  5546     02E5                     l2679:
  5547                           
  5548                           ;ADXL345.c: 193:     SPI1_BufferWrite(&msg, 2);
  5549     02E5  3020               	movlw	low setupForImpact@msg
  5550     02E6  00F0               	movwf	SPI1_BufferWrite@bufferData
  5551     02E7  3000               	movlw	high setupForImpact@msg
  5552     02E8  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5553     02E9  3002               	movlw	2
  5554     02EA  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5555     02EB  3000               	movlw	0
  5556     02EC  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5557     02ED  318F  2773  3182   	fcall	_SPI1_BufferWrite
  5558     02F0                     l2681:
  5559     02F0  0022               	movlb	2	; select bank2
  5560     02F1  160E               	bsf	14,4	;volatile
  5561     02F2                     l2683:
  5562                           
  5563                           ;ADXL345.c: 197:     msg.registerAddr = 0x2E;
  5564     02F2  302E               	movlw	46
  5565     02F3  0020               	movlb	0	; select bank0
  5566     02F4  00A0               	movwf	setupForImpact@msg
  5567     02F5                     l2685:
  5568                           
  5569                           ;ADXL345.c: 198:     memset(msg.data, 0, sizeof(msg.data));
  5570     02F5  3021               	movlw	low (setupForImpact@msg+1)
  5571     02F6  00F0               	movwf	memset@dest
  5572     02F7  3000               	movlw	high (setupForImpact@msg+1)
  5573     02F8  00F1               	movwf	memset@dest+1
  5574     02F9  3000               	movlw	0
  5575     02FA  00F2               	movwf	memset@c
  5576     02FB  00F3               	movwf	memset@c+1
  5577     02FC  3019               	movlw	25
  5578     02FD  00F4               	movwf	memset@n
  5579     02FE  3000               	movlw	0
  5580     02FF  00F5               	movwf	memset@n+1
  5581     0300  318E  26E7  3182   	fcall	_memset
  5582     0303                     l2687:
  5583                           
  5584                           ;ADXL345.c: 199:     msg.data[0] = 0x04;
  5585     0303  3004               	movlw	4
  5586     0304  0020               	movlb	0	; select bank0
  5587     0305  00A1               	movwf	setupForImpact@msg+1
  5588     0306                     l2689:
  5589     0306  0022               	movlb	2	; select bank2
  5590     0307  120E               	bcf	14,4	;volatile
  5591     0308                     l2691:
  5592                           
  5593                           ;ADXL345.c: 201:     SPI1_BufferWrite(&msg, 2);
  5594     0308  3020               	movlw	low setupForImpact@msg
  5595     0309  00F0               	movwf	SPI1_BufferWrite@bufferData
  5596     030A  3000               	movlw	high setupForImpact@msg
  5597     030B  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5598     030C  3002               	movlw	2
  5599     030D  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5600     030E  3000               	movlw	0
  5601     030F  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5602     0310  318F  2773  3182   	fcall	_SPI1_BufferWrite
  5603     0313                     l2693:
  5604     0313  0022               	movlb	2	; select bank2
  5605     0314  160E               	bsf	14,4	;volatile
  5606     0315                     l2695:
  5607     0315  120E               	bcf	14,4	;volatile
  5608     0316                     l2697:
  5609                           
  5610                           ;ADXL345.c: 206:     SPI1_ByteExchange(0x30);
  5611     0316  3030               	movlw	48
  5612     0317  00F0               	movwf	SPI1_ByteExchange@byteData
  5613     0318  318E  26AF  3182   	fcall	_SPI1_ByteExchange
  5614     031B                     l2699:
  5615     031B  0022               	movlb	2	; select bank2
  5616     031C  160E               	bsf	14,4	;volatile
  5617     031D                     l2701:
  5618                           
  5619                           ;ADXL345.c: 209:     SPI1_Close();
  5620     031D  318E  267F  3182   	fcall	_SPI1_Close
  5621     0320                     l565:
  5622     0320  0008               	return
  5623     0321                     __end_of_setupForImpact:
  5624                           
  5625                           	psect	text17
  5626     01F3                     __ptext17:	
  5627 ;; *************** function _setupForFreefall *****************
  5628 ;; Defined at:
  5629 ;;		line 116 in file "ADXL345.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  msg            26    0[BANK0 ] struct Message
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;Total ram usage:       26 bytes
  5648 ;; Hardware stack levels used: 1
  5649 ;; Hardware stack levels required when called: 2
  5650 ;; This function calls:
  5651 ;;		_SPI1_BufferWrite
  5652 ;;		_SPI1_ByteExchange
  5653 ;;		_SPI1_Close
  5654 ;;		_SPI1_Open
  5655 ;;		_memcpy
  5656 ;;		_memset
  5657 ;; This function is called by:
  5658 ;;		_MotionEventHandler
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662     01F3                     _setupForFreefall:	
  5663                           ;psect for function _setupForFreefall
  5664                           
  5665     01F3                     l2595:	
  5666                           ;incstack = 0
  5667                           ; Regs used in _setupForFreefall: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5668                           
  5669                           
  5670                           ;ADXL345.c: 117:     while (!SPI1_Open(ADXL345)) {
  5671     01F3  29F7               	goto	l2599
  5672     01F4                     l2597:
  5673                           
  5674                           ;ADXL345.c: 118:         SPI1_Close();
  5675     01F4  318E  267F  3181   	fcall	_SPI1_Close
  5676     01F7                     l2599:
  5677                           
  5678                           ;ADXL345.c: 117:     while (!SPI1_Open(ADXL345)) {
  5679     01F7  01F6               	clrf	SPI1_Open@spiConfigIndex
  5680     01F8  3180  20F9  3181   	fcall	_SPI1_Open
  5681     01FB  3A00               	xorlw	0
  5682     01FC  1903               	skipnz
  5683     01FD  29FF               	goto	u891
  5684     01FE  2A00               	goto	u890
  5685     01FF                     u891:
  5686     01FF  29F4               	goto	l2597
  5687     0200                     u890:
  5688     0200                     l519:	
  5689                           ;ADXL345.c: 122:     do { LATCbits.LATC4 = 0; } while(0);
  5690                           
  5691     0200  0022               	movlb	2	; select bank2
  5692     0201  120E               	bcf	14,4	;volatile
  5693     0202                     l2601:
  5694                           
  5695                           ;ADXL345.c: 123:     SPI1_ByteExchange(0x30);
  5696     0202  3030               	movlw	48
  5697     0203  00F0               	movwf	SPI1_ByteExchange@byteData
  5698     0204  318E  26AF  3181   	fcall	_SPI1_ByteExchange
  5699     0207                     l2603:
  5700     0207  0022               	movlb	2	; select bank2
  5701     0208  160E               	bsf	14,4	;volatile
  5702     0209                     l2605:
  5703                           
  5704                           ;ADXL345.c: 132:     struct Message msg;;ADXL345.c: 133:     msg.registerAddr = 0x24 | 0
      +                          x40;
  5705     0209  3064               	movlw	100
  5706     020A  0020               	movlb	0	; select bank0
  5707     020B  00A0               	movwf	setupForFreefall@msg
  5708     020C                     l2607:
  5709                           
  5710                           ;ADXL345.c: 134:     memset(msg.data, 0, sizeof(msg.data));
  5711     020C  3021               	movlw	low (setupForFreefall@msg+1)
  5712     020D  00F0               	movwf	memset@dest
  5713     020E  3000               	movlw	high (setupForFreefall@msg+1)
  5714     020F  00F1               	movwf	memset@dest+1
  5715     0210  3000               	movlw	0
  5716     0211  00F2               	movwf	memset@c
  5717     0212  00F3               	movwf	memset@c+1
  5718     0213  3019               	movlw	25
  5719     0214  00F4               	movwf	memset@n
  5720     0215  3000               	movlw	0
  5721     0216  00F5               	movwf	memset@n+1
  5722     0217  318E  26E7  3181   	fcall	_memset
  5723     021A                     l2609:
  5724                           
  5725                           ;ADXL345.c: 135:     memcpy(msg.data, fall_init, sizeof(fall_init));
  5726     021A  3021               	movlw	low (setupForFreefall@msg+1)
  5727     021B  00F0               	movwf	memcpy@d1
  5728     021C  3000               	movlw	high (setupForFreefall@msg+1)
  5729     021D  00F1               	movwf	memcpy@d1+1
  5730     021E  304D               	movlw	low (_fall_init| (0+32768))
  5731     021F  00F2               	movwf	memcpy@s1
  5732     0220  3090               	movlw	high (_fall_init| (0+32768))
  5733     0221  00F3               	movwf	memcpy@s1+1
  5734     0222  3004               	movlw	4
  5735     0223  00F4               	movwf	memcpy@n
  5736     0224  3000               	movlw	0
  5737     0225  00F5               	movwf	memcpy@n+1
  5738     0226  318F  27B5  3181   	fcall	_memcpy
  5739     0229                     l2611:
  5740     0229  0022               	movlb	2	; select bank2
  5741     022A  120E               	bcf	14,4	;volatile
  5742     022B                     l2613:
  5743                           
  5744                           ;ADXL345.c: 137:     SPI1_BufferWrite(&msg, sizeof(fall_init) + 1);
  5745     022B  3020               	movlw	low setupForFreefall@msg
  5746     022C  00F0               	movwf	SPI1_BufferWrite@bufferData
  5747     022D  3000               	movlw	high setupForFreefall@msg
  5748     022E  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5749     022F  3005               	movlw	5
  5750     0230  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5751     0231  3000               	movlw	0
  5752     0232  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5753     0233  318F  2773  3181   	fcall	_SPI1_BufferWrite
  5754     0236                     l2615:
  5755     0236  0022               	movlb	2	; select bank2
  5756     0237  160E               	bsf	14,4	;volatile
  5757     0238                     l2617:
  5758                           
  5759                           ;ADXL345.c: 141:     msg.registerAddr = 0x2C;
  5760     0238  302C               	movlw	44
  5761     0239  0020               	movlb	0	; select bank0
  5762     023A  00A0               	movwf	setupForFreefall@msg
  5763     023B                     l2619:
  5764                           
  5765                           ;ADXL345.c: 142:     memset(msg.data, 0, sizeof(msg.data));
  5766     023B  3021               	movlw	low (setupForFreefall@msg+1)
  5767     023C  00F0               	movwf	memset@dest
  5768     023D  3000               	movlw	high (setupForFreefall@msg+1)
  5769     023E  00F1               	movwf	memset@dest+1
  5770     023F  3000               	movlw	0
  5771     0240  00F2               	movwf	memset@c
  5772     0241  00F3               	movwf	memset@c+1
  5773     0242  3019               	movlw	25
  5774     0243  00F4               	movwf	memset@n
  5775     0244  3000               	movlw	0
  5776     0245  00F5               	movwf	memset@n+1
  5777     0246  318E  26E7  3181   	fcall	_memset
  5778     0249                     l2621:
  5779                           
  5780                           ;ADXL345.c: 143:     msg.data[0] = 0x17;
  5781     0249  3017               	movlw	23
  5782     024A  0020               	movlb	0	; select bank0
  5783     024B  00A1               	movwf	setupForFreefall@msg+1
  5784     024C                     l2623:
  5785     024C  0022               	movlb	2	; select bank2
  5786     024D  120E               	bcf	14,4	;volatile
  5787     024E                     l2625:
  5788                           
  5789                           ;ADXL345.c: 145:     SPI1_BufferWrite(&msg, 2);
  5790     024E  3020               	movlw	low setupForFreefall@msg
  5791     024F  00F0               	movwf	SPI1_BufferWrite@bufferData
  5792     0250  3000               	movlw	high setupForFreefall@msg
  5793     0251  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5794     0252  3002               	movlw	2
  5795     0253  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5796     0254  3000               	movlw	0
  5797     0255  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5798     0256  318F  2773  3181   	fcall	_SPI1_BufferWrite
  5799     0259                     l2627:
  5800     0259  0022               	movlb	2	; select bank2
  5801     025A  160E               	bsf	14,4	;volatile
  5802     025B                     l2629:
  5803                           
  5804                           ;ADXL345.c: 149:     msg.registerAddr = 0x2E;
  5805     025B  302E               	movlw	46
  5806     025C  0020               	movlb	0	; select bank0
  5807     025D  00A0               	movwf	setupForFreefall@msg
  5808     025E                     l2631:
  5809                           
  5810                           ;ADXL345.c: 150:     memset(msg.data, 0, sizeof(msg.data));
  5811     025E  3021               	movlw	low (setupForFreefall@msg+1)
  5812     025F  00F0               	movwf	memset@dest
  5813     0260  3000               	movlw	high (setupForFreefall@msg+1)
  5814     0261  00F1               	movwf	memset@dest+1
  5815     0262  3000               	movlw	0
  5816     0263  00F2               	movwf	memset@c
  5817     0264  00F3               	movwf	memset@c+1
  5818     0265  3019               	movlw	25
  5819     0266  00F4               	movwf	memset@n
  5820     0267  3000               	movlw	0
  5821     0268  00F5               	movwf	memset@n+1
  5822     0269  318E  26E7  3181   	fcall	_memset
  5823     026C                     l2633:
  5824                           
  5825                           ;ADXL345.c: 151:     msg.data[0] = 0x10;
  5826     026C  3010               	movlw	16
  5827     026D  0020               	movlb	0	; select bank0
  5828     026E  00A1               	movwf	setupForFreefall@msg+1
  5829     026F                     l2635:
  5830     026F  0022               	movlb	2	; select bank2
  5831     0270  120E               	bcf	14,4	;volatile
  5832     0271                     l2637:
  5833                           
  5834                           ;ADXL345.c: 153:     SPI1_BufferWrite(&msg, 2);
  5835     0271  3020               	movlw	low setupForFreefall@msg
  5836     0272  00F0               	movwf	SPI1_BufferWrite@bufferData
  5837     0273  3000               	movlw	high setupForFreefall@msg
  5838     0274  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5839     0275  3002               	movlw	2
  5840     0276  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5841     0277  3000               	movlw	0
  5842     0278  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5843     0279  318F  2773  3181   	fcall	_SPI1_BufferWrite
  5844     027C                     l2639:
  5845     027C  0022               	movlb	2	; select bank2
  5846     027D  160E               	bsf	14,4	;volatile
  5847     027E                     l2641:
  5848     027E  120E               	bcf	14,4	;volatile
  5849     027F                     l2643:
  5850                           
  5851                           ;ADXL345.c: 158:     SPI1_ByteExchange(0x30);
  5852     027F  3030               	movlw	48
  5853     0280  00F0               	movwf	SPI1_ByteExchange@byteData
  5854     0281  318E  26AF  3181   	fcall	_SPI1_ByteExchange
  5855     0284                     l2645:
  5856     0284  0022               	movlb	2	; select bank2
  5857     0285  160E               	bsf	14,4	;volatile
  5858     0286                     l2647:
  5859                           
  5860                           ;ADXL345.c: 161:     SPI1_Close();
  5861     0286  318E  267F  3181   	fcall	_SPI1_Close
  5862     0289                     l539:
  5863     0289  0008               	return
  5864     028A                     __end_of_setupForFreefall:
  5865                           
  5866                           	psect	text18
  5867     03B8                     __ptext18:	
  5868 ;; *************** function _orientation_Up *****************
  5869 ;; Defined at:
  5870 ;;		line 260 in file "ADXL345.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  msg            26    8[BANK0 ] struct Message
  5875 ;;  acc_data        6    0[BANK0 ] char [6]
  5876 ;;  g_deltaZ        2   38[BANK0 ] short 
  5877 ;;  g_deltaY        2   36[BANK0 ] short 
  5878 ;;  g_deltaX        2   34[BANK0 ] short 
  5879 ;;  g_magnitude     2    6[BANK0 ] int 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      _Bool 
  5882 ;; Registers used:
  5883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         2      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:       42 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 2
  5896 ;; This function calls:
  5897 ;;		_SPI1_BufferRead
  5898 ;;		_SPI1_BufferWrite
  5899 ;;		_SPI1_ByteWrite
  5900 ;;		_SPI1_Close
  5901 ;;		_SPI1_Open
  5902 ;;		___wmul
  5903 ;; This function is called by:
  5904 ;;		_MotionEventHandler
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908     03B8                     _orientation_Up:	
  5909                           ;psect for function _orientation_Up
  5910                           
  5911     03B8                     l2757:	
  5912                           ;incstack = 0
  5913                           ; Regs used in _orientation_Up: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5914                           
  5915                           
  5916                           ;ADXL345.c: 261:     while (!SPI1_Open(ADXL345)) {
  5917     03B8  2BBC               	goto	l2761
  5918     03B9                     l2759:
  5919                           
  5920                           ;ADXL345.c: 262:         SPI1_Close();
  5921     03B9  318E  267F  3183   	fcall	_SPI1_Close
  5922     03BC                     l2761:
  5923                           
  5924                           ;ADXL345.c: 261:     while (!SPI1_Open(ADXL345)) {
  5925     03BC  01F6               	clrf	SPI1_Open@spiConfigIndex
  5926     03BD  3180  20F9  3183   	fcall	_SPI1_Open
  5927     03C0  3A00               	xorlw	0
  5928     03C1  1903               	skipnz
  5929     03C2  2BC4               	goto	u921
  5930     03C3  2BC5               	goto	u920
  5931     03C4                     u921:
  5932     03C4  2BB9               	goto	l2759
  5933     03C5                     u920:
  5934     03C5                     l2763:
  5935                           
  5936                           ;ADXL345.c: 264:     int8_t acc_data[6] = {0};
  5937     03C5  3020               	movlw	low orientation_Up@acc_data
  5938     03C6  0086               	movwf	6
  5939     03C7  3000               	movlw	high orientation_Up@acc_data
  5940     03C8  0087               	movwf	7
  5941     03C9  3006               	movlw	6
  5942     03CA  00FA               	movwf	??_orientation_Up
  5943     03CB  3000               	movlw	0
  5944     03CC                     u930:
  5945     03CC  001E               	movwi fsr1++
  5946     03CD  0BFA               	decfsz	??_orientation_Up,f
  5947     03CE  2BCC               	goto	u930
  5948     03CF                     l2765:
  5949                           
  5950                           ;ADXL345.c: 265:     int16_t g_deltaX, g_deltaY, g_deltaZ;;ADXL345.c: 267:     struct Me
      +                          ssage msg;;ADXL345.c: 268:     msg.registerAddr = 0x31;
  5951     03CF  3031               	movlw	49
  5952     03D0  0020               	movlb	0	; select bank0
  5953     03D1  00A8               	movwf	orientation_Up@msg
  5954     03D2                     l2767:
  5955                           
  5956                           ;ADXL345.c: 269:     msg.data[0] = 0x0C;
  5957     03D2  300C               	movlw	12
  5958     03D3  00A9               	movwf	orientation_Up@msg+1
  5959     03D4                     l2769:
  5960     03D4  0022               	movlb	2	; select bank2
  5961     03D5  120E               	bcf	14,4	;volatile
  5962     03D6                     l2771:
  5963                           
  5964                           ;ADXL345.c: 271:     SPI1_BufferWrite(&msg, 2);
  5965     03D6  3028               	movlw	low orientation_Up@msg
  5966     03D7  00F0               	movwf	SPI1_BufferWrite@bufferData
  5967     03D8  3000               	movlw	high orientation_Up@msg
  5968     03D9  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  5969     03DA  3002               	movlw	2
  5970     03DB  00F2               	movwf	SPI1_BufferWrite@bufferSize
  5971     03DC  3000               	movlw	0
  5972     03DD  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  5973     03DE  318F  2773  3183   	fcall	_SPI1_BufferWrite
  5974     03E1                     l2773:
  5975     03E1  0022               	movlb	2	; select bank2
  5976     03E2  160E               	bsf	14,4	;volatile
  5977     03E3                     l2775:
  5978                           
  5979                           ;ADXL345.c: 274:     _delay((unsigned long)((10)*(4000000/4000.0)));
  5980     03E3  300D               	movlw	13
  5981     03E4  00FA               	movwf	??_orientation_Up
  5982     03E5  30FC               	movlw	252
  5983     03E6                     u1507:
  5984     03E6  0B89               	decfsz	9,f
  5985     03E7  2BE6               	goto	u1507
  5986     03E8  0BFA               	decfsz	??_orientation_Up,f
  5987     03E9  2BE6               	goto	u1507
  5988     03EA                     l2777:
  5989     03EA  0022               	movlb	2	; select bank2
  5990     03EB  120E               	bcf	14,4	;volatile
  5991     03EC                     l2779:
  5992                           
  5993                           ;ADXL345.c: 278:     SPI1_ByteWrite(0x32);
  5994     03EC  3032               	movlw	50
  5995     03ED  00F0               	movwf	SPI1_ByteWrite@byteData
  5996     03EE  318E  2688  3183   	fcall	_SPI1_ByteWrite
  5997     03F1                     l2781:
  5998                           
  5999                           ;ADXL345.c: 279:     SPI1_BufferRead((uint8_t *)acc_data, sizeof(acc_data));
  6000     03F1  3020               	movlw	(low (orientation_Up@acc_data| 0))& (0+255)
  6001     03F2  00F0               	movwf	SPI1_BufferRead@bufferData
  6002     03F3  3006               	movlw	6
  6003     03F4  00F1               	movwf	SPI1_BufferRead@bufferSize
  6004     03F5  3000               	movlw	0
  6005     03F6  00F2               	movwf	SPI1_BufferRead@bufferSize+1
  6006     03F7  318F  2793  3183   	fcall	_SPI1_BufferRead
  6007     03FA                     l2783:
  6008     03FA  0022               	movlb	2	; select bank2
  6009     03FB  160E               	bsf	14,4	;volatile
  6010     03FC                     l2785:
  6011                           
  6012                           ;ADXL345.c: 281:     SPI1_Close();
  6013     03FC  318E  267F  3183   	fcall	_SPI1_Close
  6014     03FF                     l2787:
  6015                           
  6016                           ;ADXL345.c: 284:     g_deltaX = (int8_t)acc_data[1] - 0x40;
  6017     03FF  0020               	movlb	0	; select bank0
  6018     0400  0821               	movf	orientation_Up@acc_data+1,w
  6019     0401  00FA               	movwf	??_orientation_Up
  6020     0402  01FB               	clrf	??_orientation_Up+1
  6021     0403  1BFA               	btfsc	??_orientation_Up,7
  6022     0404  03FB               	decf	??_orientation_Up+1,f
  6023     0405  087A               	movf	??_orientation_Up,w
  6024     0406  3EC0               	addlw	192
  6025     0407  00C2               	movwf	orientation_Up@g_deltaX
  6026     0408  30FF               	movlw	255
  6027     0409  3D7B               	addwfc	??_orientation_Up+1,w
  6028     040A  00C3               	movwf	orientation_Up@g_deltaX+1
  6029     040B                     l2789:
  6030                           
  6031                           ;ADXL345.c: 285:     g_deltaY = (int8_t)acc_data[3];
  6032     040B  0823               	movf	orientation_Up@acc_data+3,w
  6033     040C  00C4               	movwf	orientation_Up@g_deltaY
  6034     040D  01C5               	clrf	orientation_Up@g_deltaY+1
  6035     040E  1BC4               	btfsc	orientation_Up@g_deltaY,7
  6036     040F  03C5               	decf	orientation_Up@g_deltaY+1,f
  6037     0410                     l2791:
  6038                           
  6039                           ;ADXL345.c: 286:     g_deltaZ = (int8_t)acc_data[5];
  6040     0410  0825               	movf	orientation_Up@acc_data+5,w
  6041     0411  00C6               	movwf	orientation_Up@g_deltaZ
  6042     0412  01C7               	clrf	orientation_Up@g_deltaZ+1
  6043     0413  1BC6               	btfsc	orientation_Up@g_deltaZ,7
  6044     0414  03C7               	decf	orientation_Up@g_deltaZ+1,f
  6045     0415                     l2793:
  6046                           
  6047                           ;ADXL345.c: 289:     g_deltaX *= g_deltaX;
  6048     0415  0843               	movf	orientation_Up@g_deltaX+1,w
  6049     0416  00F1               	movwf	___wmul@multiplier+1
  6050     0417  0842               	movf	orientation_Up@g_deltaX,w
  6051     0418  00F0               	movwf	___wmul@multiplier
  6052     0419  0843               	movf	orientation_Up@g_deltaX+1,w
  6053     041A  00F3               	movwf	___wmul@multiplicand+1
  6054     041B  0842               	movf	orientation_Up@g_deltaX,w
  6055     041C  00F2               	movwf	___wmul@multiplicand
  6056     041D  318F  2754  3183   	fcall	___wmul
  6057     0420  0871               	movf	?___wmul+1,w
  6058     0421  0020               	movlb	0	; select bank0
  6059     0422  00C3               	movwf	orientation_Up@g_deltaX+1
  6060     0423  0870               	movf	?___wmul,w
  6061     0424  00C2               	movwf	orientation_Up@g_deltaX
  6062     0425                     l2795:
  6063                           
  6064                           ;ADXL345.c: 290:     g_deltaY *= g_deltaY;
  6065     0425  0845               	movf	orientation_Up@g_deltaY+1,w
  6066     0426  00F1               	movwf	___wmul@multiplier+1
  6067     0427  0844               	movf	orientation_Up@g_deltaY,w
  6068     0428  00F0               	movwf	___wmul@multiplier
  6069     0429  0845               	movf	orientation_Up@g_deltaY+1,w
  6070     042A  00F3               	movwf	___wmul@multiplicand+1
  6071     042B  0844               	movf	orientation_Up@g_deltaY,w
  6072     042C  00F2               	movwf	___wmul@multiplicand
  6073     042D  318F  2754  3183   	fcall	___wmul
  6074     0430  0871               	movf	?___wmul+1,w
  6075     0431  0020               	movlb	0	; select bank0
  6076     0432  00C5               	movwf	orientation_Up@g_deltaY+1
  6077     0433  0870               	movf	?___wmul,w
  6078     0434  00C4               	movwf	orientation_Up@g_deltaY
  6079     0435                     l2797:
  6080                           
  6081                           ;ADXL345.c: 291:     g_deltaZ *= g_deltaZ;
  6082     0435  0847               	movf	orientation_Up@g_deltaZ+1,w
  6083     0436  00F1               	movwf	___wmul@multiplier+1
  6084     0437  0846               	movf	orientation_Up@g_deltaZ,w
  6085     0438  00F0               	movwf	___wmul@multiplier
  6086     0439  0847               	movf	orientation_Up@g_deltaZ+1,w
  6087     043A  00F3               	movwf	___wmul@multiplicand+1
  6088     043B  0846               	movf	orientation_Up@g_deltaZ,w
  6089     043C  00F2               	movwf	___wmul@multiplicand
  6090     043D  318F  2754  3183   	fcall	___wmul
  6091     0440  0871               	movf	?___wmul+1,w
  6092     0441  0020               	movlb	0	; select bank0
  6093     0442  00C7               	movwf	orientation_Up@g_deltaZ+1
  6094     0443  0870               	movf	?___wmul,w
  6095     0444  00C6               	movwf	orientation_Up@g_deltaZ
  6096     0445                     l2799:
  6097                           
  6098                           ;ADXL345.c: 292:     int g_magnitude = g_deltaX + g_deltaY + g_deltaZ;
  6099     0445  0844               	movf	orientation_Up@g_deltaY,w
  6100     0446  0742               	addwf	orientation_Up@g_deltaX,w
  6101     0447  00FA               	movwf	??_orientation_Up
  6102     0448  0845               	movf	orientation_Up@g_deltaY+1,w
  6103     0449  3D43               	addwfc	orientation_Up@g_deltaX+1,w
  6104     044A  00FB               	movwf	??_orientation_Up+1
  6105     044B  0846               	movf	orientation_Up@g_deltaZ,w
  6106     044C  077A               	addwf	??_orientation_Up,w
  6107     044D  00A6               	movwf	orientation_Up@g_magnitude
  6108     044E  0847               	movf	orientation_Up@g_deltaZ+1,w
  6109     044F  3D7B               	addwfc	??_orientation_Up+1,w
  6110     0450  00A7               	movwf	orientation_Up@g_magnitude+1
  6111     0451                     l2801:
  6112                           
  6113                           ;ADXL345.c: 293:     if (g_magnitude < acceleration_squared_threshold) {
  6114     0451  3004               	movlw	4
  6115     0452  0227               	subwf	orientation_Up@g_magnitude+1,w
  6116     0453  30B0               	movlw	176
  6117     0454  1903               	skipnz
  6118     0455  0226               	subwf	orientation_Up@g_magnitude,w
  6119     0456  1803               	skipnc
  6120     0457  2C59               	goto	u941
  6121     0458  2C5A               	goto	u940
  6122     0459                     u941:
  6123     0459  2C5C               	goto	l2809
  6124     045A                     u940:
  6125     045A                     l2803:
  6126                           
  6127                           ;ADXL345.c: 294:         return 1;
  6128     045A  3001               	movlw	1
  6129     045B  2C5D               	goto	l608
  6130     045C                     l2809:
  6131                           
  6132                           ;ADXL345.c: 296:         return 0;
  6133     045C  3000               	movlw	0
  6134     045D                     l608:
  6135     045D  0008               	return
  6136     045E                     __end_of_orientation_Up:
  6137                           
  6138                           	psect	text19
  6139     0E88                     __ptext19:	
  6140 ;; *************** function _SPI1_ByteWrite *****************
  6141 ;; Defined at:
  6142 ;;		line 172 in file "mcc_generated_files/spi/src/mssp.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  byteData        1    0[COMMON] unsigned char 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6156 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;Total ram usage:        1 bytes
  6161 ;; Hardware stack levels used: 1
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_orientation_Up
  6166 ;;		_calibrate
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170     0E88                     _SPI1_ByteWrite:	
  6171                           ;psect for function _SPI1_ByteWrite
  6172                           
  6173     0E88                     l2449:	
  6174                           ;incstack = 0
  6175                           ; Regs used in _SPI1_ByteWrite: [wreg]
  6176                           
  6177                           
  6178                           ;mcc_generated_files/spi/src/mssp.c: 172: void SPI1_ByteWrite(uint8_t byteData);mcc_gene
      +                          rated_files/spi/src/mssp.c: 173: {;mcc_generated_files/spi/src/mssp.c: 174:     SSP1BUF 
      +                          = byteData;
  6179     0E88  0870               	movf	SPI1_ByteWrite@byteData,w
  6180     0E89  0024               	movlb	4	; select bank4
  6181     0E8A  0091               	movwf	17	;volatile
  6182     0E8B                     l200:
  6183     0E8B  0008               	return
  6184     0E8C                     __end_of_SPI1_ByteWrite:
  6185                           
  6186                           	psect	text20
  6187     0F93                     __ptext20:	
  6188 ;; *************** function _SPI1_BufferRead *****************
  6189 ;; Defined at:
  6190 ;;		line 143 in file "mcc_generated_files/spi/src/mssp.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  bufferData      1    0[COMMON] PTR void 
  6193 ;;		 -> calibrate@acc_data(12), orientation_Up@acc_data(6), 
  6194 ;;  bufferSize      2    1[COMMON] unsigned int 
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;  bufferInputS    2    3[COMMON] unsigned int 
  6197 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  6198 ;;		 -> calibrate@acc_data(12), orientation_Up@acc_data(6), 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      void 
  6201 ;; Registers used:
  6202 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6208 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;Total ram usage:        6 bytes
  6213 ;; Hardware stack levels used: 1
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_orientation_Up
  6218 ;;		_calibrate
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222     0F93                     _SPI1_BufferRead:	
  6223                           ;psect for function _SPI1_BufferRead
  6224                           
  6225     0F93                     l2431:	
  6226                           ;incstack = 0
  6227                           ; Regs used in _SPI1_BufferRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  6228                           
  6229                           
  6230                           ;mcc_generated_files/spi/src/mssp.c: 143: void SPI1_BufferRead(void *bufferData, size_t 
      +                          bufferSize);mcc_generated_files/spi/src/mssp.c: 144: {;mcc_generated_files/spi/src/mssp.
      +                          c: 145:     uint8_t *bufferInput = bufferData;
  6231     0F93  0870               	movf	SPI1_BufferRead@bufferData,w
  6232     0F94  00F5               	movwf	SPI1_BufferRead@bufferInput
  6233                           
  6234                           ;mcc_generated_files/spi/src/mssp.c: 146:     size_t bufferInputSize = bufferSize;
  6235     0F95  0872               	movf	SPI1_BufferRead@bufferSize+1,w
  6236     0F96  00F4               	movwf	SPI1_BufferRead@bufferInputSize+1
  6237     0F97  0871               	movf	SPI1_BufferRead@bufferSize,w
  6238     0F98  00F3               	movwf	SPI1_BufferRead@bufferInputSize
  6239                           
  6240                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6241     0F99  2FAE               	goto	l2441
  6242     0F9A                     l2433:
  6243                           
  6244                           ;mcc_generated_files/spi/src/mssp.c: 148:     {;mcc_generated_files/spi/src/mssp.c: 149:
      +                                   SSP1BUF = 0x00;
  6245     0F9A  0024               	movlb	4	; select bank4
  6246     0F9B  0191               	clrf	17	;volatile
  6247     0F9C                     l187:	
  6248                           ;mcc_generated_files/spi/src/mssp.c: 151:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          153:         }
  6249                           
  6250                           
  6251                           ;mcc_generated_files/spi/src/mssp.c: 150:         while (!PIR1bits.SSP1IF)
  6252     0F9C  0020               	movlb	0	; select bank0
  6253     0F9D  1D91               	btfss	17,3	;volatile
  6254     0F9E  2FA0               	goto	u801
  6255     0F9F  2FA1               	goto	u800
  6256     0FA0                     u801:
  6257     0FA0  2F9C               	goto	l187
  6258     0FA1                     u800:
  6259     0FA1                     l189:
  6260                           
  6261                           ;mcc_generated_files/spi/src/mssp.c: 154:         PIR1bits.SSP1IF = 0;
  6262     0FA1  1191               	bcf	17,3	;volatile
  6263     0FA2                     l2435:
  6264                           
  6265                           ;mcc_generated_files/spi/src/mssp.c: 155:         *bufferInput = SSP1BUF;
  6266     0FA2  0875               	movf	SPI1_BufferRead@bufferInput,w
  6267     0FA3  0086               	movwf	6
  6268     0FA4  0187               	clrf	7
  6269     0FA5  0024               	movlb	4	; select bank4
  6270     0FA6  0811               	movf	17,w	;volatile
  6271     0FA7  0081               	movwf	1
  6272     0FA8                     l2437:
  6273                           
  6274                           ;mcc_generated_files/spi/src/mssp.c: 156:         bufferInput++;
  6275     0FA8  3001               	movlw	1
  6276     0FA9  07F5               	addwf	SPI1_BufferRead@bufferInput,f
  6277     0FAA                     l2439:
  6278                           
  6279                           ;mcc_generated_files/spi/src/mssp.c: 157:         bufferInputSize--;
  6280     0FAA  3001               	movlw	1
  6281     0FAB  02F3               	subwf	SPI1_BufferRead@bufferInputSize,f
  6282     0FAC  3000               	movlw	0
  6283     0FAD  3BF4               	subwfb	SPI1_BufferRead@bufferInputSize+1,f
  6284     0FAE                     l2441:
  6285                           
  6286                           ;mcc_generated_files/spi/src/mssp.c: 147:     while (0U != bufferInputSize)
  6287     0FAE  0873               	movf	SPI1_BufferRead@bufferInputSize,w
  6288     0FAF  0474               	iorwf	SPI1_BufferRead@bufferInputSize+1,w
  6289     0FB0  1D03               	btfss	3,2
  6290     0FB1  2FB3               	goto	u811
  6291     0FB2  2FB4               	goto	u810
  6292     0FB3                     u811:
  6293     0FB3  2F9A               	goto	l2433
  6294     0FB4                     u810:
  6295     0FB4                     l191:
  6296     0FB4  0008               	return
  6297     0FB5                     __end_of_SPI1_BufferRead:
  6298                           
  6299                           	psect	text21
  6300     0EFE                     __ptext21:	
  6301 ;; *************** function _ADXL345_ClearInterrupt *****************
  6302 ;; Defined at:
  6303 ;;		line 103 in file "ADXL345.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        0 bytes
  6322 ;; Hardware stack levels used: 1
  6323 ;; Hardware stack levels required when called: 2
  6324 ;; This function calls:
  6325 ;;		_SPI1_ByteExchange
  6326 ;;		_SPI1_Close
  6327 ;;		_SPI1_Open
  6328 ;; This function is called by:
  6329 ;;		_MotionEventHandler
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333     0EFE                     _ADXL345_ClearInterrupt:	
  6334                           ;psect for function _ADXL345_ClearInterrupt
  6335                           
  6336     0EFE                     l2583:	
  6337                           ;incstack = 0
  6338                           ; Regs used in _ADXL345_ClearInterrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6339                           
  6340                           
  6341                           ;ADXL345.c: 104:     while (!SPI1_Open(ADXL345)) {
  6342     0EFE  2F02               	goto	l2587
  6343     0EFF                     l2585:
  6344                           
  6345                           ;ADXL345.c: 105:         SPI1_Close();
  6346     0EFF  318E  267F  318E   	fcall	_SPI1_Close
  6347     0F02                     l2587:
  6348                           
  6349                           ;ADXL345.c: 104:     while (!SPI1_Open(ADXL345)) {
  6350     0F02  01F6               	clrf	SPI1_Open@spiConfigIndex
  6351     0F03  3180  20F9  318E   	fcall	_SPI1_Open
  6352     0F06  3A00               	xorlw	0
  6353     0F07  1903               	skipnz
  6354     0F08  2F0A               	goto	u881
  6355     0F09  2F0B               	goto	u880
  6356     0F0A                     u881:
  6357     0F0A  2EFF               	goto	l2585
  6358     0F0B                     u880:
  6359     0F0B                     l509:	
  6360                           ;ADXL345.c: 109:     do { LATCbits.LATC4 = 0; } while(0);
  6361                           
  6362     0F0B  0022               	movlb	2	; select bank2
  6363     0F0C  120E               	bcf	14,4	;volatile
  6364     0F0D                     l2589:
  6365                           
  6366                           ;ADXL345.c: 110:     SPI1_ByteExchange(0x30);
  6367     0F0D  3030               	movlw	48
  6368     0F0E  00F0               	movwf	SPI1_ByteExchange@byteData
  6369     0F0F  318E  26AF  318E   	fcall	_SPI1_ByteExchange
  6370     0F12                     l2591:
  6371     0F12  0022               	movlb	2	; select bank2
  6372     0F13  160E               	bsf	14,4	;volatile
  6373     0F14                     l2593:
  6374                           
  6375                           ;ADXL345.c: 113:     SPI1_Close();
  6376     0F14  318E  267F  318E   	fcall	_SPI1_Close
  6377     0F17                     l513:
  6378     0F17  0008               	return
  6379     0F18                     __end_of_ADXL345_ClearInterrupt:
  6380                           
  6381                           	psect	text22
  6382     0EAF                     __ptext22:	
  6383 ;; *************** function _SPI1_ByteExchange *****************
  6384 ;; Defined at:
  6385 ;;		line 161 in file "mcc_generated_files/spi/src/mssp.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;  byteData        1    0[COMMON] unsigned char 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      unsigned char 
  6392 ;; Registers used:
  6393 ;;		wreg
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6399 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used: 1
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_ADXL345_ClearInterrupt
  6409 ;;		_setupForFreefall
  6410 ;;		_setupForImpact
  6411 ;;		_setupForInactivity
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415     0EAF                     _SPI1_ByteExchange:	
  6416                           ;psect for function _SPI1_ByteExchange
  6417                           
  6418     0EAF                     l2443:	
  6419                           ;incstack = 0
  6420                           ; Regs used in _SPI1_ByteExchange: [wreg]
  6421                           
  6422                           
  6423                           ;mcc_generated_files/spi/src/mssp.c: 161: uint8_t SPI1_ByteExchange(uint8_t byteData);mc
      +                          c_generated_files/spi/src/mssp.c: 162: {;mcc_generated_files/spi/src/mssp.c: 163:     SS
      +                          P1BUF = byteData;
  6424     0EAF  0870               	movf	SPI1_ByteExchange@byteData,w
  6425     0EB0  0024               	movlb	4	; select bank4
  6426     0EB1  0091               	movwf	17	;volatile
  6427     0EB2                     l194:	
  6428                           ;mcc_generated_files/spi/src/mssp.c: 165:     {;mcc_generated_files/spi/src/mssp.c: 167:
      +                               }
  6429                           
  6430                           
  6431                           ;mcc_generated_files/spi/src/mssp.c: 164:     while (!PIR1bits.SSP1IF)
  6432     0EB2  0020               	movlb	0	; select bank0
  6433     0EB3  1D91               	btfss	17,3	;volatile
  6434     0EB4  2EB6               	goto	u821
  6435     0EB5  2EB7               	goto	u820
  6436     0EB6                     u821:
  6437     0EB6  2EB2               	goto	l194
  6438     0EB7                     u820:
  6439     0EB7                     l196:
  6440                           
  6441                           ;mcc_generated_files/spi/src/mssp.c: 168:     PIR1bits.SSP1IF = 0;
  6442     0EB7  1191               	bcf	17,3	;volatile
  6443     0EB8                     l2445:
  6444                           
  6445                           ;mcc_generated_files/spi/src/mssp.c: 169:     return SSP1BUF;;	Return value of _SPI1_Byt
      +                          eExchange is never used
  6446     0EB8  0024               	movlb	4	; select bank4
  6447     0EB9  0811               	movf	17,w	;volatile
  6448     0EBA                     l197:
  6449     0EBA  0008               	return
  6450     0EBB                     __end_of_SPI1_ByteExchange:
  6451                           
  6452                           	psect	text23
  6453     0EC7                     __ptext23:	
  6454 ;; *************** function _EEPROM_Read *****************
  6455 ;; Defined at:
  6456 ;;		line 224 in file "mcc_generated_files/nvm/src/nvm.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;  address         2    0[COMMON] unsigned short 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;		None
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      unsigned char 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        2 bytes
  6475 ;; Hardware stack levels used: 1
  6476 ;; This function calls:
  6477 ;;		Nothing
  6478 ;; This function is called by:
  6479 ;;		_main
  6480 ;;		_EEPROM_ByteRead
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484     0EC7                     _EEPROM_Read:	
  6485                           ;psect for function _EEPROM_Read
  6486                           
  6487     0EC7                     l2813:	
  6488                           ;incstack = 0
  6489                           ; Regs used in _EEPROM_Read: [wreg+status,2]
  6490                           
  6491                           
  6492                           ;mcc_generated_files/nvm/src/nvm.c: 224: eeprom_data_t EEPROM_Read(eeprom_address_t addr
      +                          ess);mcc_generated_files/nvm/src/nvm.c: 225: {;mcc_generated_files/nvm/src/nvm.c: 227:  
      +                             EECON1bits.CFGS = 0;
  6493     0EC7  0023               	movlb	3	; select bank3
  6494     0EC8  1315               	bcf	21,6	;volsfr
  6495                           
  6496                           ;mcc_generated_files/nvm/src/nvm.c: 228:     EECON1bits.EEPGD = 0;
  6497     0EC9  1395               	bcf	21,7	;volsfr
  6498     0ECA                     l2815:
  6499                           
  6500                           ;mcc_generated_files/nvm/src/nvm.c: 231:     EEADRH = (uint8_t) (address >> 8);
  6501     0ECA  0871               	movf	EEPROM_Read@address+1,w
  6502     0ECB  0092               	movwf	18	;volatile
  6503     0ECC                     l2817:
  6504                           
  6505                           ;mcc_generated_files/nvm/src/nvm.c: 232:     EEADRL = (uint8_t) address;
  6506     0ECC  0870               	movf	EEPROM_Read@address,w
  6507     0ECD  0091               	movwf	17	;volatile
  6508     0ECE                     l2819:
  6509                           
  6510                           ;mcc_generated_files/nvm/src/nvm.c: 235:     EECON1bits.RD = 1;
  6511     0ECE  1415               	bsf	21,0	;volsfr
  6512     0ECF                     l2821:
  6513                           
  6514                           ;mcc_generated_files/nvm/src/nvm.c: 236:     __nop();
  6515     0ECF  0000               	nop
  6516     0ED0                     l2823:
  6517                           
  6518                           ;mcc_generated_files/nvm/src/nvm.c: 237:     __nop();
  6519     0ED0  0000               	nop
  6520     0ED1                     l2825:
  6521                           
  6522                           ;mcc_generated_files/nvm/src/nvm.c: 239:     return EEDATL;
  6523     0ED1  0023               	movlb	3	; select bank3
  6524     0ED2  0813               	movf	19,w	;volatile
  6525     0ED3                     l103:
  6526     0ED3  0008               	return
  6527     0ED4                     __end_of_EEPROM_Read:
  6528                           
  6529                           	psect	text24
  6530     000C                     __ptext24:	
  6531 ;; *************** function _ADXL345_validation *****************
  6532 ;; Defined at:
  6533 ;;		line 57 in file "ADXL345.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  temp            2    0[BANK0 ] unsigned char [2]
  6538 ;;  passed          1    2[BANK0 ] _Bool 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      _Bool 
  6541 ;; Registers used:
  6542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:        5 bytes
  6553 ;; Hardware stack levels used: 1
  6554 ;; Hardware stack levels required when called: 2
  6555 ;; This function calls:
  6556 ;;		_SPI1_BufferExchange
  6557 ;;		_SPI1_Close
  6558 ;;		_SPI1_Open
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564     000C                     _ADXL345_validation:	
  6565                           ;psect for function _ADXL345_validation
  6566                           
  6567     000C                     l2835:	
  6568                           ;incstack = 0
  6569                           ; Regs used in _ADXL345_validation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6570                           
  6571                           
  6572                           ;ADXL345.c: 58:     _Bool passed = 0;
  6573     000C  0020               	movlb	0	; select bank0
  6574     000D  01A2               	clrf	ADXL345_validation@passed
  6575     000E                     l2837:
  6576                           
  6577                           ;ADXL345.c: 59:     if (SPI1_Open(ADXL345)) {
  6578     000E  01F6               	clrf	SPI1_Open@spiConfigIndex
  6579     000F  3180  20F9  3180   	fcall	_SPI1_Open
  6580     0012  3A00               	xorlw	0
  6581     0013  1903               	skipnz
  6582     0014  2816               	goto	u951
  6583     0015  2817               	goto	u950
  6584     0016                     u951:
  6585     0016  2840               	goto	l2853
  6586     0017                     u950:
  6587     0017                     l473:	
  6588                           ;ADXL345.c: 60:         do { LATCbits.LATC4 = 0; } while(0);
  6589                           
  6590     0017  0022               	movlb	2	; select bank2
  6591     0018  120E               	bcf	14,4	;volatile
  6592     0019                     l2839:
  6593                           
  6594                           ;ADXL345.c: 61:         uint8_t temp[2] = {0x00, 0x00};
  6595     0019  0020               	movlb	0	; select bank0
  6596     001A  01A0               	clrf	ADXL345_validation@temp
  6597     001B  01A1               	clrf	ADXL345_validation@temp+1
  6598     001C                     l2841:
  6599                           
  6600                           ;ADXL345.c: 62:         SPI1_BufferExchange(&temp, sizeof(temp));
  6601     001C  3020               	movlw	(low (ADXL345_validation@temp| 0))& (0+255)
  6602     001D  00F0               	movwf	SPI1_BufferExchange@bufferData
  6603     001E  3002               	movlw	2
  6604     001F  00F1               	movwf	SPI1_BufferExchange@bufferSize
  6605     0020  3000               	movlw	0
  6606     0021  00F2               	movwf	SPI1_BufferExchange@bufferSize+1
  6607     0022  318F  27DA  3180   	fcall	_SPI1_BufferExchange
  6608     0025                     l2843:
  6609                           
  6610                           ;ADXL345.c: 63:         if (temp[0] == 0xE5) {
  6611     0025  30E5               	movlw	229
  6612     0026  0020               	movlb	0	; select bank0
  6613     0027  0620               	xorwf	ADXL345_validation@temp,w
  6614     0028  1D03               	btfss	3,2
  6615     0029  282B               	goto	u961
  6616     002A  282C               	goto	u960
  6617     002B                     u961:
  6618     002B  282F               	goto	l479
  6619     002C                     u960:
  6620     002C                     l2845:
  6621                           
  6622                           ;ADXL345.c: 64:             passed = 1;
  6623     002C  3001               	movlw	1
  6624     002D  00A2               	movwf	ADXL345_validation@passed
  6625                           
  6626                           ;ADXL345.c: 65:         } else {
  6627     002E  283E               	goto	l2851
  6628     002F                     l479:	
  6629                           ;ADXL345.c: 66:             do { LATAbits.LATA4 = 1; } while(0);
  6630                           
  6631     002F  0022               	movlb	2	; select bank2
  6632     0030  160C               	bsf	12,4	;volatile
  6633     0031                     l2847:
  6634                           
  6635                           ;ADXL345.c: 67:             _delay((unsigned long)((250)*(4000000/4000.0)));
  6636     0031  3002               	movlw	2
  6637     0032  00FB               	movwf	??_ADXL345_validation+1
  6638     0033  3045               	movlw	69
  6639     0034  00FA               	movwf	??_ADXL345_validation
  6640     0035  30AA               	movlw	170
  6641     0036                     u1517:
  6642     0036  0B89               	decfsz	9,f
  6643     0037  2836               	goto	u1517
  6644     0038  0BFA               	decfsz	??_ADXL345_validation,f
  6645     0039  2836               	goto	u1517
  6646     003A  0BFB               	decfsz	??_ADXL345_validation+1,f
  6647     003B  2836               	goto	u1517
  6648     003C                     l2849:
  6649     003C  0022               	movlb	2	; select bank2
  6650     003D  120C               	bcf	12,4	;volatile
  6651     003E                     l2851:
  6652     003E  0022               	movlb	2	; select bank2
  6653     003F  160E               	bsf	14,4	;volatile
  6654     0040                     l2853:
  6655                           
  6656                           ;ADXL345.c: 72:     SPI1_Close();
  6657     0040  318E  267F  3180   	fcall	_SPI1_Close
  6658     0043                     l2855:
  6659                           
  6660                           ;ADXL345.c: 73:     return passed;
  6661     0043  0020               	movlb	0	; select bank0
  6662     0044  0822               	movf	ADXL345_validation@passed,w
  6663     0045                     l485:
  6664     0045  0008               	return
  6665     0046                     __end_of_ADXL345_validation:
  6666                           
  6667                           	psect	text25
  6668     0FDA                     __ptext25:	
  6669 ;; *************** function _SPI1_BufferExchange *****************
  6670 ;; Defined at:
  6671 ;;		line 108 in file "mcc_generated_files/spi/src/mssp.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  bufferData      1    0[COMMON] PTR void 
  6674 ;;		 -> ADXL345_validation@temp(2), 
  6675 ;;  bufferSize      2    1[COMMON] unsigned int 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  bufferInputS    2    3[COMMON] unsigned int 
  6678 ;;  bufferInput     1    5[COMMON] PTR unsigned char 
  6679 ;;		 -> ADXL345_validation@temp(2), 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6689 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;Total ram usage:        6 bytes
  6694 ;; Hardware stack levels used: 1
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		_ADXL345_validation
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702     0FDA                     _SPI1_BufferExchange:	
  6703                           ;psect for function _SPI1_BufferExchange
  6704                           
  6705     0FDA                     l2511:	
  6706                           ;incstack = 0
  6707                           ; Regs used in _SPI1_BufferExchange: [wreg+fsr1l+fsr1h+status,2+status,0]
  6708                           
  6709                           
  6710                           ;mcc_generated_files/spi/src/mssp.c: 108: void SPI1_BufferExchange(void *bufferData, siz
      +                          e_t bufferSize);mcc_generated_files/spi/src/mssp.c: 109: {;mcc_generated_files/spi/src/m
      +                          ssp.c: 110:     uint8_t *bufferInput = bufferData;
  6711     0FDA  0870               	movf	SPI1_BufferExchange@bufferData,w
  6712     0FDB  00F5               	movwf	SPI1_BufferExchange@bufferInput
  6713                           
  6714                           ;mcc_generated_files/spi/src/mssp.c: 111:     size_t bufferInputSize = bufferSize;
  6715     0FDC  0872               	movf	SPI1_BufferExchange@bufferSize+1,w
  6716     0FDD  00F4               	movwf	SPI1_BufferExchange@bufferInputSize+1
  6717     0FDE  0871               	movf	SPI1_BufferExchange@bufferSize,w
  6718     0FDF  00F3               	movwf	SPI1_BufferExchange@bufferInputSize
  6719                           
  6720                           ;mcc_generated_files/spi/src/mssp.c: 112:     while (0U != bufferInputSize)
  6721     0FE0  2FF9               	goto	l2521
  6722     0FE1                     l2513:
  6723                           
  6724                           ;mcc_generated_files/spi/src/mssp.c: 113:     {;mcc_generated_files/spi/src/mssp.c: 114:
      +                                   SSP1BUF = *bufferInput;
  6725     0FE1  0875               	movf	SPI1_BufferExchange@bufferInput,w
  6726     0FE2  0086               	movwf	6
  6727     0FE3  0187               	clrf	7
  6728     0FE4  0801               	movf	1,w
  6729     0FE5  0024               	movlb	4	; select bank4
  6730     0FE6  0091               	movwf	17	;volatile
  6731     0FE7                     l169:	
  6732                           ;mcc_generated_files/spi/src/mssp.c: 116:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          118:         }
  6733                           
  6734                           
  6735                           ;mcc_generated_files/spi/src/mssp.c: 115:         while (!PIR1bits.SSP1IF)
  6736     0FE7  0020               	movlb	0	; select bank0
  6737     0FE8  1D91               	btfss	17,3	;volatile
  6738     0FE9  2FEB               	goto	u851
  6739     0FEA  2FEC               	goto	u850
  6740     0FEB                     u851:
  6741     0FEB  2FE7               	goto	l169
  6742     0FEC                     u850:
  6743     0FEC                     l171:
  6744                           
  6745                           ;mcc_generated_files/spi/src/mssp.c: 119:         PIR1bits.SSP1IF = 0;
  6746     0FEC  1191               	bcf	17,3	;volatile
  6747     0FED                     l2515:
  6748                           
  6749                           ;mcc_generated_files/spi/src/mssp.c: 120:         *bufferInput = SSP1BUF;
  6750     0FED  0875               	movf	SPI1_BufferExchange@bufferInput,w
  6751     0FEE  0086               	movwf	6
  6752     0FEF  0187               	clrf	7
  6753     0FF0  0024               	movlb	4	; select bank4
  6754     0FF1  0811               	movf	17,w	;volatile
  6755     0FF2  0081               	movwf	1
  6756     0FF3                     l2517:
  6757                           
  6758                           ;mcc_generated_files/spi/src/mssp.c: 121:         bufferInput++;
  6759     0FF3  3001               	movlw	1
  6760     0FF4  07F5               	addwf	SPI1_BufferExchange@bufferInput,f
  6761     0FF5                     l2519:
  6762                           
  6763                           ;mcc_generated_files/spi/src/mssp.c: 122:         bufferInputSize--;
  6764     0FF5  3001               	movlw	1
  6765     0FF6  02F3               	subwf	SPI1_BufferExchange@bufferInputSize,f
  6766     0FF7  3000               	movlw	0
  6767     0FF8  3BF4               	subwfb	SPI1_BufferExchange@bufferInputSize+1,f
  6768     0FF9                     l2521:
  6769                           
  6770                           ;mcc_generated_files/spi/src/mssp.c: 112:     while (0U != bufferInputSize)
  6771     0FF9  0873               	movf	SPI1_BufferExchange@bufferInputSize,w
  6772     0FFA  0474               	iorwf	SPI1_BufferExchange@bufferInputSize+1,w
  6773     0FFB  1D03               	btfss	3,2
  6774     0FFC  2FFE               	goto	u861
  6775     0FFD  2FFF               	goto	u860
  6776     0FFE                     u861:
  6777     0FFE  2FE1               	goto	l2513
  6778     0FFF                     u860:
  6779     0FFF                     l173:
  6780     0FFF  0008               	return
  6781     1000                     __end_of_SPI1_BufferExchange:
  6782                           
  6783                           	psect	text26
  6784     0095                     __ptext26:	
  6785 ;; *************** function _ADXL345_init *****************
  6786 ;; Defined at:
  6787 ;;		line 33 in file "ADXL345.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;		None
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  msg            26    0[BANK0 ] struct Message
  6792 ;; Return value:  Size  Location     Type
  6793 ;;                  1    wreg      _Bool 
  6794 ;; Registers used:
  6795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;Total ram usage:       26 bytes
  6806 ;; Hardware stack levels used: 1
  6807 ;; Hardware stack levels required when called: 2
  6808 ;; This function calls:
  6809 ;;		_SPI1_BufferWrite
  6810 ;;		_SPI1_Close
  6811 ;;		_SPI1_Open
  6812 ;;		_memcpy
  6813 ;;		_memset
  6814 ;; This function is called by:
  6815 ;;		_main
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819     0095                     _ADXL345_init:	
  6820                           ;psect for function _ADXL345_init
  6821                           
  6822     0095                     l2859:	
  6823                           ;incstack = 0
  6824                           ; Regs used in _ADXL345_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6825                           
  6826                           
  6827                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  6828     0095  2899               	goto	l2863
  6829     0096                     l2861:
  6830                           
  6831                           ;ADXL345.c: 35:         SPI1_Close();
  6832     0096  318E  267F  3180   	fcall	_SPI1_Close
  6833     0099                     l2863:
  6834                           
  6835                           ;ADXL345.c: 34:     while (!SPI1_Open(ADXL345)) {
  6836     0099  01F6               	clrf	SPI1_Open@spiConfigIndex
  6837     009A  3180  20F9  3180   	fcall	_SPI1_Open
  6838     009D  3A00               	xorlw	0
  6839     009E  1903               	skipnz
  6840     009F  28A1               	goto	u971
  6841     00A0  28A2               	goto	u970
  6842     00A1                     u971:
  6843     00A1  2896               	goto	l2861
  6844     00A2                     u970:
  6845     00A2                     l460:
  6846                           
  6847                           ;ADXL345.c: 38:     struct Message msg;;ADXL345.c: 39:     msg.registerAddr = 0x24 | 0x4
      +                          0;
  6848     00A2  3064               	movlw	100
  6849     00A3  0020               	movlb	0	; select bank0
  6850     00A4  00A0               	movwf	ADXL345_init@msg
  6851     00A5                     l2865:
  6852                           
  6853                           ;ADXL345.c: 40:     memset(msg.data, 0, sizeof(msg.data));
  6854     00A5  3021               	movlw	low (ADXL345_init@msg+1)
  6855     00A6  00F0               	movwf	memset@dest
  6856     00A7  3000               	movlw	high (ADXL345_init@msg+1)
  6857     00A8  00F1               	movwf	memset@dest+1
  6858     00A9  3000               	movlw	0
  6859     00AA  00F2               	movwf	memset@c
  6860     00AB  00F3               	movwf	memset@c+1
  6861     00AC  3019               	movlw	25
  6862     00AD  00F4               	movwf	memset@n
  6863     00AE  3000               	movlw	0
  6864     00AF  00F5               	movwf	memset@n+1
  6865     00B0  318E  26E7  3180   	fcall	_memset
  6866     00B3                     l2867:
  6867                           
  6868                           ;ADXL345.c: 41:     memcpy(msg.data, ADXL345_init_settings, sizeof(ADXL345_init_settings
      +                          ));
  6869     00B3  3021               	movlw	low (ADXL345_init@msg+1)
  6870     00B4  00F0               	movwf	memcpy@d1
  6871     00B5  3000               	movlw	high (ADXL345_init@msg+1)
  6872     00B6  00F1               	movwf	memcpy@d1+1
  6873     00B7  3039               	movlw	low (_ADXL345_init_settings| (0+32768))
  6874     00B8  00F2               	movwf	memcpy@s1
  6875     00B9  3090               	movlw	high (_ADXL345_init_settings| (0+32768))
  6876     00BA  00F3               	movwf	memcpy@s1+1
  6877     00BB  300C               	movlw	12
  6878     00BC  00F4               	movwf	memcpy@n
  6879     00BD  3000               	movlw	0
  6880     00BE  00F5               	movwf	memcpy@n+1
  6881     00BF  318F  27B5  3180   	fcall	_memcpy
  6882     00C2                     l2869:
  6883     00C2  0022               	movlb	2	; select bank2
  6884     00C3  120E               	bcf	14,4	;volatile
  6885     00C4                     l2871:
  6886                           
  6887                           ;ADXL345.c: 43:     SPI1_BufferWrite(&msg, sizeof(ADXL345_init_settings) + 1);
  6888     00C4  3020               	movlw	low ADXL345_init@msg
  6889     00C5  00F0               	movwf	SPI1_BufferWrite@bufferData
  6890     00C6  3000               	movlw	high ADXL345_init@msg
  6891     00C7  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6892     00C8  300D               	movlw	13
  6893     00C9  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6894     00CA  3000               	movlw	0
  6895     00CB  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6896     00CC  318F  2773  3180   	fcall	_SPI1_BufferWrite
  6897     00CF                     l2873:
  6898     00CF  0022               	movlb	2	; select bank2
  6899     00D0  160E               	bsf	14,4	;volatile
  6900     00D1                     l2875:
  6901                           
  6902                           ;ADXL345.c: 46:     msg.registerAddr = 0x31;
  6903     00D1  3031               	movlw	49
  6904     00D2  0020               	movlb	0	; select bank0
  6905     00D3  00A0               	movwf	ADXL345_init@msg
  6906     00D4                     l2877:
  6907                           
  6908                           ;ADXL345.c: 47:     memset(msg.data, 0, sizeof(msg.data));
  6909     00D4  3021               	movlw	low (ADXL345_init@msg+1)
  6910     00D5  00F0               	movwf	memset@dest
  6911     00D6  3000               	movlw	high (ADXL345_init@msg+1)
  6912     00D7  00F1               	movwf	memset@dest+1
  6913     00D8  3000               	movlw	0
  6914     00D9  00F2               	movwf	memset@c
  6915     00DA  00F3               	movwf	memset@c+1
  6916     00DB  3019               	movlw	25
  6917     00DC  00F4               	movwf	memset@n
  6918     00DD  3000               	movlw	0
  6919     00DE  00F5               	movwf	memset@n+1
  6920     00DF  318E  26E7  3180   	fcall	_memset
  6921     00E2                     l2879:
  6922                           
  6923                           ;ADXL345.c: 48:     msg.data[0] = 0x0B;
  6924     00E2  300B               	movlw	11
  6925     00E3  0020               	movlb	0	; select bank0
  6926     00E4  00A1               	movwf	ADXL345_init@msg+1
  6927     00E5                     l2881:
  6928     00E5  0022               	movlb	2	; select bank2
  6929     00E6  120E               	bcf	14,4	;volatile
  6930     00E7                     l2883:
  6931                           
  6932                           ;ADXL345.c: 50:     SPI1_BufferWrite(&msg, 2);
  6933     00E7  3020               	movlw	low ADXL345_init@msg
  6934     00E8  00F0               	movwf	SPI1_BufferWrite@bufferData
  6935     00E9  3000               	movlw	high ADXL345_init@msg
  6936     00EA  00F1               	movwf	SPI1_BufferWrite@bufferData+1
  6937     00EB  3002               	movlw	2
  6938     00EC  00F2               	movwf	SPI1_BufferWrite@bufferSize
  6939     00ED  3000               	movlw	0
  6940     00EE  00F3               	movwf	SPI1_BufferWrite@bufferSize+1
  6941     00EF  318F  2773  3180   	fcall	_SPI1_BufferWrite
  6942     00F2                     l2885:
  6943     00F2  0022               	movlb	2	; select bank2
  6944     00F3  160E               	bsf	14,4	;volatile
  6945     00F4                     l2887:
  6946                           
  6947                           ;ADXL345.c: 53:     SPI1_Close();
  6948     00F4  318E  267F  3180   	fcall	_SPI1_Close
  6949     00F7                     l2889:
  6950                           
  6951                           ;ADXL345.c: 54:     return 1;
  6952     00F7  3001               	movlw	1
  6953     00F8                     l469:
  6954     00F8  0008               	return
  6955     00F9                     __end_of_ADXL345_init:
  6956                           
  6957                           	psect	text27
  6958     0EE7                     __ptext27:	
  6959 ;; *************** function _memset *****************
  6960 ;; Defined at:
  6961 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memset.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  dest            2    0[COMMON] PTR void 
  6964 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  6965 ;;  c               2    2[COMMON] int 
  6966 ;;  n               2    4[COMMON] unsigned int 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  p               1    6[COMMON] PTR unsigned char 
  6969 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  2    0[COMMON] PTR void 
  6972 ;; Registers used:
  6973 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6979 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;Total ram usage:        7 bytes
  6984 ;; Hardware stack levels used: 1
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		_ADXL345_init
  6989 ;;		_setupForFreefall
  6990 ;;		_setupForImpact
  6991 ;;		_setupForInactivity
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995     0EE7                     _memset:	
  6996                           ;psect for function _memset
  6997                           
  6998     0EE7                     l2453:	
  6999                           ;incstack = 0
  7000                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7001                           
  7002     0EE7  0870               	movf	memset@dest,w
  7003     0EE8  00F6               	movwf	memset@p
  7004     0EE9  2EF1               	goto	l2459
  7005     0EEA                     l2455:
  7006     0EEA  0876               	movf	memset@p,w
  7007     0EEB  0086               	movwf	6
  7008     0EEC  0187               	clrf	7
  7009     0EED  0872               	movf	memset@c,w
  7010     0EEE  0081               	movwf	1
  7011     0EEF                     l2457:
  7012     0EEF  3001               	movlw	1
  7013     0EF0  07F6               	addwf	memset@p,f
  7014     0EF1                     l2459:
  7015     0EF1  3001               	movlw	1
  7016     0EF2  02F4               	subwf	memset@n,f
  7017     0EF3  3000               	movlw	0
  7018     0EF4  3BF5               	subwfb	memset@n+1,f
  7019     0EF5  0A74               	incf	memset@n,w
  7020     0EF6  1D03               	skipz
  7021     0EF7  2EFC               	goto	u831
  7022     0EF8  0A75               	incf	memset@n+1,w
  7023     0EF9  1D03               	btfss	3,2
  7024     0EFA  2EFC               	goto	u831
  7025     0EFB  2EFD               	goto	u830
  7026     0EFC                     u831:
  7027     0EFC  2EEA               	goto	l2455
  7028     0EFD                     u830:
  7029     0EFD                     l1337:
  7030     0EFD  0008               	return
  7031     0EFE                     __end_of_memset:
  7032                           
  7033                           	psect	text28
  7034     0FB5                     __ptext28:	
  7035 ;; *************** function _memcpy *****************
  7036 ;; Defined at:
  7037 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\memcpy.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  d1              2    0[COMMON] PTR void 
  7040 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7041 ;;  s1              2    2[COMMON] PTR const void 
  7042 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7043 ;;  n               2    4[COMMON] unsigned int 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  s               2    6[COMMON] PTR const unsigned char 
  7046 ;;		 -> no_motion_init(4), impact_init(4), fall_init(4), ADXL345_init_settings(12), 
  7047 ;;  d               1    9[COMMON] PTR unsigned char 
  7048 ;;		 -> setupForInactivity@msg(26), setupForImpact@msg(26), setupForFreefall@msg(26), ADXL345_init@msg(26), 
  7049 ;;  tmp             1    8[COMMON] unsigned char 
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  2    0[COMMON] PTR void 
  7052 ;; Registers used:
  7053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7059 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;Total ram usage:       10 bytes
  7064 ;; Hardware stack levels used: 1
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_ADXL345_init
  7069 ;;		_setupForFreefall
  7070 ;;		_setupForImpact
  7071 ;;		_setupForInactivity
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075     0FB5                     _memcpy:	
  7076                           ;psect for function _memcpy
  7077                           
  7078     0FB5                     l2461:	
  7079                           ;incstack = 0
  7080                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7081                           
  7082     0FB5  0873               	movf	memcpy@s1+1,w
  7083     0FB6  00F7               	movwf	memcpy@s+1
  7084     0FB7  0872               	movf	memcpy@s1,w
  7085     0FB8  00F6               	movwf	memcpy@s
  7086     0FB9                     l2463:
  7087     0FB9  0870               	movf	memcpy@d1,w
  7088     0FBA  00F9               	movwf	memcpy@d
  7089     0FBB  2FCD               	goto	l2473
  7090     0FBC                     l2465:
  7091     0FBC  0876               	movf	memcpy@s,w
  7092     0FBD  0084               	movwf	4
  7093     0FBE  0877               	movf	memcpy@s+1,w
  7094     0FBF  0085               	movwf	5
  7095     0FC0  0800               	movf	0,w	;code access
  7096     0FC1  00F8               	movwf	memcpy@tmp
  7097     0FC2                     l2467:
  7098     0FC2  3001               	movlw	1
  7099     0FC3  07F6               	addwf	memcpy@s,f
  7100     0FC4  3000               	movlw	0
  7101     0FC5  3DF7               	addwfc	memcpy@s+1,f
  7102     0FC6                     l2469:
  7103     0FC6  0879               	movf	memcpy@d,w
  7104     0FC7  0086               	movwf	6
  7105     0FC8  0187               	clrf	7
  7106     0FC9  0878               	movf	memcpy@tmp,w
  7107     0FCA  0081               	movwf	1
  7108     0FCB                     l2471:
  7109     0FCB  3001               	movlw	1
  7110     0FCC  07F9               	addwf	memcpy@d,f
  7111     0FCD                     l2473:
  7112     0FCD  3001               	movlw	1
  7113     0FCE  02F4               	subwf	memcpy@n,f
  7114     0FCF  3000               	movlw	0
  7115     0FD0  3BF5               	subwfb	memcpy@n+1,f
  7116     0FD1  0A74               	incf	memcpy@n,w
  7117     0FD2  1D03               	skipz
  7118     0FD3  2FD8               	goto	u841
  7119     0FD4  0A75               	incf	memcpy@n+1,w
  7120     0FD5  1D03               	btfss	3,2
  7121     0FD6  2FD8               	goto	u841
  7122     0FD7  2FD9               	goto	u840
  7123     0FD8                     u841:
  7124     0FD8  2FBC               	goto	l2465
  7125     0FD9                     u840:
  7126     0FD9                     l1331:
  7127     0FD9  0008               	return
  7128     0FDA                     __end_of_memcpy:
  7129                           
  7130                           	psect	text29
  7131     00F9                     __ptext29:	
  7132 ;; *************** function _SPI1_Open *****************
  7133 ;; Defined at:
  7134 ;;		line 82 in file "mcc_generated_files/spi/src/mssp.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  spiConfigInd    1    6[COMMON] unsigned char 
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  returnValue     1    9[COMMON] _Bool 
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      _Bool 
  7141 ;; Registers used:
  7142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7148 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;Total ram usage:        4 bytes
  7153 ;; Hardware stack levels used: 1
  7154 ;; Hardware stack levels required when called: 1
  7155 ;; This function calls:
  7156 ;;		___wmul
  7157 ;; This function is called by:
  7158 ;;		_ADXL345_init
  7159 ;;		_ADXL345_validation
  7160 ;;		_saveOffsets
  7161 ;;		_ADXL345_ClearInterrupt
  7162 ;;		_setupForFreefall
  7163 ;;		_setupForImpact
  7164 ;;		_setupForInactivity
  7165 ;;		_orientation_Up
  7166 ;;		_calibrate
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170     00F9                     _SPI1_Open:	
  7171                           ;psect for function _SPI1_Open
  7172                           
  7173     00F9                     l2401:	
  7174                           ;incstack = 0
  7175                           ; Regs used in _SPI1_Open: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7176                           
  7177     00F9                     l2403:
  7178                           
  7179                           ;mcc_generated_files/spi/src/mssp.c: 85:     if (SSP1CON1bits.SSPEN == 0)
  7180     00F9  0024               	movlb	4	; select bank4
  7181     00FA  1A95               	btfsc	21,5	;volatile
  7182     00FB  28FD               	goto	u771
  7183     00FC  28FE               	goto	u770
  7184     00FD                     u771:
  7185     00FD  2962               	goto	l2411
  7186     00FE                     u770:
  7187     00FE                     l2405:
  7188                           
  7189                           ;mcc_generated_files/spi/src/mssp.c: 86:     {;mcc_generated_files/spi/src/mssp.c: 87:  
      +                                 SSP1STAT = spi1_configuration[spiConfigIndex].stat;
  7190     00FE  0876               	movf	SPI1_Open@spiConfigIndex,w
  7191     00FF  00F7               	movwf	??_SPI1_Open
  7192     0100  01F8               	clrf	??_SPI1_Open+1
  7193     0101  0877               	movf	??_SPI1_Open,w
  7194     0102  00F0               	movwf	___wmul@multiplier
  7195     0103  0878               	movf	??_SPI1_Open+1,w
  7196     0104  00F1               	movwf	___wmul@multiplier+1
  7197     0105  3005               	movlw	5
  7198     0106  00F2               	movwf	___wmul@multiplicand
  7199     0107  3000               	movlw	0
  7200     0108  00F3               	movwf	___wmul@multiplicand+1
  7201     0109  318F  2754  3180   	fcall	___wmul
  7202     010C  301C               	movlw	low _spi1_configuration
  7203     010D  0770               	addwf	?___wmul,w
  7204     010E  0084               	movwf	4
  7205     010F  3010               	movlw	high _spi1_configuration
  7206     0110  3D71               	addwfc	?___wmul+1,w
  7207     0111  3880               	iorlw	128
  7208     0112  0085               	movwf	5
  7209     0113  0800               	movf	0,w	;code access
  7210     0114  0024               	movlb	4	; select bank4
  7211     0115  0094               	movwf	20	;volatile
  7212                           
  7213                           ;mcc_generated_files/spi/src/mssp.c: 88:         SSP1CON1 = spi1_configuration[spiConfig
      +                          Index].con1;
  7214     0116  0876               	movf	SPI1_Open@spiConfigIndex,w
  7215     0117  00F7               	movwf	??_SPI1_Open
  7216     0118  01F8               	clrf	??_SPI1_Open+1
  7217     0119  0877               	movf	??_SPI1_Open,w
  7218     011A  00F0               	movwf	___wmul@multiplier
  7219     011B  0878               	movf	??_SPI1_Open+1,w
  7220     011C  00F1               	movwf	___wmul@multiplier+1
  7221     011D  3005               	movlw	5
  7222     011E  00F2               	movwf	___wmul@multiplicand
  7223     011F  3000               	movlw	0
  7224     0120  00F3               	movwf	___wmul@multiplicand+1
  7225     0121  318F  2754  3180   	fcall	___wmul
  7226     0124  301D               	movlw	low (_spi1_configuration+1)
  7227     0125  0770               	addwf	?___wmul,w
  7228     0126  0084               	movwf	4
  7229     0127  3010               	movlw	high (_spi1_configuration+1)
  7230     0128  3D71               	addwfc	?___wmul+1,w
  7231     0129  3880               	iorlw	128
  7232     012A  0085               	movwf	5
  7233     012B  0800               	movf	0,w	;code access
  7234     012C  0024               	movlb	4	; select bank4
  7235     012D  0095               	movwf	21	;volatile
  7236                           
  7237                           ;mcc_generated_files/spi/src/mssp.c: 89:         SSP1CON3 = spi1_configuration[spiConfig
      +                          Index].con3;
  7238     012E  0876               	movf	SPI1_Open@spiConfigIndex,w
  7239     012F  00F7               	movwf	??_SPI1_Open
  7240     0130  01F8               	clrf	??_SPI1_Open+1
  7241     0131  0877               	movf	??_SPI1_Open,w
  7242     0132  00F0               	movwf	___wmul@multiplier
  7243     0133  0878               	movf	??_SPI1_Open+1,w
  7244     0134  00F1               	movwf	___wmul@multiplier+1
  7245     0135  3005               	movlw	5
  7246     0136  00F2               	movwf	___wmul@multiplicand
  7247     0137  3000               	movlw	0
  7248     0138  00F3               	movwf	___wmul@multiplicand+1
  7249     0139  318F  2754  3180   	fcall	___wmul
  7250     013C  301E               	movlw	low (_spi1_configuration+2)
  7251     013D  0770               	addwf	?___wmul,w
  7252     013E  0084               	movwf	4
  7253     013F  3010               	movlw	high (_spi1_configuration+2)
  7254     0140  3D71               	addwfc	?___wmul+1,w
  7255     0141  3880               	iorlw	128
  7256     0142  0085               	movwf	5
  7257     0143  0800               	movf	0,w	;code access
  7258     0144  0024               	movlb	4	; select bank4
  7259     0145  0097               	movwf	23	;volatile
  7260                           
  7261                           ;mcc_generated_files/spi/src/mssp.c: 90:         SSP1ADD = spi1_configuration[spiConfigI
      +                          ndex].baud;
  7262     0146  0876               	movf	SPI1_Open@spiConfigIndex,w
  7263     0147  00F7               	movwf	??_SPI1_Open
  7264     0148  01F8               	clrf	??_SPI1_Open+1
  7265     0149  0877               	movf	??_SPI1_Open,w
  7266     014A  00F0               	movwf	___wmul@multiplier
  7267     014B  0878               	movf	??_SPI1_Open+1,w
  7268     014C  00F1               	movwf	___wmul@multiplier+1
  7269     014D  3005               	movlw	5
  7270     014E  00F2               	movwf	___wmul@multiplicand
  7271     014F  3000               	movlw	0
  7272     0150  00F3               	movwf	___wmul@multiplicand+1
  7273     0151  318F  2754  3180   	fcall	___wmul
  7274     0154  301F               	movlw	low (_spi1_configuration+3)
  7275     0155  0770               	addwf	?___wmul,w
  7276     0156  0084               	movwf	4
  7277     0157  3010               	movlw	high (_spi1_configuration+3)
  7278     0158  3D71               	addwfc	?___wmul+1,w
  7279     0159  3880               	iorlw	128
  7280     015A  0085               	movwf	5
  7281     015B  0800               	movf	0,w	;code access
  7282     015C  0024               	movlb	4	; select bank4
  7283     015D  0092               	movwf	18	;volatile
  7284     015E                     l2407:
  7285                           
  7286                           ;mcc_generated_files/spi/src/mssp.c: 92:         SSP1CON1bits.SSPEN = 1;
  7287     015E  1695               	bsf	21,5	;volatile
  7288     015F                     l2409:
  7289                           
  7290                           ;mcc_generated_files/spi/src/mssp.c: 94:         returnValue = 1;
  7291     015F  3001               	movlw	1
  7292     0160  00F9               	movwf	SPI1_Open@returnValue
  7293                           
  7294                           ;mcc_generated_files/spi/src/mssp.c: 95:     }
  7295     0161  2963               	goto	l2413
  7296     0162                     l2411:
  7297                           
  7298                           ;mcc_generated_files/spi/src/mssp.c: 97:     {;mcc_generated_files/spi/src/mssp.c: 98:  
      +                                 returnValue = 0;
  7299     0162  01F9               	clrf	SPI1_Open@returnValue
  7300     0163                     l2413:
  7301                           
  7302                           ;mcc_generated_files/spi/src/mssp.c: 100:     return returnValue;
  7303     0163  0879               	movf	SPI1_Open@returnValue,w
  7304     0164                     l161:
  7305     0164  0008               	return
  7306     0165                     __end_of_SPI1_Open:
  7307                           
  7308                           	psect	text30
  7309     0F54                     __ptext30:	
  7310 ;; *************** function ___wmul *****************
  7311 ;; Defined at:
  7312 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  multiplier      2    0[COMMON] unsigned int 
  7315 ;;  multiplicand    2    2[COMMON] unsigned int 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  product         2    4[COMMON] unsigned int 
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  2    0[COMMON] unsigned int 
  7320 ;; Registers used:
  7321 ;;		wreg, status,2, status,0
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;Total ram usage:        6 bytes
  7332 ;; Hardware stack levels used: 1
  7333 ;; This function calls:
  7334 ;;		Nothing
  7335 ;; This function is called by:
  7336 ;;		_SPI1_Open
  7337 ;;		_orientation_Up
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341     0F54                     ___wmul:	
  7342                           ;psect for function ___wmul
  7343                           
  7344     0F54                     l2385:	
  7345                           ;incstack = 0
  7346                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7347                           
  7348     0F54  01F4               	clrf	___wmul@product
  7349     0F55  01F5               	clrf	___wmul@product+1
  7350     0F56                     l2387:
  7351     0F56  1C70               	btfss	___wmul@multiplier,0
  7352     0F57  2F59               	goto	u731
  7353     0F58  2F5A               	goto	u730
  7354     0F59                     u731:
  7355     0F59  2F5E               	goto	l869
  7356     0F5A                     u730:
  7357     0F5A                     l2389:
  7358     0F5A  0872               	movf	___wmul@multiplicand,w
  7359     0F5B  07F4               	addwf	___wmul@product,f
  7360     0F5C  0873               	movf	___wmul@multiplicand+1,w
  7361     0F5D  3DF5               	addwfc	___wmul@product+1,f
  7362     0F5E                     l869:
  7363     0F5E  3001               	movlw	1
  7364     0F5F                     u745:
  7365     0F5F  35F2               	lslf	___wmul@multiplicand,f
  7366     0F60  0DF3               	rlf	___wmul@multiplicand+1,f
  7367     0F61  0B89               	decfsz	9,f
  7368     0F62  2F5F               	goto	u745
  7369     0F63                     l2391:
  7370     0F63  3001               	movlw	1
  7371     0F64                     u755:
  7372     0F64  36F1               	lsrf	___wmul@multiplier+1,f
  7373     0F65  0CF0               	rrf	___wmul@multiplier,f
  7374     0F66  0B89               	decfsz	9,f
  7375     0F67  2F64               	goto	u755
  7376     0F68                     l2393:
  7377     0F68  0870               	movf	___wmul@multiplier,w
  7378     0F69  0471               	iorwf	___wmul@multiplier+1,w
  7379     0F6A  1D03               	btfss	3,2
  7380     0F6B  2F6D               	goto	u761
  7381     0F6C  2F6E               	goto	u760
  7382     0F6D                     u761:
  7383     0F6D  2F56               	goto	l2387
  7384     0F6E                     u760:
  7385     0F6E                     l2395:
  7386     0F6E  0875               	movf	___wmul@product+1,w
  7387     0F6F  00F1               	movwf	?___wmul+1
  7388     0F70  0874               	movf	___wmul@product,w
  7389     0F71  00F0               	movwf	?___wmul
  7390     0F72                     l871:
  7391     0F72  0008               	return
  7392     0F73                     __end_of___wmul:
  7393                           
  7394                           	psect	text31
  7395     0E7F                     __ptext31:	
  7396 ;; *************** function _SPI1_Close *****************
  7397 ;; Defined at:
  7398 ;;		line 103 in file "mcc_generated_files/spi/src/mssp.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		None
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used: 1
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_ADXL345_init
  7422 ;;		_ADXL345_validation
  7423 ;;		_saveOffsets
  7424 ;;		_ADXL345_ClearInterrupt
  7425 ;;		_setupForFreefall
  7426 ;;		_setupForImpact
  7427 ;;		_setupForInactivity
  7428 ;;		_orientation_Up
  7429 ;;		_calibrate
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433     0E7F                     _SPI1_Close:	
  7434                           ;psect for function _SPI1_Close
  7435                           
  7436     0E7F                     l2417:	
  7437                           ;incstack = 0
  7438                           ; Regs used in _SPI1_Close: []
  7439                           
  7440                           
  7441                           ;mcc_generated_files/spi/src/mssp.c: 105:     SSP1CON1bits.SSPEN = 0;
  7442     0E7F  0024               	movlb	4	; select bank4
  7443     0E80  1295               	bcf	21,5	;volatile
  7444     0E81                     l164:
  7445     0E81  0008               	return
  7446     0E82                     __end_of_SPI1_Close:
  7447                           
  7448                           	psect	text32
  7449     0F73                     __ptext32:	
  7450 ;; *************** function _SPI1_BufferWrite *****************
  7451 ;; Defined at:
  7452 ;;		line 126 in file "mcc_generated_files/spi/src/mssp.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  bufferData      2    0[COMMON] PTR void 
  7455 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7456 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7457 ;;  bufferSize      2    2[COMMON] unsigned int 
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;  bufferInputS    2    4[COMMON] unsigned int 
  7460 ;;  bufferInput     1    6[COMMON] PTR unsigned char 
  7461 ;;		 -> calibrate@msg(26), orientation_Up@msg(26), setupForInactivity@msg(26), setupForImpact@msg(26), 
  7462 ;;		 -> setupForFreefall@msg(26), saveOffsets@msg(26), ADXL345_init@msg(26), 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7472 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;Total ram usage:        7 bytes
  7477 ;; Hardware stack levels used: 1
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_ADXL345_init
  7482 ;;		_saveOffsets
  7483 ;;		_setupForFreefall
  7484 ;;		_setupForImpact
  7485 ;;		_setupForInactivity
  7486 ;;		_orientation_Up
  7487 ;;		_calibrate
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491     0F73                     _SPI1_BufferWrite:	
  7492                           ;psect for function _SPI1_BufferWrite
  7493                           
  7494     0F73                     l2419:	
  7495                           ;incstack = 0
  7496                           ; Regs used in _SPI1_BufferWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7497                           
  7498                           
  7499                           ;mcc_generated_files/spi/src/mssp.c: 126: void SPI1_BufferWrite(void *bufferData, size_t
      +                           bufferSize);mcc_generated_files/spi/src/mssp.c: 127: {;mcc_generated_files/spi/src/mssp
      +                          .c: 128:     uint8_t *bufferInput = bufferData;
  7500     0F73  0870               	movf	SPI1_BufferWrite@bufferData,w
  7501     0F74  00F6               	movwf	SPI1_BufferWrite@bufferInput
  7502     0F75                     l2421:
  7503                           
  7504                           ;mcc_generated_files/spi/src/mssp.c: 129:     size_t bufferInputSize = bufferSize;
  7505     0F75  0873               	movf	SPI1_BufferWrite@bufferSize+1,w
  7506     0F76  00F5               	movwf	SPI1_BufferWrite@bufferInputSize+1
  7507     0F77  0872               	movf	SPI1_BufferWrite@bufferSize,w
  7508     0F78  00F4               	movwf	SPI1_BufferWrite@bufferInputSize
  7509                           
  7510                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7511     0F79  2F8C               	goto	l2429
  7512     0F7A                     l2423:
  7513                           
  7514                           ;mcc_generated_files/spi/src/mssp.c: 131:     {;mcc_generated_files/spi/src/mssp.c: 132:
      +                                   SSP1BUF = *bufferInput;
  7515     0F7A  0876               	movf	SPI1_BufferWrite@bufferInput,w
  7516     0F7B  0086               	movwf	6
  7517     0F7C  0187               	clrf	7
  7518     0F7D  0801               	movf	1,w
  7519     0F7E  0024               	movlb	4	; select bank4
  7520     0F7F  0091               	movwf	17	;volatile
  7521     0F80                     l178:	
  7522                           ;mcc_generated_files/spi/src/mssp.c: 134:         {;mcc_generated_files/spi/src/mssp.c: 
      +                          136:         }
  7523                           
  7524                           
  7525                           ;mcc_generated_files/spi/src/mssp.c: 133:         while (!PIR1bits.SSP1IF)
  7526     0F80  0020               	movlb	0	; select bank0
  7527     0F81  1D91               	btfss	17,3	;volatile
  7528     0F82  2F84               	goto	u781
  7529     0F83  2F85               	goto	u780
  7530     0F84                     u781:
  7531     0F84  2F80               	goto	l178
  7532     0F85                     u780:
  7533     0F85                     l180:
  7534                           
  7535                           ;mcc_generated_files/spi/src/mssp.c: 137:         PIR1bits.SSP1IF = 0;
  7536     0F85  1191               	bcf	17,3	;volatile
  7537     0F86                     l2425:
  7538                           
  7539                           ;mcc_generated_files/spi/src/mssp.c: 138:         bufferInput++;
  7540     0F86  3001               	movlw	1
  7541     0F87  07F6               	addwf	SPI1_BufferWrite@bufferInput,f
  7542     0F88                     l2427:
  7543                           
  7544                           ;mcc_generated_files/spi/src/mssp.c: 139:         bufferInputSize--;
  7545     0F88  3001               	movlw	1
  7546     0F89  02F4               	subwf	SPI1_BufferWrite@bufferInputSize,f
  7547     0F8A  3000               	movlw	0
  7548     0F8B  3BF5               	subwfb	SPI1_BufferWrite@bufferInputSize+1,f
  7549     0F8C                     l2429:
  7550                           
  7551                           ;mcc_generated_files/spi/src/mssp.c: 130:     while (0U != bufferInputSize)
  7552     0F8C  0874               	movf	SPI1_BufferWrite@bufferInputSize,w
  7553     0F8D  0475               	iorwf	SPI1_BufferWrite@bufferInputSize+1,w
  7554     0F8E  1D03               	btfss	3,2
  7555     0F8F  2F91               	goto	u791
  7556     0F90  2F92               	goto	u790
  7557     0F91                     u791:
  7558     0F91  2F7A               	goto	l2423
  7559     0F92                     u790:
  7560     0F92                     l182:
  7561     0F92  0008               	return
  7562     0F93                     __end_of_SPI1_BufferWrite:
  7563     0002                     ___latbits      equ	2
  7564     007E                     btemp           set	126	;btemp
  7565     007E                     wtemp0          set	126
  7566     22F0                     __pbssBIGRAM    equ	8944
  7567                           
  7568                           	psect	config
  7569                           
  7570                           ;Config register CONFIG1 @ 0x8007
  7571                           ;	Oscillator Selection
  7572                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7573                           ;	Watchdog Timer Enable
  7574                           ;	WDTE = SWDTEN, WDT controlled by the SWDTEN bit in the WDTCON register
  7575                           ;	Power-up Timer Enable
  7576                           ;	PWRTE = ON, PWRT enabled
  7577                           ;	MCLR Pin Function Select
  7578                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7579                           ;	Flash Program Memory Code Protection
  7580                           ;	CP = OFF, Program memory code protection is disabled
  7581                           ;	Data Memory Code Protection
  7582                           ;	CPD = OFF, Data memory code protection is disabled
  7583                           ;	Brown-out Reset Enable
  7584                           ;	BOREN = ON, Brown-out Reset enabled
  7585                           ;	Clock Out Enable
  7586                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7587                           ;	Internal/External Switchover
  7588                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7589                           ;	Fail-Safe Clock Monitor Enable
  7590                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7591     8007                     	org	32775
  7592     8007  3FCC               	dw	16332
  7593                           
  7594                           ;Config register CONFIG2 @ 0x8008
  7595                           ;	Flash Memory Self-Write Protection
  7596                           ;	WRT = OFF, Write protection off
  7597                           ;	PLL Enable
  7598                           ;	PLLEN = OFF, 4x PLL disabled
  7599                           ;	Stack Overflow/Underflow Reset Enable
  7600                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7601                           ;	Brown-out Reset Voltage Selection
  7602                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7603                           ;	In-Circuit Debugger Mode
  7604                           ;	DEBUG = 0x1, unprogrammed default
  7605                           ;	Low-Voltage Programming Enable
  7606                           ;	LVP = ON, Low-voltage programming enabled
  7607     8008                     	org	32776
  7608     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    83
    Data        0
    BSS         29
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     53      70
    BANK1            80     62      74
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    eeprom_interface$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    eeprom_interface$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    eeprom_interface$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    eeprom_interface$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    eeprom_interface$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@d1	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memcpy@s1	PTR const void  size(2) Largest target is 12
		 -> ADXL345_init_settings(CODE[12]), fall_init(CODE[4]), impact_init(CODE[4]), no_motion_init(CODE[4]), 

    memset@dest	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    MotionEventHandler@state	PTR enum E2688 size(1) Largest target is 1
		 -> main@current_state(BANK0[1]), 

    NULL$1	PTR unsigned char  size(2) Largest target is 0

    S275$4$0	PTR void  size(1) Largest target is 2
		 -> ADXL345_validation@temp(BANK0[2]), 

    S275$5$0	PTR void  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    S275$6$0	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    S275SPI_INTERFACE$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    S275SPI_INTERFACE$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    S275SPI_INTERFACE$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    S275SPI_INTERFACE$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    S275SPI_INTERFACE$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    S275SPI_INTERFACE$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    S275SPI_INTERFACE$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    S275SPI_INTERFACE$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    S275SPI_INTERFACE$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    S275SPI_INTERFACE$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    S275SPI_INTERFACE$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    S275SPI_INTERFACE$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    S275SPI_INTERFACE$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S275SPI_INTERFACE$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S29$4$1	PTR unsigned char  size(2) Largest target is 0

    S29$5$1	PTR unsigned char  size(2) Largest target is 0

    S29EEPROM_INTERFACE$ByteRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteRead(), 

    S29EEPROM_INTERFACE$ByteWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> EEPROM_ByteWrite(), 

    S29EEPROM_INTERFACE$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NVM_IsBusy(), 

    S29EEPROM_INTERFACE$PageRead	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$PageWrite	PTR FTN(unsigned long ,PTR unsigned char ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$SequentialRead	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S29EEPROM_INTERFACE$SequentialWrite	PTR FTN(unsigned long ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    sp__memcpy	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    sp__memset	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferExchange@bufferData	PTR void  size(1) Largest target is 2
		 -> ADXL345_validation@temp(BANK0[2]), 

    SPI1_BufferExchange@bufferInput	PTR unsigned char  size(1) Largest target is 2
		 -> ADXL345_validation@temp(BANK0[2]), 

    SPI1_BufferRead@bufferData	PTR void  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferRead@bufferInput	PTR unsigned char  size(1) Largest target is 12
		 -> calibrate@acc_data(BANK1[12]), orientation_Up@acc_data(BANK0[6]), 

    SPI1_BufferWrite@bufferData	PTR void  size(2) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_BufferWrite@bufferInput	PTR unsigned char  size(1) Largest target is 26
		 -> ADXL345_init@msg(BANK0[26]), calibrate@msg(BANK1[26]), orientation_Up@msg(BANK0[26]), saveOffsets@msg(BANK0[26]), 
		 -> setupForFreefall@msg(BANK0[26]), setupForImpact@msg(BANK0[26]), setupForInactivity@msg(BANK0[26]), 

    SPI1_Host$BufferExchange	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferExchange(), 

    SPI1_Host$BufferRead	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferRead(), 

    SPI1_Host$BufferWrite	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_BufferWrite(), 

    SPI1_Host$ByteExchange	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteExchange(), 

    SPI1_Host$ByteRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ByteRead(), 

    SPI1_Host$ByteWrite	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_ByteWrite(), 

    SPI1_Host$Close	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    SPI1_Host$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Deinitialize(), 

    SPI1_Host$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Initialize(), 

    SPI1_Host$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsRxReady(), 

    SPI1_Host$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> SPI1_IsTxReady(), 

    SPI1_Host$Open	PTR FTN(unsigned char ,)_Bool  size(2) Largest target is 1
		 -> SPI1_Open(), 

    SPI1_Host$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SPI1_Host$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    SW1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 


Critical Paths under _main in COMMON

    _main->_ADXL345_validation
    _main->_saveOffsets
    _calibrate->_saveOffsets
    _saveOffsets->_SPI1_Open
    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _MotionEventHandler->_orientation_Up
    _setupForInactivity->_SPI1_Open
    _setupForInactivity->_memcpy
    _setupForImpact->_SPI1_Open
    _setupForImpact->_memcpy
    _setupForFreefall->_SPI1_Open
    _setupForFreefall->_memcpy
    _orientation_Up->_SPI1_Open
    _ADXL345_ClearInterrupt->_SPI1_Open
    _ADXL345_validation->_SPI1_Open
    _ADXL345_init->_SPI1_Open
    _ADXL345_init->_memcpy
    _SPI1_Open->___wmul

Critical Paths under _main in BANK0

    _main->_MotionEventHandler
    _calibrate->_saveOffsets
    _MotionEventHandler->_orientation_Up

Critical Paths under _main in BANK1

    _main->_calibrate

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    8141
                                             43 BANK0     10    10      0
                       _ADXL345_init
                 _ADXL345_validation
                        _EEPROM_Read
                 _MotionEventHandler
                    _PIN_MANAGER_IOC
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                          _calibrate
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _calibrate                                           65    65      0    2041
                                             27 BANK0      3     3      0
                                              0 BANK1     62    62      0
                       _EEPROM_Write
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                     _SPI1_ByteWrite
                         _SPI1_Close
                          _SPI1_Open
                        _saveOffsets
 ---------------------------------------------------------------------------------
 (1) _saveOffsets                                         29    27      2     573
                                             10 COMMON     2     0      2
                                              0 BANK0     27    27      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         4     1      3      99
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                   _CLOCK_Initialize
               _INTERRUPT_Initialize
                     _NVM_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _NVM_Initialize                                       0     0      0       0
                    _NVM_StatusClear
 ---------------------------------------------------------------------------------
 (3) _NVM_StatusClear                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0      23
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotionEventHandler                                   3     2      1    4039
                                             40 BANK0      3     2      1
             _ADXL345_ClearInterrupt
                     _orientation_Up
                   _setupForFreefall
                     _setupForImpact
                 _setupForInactivity
 ---------------------------------------------------------------------------------
 (2) _setupForInactivity                                  26    26      0     877
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForImpact                                      26    26      0     877
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _setupForFreefall                                    26    26      0     877
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _orientation_Up                                      42    42      0     952
                                             10 COMMON     2     2      0
                                              0 BANK0     40    40      0
                    _SPI1_BufferRead
                   _SPI1_BufferWrite
                     _SPI1_ByteWrite
                         _SPI1_Close
                          _SPI1_Open
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SPI1_ByteWrite                                       1     0      1      25
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferRead                                      6     3      3      98
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (2) _ADXL345_ClearInterrupt                               0     0      0     257
                  _SPI1_ByteExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (3) _SPI1_ByteExchange                                    1     0      1      29
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          2     0      2      46
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADXL345_validation                                   5     5      0     416
                                             10 COMMON     2     2      0
                                              0 BANK0      3     3      0
                _SPI1_BufferExchange
                         _SPI1_Close
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferExchange                                  6     3      3     116
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _ADXL345_init                                        26    26      0     779
                                              0 BANK0     26    26      0
                   _SPI1_BufferWrite
                         _SPI1_Close
                          _SPI1_Open
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               7     1      6     129
                                              0 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6     155
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (2) _SPI1_Open                                            4     3      1     228
                                              6 COMMON     4     3      1
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     106
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SPI1_Close                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_BufferWrite                                     7     3      4     126
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADXL345_init
     _SPI1_BufferWrite
     _SPI1_Close
     _SPI1_Open
       ___wmul
     _memcpy
     _memset
   _ADXL345_validation
     _SPI1_BufferExchange
     _SPI1_Close
     _SPI1_Open
   _EEPROM_Read
   _MotionEventHandler
     _ADXL345_ClearInterrupt
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
     _orientation_Up
       _SPI1_BufferRead
       _SPI1_BufferWrite
       _SPI1_ByteWrite
       _SPI1_Close
       _SPI1_Open
       ___wmul
     _setupForFreefall
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForImpact
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
     _setupForInactivity
       _SPI1_BufferWrite
       _SPI1_ByteExchange
       _SPI1_Close
       _SPI1_Open
       _memcpy
       _memset
   _PIN_MANAGER_IOC
   _SPI1_Initialize
   _SYSTEM_Initialize
     _CLOCK_Initialize
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _NVM_Initialize
       _NVM_StatusClear
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
     _WDT_Initialize
   _calibrate
     _EEPROM_Write
     _SPI1_BufferRead
     _SPI1_BufferWrite
     _SPI1_ByteWrite
     _SPI1_Close
     _SPI1_Open
     _saveOffsets
       _SPI1_BufferWrite
       _SPI1_Close
       _SPI1_Open
   _saveOffsets

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14     12      14    100.0%
BANK0               80     53      70     87.5%
BANK1               80     62      74     92.5%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               80      0       0      0.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               32      0       0      0.0%
BANK10               0      0       0      0.0%
BANK11               0      0       0      0.0%
BANK12               0      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     158      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Feb 05 16:14:41 2025

                      _SPI1_ByteExchange 0EAF                                       l71 0E87  
                                     l58 0E8F                       ?_SPI1_ByteExchange 0070  
                    ___wmul@multiplicand 0072                                      l103 0ED3  
                                    l200 0E8B                                      l106 0F53  
                                    l400 04E0                                      l161 0164  
                                    l313 000B                                      l153 0EA3  
                                    l171 0FEC                                      l411 053E  
                                    l180 0F85                                      l164 0E81  
                                    l173 0FFF                                      l229 0EAE  
                                    l333 0E93                                      l405 04ED  
                                    l182 0F92                                      l414 054B  
                                    l191 0FB4                                      l239 0E99  
                                    l503 0094                                      l328 0EE6  
                                    l408 055D                                      l169 0FE7  
                                    l513 0F17                                      l178 0F80  
                                    l194 0EB2                                      l187 0F9C  
                                    l291 0E84                                      l460 00A2  
                                    l196 0EB7                                      l700 01AB  
                                    l197 0EBA                                      l509 0F0B  
                                    l189 0FA1                                      l373 046C  
                                    l630 05C5                                      l519 0200  
                                    l287 0F35                                      l623 0596  
                                    l383 04A4                                      l608 045D  
                                    l616 0581                                      l392 0500  
                                    l473 0017                                      l545 0297  
                                    l617 0586                                      l377 048F  
                                    l490 0055                                      l650 06E5  
                                    l626 05A4                                      l378 047E  
                                    l539 0289                                      l571 032E  
                                    l635 07D9                                      l627 05B3  
                                    l388 04B6                                      l469 00F8  
                                    l485 0045                                      l565 0320  
                                    l653 0707                                      l646 06C8  
                                    l638 0660                                      l398 04DE  
                                    l479 002F                                      l591 03B7  
                                    l719 01F2                                      l496 0070  
                                    l649 06D6                                      l690 016F  
                                    l693 017F                                      l871 0F72  
                                    l697 019F                                      l869 0F5E  
                                    u800 0FA1                                      u801 0FA0  
                                    u730 0F5A                                      u810 0FB4  
                                    u731 0F59                                      u811 0FB3  
                                    u820 0EB7                                      u900 0297  
                                    u821 0EB6                                      u901 0296  
                                    u830 0EFD                                      u910 032E  
                                    u831 0EFC                                      u911 032D  
                                    u760 0F6E                                      u840 0FD9  
                                    u920 03C5                                      u761 0F6D  
                                    u745 0F5F                                      u841 0FD8  
                                    u921 03C4                                      u770 00FE  
                                    u850 0FEC                                      u930 03CC  
                                    u755 0F64                                      u771 00FD  
                                    u851 0FEB                                      u780 0F85  
                                    u860 0FFF                                      u940 045A  
                                    u781 0F84                                      u861 0FFE  
                                    u941 0459                                      u790 0F92  
                                    u950 0017                                      u870 0055  
                                    u791 0F91                                      u951 0016  
                                    u871 0054                                      u960 002C  
                                    u880 0F0B                                      u961 002B  
                                    u881 0F0A                                      u970 00A2  
                                    u890 0200                                      u971 00A1  
                                    u891 01FF                                      u980 056A  
                                    u990 0581                                      u991 0580  
                    ??_SPI1_ByteExchange 0071                        orientation_Up@msg 0028  
                                    wreg 0009                                     l3001 071E  
                                   l1331 0FD9                                     l3011 0758  
                                   l3003 0727                                     l3031 07AE  
                                   l3023 0780                                     l3007 072D  
                                   l2401 00F9                                     l1337 0EFD  
                                   l3041 07C8                                     l3033 07B8  
                                   l3025 0792                                     l3017 0770  
                                   l3009 0754                                     l3201 04EC  
                                   l2411 0162                                     l2403 00F9  
                                   l3115 01D6                                     l3051 0165  
                                   l3043 07D3                                     l3035 07C1  
                                   l3027 079A                                     l3211 0510  
                                   l3203 0505                                     l2421 0F75  
                                   l2413 0163                                     l2405 00FE  
                                   l3061 0186                                     l3053 0173  
                                   l2501 0F4C                                     l3045 07D5  
                                   l3037 07C4                                     l3029 07A4  
                                   l3221 051E                                     l3213 0512  
                                   l3205 0507                                     l2423 0F7A  
                                   l2407 015E                                     l2511 0FDA  
                                   l2431 0F93                                     l3071 01AD  
                                   l3063 018D                                     l3055 0176  
                                   l2503 0F51                                     l3047 07D8  
                                   l3039 07C6                                     l3231 0534  
                                   l3223 0521                                     l3215 0516  
                                   l3207 0508                                     l2425 0F86  
                                   l2417 0E7F                                     l2409 015F  
                                   l2513 0FE1                                     l2521 0FF9  
                                   l2433 0F9A                                     l2441 0FAE  
                                   l2601 0202                                     l3081 01BF  
                                   l3073 01B6                                     l3065 0196  
                                   l3057 0179                                     l2505 0E8C  
                                   l3241 0549                                     l3233 053B  
                                   l3217 051B                                     l3209 050B  
                                   l3225 0529                                     l3161 045E  
                                   l2427 0F88                                     l2419 0F73  
                                   l2515 0FED                                     l2443 0EAF  
                                   l2435 0FA2                                     l2611 0229  
                                   l2603 0207                                     l3075 01B8  
                                   l3067 0199                                     l3059 0183  
                                   l2451 0E94                                     l2523 0EA4  
                                   l2531 0F1C                                     l2507 0E9A  
                                   l3227 052B                                     l3219 051D  
                                   l3171 0480                                     l3163 0461  
                                   l2429 0F8C                                     l2461 0FB5  
                                   l2453 0EE7                                     l2517 0FF3  
                                   l2445 0EB8                                     l2437 0FA8  
                                   l2621 0249                                     l2613 022B  
                                   l2605 0209                                     l2701 031D  
                                   l3093 01D0                                     l3077 01BB  
                                   l3069 01A3                                     l2525 0EA7  
                                   l2541 0F34                                     l2533 0F1F  
                                   l2509 0E9E                                     l3229 052E  
                                   l3181 04B8                                     l3173 048D  
                                   l3165 0464                                     l2391 0F63  
                                   l2471 0FCB                                     l2463 0FB9  
                                   l2455 0EEA                                     l2519 0FF5  
                                   l2439 0FAA                                     l2631 025E  
                                   l2623 024C                                     l2615 0236  
                                   l2607 020C                                     l2711 0335  
                                   l2703 0321                                     l3263 01E1  
                                   l3079 01BC                                     l3087 01C6  
                                   l2543 0004                                     l2535 0F24  
                                   l2527 0F18                                     l2551 0049  
                                   l3239 0540                                     l3191 04DB  
                                   l3183 04C5                                     l3175 049C  
                                   l3167 046E                                     l2393 0F68  
                                   l2385 0F54                                     l2465 0FBC  
                                   l2473 0FCD                                     l2457 0EEF  
                                   l2449 0E88                                     l2801 0451  
                                   l2641 027E                                     l2633 026C  
                                   l2625 024E                                     l2617 0238  
                                   l2609 021A                                     l2721 0359  
                                   l2713 0337                                     l2705 0322  
                                   l2545 0007                                     l2537 0F28  
                                   l2529 0F1A                                     l2481 0F3D  
                                   l2561 0067                                     l2553 004C  
                                   l3185 04C7                                     l3177 04A6  
                                   l3169 047B                                     l2395 0F6E  
                                   l2387 0F56                                     l2467 0FC2  
                                   l2459 0EF1                                     l2803 045A  
                                   l2643 027F                                     l2635 026F  
                                   l2627 0259                                     l2619 023B  
                                   l2651 028B                                     l2731 037A  
                                   l2723 0364                                     l2715 033A  
                                   l2707 0325                                     l2539 0F31  
                                   l2547 0E90                                     l2491 0F45  
                                   l2483 0F3E                                     l2475 0F36  
                                   l2571 007D                                     l2563 0069  
                                   l2555 0058                                     l3179 04B3  
                                   l2389 0F5A                                     l2469 0FC6  
                                   l2821 0ECF                                     l2813 0EC7  
                                   l2645 0284                                     l2637 0271  
                                   l2629 025B                                     l2661 02A3  
                                   l2653 028E                                     l2741 039A  
                                   l2733 037C                                     l2725 0366  
                                   l2717 0348                                     l2709 0330  
                                   l2493 0F47                                     l2485 0F40  
                                   l2477 0F3A                                     l2581 0091  
                                   l2573 0080                                     l2565 006C  
                                   l2557 005A                                     l2549 0048  
                                   l2901 0575                                     l3197 04E1  
                                   l3189 04D3                                     l2823 0ED0  
                                   l2815 0ECA                                     l2591 0F12  
                                   l2583 0EFE                                     l2647 0286  
                                   l2639 027C                                     l2671 02CF  
                                   l2663 02B1                                     l2655 0299  
                                   l2751 03AD                                     l2743 039D  
                                   l2735 0387                                     l2727 0369  
                                   l2719 0357                                     l2399 0E85  
                                   l2831 0ED4                                     l2495 0F49  
                                   l2487 0F42                                     l2479 0F3C  
                                   l2575 0082                                     l2567 006E  
                                   l2559 005C                                     l2911 05A2  
                                   l2903 0578                                     l3199 04EA  
                                   l2841 001C                                     l2825 0ED1  
                                   l2817 0ECC                                     l2593 0F14  
                                   l2585 0EFF                                     l2809 045C  
                                   l2761 03BC                                     l2681 02F0  
                                   l2673 02D2                                     l2665 02C0  
                                   l2657 029E                                     l2649 028A  
                                   l2753 03B2                                     l2745 039F  
                                   l2737 0389                                     l2729 0377  
                                   l2833 0EE3                                     l2497 0F4A  
                                   l2489 0F44                                     l2577 0084  
                                   l2569 007B                                     l2913 05AE  
                                   l2905 0588                                     l2851 003E  
                                   l2843 0025                                     l2835 000C  
                                   l2819 0ECE                                     l2587 0F02  
                                   l2771 03D6                                     l2763 03C5  
                                   l2595 01F3                                     l2691 0308  
                                   l2683 02F2                                     l2675 02E0  
                                   l2667 02C2                                     l2659 02A0  
                                   l2755 03B4                                     l2747 03AA  
                                   l2739 038C                                     l2499 0F4B  
                                   l2579 008F                                     l2931 05DC  
                                   l2923 05C7                                     l2915 05B4  
                                   l2907 0593                                     l2861 0096  
                                   l2845 002C                                     l2853 0040  
                                   l2837 000E                                     l2589 0F0D  
                                   l2781 03F1                                     l2773 03E1  
                                   l2765 03CF                                     l2757 03B8  
                                   l2597 01F4                                     l2693 0313  
                                   l2685 02F5                                     l2677 02E3  
                                   l2669 02CD                                     l2749 03AC  
                                   l2829 0E82                                     l2941 0601  
                                   l2933 05E0                                     l2925 05CC  
                                   l2917 05C2                                     l2909 0598  
                                   l2871 00C4                                     l2863 0099  
                                   l2855 0043                                     l2847 0031  
                                   l2839 0019                                     l2791 0410  
                                   l2783 03FA                                     l2775 03E3  
                                   l2767 03D2                                     l2759 03B9  
                                   l2599 01F7                                     l2695 0315  
                                   l2687 0303                                     l2679 02E5  
                                   l2951 0638                                     l2943 0608  
                                   l2935 05E4                                     l2927 05D5  
                                   l2881 00E5                                     l2873 00CF  
                                   l2865 00A5                                     l2849 003C  
                                   l2793 0415                                     l2785 03FC  
                                   l2777 03EA                                     l2769 03D4  
                                   l2697 0316                                     l2689 0306  
                                   l2937 05ED                                     l2929 05D7  
                                   l2883 00E7                                     l2875 00D1  
                                   l2867 00B3                                     l2859 0095  
                                   l2795 0425                                     l2787 03FF  
                                   l2779 03EC                                     l2699 031B  
                                   l2963 0665                                     l2947 060A  
                                   l2939 05F2                                     l2885 00F2  
                                   l2877 00D4                                     l2869 00C2  
                                   l2797 0435                                     l2789 040B  
                                   l2981 06D4                                     l2957 0650  
                                   l2949 0634                                     l2893 0562  
                                   l2887 00F4                                     l2879 00E2  
                                   l2799 0445                                     l2983 06E0  
                                   l2975 068D                                     l2895 056D  
                                   l2889 00F7                                     l2993 0709  
                                   l2985 06E6                                     l2977 06C5  
                                   l2969 067D                                     l2897 0570  
                                   l2995 070E                                     l2987 06F4  
                                   l2979 06CA                                     l2899 0572  
                                   l2997 0717                                     l2989 06F7  
                                   l2999 0719                                     u1000 05B3  
                                   u1001 05B2                                     u1010 0601  
                                   u1011 0600                                     u1100 068C  
                                   u1020 0608                                     u1101 068B  
                                   u1021 0607                                     u1015 05FD  
                                   u1200 0196                                     u1120 06E5  
                                   u1201 0195                                     u1121 06E4  
                                   u1105 0688                                     u1210 01A3  
                                   u1130 0706                                     u1050 0638  
                                   u1211 01A2                                     u1131 0705  
                                   u1115 06B9                                     u1051 0637  
                                   u1035 0613                                     u1220 01AB  
                                   u1060 064F                                     u1300 04DB  
                                   u1221 01AA                                     u1061 064E  
                                   u1045 0628                                     u1301 04DA  
                                   u1230 01CF                                     u1150 0758  
                                   u1070 065F                                     u1310 04FF  
                                   u1231 01CE                                     u1151 0757  
                                   u1135 0702                                     u1071 065E  
                                   u1311 04FE                                     u1160 076F  
                                   u1080 0665                                     u1320 053B  
                                   u1161 076E                                     u1145 0737  
                                   u1081 0664                                     u1065 064B  
                                   u1321 053A                                     u1170 077F  
                                   u1090 067C                                     u1330 055D  
                                   u1171 077E                                     u1091 067B  
                                   u1075 065B                                     u1331 055C  
                                   u1315 04FB                                     u1180 0173  
                                   u1181 0172                                     u1165 076B  
                                   _LATA 010C                                     u1190 0183  
                                   u1270 046C                                     u1191 0182  
                                   u1175 077B                                     u1095 0678  
                                   u1335 0559                                     u1407 0544  
                                   u1271 046B                                     _LATC 010E  
                                   u1280 04A4                                     u1417 059C  
                                   u1281 04A3                                     u1290 04D3  
                                   u1507 03E6                                     u1427 05A8  
                                   u1291 04D2                                     u1347 0474  
                                   u1517 0036                                     u1437 05BA  
                                   u1357 0486                                     u1447 05E8  
                                   u1367 0495                                     u1457 06CE  
                                   u1377 04AC                                     u1467 06DA  
                                   u1387 04BE                                     u1477 06EC  
                                   u1397 04E5                                     u1487 0722  
                                   u1497 01B1                                     _LWLO 0CAD  
                                   _WPUA 020C                                     _WPUC 020E  
                      main@current_state 0054                  __end_of_NVM_StatusClear 0E88  
                                   _main 045E                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006                                     btemp 007E  
                           _unlockKeyLow 007D              _INT_DefaultInterruptHandler 0000  
                                   start 0002                __end_of_SPI1_ByteExchange 0EBB  
        __end_of_INT_SetInterruptHandler 0E9A                     __end_of_EEPROM_Write 0F54  
                         _no_motion_init 1045                              ?_SPI1_Close 0070  
                                  ?_main 0070                                    _EEADR 0191  
                                  _IOCAF 0393                                    _IOCAN 0392  
                                  _IOCAP 0391                                    _TRISA 008C  
                                  _TRISC 008E                      orientation_Up@F2713 0055  
                           _ADXL345_init 0095                  __end_of_PIN_MANAGER_IOC 0E85  
                         _WDT_Initialize 0E90                                    main@i 0050  
                          _unlockKeyHigh 007C          SPI1_BufferWrite@bufferInputSize 0074  
                                  status 0003                                    wtemp0 007E  
                       ??_setupForImpact 007A                       _ADXL345_validation 000C  
                       EEPROM_Write@data 0072                          __initialization 07DA  
                           __end_of_main 0562                      ?_ADXL345_validation 0070  
                 __end_of_no_motion_init 1049           SPI1_BufferRead@bufferInputSize 0073  
     SPI1_BufferExchange@bufferInputSize 0073                                   ??_main 004B  
                           ?_saveOffsets 007A                   __end_of_WDT_Initialize 0E94  
                   ??_ADXL345_validation 007A                                   _EEADRH 0192  
                                 _EEADRL 0191                                   _EEDATA 0193  
                                 _EEDATH 0194                                   _EEDATL 0193  
                                 _EECON1 0195                                   _EECON2 0196  
               __end_of_SPI1_BufferWrite 0F93                                   _ANSELA 018C  
                                 _ANSELC 018E                                   _BORCON 0116  
                                 _INLVLA 038C                                   _INLVLC 038E  
                                 _OSCCON 0099                                   _WDTCON 0097  
                       ?_NVM_StatusClear 0070                         _eeprom_interface 102B  
                      __end_of_SPI1_Host 101C                        __end_of_SPI1_Open 0165  
                                 ___wmul 0F54                 __end_of_setupForFreefall 028A  
                                 _memcpy 0FB5                                   _memset 0EE7  
                      ?_CLOCK_Initialize 0070                        ??_SPI1_BufferRead 0073  
               ??_ADXL345_ClearInterrupt 007A                       ??_CLOCK_Initialize 0070  
                 ADXL345_validation@temp 0020                          ?_WDT_Initialize 0070  
                      setupForImpact@msg 0020  INT_SetInterruptHandler@InterruptHandler 0070  
                       ?_PIN_MANAGER_IOC 0070                           _SPI1_IsRxReady 0000  
                         _SPI1_IsTxReady 0000                         ??_NVM_Initialize 0070  
                      _SYSTEM_Initialize 0ED4                  __end_of__initialization 07FD  
                         _SPI1_ByteWrite 0E88                       ?_SYSTEM_Initialize 0070  
          __end_of_ADXL345_init_settings 1045                           __pcstackCOMMON 0070  
                         calibrate@F2724 00DE                      ??_SYSTEM_Initialize 0072  
                      ??_SPI1_Initialize 0070                           calibrate@i_995 00BA  
                         calibrate@Z_n1g 00AC                       _spi1_configuration 101C  
                         _OPTION_REGbits 0095                           calibrate@sum_X 00AE  
                         calibrate@sum_Y 00B0                           calibrate@sum_Z 00BC  
                             _dataBuffer 22F0                __end_of_SYSTEM_Initialize 0EE7  
                      calibrate@acc_data 00A0                        saveOffsets@x_axis 0020  
                           _EEPROM_Write 0F36                        saveOffsets@y_axis 007A  
                             __pbssBANK0 0055                               __pbssBANK1 00DE  
                      saveOffsets@z_axis 007B                   __end_of_SPI1_ByteWrite 0E8C  
             __end_of_MotionEventHandler 01F3              SPI1_BufferWrite@bufferInput 0076  
                             __pmaintext 045E                                  ?___wmul 0070  
              SPI1_BufferRead@bufferData 0070                SPI1_BufferRead@bufferSize 0071  
                                ?_memcpy 0070                                  ?_memset 0070  
                                _APFCON0 011D                             ??_SPI1_Close 0070  
                                _OSCTUNE 0098                                  _SSP1ADD 0212  
                                _SSP1BUF 0211                        __end_of_calibrate 07DA  
                        ?_SPI1_ByteWrite 0070                        __end_of_fall_init 1051  
                MotionEventHandler@state 0048                               calibrate@i 00B8  
                     __end_of_SPI1_Close 0E82            SPI1_BufferExchange@bufferData 0070  
          SPI1_BufferExchange@bufferSize 0071           SPI1_BufferExchange@bufferInput 0075  
                                __ptext1 0562                                  __ptext2 0046  
                                __ptext3 0F36                                  __ptext4 0ED4  
                                __ptext5 0E90                                  __ptext6 0E9A  
                                __ptext7 0F18                                  __ptext8 0E8C  
                                __ptext9 0E85                 __end_of_eeprom_interface 1039  
               ??_PIN_MANAGER_Initialize 0070                                _IOCAFbits 0393  
                _INT_SetInterruptHandler 0E94                  ADXL345_validation@F2697 005F  
                                clrloop0 0EBC                     end_of_initialization 07FD  
                      ?_SPI1_BufferWrite 0070                                  memcpy@d 0079  
                                memcpy@n 0074                                  memcpy@s 0076  
                          ??_EEPROM_Read 0072                                  memset@c 0072  
                                memset@n 0074                                  memset@p 0076  
                     ??_SPI1_BufferWrite 0074                          _EEPROM_ByteRead 0000  
                 _ADXL345_ClearInterrupt 0EFE                          _SPI1_BufferRead 0F93  
                             _timer_20ms 005D                                _SPI1_Host 1000  
                      ?_setupForFreefall 0070                                _SPI1_Open 00F9  
                       ??_WDT_Initialize 0070                       ??_setupForFreefall 007A  
                              _PORTAbits 000C                      _SPI1_BufferExchange 0FDA  
                   ?_SPI1_BufferExchange 0070                          _SPI1_Initialize 0E9A  
                    __end_of_EEPROM_Read 0ED4             __end_of_INTERRUPT_Initialize 0EAF  
                             ?_SPI1_Open 0076                           __end_of___wmul 0F73  
                         __end_of_memcpy 0FDA                           __end_of_memset 0EFE  
              ??_INT_SetInterruptHandler 0072                      start_initialization 07DA  
                           calibrate@msg 00C2                    ??_SPI1_BufferExchange 0073  
                __end_of_SPI1_BufferRead 0FB5                    setupForInactivity@msg 0020  
                        ADXL345_init@msg 0020                    _ADXL345_init_settings 1039  
                               ??___wmul 0074                       _MotionEventHandler 0165  
                         _orientation_Up 03B8               __end_of_setupForInactivity 03B8  
                               ??_memcpy 0076                                 ??_memset 0076  
                             memset@dest 0070                      ?_MotionEventHandler 0048  
                          _SPI1_ByteRead 0000                              __pbssBIGRAM 22F0  
                          ?_ADXL345_init 0070                              __pbssCOMMON 007C  
                              ___latbits 0002                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                         ??_SPI1_ByteWrite 0071  
                __end_of_SPI1_Initialize 0EA4                                _calibrate 0562  
                            _EEPROM_Read 0EC7                     ??_MotionEventHandler 0049  
                              __pnvBANK0 0064               SPI1_BufferWrite@bufferData 0070  
                 _PIN_MANAGER_Initialize 0F18               SPI1_BufferWrite@bufferSize 0072  
                 __end_of_orientation_Up 045E                     SPI1_Open@returnValue 0079  
                              _fall_init 104D                              ??_SPI1_Open 0077  
                          ??_saveOffsets 007C               SPI1_BufferRead@bufferInput 0075  
                         ??_ADXL345_init 007A                        ??_NVM_StatusClear 0070  
                    __end_of_impact_init 104D                     _INTERRUPT_Initialize 0EA4  
                ?_ADXL345_ClearInterrupt 0070                         _CLOCK_Initialize 0004  
                             ?_calibrate 0070                           ___wmul@product 0074  
                       ?_SPI1_BufferRead 0070                                 _LATAbits 010C  
                               _LATCbits 010E                                clear_ram0 0EBB  
                               _PIE1bits 0091                                 _PIR1bits 0011  
                        ?_orientation_Up 0070                     _SW1_InterruptHandler 0061  
                               _SSP1CON1 0215                                 _SSP1CON3 0217  
                     calibrate@sum_X_avg 00BE                       calibrate@sum_Y_avg 00C0  
                     calibrate@sum_Z_avg 00DC                                 _SSP1STAT 0214  
                      ??_PIN_MANAGER_IOC 0070                           _setupForImpact 028A  
                      _SPI1_Deinitialize 0000                                main@i_861 0052  
                      ___wmul@multiplier 0070                                main@X_val 004D  
                              main@Y_val 004E                                main@Z_val 004F  
                    __end_of_saveOffsets 0095                         ?_SPI1_Initialize 0070  
         __end_of_ADXL345_ClearInterrupt 0F18                    ?_INTERRUPT_Initialize 0070  
                         saveOffsets@msg 0021                               _EECON1bits 0195  
                   calibrate@offset_0g_X 00B2                     calibrate@offset_0g_Y 00B4  
                   calibrate@offset_0g_Z 00B6                                memcpy@tmp 0078  
                 __end_of_setupForImpact 0321                              _impact_init 1049  
             __end_of_ADXL345_validation 0046                                 __ptext10 0EA4  
                               __ptext11 0E94                                 __ptext20 0F93  
                               __ptext12 0004                                 __ptext21 0EFE  
                               __ptext13 0E82                                 __ptext30 0F54  
                               __ptext22 0EAF                                 __ptext14 0165  
                               __ptext31 0E7F                                 __ptext23 0EC7  
                               __ptext15 0321                                 __ptext32 0F73  
                               __ptext24 000C                                 __ptext16 028A  
                               __ptext25 0FDA                                 __ptext17 01F3  
                               __ptext26 0095                                 __ptext18 03B8  
                               __ptext27 0EE7                                 __ptext19 0E88  
                               __ptext28 0FB5                                 __ptext29 00F9  
                           _SSP1CON1bits 0215                            ?_EEPROM_Write 0070  
                 SPI1_ByteWrite@byteData 0070                              ??_calibrate 003B  
 __end_of_acceleration_squared_threshold 1053           _acceleration_squared_threshold 1051  
                    setupForFreefall@msg 0020                     __end_of_ADXL345_init 00F9  
                         _NVM_Initialize 0E8C                          ?_setupForImpact 0070  
                            _saveOffsets 0046                               _INTCONbits 000B  
                               memcpy@d1 0070                                 memcpy@s1 0072  
                   _INT_InterruptHandler 0064                   orientation_Up@acc_data 0020  
            __end_of_SPI1_BufferExchange 1000                       _setupForInactivity 0321  
                 ??_INTERRUPT_Initialize 0072                           ??_EEPROM_Write 0073  
           _orientation_check_timer_20ms 005B                   orientation_Up@g_deltaX 0042  
                 orientation_Up@g_deltaY 0044                   orientation_Up@g_deltaZ 0046  
                       _EEPROM_ByteWrite 0000                 ADXL345_validation@passed 0022  
                    ?_setupForInactivity 0070                             ?_EEPROM_Read 0070  
                ?_PIN_MANAGER_Initialize 0070                SPI1_ByteExchange@byteData 0070  
                 _good_orientation_count 0063                   __end_of_NVM_Initialize 0E90  
              orientation_Up@g_magnitude 0026                       EEPROM_Read@address 0070  
                        _NVM_StatusClear 0E85                         _SPI1_BufferWrite 0F73  
               ?_INT_SetInterruptHandler 0070                 __end_of_CLOCK_Initialize 000C  
                   ??_setupForInactivity 007A                            __pstringtext1 1000  
                          __pstringtext2 101C                            __pstringtext3 102B  
                          __pstringtext4 1051                            __pstringtext5 1039  
                          __pstringtext6 1045                            __pstringtext7 1049  
                          __pstringtext8 104D                               _SPI1_Close 0E7F  
                       _setupForFreefall 01F3      EEPROM_Write@globalInterruptBitValue 0073  
         __end_of_PIN_MANAGER_Initialize 0F36                         ??_orientation_Up 007A  
                        _PIN_MANAGER_IOC 0E82                               _NVM_IsBusy 0000  
                SPI1_Open@spiConfigIndex 0076                          ?_NVM_Initialize 0070  
                    EEPROM_Write@address 0070               __end_of_spi1_configuration 102B  
